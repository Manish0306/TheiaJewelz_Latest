{
    "checksum": "9e541e9d4de5e88f6d52dbe98f103a7f4d5b47d5c325a9dc0105649e55e03a14",
    "data": {
    "id": "b1797d07-f9ec-4648-8a54-39b246a830e6",
    "createdAt": 1752345658354,
    "updatedAt": 1752346552664,
    "title": "User-Friendly Web Design Improvements",
    "messages": [
        {
            "id": "8a2c87e0-a385-48e3-8605-78187958241c",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "modify the page in more user friendly /look and feel"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "jewelry_sales_final.html",
                    "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n\r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#6366F1\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n\r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n\r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n\r\n    <!-- Modern Typography -->\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@300;400;500;600;700;800&display=swap\" rel=\"stylesheet\">\r\n\r\n    <!-- Icons -->\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\r\n\r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    <style>\r\n        /* ======== MODERN DESIGN SYSTEM ======== */\r\n        :root {\r\n            /* Enhanced Color Palette */\r\n            --primary-600: #6366F1;\r\n            --primary-500: #8B5CF6;\r\n            --primary-400: #A78BFA;\r\n            --primary-300: #C4B5FD;\r\n            --primary-100: #EDE9FE;\r\n            --primary-50: #F5F3FF;\r\n\r\n            --secondary-600: #DB2777;\r\n            --secondary-500: #EC4899;\r\n            --secondary-400: #F472B6;\r\n            --secondary-300: #F9A8D4;\r\n            --secondary-100: #FCE7F3;\r\n\r\n            --accent-600: #059669;\r\n            --accent-500: #10B981;\r\n            --accent-400: #34D399;\r\n            --accent-300: #6EE7B7;\r\n            --accent-100: #D1FAE5;\r\n\r\n            --neutral-900: #111827;\r\n            --neutral-800: #1F2937;\r\n            --neutral-700: #374151;\r\n            --neutral-600: #4B5563;\r\n            --neutral-500: #6B7280;\r\n            --neutral-400: #9CA3AF;\r\n            --neutral-300: #D1D5DB;\r\n            --neutral-200: #E5E7EB;\r\n            --neutral-100: #F3F4F6;\r\n            --neutral-50: #F9FAFB;\r\n\r\n            --error-600: #DC2626;\r\n            --error-500: #EF4444;\r\n            --error-100: #FEE2E2;\r\n\r\n            --warning-600: #D97706;\r\n            --warning-500: #F59E0B;\r\n            --warning-100: #FEF3C7;\r\n\r\n            --success-600: #059669;\r\n            --success-500: #10B981;\r\n            --success-100: #D1FAE5;\r\n\r\n            /* Interactive Colors */\r\n            --interactive-hover: #4F46E5;\r\n            --interactive-active: #3730A3;\r\n            --interactive-focus: #6366F1;\r\n            --interactive-disabled: #9CA3AF;\r\n\r\n            /* Glass Effect */\r\n            --glass-bg: rgba(255, 255, 255, 0.95);\r\n            --glass-border: rgba(255, 255, 255, 0.2);\r\n            --glass-shadow: rgba(0, 0, 0, 0.1);\r\n\r\n            /* Animations */\r\n            --bounce-scale: 1.05;\r\n            --slide-distance: 10px;\r\n\r\n            /* Typography */\r\n            --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n            --font-secondary: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n\r\n            /* Spacing */\r\n            --space-1: 0.25rem;\r\n            --space-2: 0.5rem;\r\n            --space-3: 0.75rem;\r\n            --space-4: 1rem;\r\n            --space-5: 1.25rem;\r\n            --space-6: 1.5rem;\r\n            --space-8: 2rem;\r\n            --space-10: 2.5rem;\r\n            --space-12: 3rem;\r\n            --space-16: 4rem;\r\n            --space-20: 5rem;\r\n\r\n            /* Border Radius */\r\n            --radius-sm: 0.375rem;\r\n            --radius-md: 0.5rem;\r\n            --radius-lg: 0.75rem;\r\n            --radius-xl: 1rem;\r\n            --radius-2xl: 1.5rem;\r\n\r\n            /* Shadows */\r\n            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\r\n            --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\r\n\r\n            /* Transitions */\r\n            --transition-fast: 150ms ease-in-out;\r\n            --transition-normal: 300ms ease-in-out;\r\n            --transition-slow: 500ms ease-in-out;\r\n        }\r\n\r\n        /* ======== RESET & BASE STYLES ======== */\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        *:focus {\r\n            outline: 2px solid var(--primary-600);\r\n            outline-offset: 2px;\r\n        }\r\n\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        body {\r\n            font-family: var(--font-primary);\r\n            font-size: 16px;\r\n            line-height: 1.6;\r\n            color: var(--neutral-800);\r\n            background: linear-gradient(135deg, var(--primary-600) 0%, var(--secondary-600) 100%);\r\n            min-height: 100vh;\r\n            padding: var(--space-4);\r\n            overflow-x: hidden;\r\n            position: relative;\r\n        }\r\n\r\n        body::before {\r\n            content: '';\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background:\r\n                radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),\r\n                radial-gradient(circle at 80% 80%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),\r\n                radial-gradient(circle at 40% 60%, rgba(255, 255, 255, 0.05) 0%, transparent 50%);\r\n            pointer-events: none;\r\n            z-index: 0;\r\n        }\r\n\r\n        body::after {\r\n            content: '';\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"dots\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\"><circle cx=\"10\" cy=\"10\" r=\"1\" fill=\"white\" opacity=\"0.05\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23dots)\"/></svg>');\r\n            pointer-events: none;\r\n            z-index: 0;\r\n        }\r\n\r\n        /* ======== LOADING SPINNER ======== */\r\n        .loading-spinner {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: 50%;\r\n            border-top-color: var(--primary-600);\r\n            animation: spin 1s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            to { transform: rotate(360deg); }\r\n        }\r\n\r\n        /* ======== MAIN CONTAINER ======== */\r\n        .container {\r\n            max-width: 1200px;\r\n            margin: 0 auto;\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-2xl);\r\n            box-shadow:\r\n                var(--shadow-2xl),\r\n                0 0 0 1px var(--glass-border),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.5);\r\n            overflow: hidden;\r\n            backdrop-filter: blur(20px);\r\n            animation: slideInUp 0.6s ease-out;\r\n            position: relative;\r\n            z-index: 1;\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .container::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 1px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);\r\n            z-index: 1;\r\n        }\r\n\r\n        @keyframes slideInUp {\r\n            from {\r\n                opacity: 0;\r\n                transform: translate3d(0, 30px, 0);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translate3d(0, 0, 0);\r\n            }\r\n        }\r\n\r\n        /* ======== HEADER ======== */\r\n        .header {\r\n            background: linear-gradient(135deg, var(--primary-600) 0%, var(--secondary-600) 100%);\r\n            color: white;\r\n            text-align: center;\r\n            padding: var(--space-8) var(--space-6);\r\n            position: relative;\r\n            overflow: hidden;\r\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .header::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grain\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"25\" cy=\"25\" r=\"1\" fill=\"white\" opacity=\"0.1\"/><circle cx=\"75\" cy=\"75\" r=\"1\" fill=\"white\" opacity=\"0.05\"/><circle cx=\"50\" cy=\"10\" r=\"0.5\" fill=\"white\" opacity=\"0.1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grain)\"/></svg>');\r\n            pointer-events: none;\r\n        }\r\n\r\n        .header h1 {\r\n            font-family: var(--font-secondary);\r\n            font-size: clamp(1.8rem, 4vw, 2.5rem);\r\n            font-weight: 700;\r\n            margin: 0;\r\n            position: relative;\r\n            z-index: 1;\r\n            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        .header .subtitle {\r\n            font-size: 1rem;\r\n            opacity: 0.9;\r\n            margin-top: var(--space-2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        /* ======== NAVIGATION TABS ======== */\r\n        .tabs {\r\n            display: flex;\r\n            background: var(--glass-bg);\r\n            border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n            position: sticky;\r\n            top: 0;\r\n            z-index: 10;\r\n            backdrop-filter: blur(20px);\r\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: var(--space-4) var(--space-3);\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: transparent;\r\n            border: none;\r\n            font-family: var(--font-primary);\r\n            font-size: 0.95rem;\r\n            font-weight: 500;\r\n            color: var(--neutral-600);\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: var(--space-2);\r\n            min-height: 60px;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .tab::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\r\n            opacity: 0;\r\n            transition: opacity var(--transition-normal);\r\n        }\r\n\r\n        .tab:hover {\r\n            color: var(--primary-700);\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .tab:hover::before {\r\n            opacity: 0.05;\r\n        }\r\n\r\n        .tab.active {\r\n            color: white;\r\n            font-weight: 600;\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .tab.active::before {\r\n            opacity: 1;\r\n        }\r\n\r\n        .tab.active::after {\r\n            content: '';\r\n            position: absolute;\r\n            bottom: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 3px;\r\n            background: var(--accent-500);\r\n            z-index: 1;\r\n            box-shadow: 0 0 10px var(--accent-500);\r\n        }\r\n\r\n        .tab span, .tab i {\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .tab i {\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        /* ======== TAB CONTENT ======== */\r\n        .tab-content {\r\n            display: none;\r\n            padding: var(--space-8) var(--space-6);\r\n            min-height: 600px;\r\n            animation: fadeIn 0.4s ease-in-out;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        @keyframes fadeIn {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(10px);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        /* ======== FORM COMPONENTS ======== */\r\n        .form-section {\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n            box-shadow:\r\n                0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n                0 2px 4px -1px rgba(0, 0, 0, 0.06),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n            backdrop-filter: blur(10px);\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            overflow: visible;\r\n        }\r\n\r\n        .form-section::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 1px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.5), transparent);\r\n        }\r\n\r\n        .form-section:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow:\r\n                0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n                0 4px 6px -2px rgba(0, 0, 0, 0.05),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .form-section h3 {\r\n            font-family: var(--font-secondary);\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin-bottom: var(--space-4);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n        }\r\n\r\n        .form-section h3 i {\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .form-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n            gap: var(--space-4);\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: var(--space-5);\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: var(--space-2);\r\n            font-weight: 500;\r\n            color: var(--neutral-700);\r\n            font-size: 0.9rem;\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.5px;\r\n        }\r\n\r\n        .form-group label.required::after {\r\n            content: '*';\r\n            color: var(--error-500);\r\n            margin-left: var(--space-1);\r\n        }\r\n\r\n        .form-control {\r\n            width: 100%;\r\n            padding: var(--space-3) var(--space-4);\r\n            border: 2px solid rgba(255, 255, 255, 0.3);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            font-family: var(--font-primary);\r\n            transition: all var(--transition-normal);\r\n            background: rgba(255, 255, 255, 0.9);\r\n            color: var(--neutral-800);\r\n            backdrop-filter: blur(10px);\r\n            position: relative;\r\n        }\r\n\r\n        .form-control:focus {\r\n            outline: none;\r\n            border-color: var(--primary-600);\r\n            box-shadow:\r\n                0 0 0 3px var(--primary-100),\r\n                0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.5);\r\n            transform: translateY(-2px);\r\n            background: rgba(255, 255, 255, 0.95);\r\n        }\r\n\r\n        .form-control:hover {\r\n            border-color: rgba(255, 255, 255, 0.5);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .form-control:invalid {\r\n            border-color: var(--error-500);\r\n        }\r\n\r\n        .form-control:disabled {\r\n            background: var(--neutral-100);\r\n            color: var(--neutral-500);\r\n            cursor: not-allowed;\r\n        }\r\n\r\n        .form-control::placeholder {\r\n            color: var(--neutral-400);\r\n        }\r\n\r\n        .form-error {\r\n            display: none;\r\n            color: var(--error-600);\r\n            font-size: 0.875rem;\r\n            margin-top: var(--space-1);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .form-error i {\r\n            font-size: 0.8rem;\r\n        }\r\n\r\n        .form-success {\r\n            display: none;\r\n            color: var(--success-600);\r\n            font-size: 0.875rem;\r\n            margin-top: var(--space-1);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .form-success i {\r\n            font-size: 0.8rem;\r\n        }\r\n\r\n        /* ======== PURCHASE FORM STYLES ======== */\r\n        #add-purchase-form input:focus,\r\n        #add-purchase-form textarea:focus {\r\n            border-color: var(--primary-600) !important;\r\n            box-shadow: 0 0 0 3px var(--primary-100) !important;\r\n            outline: none !important;\r\n        }\r\n\r\n        #add-purchase-form input:hover,\r\n        #add-purchase-form textarea:hover {\r\n            border-color: var(--neutral-400) !important;\r\n        }\r\n\r\n        #add-purchase-form .required-field {\r\n            position: relative;\r\n        }\r\n\r\n        #add-purchase-form .required-field::after {\r\n            content: '*';\r\n            color: var(--error-500);\r\n            position: absolute;\r\n            right: 12px;\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            font-weight: bold;\r\n        }\r\n\r\n        /* ======== BUTTON COMPONENTS ======== */\r\n        .btn {\r\n            display: inline-flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: var(--space-2);\r\n            padding: var(--space-3) var(--space-6);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            font-family: var(--font-primary);\r\n            font-size: 0.95rem;\r\n            font-weight: 500;\r\n            text-decoration: none;\r\n            cursor: pointer;\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            user-select: none;\r\n            min-height: 44px;\r\n            background: var(--glass-bg);\r\n            backdrop-filter: blur(10px);\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            box-shadow:\r\n                0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n                0 2px 4px -1px rgba(0, 0, 0, 0.06),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .btn::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: -100%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\r\n            transition: left var(--transition-normal);\r\n        }\r\n\r\n        .btn:hover::before {\r\n            left: 100%;\r\n        }\r\n\r\n        .btn:hover {\r\n            transform: translateY(-2px) scale(var(--bounce-scale));\r\n            box-shadow:\r\n                0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n                0 4px 6px -2px rgba(0, 0, 0, 0.05),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .btn:active {\r\n            transform: translateY(0) scale(0.98);\r\n        }\r\n\r\n        .btn:disabled {\r\n            opacity: 0.6;\r\n            cursor: not-allowed;\r\n            transform: none !important;\r\n        }\r\n\r\n        .btn.loading {\r\n            color: transparent;\r\n        }\r\n\r\n        .btn.loading::after {\r\n            content: '';\r\n            position: absolute;\r\n            width: 16px;\r\n            height: 16px;\r\n            top: 50%;\r\n            left: 50%;\r\n            margin-left: -8px;\r\n            margin-top: -8px;\r\n            border: 2px solid transparent;\r\n            border-top-color: currentColor;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        /* Button Variants */\r\n        .btn-primary {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-500));\r\n            color: white;\r\n            box-shadow:\r\n                var(--shadow-md),\r\n                0 0 20px rgba(99, 102, 241, 0.3);\r\n            border: 1px solid rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .btn-primary::before {\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n        }\r\n\r\n        .btn-primary:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--interactive-hover), var(--primary-600));\r\n            transform: translateY(-3px) scale(var(--bounce-scale));\r\n            box-shadow:\r\n                var(--shadow-xl),\r\n                0 0 30px rgba(99, 102, 241, 0.5);\r\n        }\r\n\r\n        /* Special styling for Add Sale Record button - no hover color change */\r\n        .btn-primary.add-sale-btn:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-500));\r\n            transform: none;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-primary:active {\r\n            transform: translateY(0);\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: linear-gradient(135deg, var(--secondary-600), var(--secondary-500));\r\n            color: white;\r\n            box-shadow:\r\n                var(--shadow-md),\r\n                0 0 20px rgba(219, 39, 119, 0.3);\r\n            border: 1px solid rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .btn-secondary::before {\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n        }\r\n\r\n        .btn-secondary:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--secondary-700), var(--secondary-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-accent {\r\n            background: linear-gradient(135deg, var(--accent-600), var(--accent-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-accent:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--accent-700), var(--accent-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-outline {\r\n            background: transparent;\r\n            border: 2px solid var(--primary-600);\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .btn-outline:hover:not(:disabled) {\r\n            background: var(--primary-600);\r\n            color: white;\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .btn-ghost {\r\n            background: transparent;\r\n            color: var(--neutral-600);\r\n            box-shadow: none;\r\n        }\r\n\r\n        .btn-ghost:hover:not(:disabled) {\r\n            background: var(--neutral-100);\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .btn-danger {\r\n            background: linear-gradient(135deg, var(--error-600), var(--error-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-danger:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--error-700), var(--error-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        /* Button Sizes */\r\n        .btn-sm {\r\n            padding: var(--space-2) var(--space-4);\r\n            font-size: 0.875rem;\r\n            min-height: 36px;\r\n        }\r\n\r\n        .btn-lg {\r\n            padding: var(--space-4) var(--space-8);\r\n            font-size: 1.1rem;\r\n            min-height: 52px;\r\n        }\r\n\r\n        .btn-full {\r\n            width: 100%;\r\n        }\r\n\r\n        /* Button Groups */\r\n        .btn-group {\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            margin-top: var(--space-4);\r\n        }\r\n\r\n        .btn-group .btn {\r\n            flex: 1;\r\n        }\r\n\r\n        /* ======== CARD COMPONENTS ======== */\r\n        .card {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-md);\r\n            border: 1px solid var(--neutral-200);\r\n            overflow: hidden;\r\n            transition: var(--transition-normal);\r\n        }\r\n\r\n        .card:hover {\r\n            box-shadow: var(--shadow-lg);\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .card-header {\r\n            padding: var(--space-4) var(--space-5);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n            background: var(--neutral-50);\r\n        }\r\n\r\n        .card-header h3 {\r\n            margin: 0;\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .card-body {\r\n            padding: var(--space-5);\r\n        }\r\n\r\n        .card-footer {\r\n            padding: var(--space-4) var(--space-5);\r\n            background: var(--neutral-50);\r\n            border-top: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        /* Sales Item Cards */\r\n        .sales-item {\r\n            background: white;\r\n            border: 1px solid var(--neutral-200);\r\n            border-left: 4px solid var(--primary-600);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-4);\r\n            position: relative;\r\n            transition: var(--transition-normal);\r\n            box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        .sales-item:hover {\r\n            border-left-color: var(--accent-500);\r\n            box-shadow: var(--shadow-md);\r\n            transform: translateX(4px);\r\n        }\r\n\r\n        .sales-item-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: start;\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: var(--neutral-800);\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            margin: 0;\r\n        }\r\n\r\n        .sales-item-info {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n            gap: var(--space-3);\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .sales-item-info-item {\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        .sales-item-info-label {\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n            color: var(--neutral-500);\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.5px;\r\n            margin-bottom: var(--space-1);\r\n        }\r\n\r\n        .sales-item-info-value {\r\n            font-size: 0.95rem;\r\n            color: var(--neutral-700);\r\n            font-weight: 500;\r\n        }\r\n\r\n        .sales-item-amount {\r\n            font-size: 1.2rem;\r\n            font-weight: 700;\r\n            color: var(--accent-600);\r\n        }\r\n\r\n        /* Dashboard Stats */\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n            gap: var(--space-5);\r\n            margin-bottom: var(--space-8);\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\r\n            color: white;\r\n            padding: var(--space-6);\r\n            border-radius: var(--radius-xl);\r\n            text-align: center;\r\n            position: relative;\r\n            overflow: hidden;\r\n            box-shadow: var(--shadow-lg);\r\n            transition: var(--transition-normal);\r\n        }\r\n\r\n        .stat-card::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: -50%;\r\n            right: -50%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);\r\n        }\r\n\r\n        .stat-card:hover {\r\n            transform: translateY(-4px);\r\n            box-shadow: var(--shadow-xl);\r\n        }\r\n\r\n        .stat-card-icon {\r\n            font-size: 2.5rem;\r\n            margin-bottom: var(--space-3);\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 2.5rem;\r\n            font-weight: 700;\r\n            margin-bottom: var(--space-2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 0.95rem;\r\n            opacity: 0.9;\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        /* Chart Container */\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-md);\r\n            border: 1px solid var(--neutral-200);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            height: 450px;\r\n            position: relative;\r\n        }\r\n\r\n        .chart-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: var(--space-4);\r\n            padding-bottom: var(--space-3);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        .chart-title {\r\n            font-size: 1.2rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        /* Customer Item Cards */\r\n        .customer-item {\r\n            background: white;\r\n            border: 1px solid var(--neutral-200);\r\n            border-left: 4px solid var(--secondary-600);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-4);\r\n            position: relative;\r\n            transition: var(--transition-normal);\r\n            box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        .customer-item:hover {\r\n            border-left-color: var(--accent-500);\r\n            box-shadow: var(--shadow-md);\r\n            transform: translateX(4px);\r\n        }\r\n\r\n        /* Empty State */\r\n        .no-data {\r\n            text-align: center;\r\n            color: var(--neutral-500);\r\n            font-style: italic;\r\n            padding: var(--space-16);\r\n            font-size: 1.1rem;\r\n            background: var(--neutral-50);\r\n            border-radius: var(--radius-lg);\r\n            border: 2px dashed var(--neutral-300);\r\n        }\r\n\r\n        .no-data i {\r\n            font-size: 3rem;\r\n            color: var(--neutral-400);\r\n            margin-bottom: var(--space-4);\r\n            display: block;\r\n        }\r\n\r\n        /* Action Buttons */\r\n        .action-buttons {\r\n            position: absolute;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            z-index: 2;\r\n        }\r\n\r\n        .edit-btn, .delete-btn {\r\n            padding: var(--space-2) var(--space-3);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            cursor: pointer;\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n            transition: var(--transition-fast);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .edit-btn {\r\n            background: var(--primary-600);\r\n            color: white;\r\n        }\r\n\r\n        .edit-btn:hover {\r\n            background: var(--primary-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .delete-btn {\r\n            background: var(--error-600);\r\n            color: white;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: var(--error-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        /* ======== SCROLLABLE CONTAINERS ======== */\r\n        .scrollable-container {\r\n            max-height: 650px;\r\n            overflow-y: auto;\r\n            padding-right: var(--space-2);\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-track {\r\n            background: var(--neutral-200);\r\n            border-radius: var(--radius-lg);\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-thumb {\r\n            background: linear-gradient(135deg, var(--primary-500), var(--primary-600));\r\n            border-radius: var(--radius-lg);\r\n            border: 2px solid var(--neutral-200);\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-thumb:hover {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-700));\r\n        }\r\n\r\n        /* ======== SEARCH AND FILTER ======== */\r\n        .filter-section {\r\n            background: var(--neutral-50);\r\n            border: 1px solid var(--neutral-200);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-6);\r\n        }\r\n\r\n        .filter-header {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n            margin-bottom: var(--space-4);\r\n        }\r\n\r\n        .filter-header h3 {\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin: 0;\r\n        }\r\n\r\n        .search-input {\r\n            position: relative;\r\n        }\r\n\r\n        .search-input input {\r\n            width: 100%;\r\n            padding: var(--space-3) var(--space-4) var(--space-3) var(--space-12);\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            transition: var(--transition-normal);\r\n            background: white;\r\n        }\r\n\r\n        .search-input input:focus {\r\n            outline: none;\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .search-input i {\r\n            position: absolute;\r\n            left: var(--space-4);\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            color: var(--neutral-400);\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        /* ======== NOTIFICATIONS & TOASTS ======== */\r\n        .toast {\r\n            position: fixed;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-lg);\r\n            box-shadow:\r\n                var(--shadow-xl),\r\n                0 0 30px rgba(0, 0, 0, 0.15);\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            padding: var(--space-4);\r\n            max-width: 400px;\r\n            z-index: 1000;\r\n            transform: translateX(calc(100% + var(--space-4)));\r\n            opacity: 0;\r\n            transition: all var(--transition-normal);\r\n            backdrop-filter: blur(20px);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .toast::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 2px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);\r\n        }\r\n\r\n        .toast.show {\r\n            transform: translateX(0);\r\n            opacity: 1;\r\n            animation: toastSlideIn 0.3s ease-out;\r\n        }\r\n\r\n        @keyframes toastSlideIn {\r\n            0% {\r\n                transform: translateX(calc(100% + var(--space-4))) scale(0.9);\r\n                opacity: 0;\r\n            }\r\n            50% {\r\n                transform: translateX(-10px) scale(1.02);\r\n            }\r\n            100% {\r\n                transform: translateX(0) scale(1);\r\n                opacity: 1;\r\n            }\r\n        }\r\n\r\n        .toast-success {\r\n            border-left: 4px solid var(--success-500);\r\n            background: linear-gradient(135deg,\r\n                rgba(16, 185, 129, 0.05) 0%,\r\n                rgba(255, 255, 255, 0.95) 100%);\r\n        }\r\n\r\n        .toast-success::after {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 4px;\r\n            height: 100%;\r\n            background: linear-gradient(180deg, var(--success-400), var(--success-600));\r\n            box-shadow: 0 0 10px var(--success-500);\r\n        }\r\n\r\n        .toast-error {\r\n            border-left: 4px solid var(--error-500);\r\n        }\r\n\r\n        .toast-warning {\r\n            border-left: 4px solid var(--warning-500);\r\n        }\r\n\r\n        .toast-info {\r\n            border-left: 4px solid var(--primary-500);\r\n        }\r\n\r\n        /* ======== RESPONSIVE DESIGN ======== */\r\n        /* Tablet Styles */\r\n        @media (max-width: 768px) {\r\n            body {\r\n                padding: var(--space-2);\r\n                font-size: 15px;\r\n            }\r\n\r\n            .container {\r\n                margin: 0;\r\n                border-radius: var(--radius-lg);\r\n                box-shadow: var(--shadow-lg);\r\n            }\r\n\r\n            .header {\r\n                padding: var(--space-5) var(--space-4);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.8rem;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                position: relative;\r\n            }\r\n\r\n            .tab {\r\n                flex: 1;\r\n                min-width: 120px;\r\n                font-size: 0.85rem;\r\n                padding: var(--space-3) var(--space-2);\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-5) var(--space-4);\r\n                min-height: 500px;\r\n            }\r\n\r\n            .form-grid {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-5);\r\n                margin-bottom: var(--space-5);\r\n            }\r\n\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .btn-group {\r\n                flex-direction: column;\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .sales-item-info {\r\n                grid-template-columns: 1fr;\r\n            }\r\n\r\n            /* Make buttons more touch-friendly */\r\n            .btn {\r\n                min-height: 48px;\r\n                padding: var(--space-3) var(--space-4);\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Customer search results */\r\n            #customer-search-results {\r\n                max-height: 250px;\r\n            }\r\n\r\n            /* Toast notifications positioning */\r\n            .toast {\r\n                top: var(--space-2);\r\n                right: var(--space-2);\r\n                left: var(--space-2);\r\n                max-width: none;\r\n            }\r\n        }\r\n\r\n        /* Mobile Styles */\r\n        @media (max-width: 480px) {\r\n            body {\r\n                padding: var(--space-1);\r\n                font-size: 14px;\r\n            }\r\n\r\n            .container {\r\n                margin: 0;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .header {\r\n                padding: var(--space-4) var(--space-3);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.5rem;\r\n                line-height: 1.2;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.85rem;\r\n                margin-top: var(--space-1);\r\n            }\r\n\r\n            .tabs {\r\n                overflow-x: auto;\r\n                flex-wrap: nowrap;\r\n                scrollbar-width: none;\r\n                -ms-overflow-style: none;\r\n                padding-bottom: 2px;\r\n                background: var(--neutral-50);\r\n                border-bottom: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tabs::-webkit-scrollbar {\r\n                display: none;\r\n            }\r\n\r\n            .tab {\r\n                min-width: 100px;\r\n                font-size: 0.8rem;\r\n                padding: var(--space-3) var(--space-2);\r\n                white-space: nowrap;\r\n                flex-shrink: 0;\r\n                gap: var(--space-1);\r\n                min-height: 65px;\r\n                flex-direction: column;\r\n                line-height: 1.1;\r\n                text-align: center;\r\n            }\r\n\r\n            .tab span {\r\n                display: block;\r\n                margin-top: var(--space-1);\r\n                font-size: 0.75rem;\r\n                line-height: 1.1;\r\n                text-align: center;\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-4) var(--space-3);\r\n                min-height: 400px;\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .form-section h3 {\r\n                font-size: 1.1rem;\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .form-group {\r\n                margin-bottom: var(--space-4);\r\n            }\r\n\r\n            .form-control {\r\n                padding: var(--space-3);\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n                border-radius: var(--radius-md);\r\n                min-height: 44px; /* iOS touch target minimum */\r\n            }\r\n\r\n            .form-control:focus {\r\n                border-width: 2px;\r\n                transform: none; /* Removes transform to prevent layout issues */\r\n            }\r\n\r\n            /* Buttons optimized for mobile */\r\n            .btn {\r\n                min-height: 50px;\r\n                padding: var(--space-4);\r\n                font-size: 1rem;\r\n                font-weight: 600;\r\n                border-radius: var(--radius-md);\r\n                width: 100%;\r\n                margin-bottom: var(--space-2);\r\n            }\r\n\r\n            .btn-group {\r\n                flex-direction: column;\r\n                width: 100%;\r\n            }\r\n\r\n            .btn-group .btn {\r\n                margin-bottom: var(--space-2);\r\n            }\r\n\r\n            /* Dashboard stats */\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: var(--space-4);\r\n                text-align: center;\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 1.8rem;\r\n            }\r\n\r\n            .stat-card p {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            /* Search input mobile optimization */\r\n            .search-input input {\r\n                padding: var(--space-3) var(--space-4) var(--space-3) var(--space-10);\r\n                font-size: 16px;\r\n                min-height: 44px;\r\n            }\r\n\r\n            .search-input i {\r\n                left: var(--space-3);\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Customer search results */\r\n            #customer-search-results {\r\n                max-height: 200px;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .customer-search-result {\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .customer-name {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            .customer-details {\r\n                font-size: 0.85rem;\r\n            }\r\n\r\n            /* Filter section */\r\n            .filter-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .filter-header h3 {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Sales records table/list mobile view */\r\n            .sales-item {\r\n                flex-direction: column;\r\n                padding: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .sales-item-info {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-2);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .sales-item-actions {\r\n                justify-content: stretch;\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .edit-btn, .delete-btn {\r\n                flex: 1;\r\n                min-height: 40px;\r\n                font-size: 0.85rem;\r\n            }\r\n\r\n            /* Toast notifications for mobile */\r\n            .toast {\r\n                top: var(--space-2);\r\n                right: var(--space-2);\r\n                left: var(--space-2);\r\n                max-width: none;\r\n                padding: var(--space-3);\r\n                font-size: 0.9rem;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            /* Charts container */\r\n            .chart-container {\r\n                margin: var(--space-3) 0;\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            /* Make scrollable containers touch-friendly */\r\n            .scrollable-container {\r\n                max-height: 400px;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n\r\n            .scrollable-container::-webkit-scrollbar {\r\n                width: 94px;\r\n            }\r\n        }\r\n\r\n        /* Extra small devices */\r\n        @media (max-width: 360px) {\r\n            .header h1 {\r\n                font-size: 1.35rem;\r\n            }\r\n\r\n            .tab {\r\n                min-width: 90px;\r\n                font-size: 0.7rem;\r\n                line-height: 1;\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n                padding: var(--space-2) var(--space-2);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.7rem;\r\n                line-height: 1;\r\n            }\r\n\r\n        /* Very small screens - Show abbreviated text */\r\n        @media (max-width: 320px) {\r\n            .tab {\r\n                min-width: 75px;\r\n                padding: var(--space-2) var(--space-1);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.65rem;\r\n                line-height: 0.9;\r\n            }\r\n\r\n            /* Abbreviate long tab names for very small screens */\r\n            .tab:nth-child(1) span::after { content: \"Entry\"; }\r\n            .tab:nth-child(1) span { font-size: 0; }\r\n            .tab:nth-child(1) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(2) span::after { content: \"Recent\"; }\r\n            .tab:nth-child(2) span { font-size: 0; }\r\n            .tab:nth-child(2) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(3) span::after { content: \"Stats\"; }\r\n            .tab:nth-child(3) span { font-size: 0; }\r\n            .tab:nth-child(3) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(4) span::after { content: \"Contacts\"; }\r\n            .tab:nth-child(4) span { font-size: 0; }\r\n            .tab:nth-child(4) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(5) span::after { content: \"Charts\"; }\r\n            .tab:nth-child(5) span { font-size: 0; }\r\n            .tab:nth-child(5) span::after { font-size: 0.65rem; }\r\n        }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            .btn {\r\n                min-height: 48px;\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .dashboard-stats {\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 1.5rem;\r\n            }\r\n        }\r\n\r\n        /* Very small screens - Show abbreviated text */\r\n        @media (max-width: 320px) {\r\n            .tab {\r\n                min-width: 75px;\r\n                padding: var(--space-2) var(--space-1);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.65rem;\r\n                line-height: 0.9;\r\n            }\r\n\r\n            /* Abbreviate long tab names for very small screens */\r\n            .tab:nth-child(1) span::after { content: \"Entry\"; }\r\n            .tab:nth-child(1) span { font-size: 0; }\r\n            .tab:nth-child(1) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(2) span::after { content: \"Recent\"; }\r\n            .tab:nth-child(2) span { font-size: 0; }\r\n            .tab:nth-child(2) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(3) span::after { content: \"Stats\"; }\r\n            .tab:nth-child(3) span { font-size: 0; }\r\n            .tab:nth-child(3) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(4) span::after { content: \"Contacts\"; }\r\n            .tab:nth-child(4) span { font-size: 0; }\r\n            .tab:nth-child(4) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(5) span::after { content: \"Charts\"; }\r\n            .tab:nth-child(5) span { font-size: 0; }\r\n            .tab:nth-child(5) span::after { font-size: 0.65rem; }\r\n        }\r\n\r\n        /* Enhanced mobile navigation */\r\n        @media (max-width: 480px) {\r\n            /* Add horizontal scroll indicator */\r\n            .tabs::after {\r\n                content: '';\r\n                position: absolute;\r\n                bottom: 0;\r\n                right: 0;\r\n                width: 20px;\r\n                height: 100%;\r\n                background: linear-gradient(to right, transparent, var(--neutral-50));\r\n                pointer-events: none;\r\n                z-index: 1;\r\n            }\r\n\r\n            /* Better visual feedback for active tab */\r\n            .tab.active {\r\n                box-shadow: 0 -3px 0 var(--accent-500) inset;\r\n                background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-500) 100%);\r\n            }\r\n\r\n            /* Improve readability */\r\n            .tab {\r\n                border-right: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tab:last-child {\r\n                border-right: none;\r\n            }\r\n        }\r\n\r\n        /* Landscape orientation on mobile */\r\n        @media (max-width: 768px) and (orientation: landscape) {\r\n            .header {\r\n                padding: var(--space-3) var(--space-4);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.4rem;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.8rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n        }\r\n\r\n        /* ======== MOBILE-SPECIFIC ENHANCEMENTS ======== */\r\n        /* Touch-friendly interactions */\r\n        @media (hover: none) and (pointer: coarse) {\r\n            .btn {\r\n                min-height: 48px;\r\n                padding: var(--space-4);\r\n                font-size: 1rem;\r\n                font-weight: 600;\r\n            }\r\n\r\n            .form-control {\r\n                min-height: 48px;\r\n                padding: var(--space-4);\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n\r\n            .tab {\r\n                min-height: 48px;\r\n                padding: var(--space-3) var(--space-2);\r\n            }\r\n\r\n            /* Remove hover effects on touch devices */\r\n            .btn:hover,\r\n            .form-control:hover,\r\n            .tab:hover {\r\n                transform: none;\r\n            }\r\n\r\n            /* Enhanced tap targets */\r\n            .customer-search-result {\r\n                min-height: 60px;\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .edit-btn, .delete-btn {\r\n                min-height: 44px;\r\n                min-width: 80px;\r\n            }\r\n        }\r\n\r\n        /* Enhanced mobile navigation */\r\n        @media (max-width: 480px) {\r\n            /* Add horizontal scroll indicator */\r\n            .tabs::after {\r\n                content: '';\r\n                position: absolute;\r\n                bottom: 0;\r\n                right: 0;\r\n                width: 20px;\r\n                height: 100%;\r\n                background: linear-gradient(to right, transparent, var(--neutral-50));\r\n                pointer-events: none;\r\n                z-index: 1;\r\n            }\r\n\r\n            /* Better visual feedback for active tab */\r\n            .tab.active {\r\n                box-shadow: 0 -3px 0 var(--accent-500) inset;\r\n                background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-500) 100%);\r\n            }\r\n\r\n            /* Improve readability */\r\n            .tab {\r\n                border-right: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tab:last-child {\r\n                border-right: none;\r\n            }\r\n        }\r\n\r\n        /* iOS Safari specific fixes */\r\n        @supports (-webkit-appearance: none) {\r\n            .form-control {\r\n                -webkit-appearance: none;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            select.form-control {\r\n                background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e\");\r\n                background-repeat: no-repeat;\r\n                background-position: right var(--space-3) center;\r\n                background-size: 20px;\r\n                padding-right: var(--space-12);\r\n            }\r\n        }\r\n\r\n        /* Android Chrome specific optimizations */\r\n        @media screen and (-webkit-min-device-pixel-ratio: 1) {\r\n            .form-control:focus {\r\n                zoom: 1; /* Prevent zoom on Android */\r\n            }\r\n        }\r\n\r\n        /* High DPI displays */\r\n        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\r\n            .btn, .form-control, .tab {\r\n                border-width: 0.5px;\r\n            }\r\n        }\r\n\r\n        /* Print styles */\r\n        @media print {\r\n            body {\r\n                background: white;\r\n                color: black;\r\n                font-size: 12pt;\r\n                line-height: 1.4;\r\n            }\r\n\r\n            .header {\r\n                background: none;\r\n                color: black;\r\n                border-bottom: 2px solid black;\r\n            }\r\n\r\n            .tabs, .btn {\r\n                display: none;\r\n            }\r\n\r\n            .tab-content {\r\n                display: block !important;\r\n                padding: 0;\r\n            }\r\n\r\n            .form-section {\r\n                border: 1px solid black;\r\n                margin-bottom: 20pt;\r\n                page-break-inside: avoid;\r\n            }\r\n\r\n            .container {\r\n                box-shadow: none;\r\n                border-radius: 0;\r\n            }\r\n        }\r\n\r\n        /* ======== UTILITY CLASSES ======== */\r\n        .sr-only {\r\n            position: absolute;\r\n            width: 1px;\r\n            height: 1px;\r\n            padding: 0;\r\n            margin: -1px;\r\n            overflow: hidden;\r\n            clip: rect(0, 0, 0, 0);\r\n            white-space: nowrap;\r\n            border: 0;\r\n        }\r\n\r\n        .text-center { text-align: center; }\r\n        .text-right { text-align: right; }\r\n        .text-left { text-align: left; }\r\n\r\n        .fw-bold { font-weight: 700; }\r\n        .fw-semibold { font-weight: 600; }\r\n        .fw-medium { font-weight: 500; }\r\n        .fw-normal { font-weight: 400; }\r\n\r\n        .text-primary { color: var(--primary-600); }\r\n        .text-secondary { color: var(--secondary-600); }\r\n        .text-success { color: var(--success-600); }\r\n        .text-error { color: var(--error-600); }\r\n        .text-warning { color: var(--warning-600); }\r\n        .text-muted { color: var(--neutral-500); }\r\n\r\n        .bg-primary { background-color: var(--primary-600); }\r\n        .bg-secondary { background-color: var(--secondary-600); }\r\n        .bg-success { background-color: var(--success-600); }\r\n        .bg-error { background-color: var(--error-600); }\r\n        .bg-warning { background-color: var(--warning-600); }\r\n\r\n        .mb-2 { margin-bottom: var(--space-2); }\r\n        .mb-3 { margin-bottom: var(--space-3); }\r\n        .mb-4 { margin-bottom: var(--space-4); }\r\n        .mb-6 { margin-bottom: var(--space-6); }\r\n\r\n        .mt-2 { margin-top: var(--space-2); }\r\n        .mt-3 { margin-top: var(--space-3); }\r\n        .mt-4 { margin-top: var(--space-4); }\r\n        .mt-6 { margin-top: var(--space-6); }\r\n\r\n        .edit-form {\r\n            background: #fff;\r\n            border: 2px solid #4ecdc4;\r\n            border-radius: 8px;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            position: relative;\r\n        }\r\n\r\n        .edit-form h4 {\r\n            color: #4ecdc4;\r\n            margin-bottom: 15px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .edit-form-row {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            gap: 10px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group label {\r\n            display: block;\r\n            margin-bottom: 3px;\r\n            font-weight: 600;\r\n            color: #333;\r\n            font-size: 12px;\r\n        }\r\n\r\n        .edit-form-group input,\r\n        .edit-form-group select,\r\n        .edit-form-group textarea {\r\n            width: 100%;\r\n            padding: 8px;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 4px;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .edit-form-buttons {\r\n            display: flex;\r\n            gap: 10px;\r\n            margin-top: 15px;\r\n        }\r\n\r\n        .edit-form-buttons button {\r\n            flex: 1;\r\n            padding: 10px;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .save-edit-btn {\r\n            background: #28a745;\r\n            color: white;\r\n        }\r\n\r\n        .save-edit-btn:hover {\r\n            background: #218838;\r\n        }\r\n\r\n        .cancel-edit-btn {\r\n            background: #6c757d;\r\n            color: white;\r\n        }\r\n\r\n        .cancel-edit-btn:hover {\r\n            background: #5a6268;\r\n        }\r\n\r\n        /* Customer search styles */\r\n        .customer-search-result {\r\n            padding: 12px;\r\n            cursor: pointer;\r\n            border-bottom: 1px solid #eee;\r\n            border-left: 3px solid transparent;\r\n            transition: all 0.2s ease;\r\n        }\r\n\r\n        .customer-search-result:hover {\r\n            background-color: #f8f9fa;\r\n            border-left-color: #4ecdc4;\r\n            transform: translateX(2px);\r\n        }\r\n\r\n        .customer-search-result:last-child {\r\n            border-bottom: none;\r\n        }\r\n\r\n        .customer-name {\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin-bottom: 4px;\r\n            font-size: 15px;\r\n        }\r\n\r\n        .customer-details {\r\n            font-size: 12px;\r\n            color: #666;\r\n            margin-bottom: 2px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n        }\r\n\r\n        .customer-stats {\r\n            font-size: 11px;\r\n            color: #4ecdc4;\r\n            margin-top: 8px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .customer-source-badge {\r\n            font-size: 10px;\r\n            color: #999;\r\n            padding: 2px 6px;\r\n            background: #f0f0f0;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .customer-last-purchase {\r\n            font-size: 10px;\r\n            color: #999;\r\n            font-style: italic;\r\n        }\r\n\r\n        /* Enhanced search results container */\r\n        #customer-search-results {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            border-radius: 8px;\r\n            border: 1px solid #ddd;\r\n            background: white;\r\n            max-height: 300px;\r\n            overflow-y: auto;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb:hover {\r\n            background: #45b7b8;\r\n        }\r\n\r\n        /* Section headers */\r\n        .section-header {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-bottom: 15px;\r\n            padding-bottom: 8px;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .section-icon {\r\n            margin-right: 8px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        /* Additional mobile-specific styles for components */\r\n        @media (max-width: 600px) {\r\n            /* Import section responsive */\r\n            .import-section {\r\n                flex-direction: column !important;\r\n                gap: var(--space-3) !important;\r\n            }\r\n\r\n            .import-section button {\r\n                width: 100% !important;\r\n                margin-bottom: var(--space-2);\r\n                min-height: 48px;\r\n            }\r\n\r\n            /* Customer database responsive design */\r\n            .customer-info-grid {\r\n                grid-template-columns: 1fr !important;\r\n                gap: var(--space-2) !important;\r\n            }\r\n\r\n            .customer-purchase-stats {\r\n                grid-template-columns: repeat(2, 1fr) !important;\r\n                gap: var(--space-2) !important;\r\n            }\r\n\r\n            .customer-card {\r\n                padding: var(--space-4) !important;\r\n                margin-bottom: var(--space-3) !important;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .enhanced-customers-container {\r\n                max-height: 400px !important;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n\r\n            /* Sales items mobile layout */\r\n            .customer-item,\r\n            .sale-item {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-3);\r\n                border-radius: var(--radius-md);\r\n                border: 1px solid var(--neutral-200);\r\n                background: white;\r\n            }\r\n        }\r\n\r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n\r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n\r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n\r\n        /* ======== MOBILE-FRIENDLY MODAL/ALERT SYSTEM ======== */\r\n        .mobile-modal {\r\n            display: none;\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: rgba(0, 0, 0, 0.5);\r\n            z-index: 2000;\r\n            align-items: center;\r\n            justify-content: center;\r\n            padding: var(--space-4);\r\n        }\r\n\r\n        .mobile-modal.show {\r\n            display: flex;\r\n        }\r\n\r\n        .mobile-modal-content {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-6);\r\n            max-width: 400px;\r\n            width: 100%;\r\n            max-height: 80vh;\r\n            overflow-y: auto;\r\n            box-shadow: var(--shadow-2xl);\r\n            text-align: center;\r\n            animation: modalSlideIn 0.3s ease-out;\r\n        }\r\n\r\n        @keyframes modalSlideIn {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(-20px) scale(0.95);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0) scale(1);\r\n            }\r\n        }\r\n\r\n        .mobile-modal-header {\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            margin-bottom: var(--space-4);\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .mobile-modal-body {\r\n            margin-bottom: var(--space-6);\r\n            color: var(--neutral-700);\r\n            line-height: 1.5;\r\n            text-align: left;\r\n        }\r\n\r\n        .mobile-modal-buttons {\r\n            display: flex;\r\n            gap: var(--space-3);\r\n            justify-content: center;\r\n        }\r\n\r\n        .mobile-modal-buttons .btn {\r\n            flex: 1;\r\n            max-width: 120px;\r\n        }\r\n\r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n\r\n        /* Multi-Select Category Styles */\r\n        .multi-select-display:hover {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display:focus-within {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display.active {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display.active #category-arrow {\r\n            transform: rotate(180deg);\r\n        }\r\n\r\n        .category-option:hover {\r\n            background-color: var(--primary-50) !important;\r\n        }\r\n\r\n        .category-option input[type=\"checkbox\"] {\r\n            accent-color: var(--primary-600);\r\n        }\r\n\r\n        .category-tag {\r\n            background: var(--primary-600);\r\n            color: white;\r\n            padding: 4px 8px;\r\n            border-radius: 12px;\r\n            font-size: 12px;\r\n            font-weight: 500;\r\n            display: inline-flex;\r\n            align-items: center;\r\n            gap: 4px;\r\n            max-width: 120px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        .category-tag .remove-tag {\r\n            background: rgba(255, 255, 255, 0.3);\r\n            border: none;\r\n            color: white;\r\n            width: 16px;\r\n            height: 16px;\r\n            border-radius: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            cursor: pointer;\r\n            font-size: 10px;\r\n            margin-left: 4px;\r\n            transition: background-color 0.2s;\r\n        }\r\n\r\n        .category-tag .remove-tag:hover {\r\n            background: rgba(255, 255, 255, 0.5);\r\n        }\r\n\r\n        /* Enhanced Multi-Select Dropdown Styles */\r\n        .multi-select-container {\r\n            position: relative;\r\n            z-index: 100;\r\n        }\r\n\r\n        /* Create stacking context for dropdown */\r\n        .form-section:has(.multi-select-container) {\r\n            z-index: 100 !important;\r\n        }\r\n\r\n        .multi-select-dropdown {\r\n            animation: fadeInDown 0.3s ease-out;\r\n            z-index: 99999 !important;\r\n            position: absolute !important;\r\n            width: 100% !important;\r\n            box-shadow:\r\n                0 20px 25px -5px rgba(0, 0, 0, 0.3),\r\n                0 10px 10px -5px rgba(0, 0, 0, 0.1) !important;\r\n            border: 2px solid var(--primary-600) !important;\r\n            background: white !important;\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar-track {\r\n            background: var(--neutral-100);\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar-thumb {\r\n            background: var(--primary-600);\r\n            border-radius: 3px;\r\n        }\r\n\r\n        /* Additional dropdown positioning fixes */\r\n        .multi-select-dropdown[style*=\"display: block\"],\r\n        .multi-select-dropdown[style*=\"display: flex\"] {\r\n            position: fixed !important;\r\n            z-index: 99999 !important;\r\n            transform: translateZ(0) !important;\r\n            will-change: transform !important;\r\n        }\r\n\r\n        /* Prevent other elements from overlapping */\r\n        .form-section:not(:has(.multi-select-container)) {\r\n            z-index: 1 !important;\r\n        }\r\n\r\n        @keyframes fadeInDown {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(-10px);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        /* Enhanced Sales Container Scrolling */\r\n        .enhanced-sales-container {\r\n            position: relative !important;\r\n            max-height: 600px !important;\r\n            overflow-y: auto !important;\r\n            overflow-x: hidden !important;\r\n            border: 1px solid #e9ecef !important;\r\n            border-radius: 8px !important;\r\n            background: #fafafa !important;\r\n            scrollbar-width: thin;\r\n            scrollbar-color: #4ecdc4 #f1f1f1;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 4px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 4px;\r\n            transition: background 0.3s ease;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb:hover {\r\n            background: #44a08d;\r\n        }\r\n\r\n        /* Purchase History Container */\r\n        .enhanced-purchase-container {\r\n            position: relative !important;\r\n            max-height: 500px !important;\r\n            overflow-y: auto !important;\r\n            overflow-x: hidden !important;\r\n            border: 1px solid #e9ecef !important;\r\n            border-radius: 8px !important;\r\n            background: #f8f9fa !important;\r\n            scrollbar-width: thin;\r\n            scrollbar-color: #667eea #f1f1f1;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 4px;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-thumb {\r\n            background: #667eea;\r\n            border-radius: 4px;\r\n            transition: background 0.3s ease;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-thumb:hover {\r\n            background: #764ba2;\r\n        }\r\n\r\n        /* Ensure sales records have proper layout */\r\n        #sales-records, #purchase-records {\r\n            padding: 10px !important;\r\n            min-height: 100px !important;\r\n            height: auto !important;\r\n            overflow: visible !important;\r\n        }\r\n\r\n        /* Sales and Purchase record items */\r\n        .sale-record-item, .purchase-record-item {\r\n            margin-bottom: 15px;\r\n            padding: 15px;\r\n            background: white;\r\n            border-radius: 8px;\r\n            border: 1px solid #e9ecef;\r\n            transition: all 0.2s ease;\r\n            position: relative;\r\n        }\r\n\r\n        .sale-record-item:hover, .purchase-record-item:hover {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .purchase-record-item {\r\n            border-left: 4px solid #667eea;\r\n        }\r\n\r\n        /* Fix for parent containers that might affect scrolling */\r\n        #sales-content-container, #purchase-content-container {\r\n            overflow: visible !important;\r\n            height: auto !important;\r\n            max-height: none !important;\r\n        }\r\n\r\n        .tab-content {\r\n            overflow: visible !important;\r\n            height: auto !important;\r\n            max-height: none !important;\r\n        }\r\n\r\n        /* Collapsible sections */\r\n        .collapsible-section {\r\n            transition: all 0.3s ease;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .collapsible-section.collapsed {\r\n            max-height: 0;\r\n            padding: 0;\r\n            margin: 0;\r\n        }\r\n\r\n        .collapsible-section.expanded {\r\n            max-height: 2000px;\r\n        }\r\n\r\n        /* Toggle buttons */\r\n        .toggle-btn {\r\n            background: rgba(255,255,255,0.2);\r\n            border: none;\r\n            color: white;\r\n            font-size: 18px;\r\n            cursor: pointer;\r\n            padding: 8px 12px;\r\n            border-radius: 6px;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .toggle-btn:hover {\r\n            background: rgba(255,255,255,0.3);\r\n            transform: scale(1.1);\r\n        }\r\n\r\n        .toggle-btn.collapsed {\r\n            transform: rotate(-90deg);\r\n        }\r\n\r\n        /* Ensure proper scrolling behavior on mobile */\r\n        @media (max-width: 768px) {\r\n            .enhanced-sales-container, .enhanced-purchase-container {\r\n                max-height: 400px !important;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <header class=\"header\">\r\n            <h1>💎 Theia Jewelz</h1>\r\n            <p class=\"subtitle\">Modern Sales Management System</p>\r\n        </header>\r\n\r\n        <nav class=\"tabs\" role=\"tablist\" aria-label=\"Main navigation\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\" role=\"tab\" aria-selected=\"true\" aria-controls=\"sales\">\r\n                <i class=\"fas fa-plus-circle\"></i>\r\n                <span>Sales Entry</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('recent-sales')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"recent-sales\">\r\n                <i class=\"fas fa-list\"></i>\r\n                <span>Recent Sales</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"dashboard\">\r\n                <i class=\"fas fa-chart-pie\"></i>\r\n                <span>Dashboard</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"customers\">\r\n                <i class=\"fas fa-users\"></i>\r\n                <span>Customers</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"analytics\">\r\n                <i class=\"fas fa-chart-line\"></i>\r\n                <span>Analytics</span>\r\n            </button>\r\n        </nav>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\" role=\"tabpanel\" aria-labelledby=\"sales-tab\">\r\n            <div class=\"filter-section\">\r\n                <div class=\"filter-header\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <h3>Search Existing Customer</h3>\r\n                </div>\r\n                <div class=\"search-input\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <input type=\"text\" id=\"customerSearch\" placeholder=\"Type customer name, phone, or email to search...\"\r\n                           oninput=\"searchCustomers()\" onkeydown=\"handleSearchKeydown(event)\" autocomplete=\"off\"\r\n                           class=\"form-control\">\r\n                    <div id=\"customer-search-results\" style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                         background: white; border: 1px solid var(--neutral-300); border-top: none; border-radius: 0 0 var(--radius-md) var(--radius-md);\r\n                         max-height: 250px; overflow-y: auto; z-index: 1000; box-shadow: var(--shadow-lg);\">\r\n                    </div>\r\n                </div>\r\n                <p class=\"text-muted\" style=\"font-size: 0.875rem; margin-top: var(--space-2);\">\r\n                    <i class=\"fas fa-info-circle\"></i>\r\n                    Search from <span id=\"total-customers\" class=\"fw-semibold\">0</span> customers - includes database & sales records\r\n                </p>\r\n            </div>\r\n\r\n            <!-- Success/Error Messages -->\r\n            <div id=\"success-toast\" class=\"toast toast-success\" style=\"display: none;\">\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"fas fa-check-circle\"></i>\r\n                    <span id=\"success-message\"></span>\r\n                </div>\r\n            </div>\r\n            <div id=\"error-toast\" class=\"toast toast-error\" style=\"display: none;\">\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"fas fa-exclamation-circle\"></i>\r\n                    <span id=\"error-message\"></span>\r\n                </div>\r\n            </div>\r\n\r\n            <form id=\"sales-form\" style=\"position: relative; z-index: 1;\">\r\n                <!-- Customer Information Section -->\r\n                <div class=\"form-section\">\r\n                    <h3><i class=\"fas fa-user\"></i> Customer Information</h3>\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"customerName\" class=\"required\">Customer Name</label>\r\n                            <input type=\"text\" id=\"customerName\" class=\"form-control\" required\r\n                                   placeholder=\"Enter customer name\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Customer name is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"customerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"customerPhone\" class=\"form-control\"\r\n                                   placeholder=\"Enter phone number\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"customerAddress\">Address</label>\r\n                            <textarea id=\"customerAddress\" class=\"form-control\" rows=\"2\"\r\n                                      placeholder=\"Enter customer address (optional)\"></textarea>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Item Information Section -->\r\n                <div class=\"form-section\" style=\"z-index: 10; position: relative;\">\r\n                    <h3><i class=\"fas fa-gem\"></i> Item Information</h3>\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"itemName\" class=\"required\">Item Name</label>\r\n                            <input type=\"text\" id=\"itemName\" class=\"form-control\" required\r\n                                   placeholder=\"e.g., Gold Plated Necklace\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Item name is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"category\" class=\"required\">Categories</label>\r\n                            <div class=\"multi-select-container\" style=\"position: relative;\">\r\n                                <div class=\"multi-select-display\" id=\"category-display\" onclick=\"toggleCategoryDropdown()\"\r\n                                     style=\"border: 2px solid var(--neutral-300); border-radius: var(--radius-md); padding: var(--space-3) var(--space-4);\r\n                                            background: white; cursor: pointer; min-height: 48px; display: flex; align-items: center;\r\n                                            justify-content: space-between; transition: var(--transition-normal);\">\r\n                                    <span id=\"category-placeholder\" style=\"color: var(--neutral-400);\">Select categories...</span>\r\n                                    <span id=\"category-selected\" style=\"display: none; flex-wrap: wrap; gap: 6px; flex: 1;\"></span>\r\n                                    <i class=\"fas fa-chevron-down\" id=\"category-arrow\" style=\"transition: transform 0.3s ease;\"></i>\r\n                                </div>\r\n\r\n                                <div class=\"multi-select-dropdown\" id=\"category-dropdown\"\r\n                                     style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                                            background: white !important; border: 2px solid var(--primary-600) !important; border-top: none;\r\n                                            border-radius: 0 0 var(--radius-md) var(--radius-md); max-height: 250px;\r\n                                            overflow-y: auto; z-index: 99999 !important;\r\n                                            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1) !important;\r\n                                            transform: translateZ(0) !important;\">\r\n\r\n                                    <div style=\"padding: 12px; border-bottom: 1px solid var(--neutral-200); background: var(--neutral-50);\">\r\n                                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                                            <button type=\"button\" onclick=\"selectAllCategories()\"\r\n                                                    style=\"background: var(--primary-600); color: white; border: none; padding: 4px 8px;\r\n                                                           border-radius: 4px; font-size: 12px; cursor: pointer;\">Select All</button>\r\n                                            <button type=\"button\" onclick=\"clearAllCategories()\"\r\n                                                    style=\"background: var(--neutral-400); color: white; border: none; padding: 4px 8px;\r\n                                                           border-radius: 4px; font-size: 12px; cursor: pointer;\">Clear All</button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"category-options\" style=\"padding: 8px;\">\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Necklaces\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>✨ Necklaces</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Earrings\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>👂 Earrings</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Bracelets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🔗 Bracelets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Rings\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>💍 Rings</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Anklets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🦶 Anklets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Sets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>💎 Sets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Bangles\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>⚪ Bangles</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Chains\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🔗 Chains</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Pendants\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🏷️ Pendants</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Brooches\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>📎 Brooches</span>\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-error\" id=\"category-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Please select at least one category</span>\r\n                            </div>\r\n                            <p style=\"font-size: 12px; color: var(--neutral-500); margin-top: 5px;\">\r\n                                💡 You can select multiple categories for combination items (e.g., Necklace + Earrings set)\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"saleDate\" class=\"required\">Sale Date</label>\r\n                            <input type=\"date\" id=\"saleDate\" class=\"form-control\" required>\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Sale date is required</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Pricing Information Section -->\r\n                <div class=\"form-section\" style=\"z-index: 1; position: relative;\">\r\n                    <h3><i class=\"fas fa-money-bill-wave\"></i> Pricing Information</h3>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"costPrice\">Cost Price (₹) *</label>\r\n                        <input type=\"number\" id=\"costPrice\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"sellingPrice\">Selling Price (₹) *</label>\r\n                        <input type=\"number\" id=\"sellingPrice\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\r\n                        <label for=\"profit\">Profit (₹)</label>\r\n                        <input type=\"number\" id=\"profit\" readonly placeholder=\"Auto-calculated\" style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"button\" class=\"btn btn-primary add-sale-btn\" onclick=\"addSaleRecord()\">💾 Add Sale Record</button>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n        <!-- Recent Sales Tab -->\r\n        <div id=\"recent-sales\" class=\"tab-content\">\r\n            <h2>📋 Recent Sales & Import</h2>\r\n\r\n            <!-- Select Record to Display Section -->\r\n            <div style=\"margin-bottom: 30px; padding: 20px; background: linear-gradient(135deg, #667eea, #764ba2); border-radius: 12px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                <div style=\"display: flex; align-items: center; gap: 15px; color: white;\">\r\n                    <i class=\"fas fa-filter\" style=\"font-size: 20px; color: #ffd700;\"></i>\r\n                    <div style=\"flex: 1;\">\r\n                        <label style=\"display: block; margin-bottom: 8px; font-weight: 600; font-size: 16px; color: white;\">\r\n                            Select Record to Display\r\n                        </label>\r\n                        <select id=\"record-display-selector\" onchange=\"changeRecordDisplay()\"\r\n                                style=\"width: 100%; max-width: 300px; padding: 12px; border: 2px solid rgba(255,255,255,0.3); border-radius: 8px; font-size: 14px; background: rgba(255,255,255,0.95); color: #333; font-weight: 500;\">\r\n                            <option value=\"sales-record\" selected>Sales Record</option>\r\n                            <option value=\"daily-sales-report\">Daily Sales Report</option>\r\n                            <option value=\"purchase-history\">Purchase History</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Sales Import Section -->\r\n            <div id=\"sales-import-section\" style=\"margin-bottom: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px; border: 2px solid #e9ecef;\">\r\n                <h3 style=\"margin: 0 0 15px 0; color: #4ecdc4;\">📤 Bulk Import Sales</h3>\r\n                <p style=\"margin: 0 0 15px 0; color: #666; font-size: 14px;\">Import multiple sales records from CSV or Excel file</p>\r\n\r\n                <div style=\"display: flex; gap: 10px; align-items: center; flex-wrap: wrap;\" class=\"import-section\">\r\n                    <input type=\"file\" id=\"sales-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importSales(event)\">\r\n                    <button class=\"btn btn-primary\" onclick=\"document.getElementById('sales-import-file').click()\" style=\"width: auto; padding: 10px 16px; font-size: 14px;\" title=\"Import sales from CSV or Excel file\">\r\n                        📤 Import Sales Data\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"downloadSalesTemplate()\" style=\"width: auto; padding: 10px 16px; font-size: 14px; background-color: #6c757d; color: white;\" title=\"Download sample CSV template\">\r\n                        📋 Download Template\r\n                    </button>\r\n                    <small style=\"color: #666; font-size: 12px;\">Supports CSV and Excel files with required columns: Item Name, Category, Cost Price, Selling Price, Sale Date, Customer Name</small>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Recent Sales Section -->\r\n            <div id=\"sales-records-section\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">📋 Sales Records (<span id=\"sales-count\">0</span>)</h3>\r\n                            <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" class=\"toggle-btn\" title=\"Expand/Collapse Sales Records\">\r\n                                ►\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                            <button class=\"btn\" onclick=\"downloadExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                📥 Export All\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"sales-content-container\" class=\"collapsible-section collapsed\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                    <div style=\"padding: 20px;\">\r\n                        <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                            <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Sales Summary</h4>\r\n                            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Sales</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Cost</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-selling\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Profit</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <!-- Search and Filter Section -->\r\n                        <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                            <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                <div>\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Sales</label>\r\n                                    <input type=\"text\" id=\"sales-search\" placeholder=\"Search by item name, customer name, or category...\"\r\n                                           oninput=\"filterSales()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                </div>\r\n                                <div style=\"display: flex; gap: 10px;\">\r\n                                    <button onclick=\"clearSalesFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        🔄 Clear\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Sales Records Container with Enhanced Scrolling -->\r\n                        <div class=\"enhanced-sales-container\">\r\n                            <div id=\"sales-records\"></div>\r\n                            <div id=\"load-more-container\" style=\"text-align: center; padding: 20px; display: none;\">\r\n                                <button id=\"load-more-btn\" class=\"btn btn-primary\" onclick=\"loadMoreSales()\" style=\"width: auto; padding: 12px 24px; font-size: 14px; border-radius: 20px;\">\r\n                                    📖 Load More Sales\r\n                                </button>\r\n                            </div>\r\n                            <div id=\"no-sales-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                <h3 style=\"color: #999;\">📭 No Sales Records Found</h3>\r\n                                <p>Add your first sale in the Sales Entry tab or import existing data!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Daily Sales Report Section -->\r\n            <div id=\"daily-sales-report\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden; margin-bottom: 30px; display: none;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <h3 style=\"margin: 0; font-size: 20px;\">📅 Daily Sales Report</h3>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"exportDailySalesReport()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-size: 12px;\">\r\n                                📥 Export Report\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"daily-sales-content\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                        <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Daily Sales Summary</h4>\r\n                        <div id=\"daily-sales-summary\" style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Sales</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-revenue\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Revenue</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Profit</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-avg-sale\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Sale Value</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Purchase History Section -->\r\n                <div id=\"purchase-history-section\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden; margin-top: 30px; display: none;\">\r\n                    <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                            <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                                <h3 style=\"margin: 0; font-size: 20px;\">📦 Purchase History (<span id=\"purchase-count\">0</span>)</h3>\r\n                                <button id=\"purchase-toggle-btn\" onclick=\"togglePurchaseSection()\" class=\"toggle-btn\" title=\"Expand/Collapse Purchase History\">\r\n                                    ►\r\n                                </button>\r\n                            </div>\r\n                            <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                                <button class=\"btn\" onclick=\"exportPurchaseHistory()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                    📥 Export Purchases\r\n                                </button>\r\n                                <button class=\"btn\" onclick=\"addToPurchaseHistory()\" style=\"background: #10B981; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                    ➕ Add Purchase\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"purchase-content-container\" class=\"collapsible-section collapsed\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                        <!-- Purchase Summary -->\r\n                        <div style=\"padding: 20px;\">\r\n                            <div id=\"purchase-summary\" style=\"background: linear-gradient(45deg, #10B981, #059669); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                                <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Purchase Summary</h4>\r\n                                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-purchases\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Items</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-purchase-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Purchase Cost</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-selling-value\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling Value</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-potential-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Potential Profit</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Purchase Search and Filter -->\r\n                            <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                                <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                    <div>\r\n                                        <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Purchases</label>\r\n                                        <input type=\"text\" id=\"purchase-search\" placeholder=\"Search by item name, category, or supplier...\"\r\n                                               oninput=\"filterPurchases()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                    </div>\r\n                                    <div style=\"display: flex; gap: 10px;\">\r\n                                        <button onclick=\"clearPurchaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                            🔄 Clear\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Add Purchase Form Section -->\r\n                            <div id=\"add-purchase-form\" style=\"background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 10px; padding: 20px; margin-bottom: 20px; display: none;\">\r\n                                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\">\r\n                                    <h4 style=\"margin: 0; color: #333; display: flex; align-items: center; gap: 10px;\">\r\n                                        <i class=\"fas fa-plus-circle\" style=\"color: #10B981;\"></i>\r\n                                        Add New Purchase\r\n                                    </h4>\r\n                                    <button onclick=\"cancelAddPurchase()\" style=\"background: #dc3545; color: white; border: none; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        ✕ Cancel\r\n                                    </button>\r\n                                </div>\r\n\r\n                                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;\">\r\n                                    <!-- Left Column -->\r\n                                    <div>\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-tag\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Supplier Name <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"supplier-name\" placeholder=\"Enter supplier name\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-gem\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Purchase Name (Item) <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"purchase-name\" placeholder=\"Enter item name\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-rupee-sign\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Purchase Cost <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"purchase-cost\" placeholder=\"Enter purchase cost\" min=\"0\" step=\"0.01\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <!-- Right Column -->\r\n                                    <div>\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-list\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Category\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"purchase-category\" placeholder=\"e.g., Necklaces, Earrings, Rings\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-money-bill-wave\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Selling Price\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"selling-price\" placeholder=\"Enter intended selling price\" min=\"0\" step=\"0.01\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-sort-numeric-up\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Quantity\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"purchase-quantity\" placeholder=\"Enter quantity\" min=\"1\" value=\"1\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div style=\"margin-bottom: 20px;\">\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                        <i class=\"fas fa-sticky-note\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                        Notes (Optional)\r\n                                    </label>\r\n                                    <textarea id=\"purchase-notes\" placeholder=\"Enter any additional notes...\" rows=\"3\"\r\n                                              style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; resize: vertical; transition: border-color 0.3s ease;\"></textarea>\r\n                                </div>\r\n\r\n                                <div style=\"display: flex; gap: 15px; justify-content: flex-end;\">\r\n                                    <button onclick=\"cancelAddPurchase()\" style=\"background: #6c757d; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 600;\">\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button onclick=\"savePurchaseFromForm()\" style=\"background: #10B981; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 600;\">\r\n                                        <i class=\"fas fa-save\" style=\"margin-right: 5px;\"></i>\r\n                                        Save Purchase\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Purchase Records Container -->\r\n                            <div class=\"enhanced-purchase-container\">\r\n                                <div id=\"purchase-records\"></div>\r\n                                <div id=\"no-purchase-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                    <h3 style=\"color: #999;\">📦 No Purchase Records Found</h3>\r\n                                    <p>Add your first purchase record to track inventory!</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n\r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n\r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n\r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n\r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n\r\n            <!-- Enhanced Customer Database Section -->\r\n            <div style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <!-- Header Section -->\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">👥 Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                            <button id=\"customer-stats-toggle\" onclick=\"toggleCustomerStats()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; font-size: 16px; cursor: pointer; padding: 8px 12px; border-radius: 6px; transition: all 0.3s ease;\" title=\"Show/Hide Customer Statistics\">\r\n                                📊 Stats\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                            <input type=\"file\" id=\"customer-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importCustomers(event)\">\r\n                            <button class=\"btn\" onclick=\"document.getElementById('customer-import-file').click()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\" title=\"Import customers from CSV or Excel file\">\r\n                                📤 Import\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomerTemplate()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📋 Template\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomersExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📥 Export\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customer Statistics Panel -->\r\n                <div id=\"customer-stats-panel\" style=\"display: none; background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Customer Statistics</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;\">\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Customers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-active-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Active Buyers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-avg-orders\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Orders</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-clv\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total CLV</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Search and Filter Section -->\r\n                <div style=\"padding: 20px; background: #f8f9fa; border-bottom: 1px solid #e9ecef;\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr auto auto; gap: 15px; align-items: end;\">\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Customers</label>\r\n                            <input type=\"text\" id=\"customer-database-search\" placeholder=\"Search by name, phone, email, or address...\"\r\n                                   oninput=\"filterCustomerDatabase()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                        </div>\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">📋 Sort By</label>\r\n                            <select id=\"customer-sort-select\" onchange=\"sortCustomerDatabase()\" style=\"padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                <option value=\"name-asc\">Name (A-Z)</option>\r\n                                <option value=\"name-desc\">Name (Z-A)</option>\r\n                                <option value=\"purchases-desc\">Most Purchases</option>\r\n                                <option value=\"purchases-asc\">Least Purchases</option>\r\n                                <option value=\"spending-desc\">Highest Spending</option>\r\n                                <option value=\"spending-asc\">Lowest Spending</option>\r\n                                <option value=\"recent-desc\">Recently Added</option>\r\n                                <option value=\"recent-asc\">Oldest Added</option>\r\n                            </select>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"clearCustomerDatabaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                🔄 Clear\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customers List Container with Enhanced UI -->\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"customer-view-mode\" style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <div style=\"font-size: 14px; color: #666;\">\r\n                            Showing <span id=\"customers-showing\">0</span> of <span id=\"customers-total\">0</span> customers\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; align-items: center;\">\r\n                            <label style=\"font-size: 14px; color: #666;\">View:</label>\r\n                            <select id=\"customers-per-page\" onchange=\"changeCustomersPerPage()\" style=\"padding: 5px 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px;\">\r\n                                <option value=\"10\">10 per page</option>\r\n                                <option value=\"25\" selected>25 per page</option>\r\n                                <option value=\"50\">50 per page</option>\r\n                                <option value=\"100\">100 per page</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Enhanced Customer Cards Container -->\r\n                    <div class=\"enhanced-customers-container\" style=\"max-height: 500px; overflow-y: auto; background: #fafafa; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;\">\r\n                        <div id=\"customers-list-container\"></div>\r\n\r\n                        <!-- Pagination Controls -->\r\n                        <div id=\"customer-pagination\" style=\"display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 20px; padding: 15px;\">\r\n                            <button id=\"prev-customers-btn\" onclick=\"previousCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                ◀ Previous\r\n                            </button>\r\n                            <span id=\"customer-page-info\" style=\"font-size: 14px; color: #666; margin: 0 15px;\">Page 1 of 1</span>\r\n                            <button id=\"next-customers-btn\" onclick=\"nextCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                Next ▶\r\n                            </button>\r\n                        </div>\r\n\r\n                        <!-- No Customers Message -->\r\n                        <div id=\"no-customers-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                            <h3 style=\"color: #999;\">👥 No Customers Found</h3>\r\n                            <p>Add your first customer above or import existing customer data!</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n\r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n        let displayedSalesCount = 20; // Initial number of sales to show\r\n\r\n        // Multi-select category variables\r\n        let selectedCategories = [];\r\n        let isCategoryDropdownOpen = false;\r\n\r\n        // Function to handle record display selection\r\n        function changeRecordDisplay() {\r\n            const selector = document.getElementById('record-display-selector');\r\n            const selectedValue = selector.value;\r\n\r\n            // Get all sections by their IDs\r\n            const salesImportSection = document.getElementById('sales-import-section');\r\n            const salesRecordSection = document.getElementById('sales-records-section');\r\n            const dailySalesReportSection = document.getElementById('daily-sales-report');\r\n            const purchaseHistorySection = document.getElementById('purchase-history-section');\r\n\r\n            // Hide all sections initially\r\n            if (salesImportSection) salesImportSection.style.display = 'none';\r\n            if (salesRecordSection) salesRecordSection.style.display = 'none';\r\n            if (dailySalesReportSection) dailySalesReportSection.style.display = 'none';\r\n            if (purchaseHistorySection) purchaseHistorySection.style.display = 'none';\r\n\r\n            // Show selected section(s)\r\n            switch(selectedValue) {\r\n                case 'sales-record':\r\n                    if (salesImportSection) salesImportSection.style.display = 'block';\r\n                    if (salesRecordSection) salesRecordSection.style.display = 'block';\r\n                    break;\r\n                case 'daily-sales-report':\r\n                    if (dailySalesReportSection) dailySalesReportSection.style.display = 'block';\r\n                    break;\r\n                case 'purchase-history':\r\n                    if (purchaseHistorySection) purchaseHistorySection.style.display = 'block';\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Initialize the display on page load\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            // Set the dropdown to sales-record (default)\r\n            const selector = document.getElementById('record-display-selector');\r\n            if (selector) {\r\n                selector.value = 'sales-record';\r\n            }\r\n            \r\n            // Set initial display to show only sales records\r\n            changeRecordDisplay();\r\n        });\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n\r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n\r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n\r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Multi-Select Category Functions\r\n        function toggleCategoryDropdown() {\r\n            const dropdown = document.getElementById('category-dropdown');\r\n            const display = document.getElementById('category-display');\r\n            const arrow = document.getElementById('category-arrow');\r\n\r\n            isCategoryDropdownOpen = !isCategoryDropdownOpen;\r\n\r\n            if (isCategoryDropdownOpen) {\r\n                // Position dropdown correctly\r\n                const rect = display.getBoundingClientRect();\r\n                const viewportHeight = window.innerHeight;\r\n                const dropdownHeight = 250; // max-height of dropdown\r\n\r\n                // Check if dropdown would go below viewport\r\n                if (rect.bottom + dropdownHeight > viewportHeight) {\r\n                    // Position dropdown above the input\r\n                    dropdown.style.top = 'auto';\r\n                    dropdown.style.bottom = '100%';\r\n                    dropdown.style.borderRadius = 'var(--radius-md) var(--radius-md) 0 0';\r\n                    dropdown.style.borderTop = '2px solid var(--primary-600)';\r\n                    dropdown.style.borderBottom = 'none';\r\n                } else {\r\n                    // Position dropdown below the input (default)\r\n                    dropdown.style.top = '100%';\r\n                    dropdown.style.bottom = 'auto';\r\n                    dropdown.style.borderRadius = '0 0 var(--radius-md) var(--radius-md)';\r\n                    dropdown.style.borderTop = 'none';\r\n                    dropdown.style.borderBottom = '2px solid var(--primary-600)';\r\n                }\r\n\r\n                dropdown.style.display = 'block';\r\n                display.classList.add('active');\r\n                arrow.style.transform = 'rotate(180deg)';\r\n\r\n                // Ensure dropdown is above all other elements\r\n                dropdown.style.zIndex = '99999';\r\n            } else {\r\n                dropdown.style.display = 'none';\r\n                display.classList.remove('active');\r\n                arrow.style.transform = 'rotate(0deg)';\r\n            }\r\n        }\r\n\r\n        function updateSelectedCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            const placeholder = document.getElementById('category-placeholder');\r\n            const selectedContainer = document.getElementById('category-selected');\r\n            const errorDiv = document.getElementById('category-error');\r\n\r\n            selectedCategories = [];\r\n            checkboxes.forEach(checkbox => {\r\n                if (checkbox.checked) {\r\n                    selectedCategories.push(checkbox.value);\r\n                }\r\n            });\r\n\r\n            // Hide error if categories are selected\r\n            if (selectedCategories.length > 0) {\r\n                errorDiv.style.display = 'none';\r\n            }\r\n\r\n            if (selectedCategories.length === 0) {\r\n                placeholder.style.display = 'block';\r\n                selectedContainer.style.display = 'none';\r\n                placeholder.textContent = 'Select categories...';\r\n            } else {\r\n                placeholder.style.display = 'none';\r\n                selectedContainer.style.display = 'flex';\r\n\r\n                selectedContainer.innerHTML = selectedCategories.map(category => {\r\n                    const icon = getCategoryIcon(category);\r\n                    return `\r\n                        <span class=\"category-tag\">\r\n                            ${icon} ${category}\r\n                            <button type=\"button\" class=\"remove-tag\" onclick=\"removeCategory('${category}')\" title=\"Remove ${category}\">\r\n                                ✕\r\n                            </button>\r\n                        </span>\r\n                    `;\r\n                }).join('');\r\n            }\r\n        }\r\n\r\n        function getCategoryIcon(category) {\r\n            const icons = {\r\n                'Necklaces': '✨',\r\n                'Earrings': '👂',\r\n                'Bracelets': '🔗',\r\n                'Rings': '💍',\r\n                'Anklets': '🦶',\r\n                'Sets': '💎',\r\n                'Bangles': '⚪',\r\n                'Chains': '🔗',\r\n                'Pendants': '🏷️',\r\n                'Brooches': '📎'\r\n            };\r\n            return icons[category] || '💎';\r\n        }\r\n\r\n        function removeCategory(categoryToRemove) {\r\n            const checkbox = document.querySelector(`input[value=\"${categoryToRemove}\"]`);\r\n            if (checkbox) {\r\n                checkbox.checked = false;\r\n                updateSelectedCategories();\r\n            }\r\n        }\r\n\r\n        function selectAllCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            checkboxes.forEach(checkbox => {\r\n                checkbox.checked = true;\r\n            });\r\n            updateSelectedCategories();\r\n        }\r\n\r\n        function clearAllCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            checkboxes.forEach(checkbox => {\r\n                checkbox.checked = false;\r\n            });\r\n            updateSelectedCategories();\r\n        }\r\n\r\n        // Close dropdown when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const container = document.querySelector('.multi-select-container');\r\n            if (container && !container.contains(event.target)) {\r\n                if (isCategoryDropdownOpen) {\r\n                    toggleCategoryDropdown();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Initialize Collapsible Sections\r\n        function initializeCollapsibleSections() {\r\n            // Initialize Sales Section as collapsed\r\n            const salesContainer = document.getElementById('sales-content-container');\r\n            const salesToggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (salesContainer && salesToggleBtn) {\r\n                salesContainer.classList.add('collapsed');\r\n                salesToggleBtn.textContent = '►';\r\n                salesToggleBtn.classList.add('collapsed');\r\n                salesToggleBtn.title = 'Expand Sales Records';\r\n            }\r\n\r\n            // Initialize Purchase History Section as collapsed\r\n            const purchaseContainer = document.getElementById('purchase-content-container');\r\n            const purchaseToggleBtn = document.getElementById('purchase-toggle-btn');\r\n\r\n            if (purchaseContainer && purchaseToggleBtn) {\r\n                purchaseContainer.classList.add('collapsed');\r\n                purchaseToggleBtn.textContent = '►';\r\n                purchaseToggleBtn.classList.add('collapsed');\r\n                purchaseToggleBtn.title = 'Expand Purchase History';\r\n            }\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (container.classList.contains('collapsed')) {\r\n                container.classList.remove('collapsed');\r\n                container.classList.add('expanded');\r\n                toggleBtn.textContent = '▼';\r\n                toggleBtn.classList.remove('collapsed');\r\n                toggleBtn.title = 'Collapse Sales Records';\r\n                // Load sales data when expanded\r\n                loadSalesRecords();\r\n            } else {\r\n                container.classList.remove('expanded');\r\n                container.classList.add('collapsed');\r\n                toggleBtn.textContent = '►';\r\n                toggleBtn.classList.add('collapsed');\r\n                toggleBtn.title = 'Expand Sales Records';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n\r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n\r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n\r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n\r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n\r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n\r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n\r\n            document.body.appendChild(updateDiv);\r\n\r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n\r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Initialize collapsible sections\r\n                initializeCollapsibleSections();\r\n\r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n\r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n\r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n\r\n            const cleanedData = [];\r\n\r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n\r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n\r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n\r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n\r\n                    cleanedData.push(cleanedSale);\r\n\r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n\r\n            return cleanedData;\r\n        }\r\n\r\n\r\n\r\n        // Update customer count in search hint to include all unique customers\r\n        function updateCustomerCount() {\r\n            try {\r\n                const countElement = document.getElementById('total-customers');\r\n                if (countElement) {\r\n                    const allUniqueCustomers = getUniqueCustomers();\r\n                    countElement.textContent = allUniqueCustomers.length;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating customer count:', error);\r\n            }\r\n        }\r\n\r\n        // Import customers from CSV/Excel file\r\n        function importCustomers(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVCustomers(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelCustomers(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import customers from CSV\r\n        function importCSVCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\r\n                    const requiredHeaders = ['name', 'phone'];\r\n                    const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\r\n\r\n                    if (missingHeaders.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingHeaders.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Find column indices\r\n                    const nameIndex = headers.indexOf('name');\r\n                    const phoneIndex = headers.indexOf('phone');\r\n                    const addressIndex = headers.indexOf('address');\r\n                    const emailIndex = headers.indexOf('email');\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        const customerName = values[nameIndex];\r\n                        const customerPhone = values[phoneIndex] || '';\r\n                        const customerAddress = addressIndex >= 0 ? values[addressIndex] || '' : '';\r\n                        const customerEmail = emailIndex >= 0 ? values[emailIndex] || '' : '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import customers from Excel\r\n        function importExcelCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    jsonData.forEach(row => {\r\n                        const customerName = row.Name || row.name || row.customer_name || row['Customer Name'];\r\n                        const customerPhone = row.Phone || row.phone || row.mobile || row.Mobile || '';\r\n                        const customerAddress = row.Address || row.address || '';\r\n                        const customerEmail = row.Email || row.email || '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download customer import template\r\n        function downloadCustomerTemplate() {\r\n            const csvContent = [\r\n                'name,phone,address,email',\r\n                'John Doe,+91-9876543210,123 Main Street Mumbai,john@example.com',\r\n                'Jane Smith,+91-8765432109,456 Oak Avenue Delhi,jane@example.com',\r\n                'Mike Johnson,+91-7654321098,789 Pine Road Bangalore,mike@example.com'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'customer_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Customer import template downloaded! Use this format for importing customers.');\r\n        }\r\n\r\n        // Enhanced Customer Database Functionality\r\n        let currentCustomerPage = 1;\r\n        let customersPerPage = 25;\r\n        let filteredCustomers = [];\r\n        let isCustomerSearchActive = false;\r\n        let currentCustomerSort = 'name-asc';\r\n\r\n        function toggleCustomerStats() {\r\n            const panel = document.getElementById('customer-stats-panel');\r\n            const button = document.getElementById('customer-stats-toggle');\r\n\r\n            if (panel.style.display === 'none') {\r\n                panel.style.display = 'block';\r\n                button.textContent = '📊 Hide Stats';\r\n                updateCustomerStatistics();\r\n            } else {\r\n                panel.style.display = 'none';\r\n                button.textContent = '📊 Stats';\r\n            }\r\n        }\r\n\r\n        function updateCustomerStatistics() {\r\n            const totalCustomers = customersData.length;\r\n            const activeCustomers = customersData.filter(customer => {\r\n                const purchases = salesData.filter(sale => sale.customerName === customer.name);\r\n                return purchases.length > 0;\r\n            }).length;\r\n\r\n            const totalOrders = salesData.length;\r\n            const avgOrdersPerCustomer = activeCustomers > 0 ? (totalOrders / activeCustomers).toFixed(1) : 0;\r\n\r\n            const totalCLV = customersData.reduce((sum, customer) => {\r\n                const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                const customerSpending = customerSales.reduce((total, sale) => total + sale.sellingPrice, 0);\r\n                return sum + customerSpending;\r\n            }, 0);\r\n\r\n            document.getElementById('stat-total-customers').textContent = totalCustomers;\r\n            document.getElementById('stat-active-customers').textContent = activeCustomers;\r\n            document.getElementById('stat-avg-orders').textContent = avgOrdersPerCustomer;\r\n            document.getElementById('stat-total-clv').textContent = `₹${totalCLV.toFixed(2)}`;\r\n        }\r\n\r\n        function filterCustomerDatabase() {\r\n            const searchTerm = document.getElementById('customer-database-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                isCustomerSearchActive = false;\r\n                filteredCustomers = [];\r\n                currentCustomerPage = 1;\r\n                displayCustomerDatabase();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return;\r\n            }\r\n\r\n            filteredCustomers = customersData.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                (customer.phone && customer.phone.toLowerCase().includes(searchTerm)) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm)) ||\r\n                (customer.address && customer.address.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isCustomerSearchActive = true;\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function sortCustomerDatabase() {\r\n            currentCustomerSort = document.getElementById('customer-sort-select').value;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function clearCustomerDatabaseFilter() {\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n            currentCustomerSort = 'name-asc';\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function changeCustomersPerPage() {\r\n            customersPerPage = parseInt(document.getElementById('customers-per-page').value);\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function displayCustomerDatabase() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const sortedData = sortCustomersData(dataToDisplay);\r\n\r\n            const totalCustomers = sortedData.length;\r\n            const startIndex = (currentCustomerPage - 1) * customersPerPage;\r\n            const endIndex = Math.min(startIndex + customersPerPage, totalCustomers);\r\n            const currentPageData = sortedData.slice(startIndex, endIndex);\r\n\r\n            const container = document.getElementById('customers-list-container');\r\n            const noCustomersMessage = document.getElementById('no-customers-message');\r\n\r\n            if (totalCustomers === 0) {\r\n                container.innerHTML = '';\r\n                noCustomersMessage.style.display = 'block';\r\n                updateCustomerPagination(0, 0, 0);\r\n                return;\r\n            }\r\n\r\n            noCustomersMessage.style.display = 'none';\r\n\r\n            container.innerHTML = currentPageData.map(customer => createCustomerCardHTML(customer)).join('');\r\n\r\n            // Update pagination\r\n            updateCustomerPagination(currentCustomerPage, Math.ceil(totalCustomers / customersPerPage), totalCustomers);\r\n\r\n            // Update showing info\r\n            document.getElementById('customers-showing').textContent = `${startIndex + 1}-${endIndex}`;\r\n            document.getElementById('customers-total').textContent = totalCustomers;\r\n        }\r\n\r\n        function sortCustomersData(data) {\r\n            const sortedData = [...data];\r\n\r\n            switch (currentCustomerSort) {\r\n                case 'name-asc':\r\n                    return sortedData.sort((a, b) => a.name.localeCompare(b.name));\r\n                case 'name-desc':\r\n                    return sortedData.sort((a, b) => b.name.localeCompare(a.name));\r\n                case 'purchases-desc':\r\n                case 'purchases-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aPurchases = salesData.filter(sale => sale.customerName === a.name).length;\r\n                        const bPurchases = salesData.filter(sale => sale.customerName === b.name).length;\r\n                        return currentCustomerSort === 'purchases-desc' ? bPurchases - aPurchases : aPurchases - bPurchases;\r\n                    });\r\n                case 'spending-desc':\r\n                case 'spending-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aSpending = salesData.filter(sale => sale.customerName === a.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        const bSpending = salesData.filter(sale => sale.customerName === b.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        return currentCustomerSort === 'spending-desc' ? bSpending - aSpending : aSpending - bSpending;\r\n                    });\r\n                case 'recent-desc':\r\n                    return sortedData.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n                case 'recent-asc':\r\n                    return sortedData.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\r\n                default:\r\n                    return sortedData;\r\n            }\r\n        }\r\n\r\n        function createCustomerCardHTML(customer) {\r\n            const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n            const totalPurchases = customerSales.length;\r\n            const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const avgOrderValue = totalPurchases > 0 ? (totalSpent / totalPurchases) : 0;\r\n            const lastPurchase = customerSales.length > 0 ?\r\n                Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime())) : null;\r\n\r\n            const isActive = totalPurchases > 0;\r\n            const statusClass = isActive ? 'active' : 'inactive';\r\n            const statusText = isActive ? 'Active' : 'Inactive';\r\n\r\n            return `\r\n                <div class=\"customer-card\">\r\n                    <div class=\"customer-card-header\">\r\n                        <h4 class=\"customer-name\">👤 ${customer.name}</h4>\r\n                        <span class=\"customer-status ${statusClass}\">${statusText}</span>\r\n                    </div>\r\n\r\n                    <div class=\"customer-info-grid\">\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📞 Phone:</span>\r\n                            ${customer.phone || 'Not provided'}\r\n                        </div>\r\n                        ${customer.email ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📧 Email:</span>\r\n                                ${customer.email}\r\n                            </div>\r\n                        ` : ''}\r\n                        ${customer.address ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📍 Address:</span>\r\n                                ${customer.address}\r\n                            </div>\r\n                        ` : ''}\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📅 Added:</span>\r\n                            ${new Date(customer.createdAt).toLocaleDateString()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"customer-purchase-stats\">\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">${totalPurchases}</div>\r\n                            <div class=\"customer-stat-label\">Total Orders</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${totalSpent.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Total Spent</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${avgOrderValue.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Avg Order</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">\r\n                                ${lastPurchase ? new Date(lastPurchase).toLocaleDateString() : 'Never'}\r\n                            </div>\r\n                            <div class=\"customer-stat-label\">Last Purchase</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        function updateCustomerPagination(currentPage, totalPages, totalCustomers) {\r\n            const prevBtn = document.getElementById('prev-customers-btn');\r\n            const nextBtn = document.getElementById('next-customers-btn');\r\n            const pageInfo = document.getElementById('customer-page-info');\r\n\r\n            prevBtn.disabled = currentPage <= 1;\r\n            nextBtn.disabled = currentPage >= totalPages;\r\n\r\n            pageInfo.textContent = totalPages > 0 ? `Page ${currentPage} of ${totalPages}` : 'No pages';\r\n\r\n            // Update button styles based on disabled state\r\n            prevBtn.style.opacity = prevBtn.disabled ? '0.5' : '1';\r\n            nextBtn.style.opacity = nextBtn.disabled ? '0.5' : '1';\r\n            prevBtn.style.cursor = prevBtn.disabled ? 'not-allowed' : 'pointer';\r\n            nextBtn.style.cursor = nextBtn.disabled ? 'not-allowed' : 'pointer';\r\n        }\r\n\r\n        function previousCustomersPage() {\r\n            if (currentCustomerPage > 1) {\r\n                currentCustomerPage--;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        function nextCustomersPage() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const totalPages = Math.ceil(dataToDisplay.length / customersPerPage);\r\n\r\n            if (currentCustomerPage < totalPages) {\r\n                currentCustomerPage++;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        // Import sales from CSV/Excel file\r\n        function importSales(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVSales(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelSales(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import sales from CSV\r\n        function importCSVSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase().replace(/\"/g, ''));\r\n                    const requiredHeaders = ['item_name', 'category', 'cost_price', 'selling_price', 'sale_date', 'customer_name'];\r\n\r\n                    // Check for alternative header names\r\n                    const headerMapping = {\r\n                        'item_name': ['item_name', 'item name', 'itemname', 'product_name', 'product name', 'name'],\r\n                        'category': ['category', 'item_category', 'product_category', 'type'],\r\n                        'cost_price': ['cost_price', 'cost price', 'costprice', 'cost', 'purchase_price', 'cp'],\r\n                        'selling_price': ['selling_price', 'selling price', 'sellingprice', 'price', 'sale_price', 'sp'],\r\n                        'sale_date': ['sale_date', 'sale date', 'saledate', 'date', 'purchase_date'],\r\n                        'customer_name': ['customer_name', 'customer name', 'customername', 'customer', 'buyer']\r\n                    };\r\n\r\n                    // Find column indices\r\n                    const columnIndices = {};\r\n                    let missingColumns = [];\r\n\r\n                    for (const [key, alternatives] of Object.entries(headerMapping)) {\r\n                        const foundIndex = headers.findIndex(h => alternatives.includes(h));\r\n                        if (foundIndex >= 0) {\r\n                            columnIndices[key] = foundIndex;\r\n                        } else {\r\n                            missingColumns.push(key);\r\n                        }\r\n                    }\r\n\r\n                    if (missingColumns.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingColumns.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Optional columns\r\n                    const phoneIndex = headers.findIndex(h => ['customer_phone', 'customer phone', 'phone', 'mobile'].includes(h));\r\n                    const addressIndex = headers.findIndex(h => ['customer_address', 'customer address', 'address'].includes(h));\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        try {\r\n                            const itemName = values[columnIndices.item_name]?.trim();\r\n                            const category = values[columnIndices.category]?.trim();\r\n                            const costPrice = parseFloat(values[columnIndices.cost_price]) || 0;\r\n                            const sellingPrice = parseFloat(values[columnIndices.selling_price]) || 0;\r\n                            const saleDate = values[columnIndices.sale_date]?.trim();\r\n                            const customerName = values[columnIndices.customer_name]?.trim();\r\n                            const customerPhone = phoneIndex >= 0 ? values[phoneIndex]?.trim() || '' : '';\r\n                            const customerAddress = addressIndex >= 0 ? values[addressIndex]?.trim() || '' : '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${i + 1}: Missing required fields`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${i + 1}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate date format\r\n                            const dateObj = new Date(saleDate);\r\n                            if (isNaN(dateObj.getTime())) {\r\n                                errors.push(`Row ${i + 1}: Invalid date format \"${saleDate}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: saleDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${i + 1}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import sales from Excel\r\n        function importExcelSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    jsonData.forEach((row, index) => {\r\n                        try {\r\n                            // Try different column name variations\r\n                            const itemName = row['Item Name'] || row['Item_Name'] || row['itemname'] || row['Product Name'] || row['Name'];\r\n                            const category = row['Category'] || row['Item Category'] || row['Type'];\r\n                            const costPrice = parseFloat(row['Cost Price'] || row['Cost_Price'] || row['costprice'] || row['Cost'] || row['CP']) || 0;\r\n                            const sellingPrice = parseFloat(row['Selling Price'] || row['Selling_Price'] || row['sellingprice'] || row['Price'] || row['SP']) || 0;\r\n                            const saleDate = row['Sale Date'] || row['Sale_Date'] || row['saledate'] || row['Date'];\r\n                            const customerName = row['Customer Name'] || row['Customer_Name'] || row['customername'] || row['Customer'];\r\n                            const customerPhone = row['Customer Phone'] || row['Customer_Phone'] || row['Phone'] || row['Mobile'] || '';\r\n                            const customerAddress = row['Customer Address'] || row['Customer_Address'] || row['Address'] || '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${index + 2}: Missing required fields`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${index + 2}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate and format date\r\n                            let formattedDate = saleDate;\r\n                            if (saleDate instanceof Date) {\r\n                                formattedDate = saleDate.toISOString().split('T')[0];\r\n                            } else if (typeof saleDate === 'string') {\r\n                                const dateObj = new Date(saleDate);\r\n                                if (isNaN(dateObj.getTime())) {\r\n                                    errors.push(`Row ${index + 2}: Invalid date format \"${saleDate}\"`);\r\n                                    skippedCount++;\r\n                                    return;\r\n                                }\r\n                                formattedDate = dateObj.toISOString().split('T')[0];\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: formattedDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${index + 2}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download sales import template\r\n        function downloadSalesTemplate() {\r\n            const csvContent = [\r\n                'item_name,category,cost_price,selling_price,sale_date,customer_name,customer_phone,customer_address',\r\n                'Gold Plated Necklace,Necklaces,500,800,2024-01-15,John Doe,+91-9876543210,123 Main Street Mumbai',\r\n                'Diamond Earrings,Earrings,1000,1500,2024-01-16,Jane Smith,+91-8765432109,456 Oak Avenue Delhi',\r\n                'Silver Bracelet,Bracelets,300,450,2024-01-17,Mike Johnson,+91-7654321098,789 Pine Road Bangalore'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'sales_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Sales import template downloaded! Use this format for importing sales data.');\r\n        }\r\n\r\n        // Sales search and filter functionality\r\n        let filteredSalesData = [];\r\n        let isSearchActive = false;\r\n\r\n        function filterSales() {\r\n            const searchTerm = document.getElementById('sales-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                // Clear filter\r\n                isSearchActive = false;\r\n                filteredSalesData = [];\r\n                resetSalesDisplay();\r\n                loadSalesRecords();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return; // Wait for at least 2 characters\r\n            }\r\n\r\n            // Filter sales data\r\n            filteredSalesData = salesData.filter(sale =>\r\n                sale.itemName.toLowerCase().includes(searchTerm) ||\r\n                sale.customerName.toLowerCase().includes(searchTerm) ||\r\n                sale.category.toLowerCase().includes(searchTerm) ||\r\n                (sale.customerPhone && sale.customerPhone.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isSearchActive = true;\r\n            displayFilteredSales();\r\n        }\r\n\r\n        function displayFilteredSales() {\r\n            const salesRecordsDiv = document.getElementById('sales-records');\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n            const noSalesMessage = document.getElementById('no-sales-message');\r\n\r\n            if (filteredSalesData.length === 0) {\r\n                salesRecordsDiv.innerHTML = '';\r\n                loadMoreContainer.style.display = 'none';\r\n                noSalesMessage.style.display = 'block';\r\n                noSalesMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Sales Found</h3>\r\n                    <p>No sales records match your search criteria.</p>\r\n                `;\r\n                document.getElementById('sales-count').textContent = '0';\r\n                return;\r\n            }\r\n\r\n            // Display all filtered results\r\n            salesRecordsDiv.innerHTML = filteredSalesData.map(sale => createSaleItemHTML(sale)).join('');\r\n            loadMoreContainer.style.display = 'none';\r\n            noSalesMessage.style.display = 'none';\r\n            document.getElementById('sales-count').textContent = filteredSalesData.length;\r\n\r\n            // Update summary for filtered data\r\n            updateSalesSummary(filteredSalesData);\r\n        }\r\n\r\n        function clearSalesFilter() {\r\n            document.getElementById('sales-search').value = '';\r\n            isSearchActive = false;\r\n            filteredSalesData = [];\r\n            resetSalesDisplay();\r\n            loadSalesRecords();\r\n        }\r\n\r\n        function updateSalesSummary(dataToSummarize = null) {\r\n            const dataToUse = dataToSummarize || salesData;\r\n\r\n            const totalSales = dataToUse.length;\r\n            const totalCost = dataToUse.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = dataToUse.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = totalSelling - totalCost;\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n        }\r\n\r\n        function createSaleItemHTML(sale) {\r\n            const saleDate = new Date(sale.saleDate);\r\n            const formattedDate = saleDate.toLocaleDateString('en-IN', {\r\n                day: '2-digit',\r\n                month: 'short',\r\n                year: 'numeric'\r\n            });\r\n\r\n            const profitColor = sale.profit > 0 ? '#4ecdc4' : sale.profit < 0 ? '#ff6b6b' : '#666';\r\n\r\n            return `\r\n                <div class=\"sales-item\" style=\"position: relative; margin-bottom: 15px; padding: 15px; background: white; border-radius: 8px; border-left: 4px solid ${profitColor}; box-shadow: 0 2px 5px rgba(0,0,0,0.1);\">\r\n                    <div class=\"action-buttons\" style=\"position: absolute; top: 10px; right: 10px; display: flex; gap: 5px;\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale('${sale.id}')\" style=\"background: #007bff; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            ✏️ Edit\r\n                        </button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale('${sale.id}')\" style=\"background: #ff6b6b; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            🗑️ Delete\r\n                        </button>\r\n                    </div>\r\n\r\n                    <h4 style=\"margin: 0 0 8px 0; color: #333; font-size: 16px; padding-right: 120px;\">${sale.itemName}</h4>\r\n\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 14px; color: #666;\">\r\n                        <p style=\"margin: 0;\"><strong>📂 Category:</strong> ${sale.category}</p>\r\n                        <p style=\"margin: 0;\"><strong>📅 Date:</strong> ${formattedDate}</p>\r\n                        <p style=\"margin: 0;\"><strong>💰 Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>💵 Selling:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>📈 Profit:</strong> <span style=\"color: ${profitColor}; font-weight: bold;\">₹${sale.profit.toFixed(2)}</span></p>\r\n                        <p style=\"margin: 0;\"><strong>👤 Customer:</strong> ${sale.customerName}</p>\r\n                    </div>\r\n\r\n                    ${sale.customerPhone ? `<p style=\"margin: 8px 0 0 0; font-size: 13px; color: #888;\"><strong>📞 Phone:</strong> ${sale.customerPhone}</p>` : ''}\r\n                    ${sale.customerAddress ? `<p style=\"margin: 4px 0 0 0; font-size: 13px; color: #888;\"><strong>📍 Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Customer search functionality\r\n        function searchCustomers() {\r\n            const searchTerm = document.getElementById('customerSearch').value.trim().toLowerCase();\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            selectedSearchIndex = -1; // Reset selection\r\n\r\n            if (searchTerm.length < 2) {\r\n                resultsContainer.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Get unique customers from both database and sales data\r\n            const allUniqueCustomers = getUniqueCustomers();\r\n\r\n            // Update total customer count\r\n            document.getElementById('total-customers').textContent = allUniqueCustomers.length;\r\n\r\n            // Filter customers based on search term\r\n            const matchingCustomers = allUniqueCustomers.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                customer.phone.toLowerCase().includes(searchTerm) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            if (matchingCustomers.length === 0) {\r\n                resultsContainer.innerHTML = '<div style=\"padding: 10px; color: #666; font-style: italic;\">No customers found. You can enter new customer details below.</div>';\r\n                resultsContainer.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            // Display matching customers\r\n            resultsContainer.innerHTML = matchingCustomers.map(customer => {\r\n                const lastPurchaseText = customer.lastPurchase\r\n                    ? `Last purchase: ${new Date(customer.lastPurchase).toLocaleDateString()}`\r\n                    : 'No purchases yet';\r\n\r\n                const sourceIcon = customer.source === 'database' ? '📁' : '💳';\r\n                const sourceText = customer.source === 'database' ? 'In Customer DB' : 'From Sales Only';\r\n\r\n                return `\r\n                <div style=\"padding: 12px; cursor: pointer; border-bottom: 1px solid #eee; transition: all 0.2s; border-left: 3px solid transparent;\"\r\n                     onclick=\"selectCustomer('${escapeQuotes(customer.name)}', '${escapeQuotes(customer.phone)}', '${escapeQuotes(customer.address)}', '${escapeQuotes(customer.email)}')\"\r\n                     onmouseover=\"this.style.backgroundColor='#f8f9fa'; this.style.borderLeftColor='#4ecdc4';\"\r\n                     onmouseout=\"this.style.backgroundColor='white'; this.style.borderLeftColor='transparent';\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 4px;\">\r\n                            <div style=\"font-weight: bold; color: #333; font-size: 15px;\">${customer.name}</div>\r\n                    <div style=\"font-size: 10px; color: #999; padding: 2px 6px; background: #f0f0f0; border-radius: 10px;\">\r\n                            ${sourceIcon} ${sourceText}\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 6px;\">\r\n                        ${customer.phone !== 'Not provided' ?\r\n                                `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📞 ${customer.phone}</div>` : ''}\r\n                        ${customer.email && customer.email !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📧 ${customer.email}</div>` : ''}\r\n                    ${customer.address && customer.address !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #888; margin-bottom: 6px; line-height: 1.3;\">📍 ${customer.address}</div>` : ''}\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 8px;\">\r\n                        </div>\r\n                    <div style=\"font-size: 11px; color: #4ecdc4; font-weight: 600;\">\r\n                            ${customer.totalPurchases > 0 ?\r\n                                `${customer.totalPurchases} purchase${customer.totalPurchases > 1 ? 's' : ''} • ₹${customer.totalSpent.toFixed(2)} total` :\r\n                                'New customer'\r\n                            }\r\n                        </div>\r\n                        <div style=\"font-size: 10px; color: #999; font-style: italic;\">\r\n                            ${lastPurchaseText}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            }).join('');\r\n\r\n            resultsContainer.style.display = 'block';\r\n        }\r\n\r\n        // Get customers from customer database and sales data with purchase stats\r\n        function getUniqueCustomers() {\r\n            const allCustomers = new Map();\r\n\r\n            // Add customers from customer database\r\n            customersData.forEach(customer => {\r\n                const customerSales = salesData.filter(sale =>\r\n                    sale.customerName.toLowerCase() === customer.name.toLowerCase() ||\r\n                    sale.customerPhone === customer.phone\r\n                );\r\n\r\n                const totalPurchases = customerSales.length;\r\n                const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                const lastPurchase = customerSales.length > 0\r\n                    ? Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime()))\r\n                    : null;\r\n\r\n                const customerKey = customer.name.toLowerCase() + '|' + (customer.phone || '');\r\n                allCustomers.set(customerKey, {\r\n                    name: customer.name,\r\n                    phone: customer.phone || 'Not provided',\r\n                    address: customer.address || 'Not provided',\r\n                    email: customer.email || 'Not provided',\r\n                    totalPurchases: totalPurchases,\r\n                    totalSpent: totalSpent,\r\n                    lastPurchase: lastPurchase,\r\n                    source: 'database'\r\n                });\r\n            });\r\n\r\n            // Add customers from sales data who are not in customer database\r\n            salesData.forEach(sale => {\r\n                const customerKey = sale.customerName.toLowerCase() + '|' + (sale.customerPhone || '');\r\n\r\n                if (!allCustomers.has(customerKey)) {\r\n                    const customerSales = salesData.filter(s =>\r\n                        s.customerName.toLowerCase() === sale.customerName.toLowerCase() ||\r\n                        (s.customerPhone && sale.customerPhone && s.customerPhone === sale.customerPhone)\r\n                    );\r\n\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, s) => sum + s.sellingPrice, 0);\r\n                    const lastPurchase = Math.max(...customerSales.map(s => new Date(s.saleDate).getTime()));\r\n\r\n                    allCustomers.set(customerKey, {\r\n                        name: sale.customerName,\r\n                        phone: sale.customerPhone || 'Not provided',\r\n                        address: sale.customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        totalPurchases: totalPurchases,\r\n                        totalSpent: totalSpent,\r\n                        lastPurchase: lastPurchase,\r\n                        source: 'sales'\r\n                    });\r\n                }\r\n            });\r\n\r\n            // Convert to array and sort by total spent (descending), then by last purchase date (descending)\r\n            return Array.from(allCustomers.values()).sort((a, b) => {\r\n                if (b.totalSpent !== a.totalSpent) {\r\n                    return b.totalSpent - a.totalSpent;\r\n                }\r\n                if (a.lastPurchase && b.lastPurchase) {\r\n                    return b.lastPurchase - a.lastPurchase;\r\n                }\r\n                return a.lastPurchase ? -1 : (b.lastPurchase ? 1 : 0);\r\n            });\r\n        }\r\n\r\n        // Escape quotes for HTML attributes\r\n        function escapeQuotes(str) {\r\n            if (!str) return '';\r\n            return str.replace(/'/g, '&#39;').replace(/\"/g, '&quot;');\r\n        }\r\n\r\n        // Select customer from search results\r\n        function selectCustomer(name, phone, address, email) {\r\n            document.getElementById('customerName').value = name;\r\n            document.getElementById('customerPhone').value = phone !== 'Not provided' ? phone : '';\r\n            document.getElementById('customerAddress').value = address !== 'Not provided' ? address : '';\r\n\r\n            // Clear search\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n\r\n            // Show success message\r\n            showSuccess(`✅ Customer \"${name}\" selected! Details filled automatically.`);\r\n\r\n            // Focus on item name field\r\n            document.getElementById('itemName').focus();\r\n        }\r\n\r\n        // Clear customer search\r\n        function clearCustomerSearch() {\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n        }\r\n\r\n        // Handle keyboard navigation in search\r\n        let selectedSearchIndex = -1;\r\n        function handleSearchKeydown(event) {\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            const results = resultsContainer.querySelectorAll('[onclick*=\"selectCustomer\"]');\r\n\r\n            if (results.length === 0) return;\r\n\r\n            switch(event.key) {\r\n                case 'ArrowDown':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.min(selectedSearchIndex + 1, results.length - 1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'ArrowUp':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.max(selectedSearchIndex - 1, -1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'Enter':\r\n                    event.preventDefault();\r\n                    if (selectedSearchIndex >= 0 && selectedSearchIndex < results.length) {\r\n                        results[selectedSearchIndex].click();\r\n                    }\r\n                    break;\r\n                case 'Escape':\r\n                    clearCustomerSearch();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function highlightSearchResult(results) {\r\n            // Remove previous highlights\r\n            results.forEach((result, index) => {\r\n                if (index === selectedSearchIndex) {\r\n                    result.style.backgroundColor = '#4ecdc4';\r\n                    result.style.color = 'white';\r\n                } else {\r\n                    result.style.backgroundColor = 'white';\r\n                    result.style.color = 'inherit';\r\n                }\r\n            });\r\n        }\r\n\r\n        // Hide search results when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const searchContainer = document.getElementById('customerSearch').parentElement;\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n\r\n            if (!searchContainer.contains(event.target)) {\r\n                resultsContainer.style.display = 'none';\r\n            }\r\n        });\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            const profitField = document.getElementById('profit');\r\n            profitField.value = profit.toFixed(2);\r\n\r\n            // Change color based on profit\r\n            if (profit > 0) {\r\n                profitField.style.color = '#4ecdc4';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else if (profit < 0) {\r\n                profitField.style.color = '#ff6b6b';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else {\r\n                profitField.style.color = '#666';\r\n                profitField.style.fontWeight = 'normal';\r\n            }\r\n        }\r\n\r\n        // Add sale record function\r\n        function addSaleRecord() {\r\n            try {\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validate required fields with alerts\r\n                if (!itemName) {\r\n                    showError('Please enter item name');\r\n                    alert('⚠️ Validation Error:\\nPlease enter the item name to proceed.');\r\n                    document.getElementById('itemName').focus();\r\n                    return;\r\n                }\r\n                if (selectedCategories.length === 0) {\r\n                    showError('Please select at least one category');\r\n                    alert('⚠️ Validation Error:\\nPlease select at least one category for the item.');\r\n                    document.getElementById('category-error').style.display = 'flex';\r\n                    return;\r\n                }\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    showError('Please enter a valid cost price');\r\n                    alert('⚠️ Validation Error:\\nPlease enter a valid cost price (must be greater than 0).');\r\n                    document.getElementById('costPrice').focus();\r\n                    return;\r\n                }\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    showError('Please enter a valid selling price');\r\n                    alert('⚠️ Validation Error:\\nPlease enter a valid selling price (must be greater than 0).');\r\n                    document.getElementById('sellingPrice').focus();\r\n                    return;\r\n                }\r\n                if (sellingPrice < costPrice) {\r\n                    showError('Selling price cannot be less than cost price');\r\n                    alert('⚠️ Validation Error:\\nSelling price cannot be less than cost price.\\nThis would result in a loss!');\r\n                    document.getElementById('sellingPrice').focus();\r\n                    return;\r\n                }\r\n                if (!saleDate) {\r\n                    showError('Please select a sale date');\r\n                    alert('⚠️ Validation Error:\\nPlease select the sale date.');\r\n                    document.getElementById('saleDate').focus();\r\n                    return;\r\n                }\r\n                if (!customerName) {\r\n                    showError('Please enter customer name');\r\n                    alert('⚠️ Validation Error:\\nPlease enter the customer name to proceed.');\r\n                    document.getElementById('customerName').focus();\r\n                    return;\r\n                }\r\n\r\n                // Save customer to database automatically when adding sale\r\n                saveCustomerFromSale(customerName, customerPhone, customerAddress);\r\n\r\n                // Create sale record with multiple categories\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: selectedCategories.join(', '), // Join multiple categories with comma\r\n                    categories: selectedCategories, // Keep array for advanced filtering\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    alert('⚠️ Storage Error!\\n\\nFailed to save the sale record to local storage:\\n\\n' + storageError.message + '\\n\\nThis might be due to storage limits or browser settings. Please try clearing some browser data or contact support.');\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                document.getElementById('customerSearch').value = '';\r\n                document.getElementById('customer-search-results').style.display = 'none';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Clear selected categories\r\n                clearAllCategories();\r\n\r\n                // Reset sales display to show latest sales\r\n                resetSalesDisplay();\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Show success message\r\n                showSuccess('✅ Sale record added successfully! Customer saved to database.');\r\n                alert('✅ Success!\\n\\nSale record has been added successfully!\\n\\n📊 Details:\\n• Item: ' + itemName + '\\n• Categories: ' + selectedCategories.join(', ') + '\\n• Customer: ' + customerName + '\\n• Profit: ₹' + (sellingPrice - costPrice).toFixed(2));\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                showError('Error adding sale record: ' + error.message);\r\n                alert('❌ Error!\\n\\nAn unexpected error occurred while adding the sale record:\\n\\n' + error.message + '\\n\\nPlease try again or contact support if the problem persists.');\r\n            }\r\n        }\r\n\r\n        // Save customer from sale entry automatically\r\n        function saveCustomerFromSale(customerName, customerPhone, customerAddress) {\r\n            try {\r\n                if (!customerName.trim()) return;\r\n\r\n                // Check if customer already exists by name or phone\r\n                const existingCustomerIndex = customersData.findIndex(customer =>\r\n                    customer.name.toLowerCase() === customerName.toLowerCase() ||\r\n                    (customerPhone && customer.phone === customerPhone)\r\n                );\r\n\r\n                if (existingCustomerIndex !== -1) {\r\n                    // Update existing customer with any new information\r\n                    const existingCustomer = customersData[existingCustomerIndex];\r\n                    let updated = false;\r\n\r\n                    if (customerPhone && customerPhone !== existingCustomer.phone && existingCustomer.phone === 'Not provided') {\r\n                        existingCustomer.phone = customerPhone;\r\n                        updated = true;\r\n                    }\r\n\r\n                    if (customerAddress && customerAddress !== existingCustomer.address && existingCustomer.address === 'Not provided') {\r\n                        existingCustomer.address = customerAddress;\r\n                        updated = true;\r\n                    }\r\n\r\n                    // Update last purchase date\r\n                    existingCustomer.lastPurchase = new Date().toISOString();\r\n                    updated = true;\r\n\r\n                    if (updated) {\r\n                        customersData[existingCustomerIndex] = existingCustomer;\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                    }\r\n                } else {\r\n                    // Add new customer\r\n                    const newCustomer = {\r\n                        id: Date.now(),\r\n                        name: customerName,\r\n                        phone: customerPhone || 'Not provided',\r\n                        address: customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        status: 'active',\r\n                        notes: `Auto-added from sale entry on ${new Date().toLocaleDateString()}`,\r\n                        createdAt: new Date().toISOString(),\r\n                        lastPurchase: new Date().toISOString()\r\n                    };\r\n\r\n                    customersData.push(newCustomer);\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                }\r\n            } catch (error) {\r\n                console.error('Error saving customer from sale:', error);\r\n                // Don't throw error to not interrupt sale process\r\n            }\r\n        }\r\n\r\n        // Show success message\r\n        function showSuccess(message) {\r\n            const successDiv = document.getElementById('success-message');\r\n            const errorDiv = document.getElementById('error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show error message\r\n        function showError(message) {\r\n            const errorDiv = document.getElementById('error-message');\r\n            const successDiv = document.getElementById('success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n\r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n            const dailyReportDiv = document.getElementById('daily-sales-report');\r\n\r\n            countElement.textContent = salesData.length;\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                dailyReportDiv.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n\r\n            // Update daily sales report\r\n            updateDailySalesReport();\r\n            dailyReportDiv.style.display = 'block';\r\n\r\n            // Show sales with pagination\r\n            const recentSales = salesData.slice().reverse(); // All sales in reverse order\r\n            const salesToShow = recentSales.slice(0, displayedSalesCount);\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n\r\n            container.innerHTML = salesToShow.map(sale => `\r\n                <div class=\"sales-item\" id=\"sale-item-${sale.id}\">\r\n                    <div class=\"action-buttons\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale(${sale.id})\" title=\"Edit Sale\">✏️</button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\" title=\"Delete Sale\">🗑️</button>\r\n                    </div>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n\r\n            // Show/hide Load More button\r\n            if (recentSales.length > displayedSalesCount) {\r\n                loadMoreContainer.style.display = 'block';\r\n                const remainingCount = recentSales.length - displayedSalesCount;\r\n                document.getElementById('load-more-btn').innerHTML = `📖 Load More Sales (${remainingCount} remaining)`;\r\n            } else {\r\n                loadMoreContainer.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Daily Sales Report variables\r\n        let isDailyViewDetailed = false;\r\n\r\n        // Update Daily Sales Report\r\n        function updateDailySalesReport() {\r\n            const dailyStats = calculateDailyStats();\r\n            const contentDiv = document.getElementById('daily-sales-content');\r\n\r\n            if (Object.keys(dailyStats).length === 0) {\r\n                contentDiv.innerHTML = '<p>No daily sales data available.</p>';\r\n                return;\r\n            }\r\n\r\n            // Always show detailed view\r\n            contentDiv.innerHTML = generateDetailedDailyView(dailyStats);\r\n        }\r\n\r\n        // Calculate Daily Statistics\r\n        function calculateDailyStats() {\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const saleDate = sale.saleDate;\r\n\r\n                if (!dailyStats[saleDate]) {\r\n                    dailyStats[saleDate] = {\r\n                        date: saleDate,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        categories: {},\r\n                        customers: new Set(),\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: '',\r\n                        topCustomer: ''\r\n                    };\r\n                }\r\n\r\n                const dayData = dailyStats[saleDate];\r\n                dayData.totalSales++;\r\n                dayData.totalRevenue += sale.sellingPrice;\r\n                dayData.totalCost += sale.costPrice;\r\n                dayData.totalProfit += sale.profit;\r\n                dayData.customers.add(sale.customerName);\r\n\r\n                // Category breakdown\r\n                if (!dayData.categories[sale.category]) {\r\n                    dayData.categories[sale.category] = {\r\n                        count: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dayData.categories[sale.category].count++;\r\n                dayData.categories[sale.category].revenue += sale.sellingPrice;\r\n                dayData.categories[sale.category].profit += sale.profit;\r\n            });\r\n\r\n            // Calculate derived stats\r\n            Object.values(dailyStats).forEach(day => {\r\n                day.avgOrderValue = day.totalRevenue / day.totalSales;\r\n                day.profitMargin = (day.totalProfit / day.totalRevenue) * 100;\r\n                day.uniqueCustomers = day.customers.size;\r\n\r\n                // Find top category by revenue\r\n                let topCategoryRevenue = 0;\r\n                Object.entries(day.categories).forEach(([category, data]) => {\r\n                    if (data.revenue > topCategoryRevenue) {\r\n                        topCategoryRevenue = data.revenue;\r\n                        day.topCategory = category;\r\n                    }\r\n                });\r\n            });\r\n\r\n            return dailyStats;\r\n        }\r\n\r\n        // Generate Compact Daily View\r\n        function generateCompactDailyView(dailyStats) {\r\n            const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n            const recentDays = sortedDays.slice(0, 7); // Show last 7 days\r\n\r\n            return `\r\n                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;\">\r\n                    ${recentDays.map(day => `\r\n                        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; cursor: pointer;\" onclick=\"showDayDetails('${day.date}')\">\r\n                            <div style=\"display: flex; justify-content: between; align-items: center; margin-bottom: 10px;\">\r\n                                <h5 style=\"margin: 0; font-size: 14px; opacity: 0.9;\">${new Date(day.date).toLocaleDateString()}</h5>\r\n                                <span style=\"font-size: 12px; opacity: 0.8;\">📅</span>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 20px; font-weight: bold; margin-bottom: 2px;\">${day.totalSales}</div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Sales</div>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 16px; font-weight: bold; margin-bottom: 2px;\">₹${day.totalRevenue.toFixed(0)}</div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Revenue</div>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 14px; font-weight: bold; margin-bottom: 2px; color: ${day.profitMargin >= 20 ? '#4ade80' : day.profitMargin >= 10 ? '#fbbf24' : '#f87171'};\">\r\n                                    ${day.profitMargin.toFixed(1)}%\r\n                                </div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Profit Margin</div>\r\n                            </div>\r\n                            <div style=\"font-size: 11px; opacity: 0.7; margin-top: 8px;\">\r\n                                Top: ${day.topCategory}\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n                ${sortedDays.length > 7 ? `\r\n                    <div style=\"text-align: center; margin-top: 15px;\">\r\n                        <button onclick=\"showAllDays()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 12px;\">\r\n                            📊 View All ${sortedDays.length} Days\r\n                        </button>\r\n                    </div>\r\n                ` : ''}\r\n            `;\r\n        }\r\n\r\n        // Generate Detailed Daily View\r\n        function generateDetailedDailyView(dailyStats) {\r\n            const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n            return `\r\n                <div style=\"max-height: 500px; overflow-y: auto;\">\r\n                    ${sortedDays.map(day => {\r\n                        const salesForDay = salesData.filter(sale => sale.saleDate === day.date);\r\n\r\n                        return `\r\n                            <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin-bottom: 15px;\">\r\n                                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                                    <h5 style=\"margin: 0; font-size: 16px;\">${new Date(day.date).toLocaleDateString('en-US', {\r\n                                        weekday: 'long',\r\n                                        year: 'numeric',\r\n                                        month: 'long',\r\n                                        day: 'numeric'\r\n                                    })}</h5>\r\n                                    <div style=\"font-size: 12px; opacity: 0.8;\">\r\n                                        ${day.totalSales} sales • ₹${day.totalRevenue.toFixed(0)} revenue • ₹${day.totalProfit.toFixed(0)} profit\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <!-- Individual Sales Records -->\r\n                                <div style=\"background: rgba(255,255,255,0.05); border-radius: 6px; padding: 10px;\">\r\n                                    <h6 style=\"margin: 0 0 10px 0; font-size: 12px; opacity: 0.9;\">📋 Sales Records:</h6>\r\n                                    <div style=\"display: flex; flex-direction: column; gap: 8px;\">\r\n                                        ${salesForDay.map((sale, index) => `\r\n                                            <div style=\"background: rgba(255,255,255,0.1); padding: 12px; border-radius: 6px; display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 1fr; gap: 15px; align-items: center; font-size: 12px;\">\r\n                                                <div style=\"font-weight: bold;\">\r\n                                                    <div style=\"font-size: 13px; margin-bottom: 2px;\">${sale.itemName}</div>\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">👤 ${sale.customerName}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Category</div>\r\n                                                    <div style=\"font-weight: bold;\">${sale.category}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Cost</div>\r\n                                                    <div style=\"font-weight: bold;\">₹${sale.costPrice.toFixed(0)}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Selling</div>\r\n                                                    <div style=\"font-weight: bold;\">₹${sale.sellingPrice.toFixed(0)}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Profit</div>\r\n                                                    <div style=\"font-weight: bold; color: ${sale.profit >= 0 ? '#4ade80' : '#f87171'};\">₹${sale.profit.toFixed(0)}</div>\r\n                                                </div>\r\n                                            </div>\r\n                                        `).join('')}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        `;\r\n                    }).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Toggle Daily Sales View (function kept for compatibility)\r\n        function toggleDailySalesView() {\r\n            // Function removed - always show detailed view\r\n        }\r\n\r\n        // Show specific day details (future enhancement)\r\n        function showDayDetails(date) {\r\n            const dailyStats = calculateDailyStats();\r\n            const dayData = dailyStats[date];\r\n\r\n            if (!dayData) return;\r\n\r\n            const salesForDay = salesData.filter(sale => sale.saleDate === date);\r\n\r\n            alert(`📅 Sales Details for ${new Date(date).toLocaleDateString()}\r\n\r\n📊 Summary:\r\n• Total Sales: ${dayData.totalSales}\r\n• Revenue: ₹${dayData.totalRevenue.toFixed(2)}\r\n• Profit: ₹${dayData.totalProfit.toFixed(2)}\r\n• Profit Margin: ${dayData.profitMargin.toFixed(1)}%\r\n• Unique Customers: ${dayData.uniqueCustomers}\r\n• Average Order Value: ₹${dayData.avgOrderValue.toFixed(2)}\r\n\r\n🏷️ Categories:\r\n${Object.entries(dayData.categories).map(([cat, data]) =>\r\n`• ${cat}: ${data.count} sales (₹${data.revenue.toFixed(2)})`\r\n).join('\\n')}\r\n\r\n👥 Customers:\r\n${[...dayData.customers].join(', ')}`);\r\n        }\r\n\r\n        // Show all days (future enhancement)\r\n        function showAllDays() {\r\n            isDailyViewDetailed = true;\r\n            updateDailySalesReport();\r\n            document.getElementById('daily-view-toggle').textContent = '📋 Compact View';\r\n        }\r\n\r\n        // Export Daily Sales Report\r\n        function exportDailySalesReport() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available to export!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const dailyStats = calculateDailyStats();\r\n                const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n                // Prepare data for export\r\n                const reportData = sortedDays.map(day => ({\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Day of Week': new Date(day.date).toLocaleDateString('en-US', { weekday: 'long' }),\r\n                    'Total Sales': day.totalSales,\r\n                    'Total Revenue (₹)': day.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': day.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': day.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': day.profitMargin.toFixed(2),\r\n                    'Average Order Value (₹)': day.avgOrderValue.toFixed(2),\r\n                    'Unique Customers': day.uniqueCustomers,\r\n                    'Top Category': day.topCategory,\r\n                    'Categories Count': Object.keys(day.categories).length\r\n                }));\r\n\r\n                // Create detailed category breakdown sheet\r\n                const categoryData = [];\r\n                sortedDays.forEach(day => {\r\n                    Object.entries(day.categories).forEach(([category, data]) => {\r\n                        categoryData.push({\r\n                            'Date': new Date(day.date).toLocaleDateString(),\r\n                            'Category': category,\r\n                            'Sales Count': data.count,\r\n                            'Revenue (₹)': data.revenue.toFixed(2),\r\n                            'Profit (₹)': data.profit.toFixed(2),\r\n                            'Avg Sale Value (₹)': (data.revenue / data.count).toFixed(2)\r\n                        });\r\n                    });\r\n                });\r\n\r\n                // Create workbook\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Add main daily report sheet\r\n                const ws1 = XLSX.utils.json_to_sheet(reportData);\r\n                XLSX.utils.book_append_sheet(wb, ws1, 'Daily Sales Summary');\r\n\r\n                // Add category breakdown sheet\r\n                const ws2 = XLSX.utils.json_to_sheet(categoryData);\r\n                XLSX.utils.book_append_sheet(wb, ws2, 'Daily Category Breakdown');\r\n\r\n                // Export file\r\n                const fileName = `Daily_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Daily Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting daily sales report:', error);\r\n                alert('Error exporting report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n\r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Edit sale functionality\r\n        let currentEditingSaleId = null;\r\n\r\n        function editSale(id) {\r\n            // Check if another sale is being edited\r\n            if (currentEditingSaleId && currentEditingSaleId !== id) {\r\n                showError('Please finish editing the current sale before editing another one.');\r\n                return;\r\n            }\r\n\r\n            const sale = salesData.find(s => s.id === id);\r\n            if (!sale) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const saleItem = document.getElementById(`sale-item-${id}`);\r\n            if (!saleItem) {\r\n                showError('Sale item not found in DOM!');\r\n                return;\r\n            }\r\n\r\n            currentEditingSaleId = id;\r\n\r\n            // Create edit form\r\n            const editForm = `\r\n                <div class=\"edit-form\">\r\n                    <h4>✏️ Edit Sale Record</h4>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-itemName-${id}\">Item Name *</label>\r\n                            <input type=\"text\" id=\"edit-itemName-${id}\" value=\"${sale.itemName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-category-${id}\">Category *</label>\r\n                            <select id=\"edit-category-${id}\" required>\r\n                                <option value=\"Necklaces\" ${sale.category === 'Necklaces' ? 'selected' : ''}>Necklaces</option>\r\n                                <option value=\"Earrings\" ${sale.category === 'Earrings' ? 'selected' : ''}>Earrings</option>\r\n                                <option value=\"Bracelets\" ${sale.category === 'Bracelets' ? 'selected' : ''}>Bracelets</option>\r\n                                <option value=\"Rings\" ${sale.category === 'Rings' ? 'selected' : ''}>Rings</option>\r\n                                <option value=\"Anklets\" ${sale.category === 'Anklets' ? 'selected' : ''}>Anklets</option>\r\n                                <option value=\"Sets\" ${sale.category === 'Sets' ? 'selected' : ''}>Sets</option>\r\n                                <option value=\"Bangles\" ${sale.category === 'Bangles' ? 'selected' : ''}>Bangles</option>\r\n                                <option value=\"Chains\" ${sale.category === 'Chains' ? 'selected' : ''}>Chains</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-costPrice-${id}\">Cost Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-costPrice-${id}\" value=\"${sale.costPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-sellingPrice-${id}\">Selling Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-sellingPrice-${id}\" value=\"${sale.sellingPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-profit-${id}\">Profit (₹)</label>\r\n                            <input type=\"number\" id=\"edit-profit-${id}\" value=\"${sale.profit}\" readonly style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-saleDate-${id}\">Sale Date *</label>\r\n                            <input type=\"date\" id=\"edit-saleDate-${id}\" value=\"${sale.saleDate}\" required>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerName-${id}\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"edit-customerName-${id}\" value=\"${sale.customerName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerPhone-${id}\">Customer Phone</label>\r\n                            <input type=\"tel\" id=\"edit-customerPhone-${id}\" value=\"${sale.customerPhone}\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-group\">\r\n                        <label for=\"edit-customerAddress-${id}\">Customer Address</label>\r\n                        <textarea id=\"edit-customerAddress-${id}\" rows=\"2\">${sale.customerAddress || ''}</textarea>\r\n                    </div>\r\n                    <div class=\"edit-form-buttons\">\r\n                        <button class=\"save-edit-btn\" onclick=\"saveSaleEdit(${id})\">💾 Save Changes</button>\r\n                        <button class=\"cancel-edit-btn\" onclick=\"cancelSaleEdit(${id})\">❌ Cancel</button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            saleItem.innerHTML = editForm;\r\n\r\n            // Scroll the edited item into view\r\n            saleItem.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n\r\n        function calculateEditProfit(id) {\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            document.getElementById(`edit-profit-${id}`).value = profit.toFixed(2);\r\n        }\r\n\r\n        function saveSaleEdit(id) {\r\n            const itemName = document.getElementById(`edit-itemName-${id}`).value.trim();\r\n            const category = document.getElementById(`edit-category-${id}`).value;\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value);\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value);\r\n            const saleDate = document.getElementById(`edit-saleDate-${id}`).value;\r\n            const customerName = document.getElementById(`edit-customerName-${id}`).value.trim();\r\n            const customerPhone = document.getElementById(`edit-customerPhone-${id}`).value.trim();\r\n            const customerAddress = document.getElementById(`edit-customerAddress-${id}`).value.trim();\r\n\r\n            // Validation\r\n            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                showError('Please fill in all required fields marked with *');\r\n                return;\r\n            }\r\n\r\n            if (costPrice < 0 || sellingPrice < 0) {\r\n                showError('Cost price and selling price must be positive numbers');\r\n                return;\r\n            }\r\n\r\n            // Find and update the sale\r\n            const saleIndex = salesData.findIndex(s => s.id === id);\r\n            if (saleIndex === -1) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            // Update the sale data\r\n            salesData[saleIndex] = {\r\n                ...salesData[saleIndex],\r\n                itemName,\r\n                category,\r\n                costPrice,\r\n                sellingPrice,\r\n                profit,\r\n                saleDate,\r\n                customerName,\r\n                customerPhone: customerPhone || 'Not provided',\r\n                customerAddress: customerAddress || 'Not provided'\r\n            };\r\n\r\n            // Save to localStorage\r\n            localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n            // Reset editing state\r\n            currentEditingSaleId = null;\r\n\r\n            // Refresh displays\r\n            loadSalesRecords();\r\n            updateDashboard();\r\n            loadCustomers();\r\n\r\n            showSuccess('Sale record updated successfully!');\r\n        }\r\n\r\n        function cancelSaleEdit(id) {\r\n            currentEditingSaleId = null;\r\n            loadSalesRecords();\r\n        }\r\n\r\n        // Load more sales functionality\r\n        function loadMoreSales() {\r\n            displayedSalesCount += 20; // Load 20 more sales\r\n            loadSalesRecords();\r\n\r\n            // Smooth scroll to maintain position\r\n            const loadMoreBtn = document.getElementById('load-more-btn');\r\n            setTimeout(() => {\r\n                loadMoreBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }, 100);\r\n        }\r\n\r\n        // Reset displayed sales count when needed\r\n        function resetSalesDisplay() {\r\n            displayedSalesCount = 20;\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n\r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n\r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n\r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n\r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n\r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n\r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n\r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n\r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n\r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer =>\r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers with enhanced display\r\n        function loadCustomers() {\r\n            const countElement = document.getElementById('customers-count');\r\n            countElement.textContent = customersData.length;\r\n\r\n            // Reset pagination and filters when loading fresh data\r\n            currentCustomerPage = 1;\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n\r\n            // Clear search and sort inputs\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            currentCustomerSort = 'name-asc';\r\n\r\n            // Display the enhanced customer database\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        // Download customers Excel report\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const customersWithStats = customersData.map(customer => {\r\n                    const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                    const lastPurchase = customerSales.length > 0 ?\r\n                        new Date(Math.max(...customerSales.map(sale => new Date(sale.saleDate)))).toLocaleDateString() : 'Never';\r\n\r\n                    return {\r\n                        'Customer Name': customer.name,\r\n                        'Phone': customer.phone || 'Not provided',\r\n                        'Email': customer.email || 'Not provided',\r\n                        'Address': customer.address || 'Not provided',\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Average Order Value (₹)': totalPurchases > 0 ? (totalSpent / totalPurchases).toFixed(2) : 0,\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Customer Status': totalPurchases > 0 ? 'Active' : 'Inactive',\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Database');\r\n\r\n                const fileName = `Customer_Database_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Customer database exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting customers:', error);\r\n                showError('Error exporting customer data: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nThis will NOT affect sales records, but customer search functionality will be limited.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL CUSTOMERS\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL CUSTOMERS') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        updateCustomerCount();\r\n                        showSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL CUSTOMERS\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n\r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n\r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n\r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n\r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n\r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n\r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n\r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n\r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n\r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n\r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n\r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n\r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong>\r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' :\r\n                          month.profitMargin > 10 ? '📊 Good Performance' :\r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n\r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n\r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n\r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                    // Find top category\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n\r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' :\r\n                                         month.profitMargin > 10 ? 'Good' :\r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n\r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n\r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n\r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n\r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n\r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong>\r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' :\r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' :\r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n\r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong>\r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' :\r\n                          cat.salesPercentage > 20 ? '📈 High Demand' :\r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' :\r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n\r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n\r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n\r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n\r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n\r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' :\r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' :\r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n\r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Customer Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n\r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' :\r\n                                   cat.salesPercentage > 20 ? 'High Demand' :\r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' :\r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n\r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Category Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n\r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n\r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n\r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n\r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Sales Trends exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Mobile-friendly alert function\r\n        function mobileAlert(title, message, type = 'info') {\r\n            // For now, use native alert but this can be enhanced with custom modal\r\n            if (type === 'error') {\r\n                alert('❌ ' + title + '\\n\\n' + message);\r\n            } else if (type === 'success') {\r\n                alert('✅ ' + title + '\\n\\n' + message);\r\n            } else if (type === 'warning') {\r\n                alert('⚠️ ' + title + '\\n\\n' + message);\r\n            } else {\r\n                alert('ℹ️ ' + title + '\\n\\n' + message);\r\n            }\r\n        }\r\n\r\n        // ======== PURCHASE HISTORY FUNCTIONS ========\r\n\r\n        // Purchase history data\r\n        let purchaseData = [];\r\n\r\n        // Initialize purchase data from localStorage\r\n        function initializePurchaseData() {\r\n            const savedPurchases = localStorage.getItem('jewelryPurchases');\r\n            if (savedPurchases) {\r\n                purchaseData = JSON.parse(savedPurchases);\r\n            } else {\r\n                purchaseData = [];\r\n            }\r\n        }\r\n\r\n        // Save purchase data to localStorage\r\n        function savePurchaseData() {\r\n            localStorage.setItem('jewelryPurchases', JSON.stringify(purchaseData));\r\n        }\r\n\r\n        // Toggle purchase history section\r\n        function togglePurchaseSection() {\r\n            const container = document.getElementById('purchase-content-container');\r\n            const toggleBtn = document.getElementById('purchase-toggle-btn');\r\n\r\n            if (container.classList.contains('collapsed')) {\r\n                container.classList.remove('collapsed');\r\n                toggleBtn.title = 'Collapse Purchase History';\r\n                container.classList.add('expanded');\r\n                toggleBtn.textContent = '▼';\r\n                toggleBtn.classList.remove('collapsed');\r\n                loadPurchaseHistory();\r\n            } else {\r\n                container.classList.remove('expanded');\r\n                container.classList.add('collapsed');\r\n                toggleBtn.title = 'Expand Purchase History';\r\n                toggleBtn.textContent = '►';\r\n                toggleBtn.classList.add('collapsed');\r\n            }\r\n        }\r\n\r\n        // Load and display purchase history\r\n        function loadPurchaseHistory() {\r\n            initializePurchaseData();\r\n            updatePurchaseSummary();\r\n            displayPurchaseRecords();\r\n            updatePurchaseCount();\r\n        }\r\n\r\n        // Update purchase summary statistics\r\n        function updatePurchaseSummary() {\r\n            const totalPurchases = purchaseData.length;\r\n            const totalPurchaseCost = purchaseData.reduce((sum, item) => sum + item.purchaseCost, 0);\r\n            const totalSellingValue = purchaseData.reduce((sum, item) => sum + item.sellingPrice, 0);\r\n            const potentialProfit = totalSellingValue - totalPurchaseCost;\r\n\r\n            document.getElementById('summary-total-purchases').textContent = totalPurchases;\r\n            document.getElementById('summary-total-purchase-cost').textContent = `₹${totalPurchaseCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling-value').textContent = `₹${totalSellingValue.toFixed(2)}`;\r\n            document.getElementById('summary-potential-profit').textContent = `₹${potentialProfit.toFixed(2)}`;\r\n        }\r\n\r\n        // Update purchase count\r\n        function updatePurchaseCount() {\r\n            document.getElementById('purchase-count').textContent = purchaseData.length;\r\n        }\r\n\r\n        // Display purchase records\r\n        function displayPurchaseRecords() {\r\n            const container = document.getElementById('purchase-records');\r\n            const noDataMessage = document.getElementById('no-purchase-message');\r\n\r\n            if (purchaseData.length === 0) {\r\n                container.innerHTML = '';\r\n                noDataMessage.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            noDataMessage.style.display = 'none';\r\n\r\n            // Sort by purchase date (newest first)\r\n            const sortedPurchases = [...purchaseData].sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate));\r\n\r\n            container.innerHTML = sortedPurchases.map((item, index) => {\r\n                const profitMargin = ((item.sellingPrice - item.purchaseCost) / item.sellingPrice * 100).toFixed(1);\r\n                const profit = item.sellingPrice - item.purchaseCost;\r\n                const profitColor = profit >= 0 ? '#10B981' : '#EF4444';\r\n                const statusColor = item.status === 'sold' ? '#10B981' : item.status === 'reserved' ? '#F59E0B' : '#6B7280';\r\n\r\n                return `\r\n                    <div class=\"purchase-record-item\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <h4 style=\"color: #333; margin: 0 0 5px 0; font-size: 16px;\">${item.itemName}</h4>\r\n                                <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\r\n                                    <span style=\"background: #667eea; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;\">\r\n                                        ${getCategoryIcon(item.category)} ${item.category}\r\n                                    </span>\r\n                                    <span style=\"background: ${statusColor}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px; text-transform: uppercase;\">\r\n                                        ${item.status || 'Available'}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div style=\"text-align: right;\">\r\n                                <div style=\"display: flex; gap: 5px;\">\r\n                                    <button onclick=\"editPurchaseRecord(${index})\" style=\"background: #4ecdc4; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Edit\">\r\n                                        ✏️\r\n                                    </button>\r\n                                    <button onclick=\"deletePurchaseRecord(${index})\" style=\"background: #ff6b6b; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Delete\">\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💰 Purchase Cost:</strong> ₹${item.purchaseCost.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💎 Selling Price:</strong> ₹${item.sellingPrice.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: ${profitColor}; font-size: 14px;\">\r\n                                    <strong>📈 Potential Profit:</strong> ₹${profit.toFixed(2)} (${profitMargin}%)\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📅 Purchase Date:</strong> ${new Date(item.purchaseDate).toLocaleDateString()}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>🏪 Supplier:</strong> ${item.supplier || 'Not specified'}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📦 Quantity:</strong> ${item.quantity || 1}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        ${item.notes ? `\r\n                            <div style=\"background: #f8f9fa; padding: 10px; border-radius: 6px; margin-top: 10px;\">\r\n                                <p style=\"margin: 0; color: #666; font-size: 13px;\">\r\n                                    <strong>📝 Notes:</strong> ${item.notes}\r\n                                </p>\r\n                            </div>\r\n                        ` : ''}\r\n                    </div>\r\n                `;\r\n            }).join('');\r\n        }\r\n\r\n        // Add new purchase record - Show form instead of prompts\r\n        function addToPurchaseHistory() {\r\n            const form = document.getElementById('add-purchase-form');\r\n            if (form.style.display === 'none' || form.style.display === '') {\r\n                // Show the form and scroll to it\r\n                form.style.display = 'block';\r\n                form.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n\r\n                // Clear any previous values\r\n                document.getElementById('supplier-name').value = '';\r\n                document.getElementById('purchase-name').value = '';\r\n                document.getElementById('purchase-cost').value = '';\r\n                document.getElementById('purchase-category').value = '';\r\n                document.getElementById('selling-price').value = '';\r\n                document.getElementById('purchase-quantity').value = '1';\r\n                document.getElementById('purchase-notes').value = '';\r\n                } else {\r\n                // Hide the form if it's already shown\r\n                form.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Cancel adding purchase - Hide the form\r\n        function cancelAddPurchase() {\r\n            const form = document.getElementById('add-purchase-form');\r\n            form.style.display = 'none';\r\n        }\r\n\r\n        // Save purchase from form data\r\n        function savePurchaseFromForm() {\r\n            const supplierName = document.getElementById('supplier-name').value.trim();\r\n            const purchaseName = document.getElementById('purchase-name').value.trim();\r\n            const purchaseCost = parseFloat(document.getElementById('purchase-cost').value);\r\n            const category = document.getElementById('purchase-category').value.trim();\r\n                // Focus on the first input\r\n                document.getElementById('supplier-name').focus();\r\n\r\n            const sellingPrice = parseFloat(document.getElementById('selling-price').value);\r\n            const quantity = parseInt(document.getElementById('purchase-quantity').value) || 1;\r\n            const notes = document.getElementById('purchase-notes').value.trim();\r\n\r\n            // Validation\r\n            if (!supplierName) {\r\n                alert('❌ Please enter supplier name.');\r\n                document.getElementById('supplier-name').focus();\r\n                return;\r\n            }\r\n\r\n            if (!purchaseName) {\r\n                alert('❌ Please enter purchase name (item name).');\r\n                document.getElementById('purchase-name').focus();\r\n                return;\r\n            }\r\n\r\n            if (isNaN(purchaseCost) || purchaseCost <= 0) {\r\n                alert('❌ Please enter a valid purchase cost.');\r\n                document.getElementById('purchase-cost').focus();\r\n                return;\r\n            }\r\n\r\n            if (sellingPrice && (isNaN(sellingPrice) || sellingPrice <= 0)) {\r\n                alert('❌ Please enter a valid selling price or leave it empty.');\r\n                document.getElementById('selling-price').focus();\r\n                return;\r\n            }\r\n\r\n            // Create purchase record\r\n            const purchaseRecord = {\r\n                id: Date.now().toString(),\r\n                itemName: purchaseName,\r\n                category: category || 'General',\r\n                purchaseCost: purchaseCost,\r\n                sellingPrice: sellingPrice || 0,\r\n                supplier: supplierName,\r\n                quantity: quantity,\r\n                status: 'available',\r\n                purchaseDate: new Date().toISOString().split('T')[0],\r\n                notes: notes\r\n            };\r\n\r\n            // Add to data and save\r\n            purchaseData.unshift(purchaseRecord);\r\n            savePurchaseData();\r\n            loadPurchaseHistory();\r\n\r\n            // Hide form and show success message\r\n            document.getElementById('add-purchase-form').style.display = 'none';\r\n            alert('✅ Purchase record added successfully!');\r\n        }\r\n\r\n        // Handle Enter key in purchase form\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            const purchaseFormInputs = document.querySelectorAll('#add-purchase-form input, #add-purchase-form textarea');\r\n            purchaseFormInputs.forEach(input => {\r\n                input.addEventListener('keypress', function(e) {\r\n                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                        e.preventDefault();\r\n                        // If it's the last input or textarea, save the form\r\n                        if (input.id === 'purchase-notes') {\r\n                            savePurchaseFromForm();\r\n                        } else {\r\n                            // Move to next input\r\n                            const inputs = Array.from(purchaseFormInputs);\r\n                            const currentIndex = inputs.indexOf(input);\r\n                            if (currentIndex < inputs.length - 1) {\r\n                                inputs[currentIndex + 1].focus();\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        // Edit purchase record\r\n        function editPurchaseRecord(index) {\r\n            const item = purchaseData[index];\r\n            if (!item) return;\r\n\r\n            const newItemName = prompt('Edit item name:', item.itemName);\r\n            if (newItemName === null) return;\r\n\r\n            const newCategory = prompt('Edit category:', item.category);\r\n            if (newCategory === null) return;\r\n\r\n            const newPurchaseCost = parseFloat(prompt('Edit purchase cost:', item.purchaseCost));\r\n            if (isNaN(newPurchaseCost)) return;\r\n\r\n            const newSellingPrice = parseFloat(prompt('Edit selling price:', item.sellingPrice));\r\n            if (isNaN(newSellingPrice)) return;\r\n\r\n            const newSupplier = prompt('Edit supplier:', item.supplier || '');\r\n            const newQuantity = parseInt(prompt('Edit quantity:', item.quantity || 1));\r\n            const newNotes = prompt('Edit notes:', item.notes || '');\r\n\r\n            purchaseData[index] = {\r\n                ...item,\r\n                itemName: newItemName.trim(),\r\n                category: newCategory.trim(),\r\n                purchaseCost: newPurchaseCost,\r\n                sellingPrice: newSellingPrice,\r\n                supplier: (newSupplier || '').trim() || 'Not specified',\r\n                quantity: isNaN(newQuantity) ? 1 : newQuantity,\r\n                notes: (newNotes || '').trim()\r\n            };\r\n\r\n            savePurchaseData();\r\n            loadPurchaseHistory();\r\n            alert('✅ Purchase record updated successfully!');\r\n        }\r\n\r\n        // Delete purchase record\r\n        function deletePurchaseRecord(index) {\r\n            const item = purchaseData[index];\r\n            if (!item) return;\r\n\r\n            if (confirm(`Are you sure you want to delete \"${item.itemName}\"?`)) {\r\n                purchaseData.splice(index, 1);\r\n                savePurchaseData();\r\n                loadPurchaseHistory();\r\n                alert('🗑️ Purchase record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Filter purchases based on search\r\n        function filterPurchases() {\r\n            const searchTerm = document.getElementById('purchase-search').value.toLowerCase();\r\n\r\n            if (!searchTerm) {\r\n                displayPurchaseRecords();\r\n                return;\r\n            }\r\n\r\n            const filteredPurchases = purchaseData.filter(item =>\r\n                item.itemName.toLowerCase().includes(searchTerm) ||\r\n                item.category.toLowerCase().includes(searchTerm) ||\r\n                (item.supplier && item.supplier.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            const container = document.getElementById('purchase-records');\r\n            const noDataMessage = document.getElementById('no-purchase-message');\r\n\r\n            if (filteredPurchases.length === 0) {\r\n                container.innerHTML = '';\r\n                noDataMessage.style.display = 'block';\r\n                noDataMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Purchase Records Found</h3>\r\n                    <p>No purchases match your search term \"${searchTerm}\"</p>\r\n                `;\r\n                return;\r\n            }\r\n\r\n            noDataMessage.style.display = 'none';\r\n            // Display filtered results (reuse the same display logic)\r\n            const sortedPurchases = [...filteredPurchases].sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate));\r\n\r\n            container.innerHTML = sortedPurchases.map((item, index) => {\r\n                const originalIndex = purchaseData.findIndex(p => p.id === item.id);\r\n                const profitMargin = ((item.sellingPrice - item.purchaseCost) / item.sellingPrice * 100).toFixed(1);\r\n                const profit = item.sellingPrice - item.purchaseCost;\r\n                const profitColor = profit >= 0 ? '#10B981' : '#EF4444';\r\n                const statusColor = item.status === 'sold' ? '#10B981' : item.status === 'reserved' ? '#F59E0B' : '#6B7280';\r\n\r\n                return `\r\n                    <div class=\"purchase-record-item\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <h4 style=\"color: #333; margin: 0 0 5px 0; font-size: 16px;\">${item.itemName}</h4>\r\n                                <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\r\n                                    <span style=\"background: #667eea; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;\">\r\n                                        ${getCategoryIcon(item.category)} ${item.category}\r\n                                    </span>\r\n                                    <span style=\"background: ${statusColor}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px; text-transform: uppercase;\">\r\n                                        ${item.status || 'Available'}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div style=\"text-align: right;\">\r\n                                <div style=\"display: flex; gap: 5px;\">\r\n                                    <button onclick=\"editPurchaseRecord(${originalIndex})\" style=\"background: #4ecdc4; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Edit\">\r\n                                        ✏️\r\n                                    </button>\r\n                                    <button onclick=\"deletePurchaseRecord(${originalIndex})\" style=\"background: #ff6b6b; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Delete\">\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💰 Purchase Cost:</strong> ₹${item.purchaseCost.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💎 Selling Price:</strong> ₹${item.sellingPrice.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: ${profitColor}; font-size: 14px;\">\r\n                                    <strong>📈 Potential Profit:</strong> ₹${profit.toFixed(2)} (${profitMargin}%)\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📅 Purchase Date:</strong> ${new Date(item.purchaseDate).toLocaleDateString()}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>🏪 Supplier:</strong> ${item.supplier || 'Not specified'}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📦 Quantity:</strong> ${item.quantity || 1}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        ${item.notes ? `\r\n                            <div style=\"background: #f8f9fa; padding: 10px; border-radius: 6px; margin-top: 10px;\">\r\n                                <p style=\"margin: 0; color: #666; font-size: 13px;\">\r\n                                    <strong>📝 Notes:</strong> ${item.notes}\r\n                                </p>\r\n                            </div>\r\n                        ` : ''}\r\n                    </div>\r\n                `;\r\n            }).join('');\r\n        }\r\n\r\n        // Clear purchase search filter\r\n        function clearPurchaseFilter() {\r\n            document.getElementById('purchase-search').value = '';\r\n            displayPurchaseRecords();\r\n        }\r\n\r\n        // Export purchase history to Excel\r\n        function exportPurchaseHistory() {\r\n            if (purchaseData.length === 0) {\r\n                alert('No purchase records to export!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const dataToExport = purchaseData.map(item => ({\r\n                    'Item Name': item.itemName,\r\n                    'Category': item.category,\r\n                    'Purchase Cost (₹)': item.purchaseCost.toFixed(2),\r\n                    'Selling Price (₹)': item.sellingPrice.toFixed(2),\r\n                    'Potential Profit (₹)': (item.sellingPrice - item.purchaseCost).toFixed(2),\r\n                    'Profit Margin (%)': (((item.sellingPrice - item.purchaseCost) / item.sellingPrice) * 100).toFixed(1),\r\n                    'Purchase Date': item.purchaseDate,\r\n                    'Supplier': item.supplier || 'Not specified',\r\n                    'Quantity': item.quantity || 1,\r\n                    'Status': item.status || 'Available',\r\n                    'Notes': item.notes || ''\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(dataToExport);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Purchase History');\r\n\r\n                const fileName = `Purchase_History_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert(`📦 Purchase history exported successfully!\\n\\nFile: ${fileName}\\nRecords: ${purchaseData.length}`);\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting purchase history:', error);\r\n                alert('Error exporting purchase history: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Initialize purchase data when the app loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializePurchaseData();\r\n            updatePurchaseCount();\r\n        });\r\n    </script>\r\n\r\n    <!-- Mobile-friendly modal for alerts (future enhancement) -->\r\n    <div id=\"mobile-modal\" class=\"mobile-modal\">\r\n        <div class=\"mobile-modal-content\">\r\n            <div id=\"mobile-modal-header\" class=\"mobile-modal-header\"></div>\r\n            <div id=\"mobile-modal-body\" class=\"mobile-modal-body\"></div>\r\n            <div class=\"mobile-modal-buttons\">\r\n                <button id=\"mobile-modal-ok\" class=\"btn btn-primary\">OK</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1752345658377,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "modify the page in more user friendly /look and feel"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "fbeff6e8-cc54-41da-bc7d-462757238b57",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I'll help you make the jewelry sales management system more user-friendly with improved look and feel. Let me first examine the complete file to understand the current structure and then implement improvements."
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01C6bxiDRXVLvnM5zjyDkstC",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me see the rest of the file to understand the complete structure:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01L1qzdD1fBNMNuyTTUH9ct9",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me continue viewing the file to see the HTML structure and more CSS:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01DsQD6LkXBqbcZxtCeYqvdt",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me continue to see the HTML structure:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01TAkorEPdKpbG5oFa8J5BCT",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me continue to see the HTML body content:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_014myHc7R1gxB11i1veb5HeY",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now let me see the HTML body structure:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01W5mQQjavzb8XnWCrFJ6YQG",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now let me continue to see the HTML body structure:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_012pitYHoXKfpD37GnCAoxh9",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now I understand the structure. This is a comprehensive jewelry sales management system with modern styling. Let me implement several user-friendly improvements to enhance the look and feel:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01NxEdRAQo1P5w6FR6mpvzMx",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -244,13 +244,14 @@\n \n         /* ======== HEADER ======== */\n         .header {\n-            background: linear-gradient(135deg, var(--primary-600) 0%, var(--secondary-600) 100%);\n+            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);\n             color: white;\n             text-align: center;\n             padding: var(--space-8) var(--space-6);\n             position: relative;\n             overflow: hidden;\n             border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n+            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n         }\n \n         .header::before {",
                    "refToolCallId": "toolu_01NxEdRAQo1P5w6FR6mpvzMx"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01KGKMtmau6etaQf2xP1dPSG",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -267,12 +267,25 @@\n \n         .header h1 {\n             font-family: var(--font-secondary);\n-            font-size: clamp(1.8rem, 4vw, 2.5rem);\n-            font-weight: 700;\n+            font-size: clamp(1.8rem, 4vw, 2.8rem);\n+            font-weight: 800;\n             margin: 0;\n             position: relative;\n             z-index: 1;\n-            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n+            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n+            letter-spacing: 1px;\n+            animation: headerPulse 3s ease-in-out infinite;\n+        }\n+\n+        @keyframes headerPulse {\n+            0%, 100% { \n+                transform: scale(1);\n+                text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n+            }\n+            50% { \n+                transform: scale(1.02);\n+                text-shadow: 0 6px 12px rgba(0, 0, 0, 0.4), 0 0 20px rgba(255, 255, 255, 0.2);\n+            }\n         }\n \n         .header .subtitle {",
                    "refToolCallId": "toolu_01KGKMtmau6etaQf2xP1dPSG"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01RbG8HKAAerHqjQjBPMjZsW",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -153,11 +153,19 @@\n             font-size: 16px;\n             line-height: 1.6;\n             color: var(--neutral-800);\n-            background: linear-gradient(135deg, var(--primary-600) 0%, var(--secondary-600) 100%);\n+            background: linear-gradient(135deg, #667eea 0%, #764ba2 35%, #f093fb 70%, #f5576c 100%);\n+            background-size: 400% 400%;\n+            animation: gradientShift 15s ease infinite;\n             min-height: 100vh;\n             padding: var(--space-4);\n             overflow-x: hidden;\n             position: relative;\n+        }\n+\n+        @keyframes gradientShift {\n+            0% { background-position: 0% 50%; }\n+            50% { background-position: 100% 50%; }\n+            100% { background-position: 0% 50%; }\n         }\n \n         body::before {",
                    "refToolCallId": "toolu_01RbG8HKAAerHqjQjBPMjZsW"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_014otRZrjY5pd8MpNfysUzbq",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -670,12 +670,29 @@\n \n         /* Button Variants */\n         .btn-primary {\n-            background: linear-gradient(135deg, var(--primary-600), var(--primary-500));\n+            background: linear-gradient(135deg, #667eea, #764ba2);\n             color: white;\n             box-shadow:\n                 var(--shadow-md),\n-                0 0 20px rgba(99, 102, 241, 0.3);\n-            border: 1px solid rgba(255, 255, 255, 0.1);\n+                0 0 25px rgba(102, 126, 234, 0.4);\n+            border: 1px solid rgba(255, 255, 255, 0.2);\n+            position: relative;\n+            overflow: hidden;\n+        }\n+\n+        .btn-primary::after {\n+            content: '';\n+            position: absolute;\n+            top: 0;\n+            left: -100%;\n+            width: 100%;\n+            height: 100%;\n+            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n+            transition: left 0.5s ease;\n+        }\n+\n+        .btn-primary:hover::after {\n+            left: 100%;\n         }\n \n         .btn-primary::before {",
                    "refToolCallId": "toolu_014otRZrjY5pd8MpNfysUzbq"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01BecxPFwZ36Gs6WiqxBuLb3",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -504,13 +504,28 @@\n \n         .form-control:focus {\n             outline: none;\n-            border-color: var(--primary-600);\n+            border-color: #667eea;\n             box-shadow:\n-                0 0 0 3px var(--primary-100),\n-                0 4px 6px -1px rgba(0, 0, 0, 0.1),\n+                0 0 0 4px rgba(102, 126, 234, 0.2),\n+                0 8px 16px -4px rgba(0, 0, 0, 0.15),\n                 inset 0 1px 0 0 rgba(255, 255, 255, 0.5);\n-            transform: translateY(-2px);\n-            background: rgba(255, 255, 255, 0.95);\n+            transform: translateY(-3px) scale(1.01);\n+            background: rgba(255, 255, 255, 0.98);\n+            animation: inputFocus 0.3s ease;\n+        }\n+\n+        @keyframes inputFocus {\n+            0% {\n+                transform: translateY(0) scale(1);\n+                box-shadow: none;\n+            }\n+            50% {\n+                transform: translateY(-1px) scale(1.005);\n+            }\n+            100% {\n+                transform: translateY(-3px) scale(1.01);\n+                box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.2), 0 8px 16px -4px rgba(0, 0, 0, 0.15);\n+            }\n         }\n \n         .form-control:hover {",
                    "refToolCallId": "toolu_01BecxPFwZ36Gs6WiqxBuLb3"
                },
                {
                    "type": "text",
                    "text": "Now let me add improved visual feedback for interactions and better card designs:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_013gLq4yKb1yBdD42WV9caS8",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -941,15 +941,16 @@\n         }\n \n         .stat-card {\n-            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\n+            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);\n             color: white;\n             padding: var(--space-6);\n             border-radius: var(--radius-xl);\n             text-align: center;\n             position: relative;\n             overflow: hidden;\n-            box-shadow: var(--shadow-lg);\n-            transition: var(--transition-normal);\n+            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);\n+            transition: all var(--transition-normal);\n+            border: 1px solid rgba(255, 255, 255, 0.2);\n         }\n \n         .stat-card::before {",
                    "refToolCallId": "toolu_013gLq4yKb1yBdD42WV9caS8"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_014A3m3ig7uuR8dqqsjpLuUQ",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -964,8 +964,18 @@\n         }\n \n         .stat-card:hover {\n-            transform: translateY(-4px);\n-            box-shadow: var(--shadow-xl);\n+            transform: translateY(-8px) scale(1.02);\n+            box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);\n+            animation: statCardGlow 2s ease-in-out infinite;\n+        }\n+\n+        @keyframes statCardGlow {\n+            0%, 100% {\n+                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);\n+            }\n+            50% {\n+                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.6), 0 0 30px rgba(240, 147, 251, 0.3);\n+            }\n         }\n \n         .stat-card-icon {",
                    "refToolCallId": "toolu_014A3m3ig7uuR8dqqsjpLuUQ"
                },
                {
                    "type": "text",
                    "text": "Now let me add improved sales item cards with better visual design:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_012SmjoTY7a5JwSTYCT2x2CS",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -868,15 +868,29 @@\n \n         /* Sales Item Cards */\n         .sales-item {\n-            background: white;\n+            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);\n             border: 1px solid var(--neutral-200);\n-            border-left: 4px solid var(--primary-600);\n+            border-left: 6px solid #667eea;\n             border-radius: var(--radius-lg);\n             padding: var(--space-5);\n             margin-bottom: var(--space-4);\n             position: relative;\n-            transition: var(--transition-normal);\n-            box-shadow: var(--shadow-sm);\n+            transition: all var(--transition-normal);\n+            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\n+            overflow: hidden;\n+        }\n+\n+        .sales-item::before {\n+            content: '';\n+            position: absolute;\n+            top: 0;\n+            right: 0;\n+            width: 100px;\n+            height: 100px;\n+            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(240, 147, 251, 0.1));\n+            border-radius: 50%;\n+            transform: translate(50%, -50%);\n+            transition: all var(--transition-normal);\n         }\n \n         .sales-item:hover {",
                    "refToolCallId": "toolu_012SmjoTY7a5JwSTYCT2x2CS"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01VBSsoT9hd2sQzA1CJngFaD",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -894,9 +894,15 @@\n         }\n \n         .sales-item:hover {\n-            border-left-color: var(--accent-500);\n-            box-shadow: var(--shadow-md);\n-            transform: translateX(4px);\n+            border-left-color: #f093fb;\n+            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);\n+            transform: translateX(8px) translateY(-2px);\n+        }\n+\n+        .sales-item:hover::before {\n+            width: 120px;\n+            height: 120px;\n+            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(240, 147, 251, 0.2));\n         }\n \n         .sales-item-header {",
                    "refToolCallId": "toolu_01VBSsoT9hd2sQzA1CJngFaD"
                },
                {
                    "type": "text",
                    "text": "Now let me add floating action buttons and improved toast notifications:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01GUNZk5UAPffPo4pQRdgCpk",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -1261,8 +1261,9 @@\n         .toast-success {\n             border-left: 4px solid var(--success-500);\n             background: linear-gradient(135deg,\n-                rgba(16, 185, 129, 0.05) 0%,\n+                rgba(16, 185, 129, 0.1) 0%,\n                 rgba(255, 255, 255, 0.95) 100%);\n+            border: 1px solid rgba(16, 185, 129, 0.2);\n         }\n \n         .toast-success::after {",
                    "refToolCallId": "toolu_01GUNZk5UAPffPo4pQRdgCpk"
                },
                {
                    "type": "text",
                    "text": "Now let me add some CSS for improved visual hierarchy and icons:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01A5woLMvrxEXNYaRA7xNxgH",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -2591,6 +2591,117 @@\n                 max-height: 400px !important;\n                 -webkit-overflow-scrolling: touch;\n             }\n+        }\n+\n+        /* ======== ENHANCED VISUAL ELEMENTS ======== */\n+        .form-section h3 i {\n+            background: linear-gradient(135deg, #667eea, #764ba2);\n+            -webkit-background-clip: text;\n+            -webkit-text-fill-color: transparent;\n+            background-clip: text;\n+            font-size: 1.2em;\n+            margin-right: 8px;\n+            animation: iconShine 3s ease-in-out infinite;\n+        }\n+\n+        @keyframes iconShine {\n+            0%, 100% { opacity: 1; }\n+            50% { opacity: 0.7; }\n+        }\n+\n+        /* Floating Quick Actions */\n+        .floating-actions {\n+            position: fixed;\n+            bottom: 20px;\n+            right: 20px;\n+            z-index: 1000;\n+            display: flex;\n+            flex-direction: column;\n+            gap: 12px;\n+        }\n+\n+        .floating-btn {\n+            width: 56px;\n+            height: 56px;\n+            border-radius: 50%;\n+            background: linear-gradient(135deg, #667eea, #764ba2);\n+            color: white;\n+            border: none;\n+            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);\n+            cursor: pointer;\n+            display: flex;\n+            align-items: center;\n+            justify-content: center;\n+            font-size: 20px;\n+            transition: all 0.3s ease;\n+            position: relative;\n+            overflow: hidden;\n+        }\n+\n+        .floating-btn::before {\n+            content: '';\n+            position: absolute;\n+            top: 0;\n+            left: -100%;\n+            width: 100%;\n+            height: 100%;\n+            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n+            transition: left 0.5s ease;\n+        }\n+\n+        .floating-btn:hover {\n+            transform: scale(1.1);\n+            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);\n+        }\n+\n+        .floating-btn:hover::before {\n+            left: 100%;\n+        }\n+\n+        /* Progress indicators */\n+        .progress-bar {\n+            width: 100%;\n+            height: 8px;\n+            background: rgba(255, 255, 255, 0.2);\n+            border-radius: 4px;\n+            overflow: hidden;\n+            margin: 10px 0;\n+        }\n+\n+        .progress-fill {\n+            height: 100%;\n+            background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);\n+            background-size: 200% 100%;\n+            animation: progressShine 2s linear infinite;\n+            transition: width 0.5s ease;\n+        }\n+\n+        @keyframes progressShine {\n+            0% { background-position: -200% 0; }\n+            100% { background-position: 200% 0; }\n+        }\n+\n+        /* Enhanced form labels */\n+        .form-group label {\n+            position: relative;\n+        }\n+\n+        .form-group label::before {\n+            content: '';\n+            position: absolute;\n+            left: -15px;\n+            top: 50%;\n+            transform: translateY(-50%);\n+            width: 4px;\n+            height: 100%;\n+            background: linear-gradient(135deg, #667eea, #764ba2);\n+            border-radius: 2px;\n+            opacity: 0;\n+            transition: opacity 0.3s ease;\n+        }\n+\n+        .form-group:focus-within label::before {\n+            opacity: 1;\n         }\n     </style>\n </head>",
                    "refToolCallId": "toolu_01A5woLMvrxEXNYaRA7xNxgH"
                },
                {
                    "type": "text",
                    "text": "Now let me add floating action buttons to the HTML structure:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01PJMPns7it2tBvBGfkQHqME",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me look for the end of the body tag to add floating actions:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01AWdgo5s4cLtu9PtAmPrwEU",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me find the end of the current file:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01SFEKznEaEoTqbTG8cAtdwf",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me check the end of the file:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_016vZcDzM6wpf8Ns8vPdAQmp",
                    "title": "",
                    "statusText": "Invalid range",
                    "status": "WARNING",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01TUL4pqTwMDpvoCpqDM6EGe",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Perfect! Now I'll add the floating action buttons just before the closing body tag:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01UvQT32c6RT7pyZPUYheAXa",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -7740,5 +7740,29 @@\n             </div>\n         </div>\n     </div>\n+\n+    <!-- Floating Action Buttons -->\n+    <div class=\"floating-actions\">\n+        <button class=\"floating-btn\" title=\"Scroll to Top\" onclick=\"window.scrollTo({top: 0, behavior: 'smooth'})\">\n+            <i class=\"fas fa-arrow-up\"></i>\n+        </button>\n+        <button class=\"floating-btn\" title=\"Quick Add Sale\" onclick=\"showTab('sales'); document.getElementById('customerName').focus();\">\n+            <i class=\"fas fa-plus\"></i>\n+        </button>\n+        <button class=\"floating-btn\" title=\"Dashboard\" onclick=\"showTab('dashboard')\">\n+            <i class=\"fas fa-chart-pie\"></i>\n+        </button>\n+    </div>\n+\n+    <!-- Enhanced loading overlay -->\n+    <div id=\"loading-overlay\" style=\"display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; \n+         background: rgba(102, 126, 234, 0.9); z-index: 9999; align-items: center; justify-content: center;\">\n+        <div style=\"text-align: center; color: white;\">\n+            <div class=\"loading-spinner\" style=\"width: 60px; height: 60px; border: 4px solid rgba(255,255,255,0.3); \n+                 border-top: 4px solid white; margin: 0 auto 20px;\"></div>\n+            <h3 style=\"margin: 0; font-weight: 300;\">Processing...</h3>\n+            <p style=\"margin: 10px 0 0; opacity: 0.8;\">Please wait while we save your data</p>\n+        </div>\n+    </div>\n </body>\n </html>",
                    "refToolCallId": "toolu_01UvQT32c6RT7pyZPUYheAXa"
                },
                {
                    "type": "text",
                    "text": "Now let me improve the form styling with better input field enhancements:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Aj6YVEfHBDUGnVx1xzDvXB",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -496,10 +496,11 @@\n             font-size: 1rem;\n             font-family: var(--font-primary);\n             transition: all var(--transition-normal);\n-            background: rgba(255, 255, 255, 0.9);\n+            background: linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.9));\n             color: var(--neutral-800);\n             backdrop-filter: blur(10px);\n             position: relative;\n+            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n         }\n \n         .form-control:focus {",
                    "refToolCallId": "toolu_01Aj6YVEfHBDUGnVx1xzDvXB"
                },
                {
                    "type": "text",
                    "text": "Now let me improve the tab styling to be more modern:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Tv4s3HWajFZ2nognmJ9vin",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -335,6 +335,8 @@\n             gap: var(--space-2);\n             min-height: 60px;\n             overflow: hidden;\n+            border-radius: var(--radius-md) var(--radius-md) 0 0;\n+            margin: 0 2px;\n         }\n \n         .tab::before {",
                    "refToolCallId": "toolu_01Tv4s3HWajFZ2nognmJ9vin"
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "jewelry_sales_final.html",
                            "patch": "@@ -5771,194 +5771,495 @@\n eg, \n-var(--primary-600) 0%25, var(--secondary-600) 100%25);%0D%0A            min-height: 100vh;%0D%0A            padding: var(--space-4);%0D%0A            overflow-x: hidden;%0D%0A            position: relative;\n+#667eea 0%25, #764ba2 35%25, #f093fb 70%25, #f5576c 100%25);%0D%0A            background-size: 400%25 400%25;%0D%0A            animation: gradientShift 15s ease infinite;%0D%0A            min-height: 100vh;%0D%0A            padding: var(--space-4);%0D%0A            overflow-x: hidden;%0D%0A            position: relative;%0D%0A        %7D%0D%0A%0D%0A        @keyframes gradientShift %7B%0D%0A            0%25 %7B background-position: 0%25 50%25; %7D%0D%0A            50%25 %7B background-position: 100%25 50%25; %7D%0D%0A            100%25 %7B background-position: 0%25 50%25; %7D\n %0D%0A  \n@@ -9202,51 +9202,40 @@\n eg, \n-var(--primary-600) 0%25, var(--secondary-600)\n+#667eea 0%25, #764ba2 50%25, #f093fb\n  100\n@@ -9472,32 +9472,88 @@\n 55, 255, 0.1);%0D%0A\n+            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);%0D%0A\n         %7D%0D%0A%0D%0A   \n@@ -10337,17 +10337,17 @@\n  4vw, 2.\n-5\n+8\n rem);%0D%0A \n@@ -10362,33 +10362,33 @@\n    font-weight: \n-7\n+8\n 00;%0D%0A           \n@@ -10489,35 +10489,487 @@\n : 0 \n-2px 4px rgba(0, 0, 0, 0.1);\n+4px 8px rgba(0, 0, 0, 0.3);%0D%0A            letter-spacing: 1px;%0D%0A            animation: headerPulse 3s ease-in-out infinite;%0D%0A        %7D%0D%0A%0D%0A        @keyframes headerPulse %7B%0D%0A            0%25, 100%25 %7B %0D%0A                transform: scale(1);%0D%0A                text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);%0D%0A            %7D%0D%0A            50%25 %7B %0D%0A                transform: scale(1.02);%0D%0A                text-shadow: 0 6px 12px rgba(0, 0, 0, 0.4), 0 0 20px rgba(255, 255, 255, 0.2);%0D%0A            %7D\n %0D%0A  \n@@ -12211,32 +12211,127 @@\n rflow: hidden;%0D%0A\n+            border-radius: var(--radius-md) var(--radius-md) 0 0;%0D%0A            margin: 0 2px;%0D%0A\n         %7D%0D%0A%0D%0A   \n@@ -16868,39 +16868,91 @@\n ground: \n-rgba(255, 255, 255, 0.9\n+linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.9)\n );%0D%0A    \n@@ -17054,32 +17054,88 @@\n ion: relative;%0D%0A\n+            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);%0D%0A\n         %7D%0D%0A%0D%0A   \n@@ -17216,34 +17216,23 @@\n -color: \n-var(--primary-600)\n+#667eea\n ;%0D%0A     \n@@ -17273,37 +17273,43 @@\n   0 0 0 \n-3px var(--primary-100\n+4px rgba(102, 126, 234, 0.2\n ),%0D%0A    \n@@ -17318,34 +17318,35 @@\n           0 \n-4\n+8\n px \n+1\n 6px -\n-1\n+4\n px rgba(0, 0\n@@ -17345,32 +17345,33 @@\n gba(0, 0, 0, 0.1\n+5\n ),%0D%0A            \n@@ -17444,36 +17444,48 @@\n rm: translateY(-\n-2\n+3\n px)\n+ scale(1.01)\n ;%0D%0A            b\n@@ -17510,35 +17510,535 @@\n 5, 255, 255, 0.9\n-5);\n+8);%0D%0A            animation: inputFocus 0.3s ease;%0D%0A        %7D%0D%0A%0D%0A        @keyframes inputFocus %7B%0D%0A            0%25 %7B%0D%0A                transform: translateY(0) scale(1);%0D%0A                box-shadow: none;%0D%0A            %7D%0D%0A            50%25 %7B%0D%0A                transform: translateY(-1px) scale(1.005);%0D%0A            %7D%0D%0A            100%25 %7B%0D%0A                transform: translateY(-3px) scale(1.01);%0D%0A                box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.2), 0 8px 16px -4px rgba(0, 0, 0, 0.15);%0D%0A            %7D\n %0D%0A        %7D%0D%0A%0D%0A \n@@ -22694,46 +22694,24 @@\n eg, \n-var(--primary-600), var(--primary-500)\n+#667eea, #764ba2\n );%0D%0A\n@@ -22818,25 +22818,25 @@\n    0 0 2\n-0\n+5\n px rgba(\n 99, 102,\n@@ -22831,25 +22831,26 @@\n gba(\n-99\n+102\n , 1\n-0\n 2\n+6\n , 2\n+3\n 4\n-1\n , 0.\n-3\n+4\n );%0D%0A\n@@ -22893,34 +22893,518 @@\n 55, 255, 255, 0.\n-1)\n+2);%0D%0A            position: relative;%0D%0A            overflow: hidden;%0D%0A        %7D%0D%0A%0D%0A        .btn-primary::after %7B%0D%0A            content: '';%0D%0A            position: absolute;%0D%0A            top: 0;%0D%0A            left: -100%25;%0D%0A            width: 100%25;%0D%0A            height: 100%25;%0D%0A            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);%0D%0A            transition: left 0.5s ease;%0D%0A        %7D%0D%0A%0D%0A        .btn-primary:hover::after %7B%0D%0A            left: 100%25\n ;%0D%0A        %7D%0D%0A%0D%0A\n@@ -28268,37 +28268,81 @@\n     background: \n-white\n+linear-gradient(145deg, #ffffff 0%25, #f8fafc 100%25)\n ;%0D%0A            b\n@@ -28396,33 +28396,33 @@\n    border-left: \n-4\n+6\n px solid var(--p\n@@ -28414,34 +28414,23 @@\n x solid \n-var(--primary-600)\n+#667eea\n ;%0D%0A     \n@@ -28600,32 +28600,36 @@\n      transition:\n+ all\n  var(--transitio\n@@ -28660,39 +28660,522 @@\n box-shadow: \n-var(--shadow-sm\n+0 4px 12px rgba(0, 0, 0, 0.05);%0D%0A            overflow: hidden;%0D%0A        %7D%0D%0A%0D%0A        .sales-item::before %7B%0D%0A            content: '';%0D%0A            position: absolute;%0D%0A            top: 0;%0D%0A            right: 0;%0D%0A            width: 100px;%0D%0A            height: 100px;%0D%0A            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(240, 147, 251, 0.1));%0D%0A            border-radius: 50%25;%0D%0A            transform: translate(50%25, -50%25);%0D%0A            transition: all var(--transition-normal\n );%0D%0A        \n@@ -29239,33 +29239,23 @@\n -color: \n-var(--accent-500)\n+#f093fb\n ;%0D%0A     \n@@ -29269,39 +29269,59 @@\n box-shadow: \n-var(--shadow-md\n+0 8px 25px rgba(102, 126, 234, 0.15\n );%0D%0A        \n@@ -29338,35 +29338,259 @@\n orm: translateX(\n-4px\n+8px) translateY(-2px);%0D%0A        %7D%0D%0A%0D%0A        .sales-item:hover::before %7B%0D%0A            width: 120px;%0D%0A            height: 120px;%0D%0A            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(240, 147, 251, 0.2)\n );%0D%0A        %7D%0D%0A%0D\n@@ -31173,48 +31173,45 @@\n eg, \n-var(--primary-600), var(--secondary-600)\n+#667eea 0%25, #764ba2 50%25, #f093fb 100%25\n );%0D%0A\n@@ -31438,39 +31438,59 @@\n box-shadow: \n-var(--shadow-lg\n+0 10px 30px rgba(102, 126, 234, 0.3\n );%0D%0A        \n@@ -31496,32 +31496,36 @@\n      transition:\n+ all\n  var(--transitio\n@@ -31528,32 +31528,89 @@\n ition-normal);%0D%0A\n+            border: 1px solid rgba(255, 255, 255, 0.2);%0D%0A\n         %7D%0D%0A%0D%0A   \n@@ -31967,20 +31967,32 @@\n slateY(-\n-4\n+8\n px)\n+ scale(1.02)\n ;%0D%0A     \n@@ -32014,25 +32014,397 @@\n ow: \n-var(--shadow-xl);\n+0 20px 40px rgba(102, 126, 234, 0.4);%0D%0A            animation: statCardGlow 2s ease-in-out infinite;%0D%0A        %7D%0D%0A%0D%0A        @keyframes statCardGlow %7B%0D%0A            0%25, 100%25 %7B%0D%0A                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);%0D%0A            %7D%0D%0A            50%25 %7B%0D%0A                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.6), 0 0 30px rgba(240, 147, 251, 0.3);%0D%0A            %7D\n %0D%0A  \n@@ -40316,26 +40316,25 @@\n 185, 129, 0.\n-05\n+1\n ) 0%25,%0D%0A     \n@@ -40370,32 +40370,88 @@\n , 0.95) 100%25);%0D%0A\n+            border: 1px solid rgba(16, 185, 129, 0.2);%0D%0A\n         %7D%0D%0A%0D%0A   \n@@ -79359,24 +79359,3302 @@\n %0D%0A        %7D%0D\n+%0A%0D%0A        /* ======== ENHANCED VISUAL ELEMENTS ======== */%0D%0A        .form-section h3 i %7B%0D%0A            background: linear-gradient(135deg, #667eea, #764ba2);%0D%0A            -webkit-background-clip: text;%0D%0A            -webkit-text-fill-color: transparent;%0D%0A            background-clip: text;%0D%0A            font-size: 1.2em;%0D%0A            margin-right: 8px;%0D%0A            animation: iconShine 3s ease-in-out infinite;%0D%0A        %7D%0D%0A%0D%0A        @keyframes iconShine %7B%0D%0A            0%25, 100%25 %7B opacity: 1; %7D%0D%0A            50%25 %7B opacity: 0.7; %7D%0D%0A        %7D%0D%0A%0D%0A        /* Floating Quick Actions */%0D%0A        .floating-actions %7B%0D%0A            position: fixed;%0D%0A            bottom: 20px;%0D%0A            right: 20px;%0D%0A            z-index: 1000;%0D%0A            display: flex;%0D%0A            flex-direction: column;%0D%0A            gap: 12px;%0D%0A        %7D%0D%0A%0D%0A        .floating-btn %7B%0D%0A            width: 56px;%0D%0A            height: 56px;%0D%0A            border-radius: 50%25;%0D%0A            background: linear-gradient(135deg, #667eea, #764ba2);%0D%0A            color: white;%0D%0A            border: none;%0D%0A            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);%0D%0A            cursor: pointer;%0D%0A            display: flex;%0D%0A            align-items: center;%0D%0A            justify-content: center;%0D%0A            font-size: 20px;%0D%0A            transition: all 0.3s ease;%0D%0A            position: relative;%0D%0A            overflow: hidden;%0D%0A        %7D%0D%0A%0D%0A        .floating-btn::before %7B%0D%0A            content: '';%0D%0A            position: absolute;%0D%0A            top: 0;%0D%0A            left: -100%25;%0D%0A            width: 100%25;%0D%0A            height: 100%25;%0D%0A            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);%0D%0A            transition: left 0.5s ease;%0D%0A        %7D%0D%0A%0D%0A        .floating-btn:hover %7B%0D%0A            transform: scale(1.1);%0D%0A            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);%0D%0A        %7D%0D%0A%0D%0A        .floating-btn:hover::before %7B%0D%0A            left: 100%25;%0D%0A        %7D%0D%0A%0D%0A        /* Progress indicators */%0D%0A        .progress-bar %7B%0D%0A            width: 100%25;%0D%0A            height: 8px;%0D%0A            background: rgba(255, 255, 255, 0.2);%0D%0A            border-radius: 4px;%0D%0A            overflow: hidden;%0D%0A            margin: 10px 0;%0D%0A        %7D%0D%0A%0D%0A        .progress-fill %7B%0D%0A            height: 100%25;%0D%0A            background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);%0D%0A            background-size: 200%25 100%25;%0D%0A            animation: progressShine 2s linear infinite;%0D%0A            transition: width 0.5s ease;%0D%0A        %7D%0D%0A%0D%0A        @keyframes progressShine %7B%0D%0A            0%25 %7B background-position: -200%25 0; %7D%0D%0A            100%25 %7B background-position: 200%25 0; %7D%0D%0A        %7D%0D%0A%0D%0A        /* Enhanced form labels */%0D%0A        .form-group label %7B%0D%0A            position: relative;%0D%0A        %7D%0D%0A%0D%0A        .form-group label::before %7B%0D%0A            content: '';%0D%0A            position: absolute;%0D%0A            left: -15px;%0D%0A            top: 50%25;%0D%0A            transform: translateY(-50%25);%0D%0A            width: 4px;%0D%0A            height: 100%25;%0D%0A            background: linear-gradient(135deg, #667eea, #764ba2);%0D%0A            border-radius: 2px;%0D%0A            opacity: 0;%0D%0A            transition: opacity 0.3s ease;%0D%0A        %7D%0D%0A%0D%0A        .form-group:focus-within label::before %7B%0D%0A            opacity: 1;%0D%0A        %7D%0D\n %0A    %3C/style\n@@ -347320,16 +347320,1352 @@\n  %3C/div%3E%0D\n+%0A%0D%0A    %3C!-- Floating Action Buttons --%3E%0D%0A    %3Cdiv class=%22floating-actions%22%3E%0D%0A        %3Cbutton class=%22floating-btn%22 title=%22Scroll to Top%22 onclick=%22window.scrollTo(%7Btop: 0, behavior: 'smooth'%7D)%22%3E%0D%0A            %3Ci class=%22fas fa-arrow-up%22%3E%3C/i%3E%0D%0A        %3C/button%3E%0D%0A        %3Cbutton class=%22floating-btn%22 title=%22Quick Add Sale%22 onclick=%22showTab('sales'); document.getElementById('customerName').focus();%22%3E%0D%0A            %3Ci class=%22fas fa-plus%22%3E%3C/i%3E%0D%0A        %3C/button%3E%0D%0A        %3Cbutton class=%22floating-btn%22 title=%22Dashboard%22 onclick=%22showTab('dashboard')%22%3E%0D%0A            %3Ci class=%22fas fa-chart-pie%22%3E%3C/i%3E%0D%0A        %3C/button%3E%0D%0A    %3C/div%3E%0D%0A%0D%0A    %3C!-- Enhanced loading overlay --%3E%0D%0A    %3Cdiv id=%22loading-overlay%22 style=%22display: none; position: fixed; top: 0; left: 0; width: 100%25; height: 100%25; %0D%0A         background: rgba(102, 126, 234, 0.9); z-index: 9999; align-items: center; justify-content: center;%22%3E%0D%0A        %3Cdiv style=%22text-align: center; color: white;%22%3E%0D%0A            %3Cdiv class=%22loading-spinner%22 style=%22width: 60px; height: 60px; border: 4px solid rgba(255,255,255,0.3); %0D%0A                 border-top: 4px solid white; margin: 0 auto 20px;%22%3E%3C/div%3E%0D%0A            %3Ch3 style=%22margin: 0; font-weight: 300;%22%3EProcessing...%3C/h3%3E%0D%0A            %3Cp style=%22margin: 10px 0 0; opacity: 0.8;%22%3EPlease wait while we save your data%3C/p%3E%0D%0A        %3C/div%3E%0D%0A    %3C/div%3E%0D\n %0A%3C/body%3E\n",
                            "isNew": false,
                            "isApplied": true
                        }
                    ]
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "bec5e81c-46fb-4390-9f86-b19ed54fcfd4"
            },
            "createdAt": 1752345663325,
            "isInternal": false
        },
        {
            "id": "c19b8b7f-fa9b-42de-ad32-56b645954341",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "show pricing information and item information in same card"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "jewelry_sales_final.html",
                    "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n\r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#6366F1\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n\r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n\r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n\r\n    <!-- Modern Typography -->\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@300;400;500;600;700;800&display=swap\" rel=\"stylesheet\">\r\n\r\n    <!-- Icons -->\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\r\n\r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    <style>\r\n        /* ======== MODERN DESIGN SYSTEM ======== */\r\n        :root {\r\n            /* Enhanced Color Palette */\r\n            --primary-600: #6366F1;\r\n            --primary-500: #8B5CF6;\r\n            --primary-400: #A78BFA;\r\n            --primary-300: #C4B5FD;\r\n            --primary-100: #EDE9FE;\r\n            --primary-50: #F5F3FF;\r\n\r\n            --secondary-600: #DB2777;\r\n            --secondary-500: #EC4899;\r\n            --secondary-400: #F472B6;\r\n            --secondary-300: #F9A8D4;\r\n            --secondary-100: #FCE7F3;\r\n\r\n            --accent-600: #059669;\r\n            --accent-500: #10B981;\r\n            --accent-400: #34D399;\r\n            --accent-300: #6EE7B7;\r\n            --accent-100: #D1FAE5;\r\n\r\n            --neutral-900: #111827;\r\n            --neutral-800: #1F2937;\r\n            --neutral-700: #374151;\r\n            --neutral-600: #4B5563;\r\n            --neutral-500: #6B7280;\r\n            --neutral-400: #9CA3AF;\r\n            --neutral-300: #D1D5DB;\r\n            --neutral-200: #E5E7EB;\r\n            --neutral-100: #F3F4F6;\r\n            --neutral-50: #F9FAFB;\r\n\r\n            --error-600: #DC2626;\r\n            --error-500: #EF4444;\r\n            --error-100: #FEE2E2;\r\n\r\n            --warning-600: #D97706;\r\n            --warning-500: #F59E0B;\r\n            --warning-100: #FEF3C7;\r\n\r\n            --success-600: #059669;\r\n            --success-500: #10B981;\r\n            --success-100: #D1FAE5;\r\n\r\n            /* Interactive Colors */\r\n            --interactive-hover: #4F46E5;\r\n            --interactive-active: #3730A3;\r\n            --interactive-focus: #6366F1;\r\n            --interactive-disabled: #9CA3AF;\r\n\r\n            /* Glass Effect */\r\n            --glass-bg: rgba(255, 255, 255, 0.95);\r\n            --glass-border: rgba(255, 255, 255, 0.2);\r\n            --glass-shadow: rgba(0, 0, 0, 0.1);\r\n\r\n            /* Animations */\r\n            --bounce-scale: 1.05;\r\n            --slide-distance: 10px;\r\n\r\n            /* Typography */\r\n            --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n            --font-secondary: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n\r\n            /* Spacing */\r\n            --space-1: 0.25rem;\r\n            --space-2: 0.5rem;\r\n            --space-3: 0.75rem;\r\n            --space-4: 1rem;\r\n            --space-5: 1.25rem;\r\n            --space-6: 1.5rem;\r\n            --space-8: 2rem;\r\n            --space-10: 2.5rem;\r\n            --space-12: 3rem;\r\n            --space-16: 4rem;\r\n            --space-20: 5rem;\r\n\r\n            /* Border Radius */\r\n            --radius-sm: 0.375rem;\r\n            --radius-md: 0.5rem;\r\n            --radius-lg: 0.75rem;\r\n            --radius-xl: 1rem;\r\n            --radius-2xl: 1.5rem;\r\n\r\n            /* Shadows */\r\n            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\r\n            --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\r\n\r\n            /* Transitions */\r\n            --transition-fast: 150ms ease-in-out;\r\n            --transition-normal: 300ms ease-in-out;\r\n            --transition-slow: 500ms ease-in-out;\r\n        }\r\n\r\n        /* ======== RESET & BASE STYLES ======== */\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        *:focus {\r\n            outline: 2px solid var(--primary-600);\r\n            outline-offset: 2px;\r\n        }\r\n\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        body {\r\n            font-family: var(--font-primary);\r\n            font-size: 16px;\r\n            line-height: 1.6;\r\n            color: var(--neutral-800);\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 35%, #f093fb 70%, #f5576c 100%);\r\n            background-size: 400% 400%;\r\n            animation: gradientShift 15s ease infinite;\r\n            min-height: 100vh;\r\n            padding: var(--space-4);\r\n            overflow-x: hidden;\r\n            position: relative;\r\n        }\r\n\r\n        @keyframes gradientShift {\r\n            0% { background-position: 0% 50%; }\r\n            50% { background-position: 100% 50%; }\r\n            100% { background-position: 0% 50%; }\r\n        }\r\n\r\n        body::before {\r\n            content: '';\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background:\r\n                radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),\r\n                radial-gradient(circle at 80% 80%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),\r\n                radial-gradient(circle at 40% 60%, rgba(255, 255, 255, 0.05) 0%, transparent 50%);\r\n            pointer-events: none;\r\n            z-index: 0;\r\n        }\r\n\r\n        body::after {\r\n            content: '';\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"dots\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\"><circle cx=\"10\" cy=\"10\" r=\"1\" fill=\"white\" opacity=\"0.05\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23dots)\"/></svg>');\r\n            pointer-events: none;\r\n            z-index: 0;\r\n        }\r\n\r\n        /* ======== LOADING SPINNER ======== */\r\n        .loading-spinner {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: 50%;\r\n            border-top-color: var(--primary-600);\r\n            animation: spin 1s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            to { transform: rotate(360deg); }\r\n        }\r\n\r\n        /* ======== MAIN CONTAINER ======== */\r\n        .container {\r\n            max-width: 1200px;\r\n            margin: 0 auto;\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-2xl);\r\n            box-shadow:\r\n                var(--shadow-2xl),\r\n                0 0 0 1px var(--glass-border),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.5);\r\n            overflow: hidden;\r\n            backdrop-filter: blur(20px);\r\n            animation: slideInUp 0.6s ease-out;\r\n            position: relative;\r\n            z-index: 1;\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .container::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 1px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);\r\n            z-index: 1;\r\n        }\r\n\r\n        @keyframes slideInUp {\r\n            from {\r\n                opacity: 0;\r\n                transform: translate3d(0, 30px, 0);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translate3d(0, 0, 0);\r\n            }\r\n        }\r\n\r\n        /* ======== HEADER ======== */\r\n        .header {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);\r\n            color: white;\r\n            text-align: center;\r\n            padding: var(--space-8) var(--space-6);\r\n            position: relative;\r\n            overflow: hidden;\r\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\r\n        }\r\n\r\n        .header::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grain\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"25\" cy=\"25\" r=\"1\" fill=\"white\" opacity=\"0.1\"/><circle cx=\"75\" cy=\"75\" r=\"1\" fill=\"white\" opacity=\"0.05\"/><circle cx=\"50\" cy=\"10\" r=\"0.5\" fill=\"white\" opacity=\"0.1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grain)\"/></svg>');\r\n            pointer-events: none;\r\n        }\r\n\r\n        .header h1 {\r\n            font-family: var(--font-secondary);\r\n            font-size: clamp(1.8rem, 4vw, 2.8rem);\r\n            font-weight: 800;\r\n            margin: 0;\r\n            position: relative;\r\n            z-index: 1;\r\n            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n            letter-spacing: 1px;\r\n            animation: headerPulse 3s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes headerPulse {\r\n            0%, 100% { \r\n                transform: scale(1);\r\n                text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n            }\r\n            50% { \r\n                transform: scale(1.02);\r\n                text-shadow: 0 6px 12px rgba(0, 0, 0, 0.4), 0 0 20px rgba(255, 255, 255, 0.2);\r\n            }\r\n        }\r\n\r\n        .header .subtitle {\r\n            font-size: 1rem;\r\n            opacity: 0.9;\r\n            margin-top: var(--space-2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        /* ======== NAVIGATION TABS ======== */\r\n        .tabs {\r\n            display: flex;\r\n            background: var(--glass-bg);\r\n            border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n            position: sticky;\r\n            top: 0;\r\n            z-index: 10;\r\n            backdrop-filter: blur(20px);\r\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: var(--space-4) var(--space-3);\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: transparent;\r\n            border: none;\r\n            font-family: var(--font-primary);\r\n            font-size: 0.95rem;\r\n            font-weight: 500;\r\n            color: var(--neutral-600);\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: var(--space-2);\r\n            min-height: 60px;\r\n            overflow: hidden;\r\n            border-radius: var(--radius-md) var(--radius-md) 0 0;\r\n            margin: 0 2px;\r\n        }\r\n\r\n        .tab::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\r\n            opacity: 0;\r\n            transition: opacity var(--transition-normal);\r\n        }\r\n\r\n        .tab:hover {\r\n            color: var(--primary-700);\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .tab:hover::before {\r\n            opacity: 0.05;\r\n        }\r\n\r\n        .tab.active {\r\n            color: white;\r\n            font-weight: 600;\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .tab.active::before {\r\n            opacity: 1;\r\n        }\r\n\r\n        .tab.active::after {\r\n            content: '';\r\n            position: absolute;\r\n            bottom: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 3px;\r\n            background: var(--accent-500);\r\n            z-index: 1;\r\n            box-shadow: 0 0 10px var(--accent-500);\r\n        }\r\n\r\n        .tab span, .tab i {\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .tab i {\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        /* ======== TAB CONTENT ======== */\r\n        .tab-content {\r\n            display: none;\r\n            padding: var(--space-8) var(--space-6);\r\n            min-height: 600px;\r\n            animation: fadeIn 0.4s ease-in-out;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        @keyframes fadeIn {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(10px);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        /* ======== FORM COMPONENTS ======== */\r\n        .form-section {\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n            box-shadow:\r\n                0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n                0 2px 4px -1px rgba(0, 0, 0, 0.06),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n            backdrop-filter: blur(10px);\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            overflow: visible;\r\n        }\r\n\r\n        .form-section::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 1px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.5), transparent);\r\n        }\r\n\r\n        .form-section:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow:\r\n                0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n                0 4px 6px -2px rgba(0, 0, 0, 0.05),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .form-section h3 {\r\n            font-family: var(--font-secondary);\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin-bottom: var(--space-4);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n        }\r\n\r\n        .form-section h3 i {\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .form-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n            gap: var(--space-4);\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: var(--space-5);\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: var(--space-2);\r\n            font-weight: 500;\r\n            color: var(--neutral-700);\r\n            font-size: 0.9rem;\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.5px;\r\n        }\r\n\r\n        .form-group label.required::after {\r\n            content: '*';\r\n            color: var(--error-500);\r\n            margin-left: var(--space-1);\r\n        }\r\n\r\n        .form-control {\r\n            width: 100%;\r\n            padding: var(--space-3) var(--space-4);\r\n            border: 2px solid rgba(255, 255, 255, 0.3);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            font-family: var(--font-primary);\r\n            transition: all var(--transition-normal);\r\n            background: linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.9));\r\n            color: var(--neutral-800);\r\n            backdrop-filter: blur(10px);\r\n            position: relative;\r\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n        }\r\n\r\n        .form-control:focus {\r\n            outline: none;\r\n            border-color: #667eea;\r\n            box-shadow:\r\n                0 0 0 4px rgba(102, 126, 234, 0.2),\r\n                0 8px 16px -4px rgba(0, 0, 0, 0.15),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.5);\r\n            transform: translateY(-3px) scale(1.01);\r\n            background: rgba(255, 255, 255, 0.98);\r\n            animation: inputFocus 0.3s ease;\r\n        }\r\n\r\n        @keyframes inputFocus {\r\n            0% {\r\n                transform: translateY(0) scale(1);\r\n                box-shadow: none;\r\n            }\r\n            50% {\r\n                transform: translateY(-1px) scale(1.005);\r\n            }\r\n            100% {\r\n                transform: translateY(-3px) scale(1.01);\r\n                box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.2), 0 8px 16px -4px rgba(0, 0, 0, 0.15);\r\n            }\r\n        }\r\n\r\n        .form-control:hover {\r\n            border-color: rgba(255, 255, 255, 0.5);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .form-control:invalid {\r\n            border-color: var(--error-500);\r\n        }\r\n\r\n        .form-control:disabled {\r\n            background: var(--neutral-100);\r\n            color: var(--neutral-500);\r\n            cursor: not-allowed;\r\n        }\r\n\r\n        .form-control::placeholder {\r\n            color: var(--neutral-400);\r\n        }\r\n\r\n        .form-error {\r\n            display: none;\r\n            color: var(--error-600);\r\n            font-size: 0.875rem;\r\n            margin-top: var(--space-1);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .form-error i {\r\n            font-size: 0.8rem;\r\n        }\r\n\r\n        .form-success {\r\n            display: none;\r\n            color: var(--success-600);\r\n            font-size: 0.875rem;\r\n            margin-top: var(--space-1);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .form-success i {\r\n            font-size: 0.8rem;\r\n        }\r\n\r\n        /* ======== PURCHASE FORM STYLES ======== */\r\n        #add-purchase-form input:focus,\r\n        #add-purchase-form textarea:focus {\r\n            border-color: var(--primary-600) !important;\r\n            box-shadow: 0 0 0 3px var(--primary-100) !important;\r\n            outline: none !important;\r\n        }\r\n\r\n        #add-purchase-form input:hover,\r\n        #add-purchase-form textarea:hover {\r\n            border-color: var(--neutral-400) !important;\r\n        }\r\n\r\n        #add-purchase-form .required-field {\r\n            position: relative;\r\n        }\r\n\r\n        #add-purchase-form .required-field::after {\r\n            content: '*';\r\n            color: var(--error-500);\r\n            position: absolute;\r\n            right: 12px;\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            font-weight: bold;\r\n        }\r\n\r\n        /* ======== BUTTON COMPONENTS ======== */\r\n        .btn {\r\n            display: inline-flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: var(--space-2);\r\n            padding: var(--space-3) var(--space-6);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            font-family: var(--font-primary);\r\n            font-size: 0.95rem;\r\n            font-weight: 500;\r\n            text-decoration: none;\r\n            cursor: pointer;\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            user-select: none;\r\n            min-height: 44px;\r\n            background: var(--glass-bg);\r\n            backdrop-filter: blur(10px);\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            box-shadow:\r\n                0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n                0 2px 4px -1px rgba(0, 0, 0, 0.06),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .btn::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: -100%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\r\n            transition: left var(--transition-normal);\r\n        }\r\n\r\n        .btn:hover::before {\r\n            left: 100%;\r\n        }\r\n\r\n        .btn:hover {\r\n            transform: translateY(-2px) scale(var(--bounce-scale));\r\n            box-shadow:\r\n                0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n                0 4px 6px -2px rgba(0, 0, 0, 0.05),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .btn:active {\r\n            transform: translateY(0) scale(0.98);\r\n        }\r\n\r\n        .btn:disabled {\r\n            opacity: 0.6;\r\n            cursor: not-allowed;\r\n            transform: none !important;\r\n        }\r\n\r\n        .btn.loading {\r\n            color: transparent;\r\n        }\r\n\r\n        .btn.loading::after {\r\n            content: '';\r\n            position: absolute;\r\n            width: 16px;\r\n            height: 16px;\r\n            top: 50%;\r\n            left: 50%;\r\n            margin-left: -8px;\r\n            margin-top: -8px;\r\n            border: 2px solid transparent;\r\n            border-top-color: currentColor;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        /* Button Variants */\r\n        .btn-primary {\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            color: white;\r\n            box-shadow:\r\n                var(--shadow-md),\r\n                0 0 25px rgba(102, 126, 234, 0.4);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .btn-primary::after {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: -100%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n            transition: left 0.5s ease;\r\n        }\r\n\r\n        .btn-primary:hover::after {\r\n            left: 100%;\r\n        }\r\n\r\n        .btn-primary::before {\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n        }\r\n\r\n        .btn-primary:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--interactive-hover), var(--primary-600));\r\n            transform: translateY(-3px) scale(var(--bounce-scale));\r\n            box-shadow:\r\n                var(--shadow-xl),\r\n                0 0 30px rgba(99, 102, 241, 0.5);\r\n        }\r\n\r\n        /* Special styling for Add Sale Record button - no hover color change */\r\n        .btn-primary.add-sale-btn:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-500));\r\n            transform: none;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-primary:active {\r\n            transform: translateY(0);\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: linear-gradient(135deg, var(--secondary-600), var(--secondary-500));\r\n            color: white;\r\n            box-shadow:\r\n                var(--shadow-md),\r\n                0 0 20px rgba(219, 39, 119, 0.3);\r\n            border: 1px solid rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .btn-secondary::before {\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n        }\r\n\r\n        .btn-secondary:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--secondary-700), var(--secondary-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-accent {\r\n            background: linear-gradient(135deg, var(--accent-600), var(--accent-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-accent:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--accent-700), var(--accent-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-outline {\r\n            background: transparent;\r\n            border: 2px solid var(--primary-600);\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .btn-outline:hover:not(:disabled) {\r\n            background: var(--primary-600);\r\n            color: white;\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .btn-ghost {\r\n            background: transparent;\r\n            color: var(--neutral-600);\r\n            box-shadow: none;\r\n        }\r\n\r\n        .btn-ghost:hover:not(:disabled) {\r\n            background: var(--neutral-100);\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .btn-danger {\r\n            background: linear-gradient(135deg, var(--error-600), var(--error-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-danger:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--error-700), var(--error-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        /* Button Sizes */\r\n        .btn-sm {\r\n            padding: var(--space-2) var(--space-4);\r\n            font-size: 0.875rem;\r\n            min-height: 36px;\r\n        }\r\n\r\n        .btn-lg {\r\n            padding: var(--space-4) var(--space-8);\r\n            font-size: 1.1rem;\r\n            min-height: 52px;\r\n        }\r\n\r\n        .btn-full {\r\n            width: 100%;\r\n        }\r\n\r\n        /* Button Groups */\r\n        .btn-group {\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            margin-top: var(--space-4);\r\n        }\r\n\r\n        .btn-group .btn {\r\n            flex: 1;\r\n        }\r\n\r\n        /* ======== CARD COMPONENTS ======== */\r\n        .card {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-md);\r\n            border: 1px solid var(--neutral-200);\r\n            overflow: hidden;\r\n            transition: var(--transition-normal);\r\n        }\r\n\r\n        .card:hover {\r\n            box-shadow: var(--shadow-lg);\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .card-header {\r\n            padding: var(--space-4) var(--space-5);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n            background: var(--neutral-50);\r\n        }\r\n\r\n        .card-header h3 {\r\n            margin: 0;\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .card-body {\r\n            padding: var(--space-5);\r\n        }\r\n\r\n        .card-footer {\r\n            padding: var(--space-4) var(--space-5);\r\n            background: var(--neutral-50);\r\n            border-top: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        /* Sales Item Cards */\r\n        .sales-item {\r\n            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);\r\n            border: 1px solid var(--neutral-200);\r\n            border-left: 6px solid #667eea;\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-4);\r\n            position: relative;\r\n            transition: all var(--transition-normal);\r\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\r\n            overflow: hidden;\r\n        }\r\n\r\n        .sales-item::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            width: 100px;\r\n            height: 100px;\r\n            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(240, 147, 251, 0.1));\r\n            border-radius: 50%;\r\n            transform: translate(50%, -50%);\r\n            transition: all var(--transition-normal);\r\n        }\r\n\r\n        .sales-item:hover {\r\n            border-left-color: #f093fb;\r\n            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);\r\n            transform: translateX(8px) translateY(-2px);\r\n        }\r\n\r\n        .sales-item:hover::before {\r\n            width: 120px;\r\n            height: 120px;\r\n            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(240, 147, 251, 0.2));\r\n        }\r\n\r\n        .sales-item-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: start;\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: var(--neutral-800);\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            margin: 0;\r\n        }\r\n\r\n        .sales-item-info {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n            gap: var(--space-3);\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .sales-item-info-item {\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        .sales-item-info-label {\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n            color: var(--neutral-500);\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.5px;\r\n            margin-bottom: var(--space-1);\r\n        }\r\n\r\n        .sales-item-info-value {\r\n            font-size: 0.95rem;\r\n            color: var(--neutral-700);\r\n            font-weight: 500;\r\n        }\r\n\r\n        .sales-item-amount {\r\n            font-size: 1.2rem;\r\n            font-weight: 700;\r\n            color: var(--accent-600);\r\n        }\r\n\r\n        /* Dashboard Stats */\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n            gap: var(--space-5);\r\n            margin-bottom: var(--space-8);\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);\r\n            color: white;\r\n            padding: var(--space-6);\r\n            border-radius: var(--radius-xl);\r\n            text-align: center;\r\n            position: relative;\r\n            overflow: hidden;\r\n            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);\r\n            transition: all var(--transition-normal);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .stat-card::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: -50%;\r\n            right: -50%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);\r\n        }\r\n\r\n        .stat-card:hover {\r\n            transform: translateY(-8px) scale(1.02);\r\n            box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);\r\n            animation: statCardGlow 2s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes statCardGlow {\r\n            0%, 100% {\r\n                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);\r\n            }\r\n            50% {\r\n                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.6), 0 0 30px rgba(240, 147, 251, 0.3);\r\n            }\r\n        }\r\n\r\n        .stat-card-icon {\r\n            font-size: 2.5rem;\r\n            margin-bottom: var(--space-3);\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 2.5rem;\r\n            font-weight: 700;\r\n            margin-bottom: var(--space-2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 0.95rem;\r\n            opacity: 0.9;\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        /* Chart Container */\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-md);\r\n            border: 1px solid var(--neutral-200);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            height: 450px;\r\n            position: relative;\r\n        }\r\n\r\n        .chart-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: var(--space-4);\r\n            padding-bottom: var(--space-3);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        .chart-title {\r\n            font-size: 1.2rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        /* Customer Item Cards */\r\n        .customer-item {\r\n            background: white;\r\n            border: 1px solid var(--neutral-200);\r\n            border-left: 4px solid var(--secondary-600);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-4);\r\n            position: relative;\r\n            transition: var(--transition-normal);\r\n            box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        .customer-item:hover {\r\n            border-left-color: var(--accent-500);\r\n            box-shadow: var(--shadow-md);\r\n            transform: translateX(4px);\r\n        }\r\n\r\n        /* Empty State */\r\n        .no-data {\r\n            text-align: center;\r\n            color: var(--neutral-500);\r\n            font-style: italic;\r\n            padding: var(--space-16);\r\n            font-size: 1.1rem;\r\n            background: var(--neutral-50);\r\n            border-radius: var(--radius-lg);\r\n            border: 2px dashed var(--neutral-300);\r\n        }\r\n\r\n        .no-data i {\r\n            font-size: 3rem;\r\n            color: var(--neutral-400);\r\n            margin-bottom: var(--space-4);\r\n            display: block;\r\n        }\r\n\r\n        /* Action Buttons */\r\n        .action-buttons {\r\n            position: absolute;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            z-index: 2;\r\n        }\r\n\r\n        .edit-btn, .delete-btn {\r\n            padding: var(--space-2) var(--space-3);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            cursor: pointer;\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n            transition: var(--transition-fast);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .edit-btn {\r\n            background: var(--primary-600);\r\n            color: white;\r\n        }\r\n\r\n        .edit-btn:hover {\r\n            background: var(--primary-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .delete-btn {\r\n            background: var(--error-600);\r\n            color: white;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: var(--error-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        /* ======== SCROLLABLE CONTAINERS ======== */\r\n        .scrollable-container {\r\n            max-height: 650px;\r\n            overflow-y: auto;\r\n            padding-right: var(--space-2);\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-track {\r\n            background: var(--neutral-200);\r\n            border-radius: var(--radius-lg);\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-thumb {\r\n            background: linear-gradient(135deg, var(--primary-500), var(--primary-600));\r\n            border-radius: var(--radius-lg);\r\n            border: 2px solid var(--neutral-200);\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-thumb:hover {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-700));\r\n        }\r\n\r\n        /* ======== SEARCH AND FILTER ======== */\r\n        .filter-section {\r\n            background: var(--neutral-50);\r\n            border: 1px solid var(--neutral-200);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-6);\r\n        }\r\n\r\n        .filter-header {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n            margin-bottom: var(--space-4);\r\n        }\r\n\r\n        .filter-header h3 {\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin: 0;\r\n        }\r\n\r\n        .search-input {\r\n            position: relative;\r\n        }\r\n\r\n        .search-input input {\r\n            width: 100%;\r\n            padding: var(--space-3) var(--space-4) var(--space-3) var(--space-12);\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            transition: var(--transition-normal);\r\n            background: white;\r\n        }\r\n\r\n        .search-input input:focus {\r\n            outline: none;\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .search-input i {\r\n            position: absolute;\r\n            left: var(--space-4);\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            color: var(--neutral-400);\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        /* ======== NOTIFICATIONS & TOASTS ======== */\r\n        .toast {\r\n            position: fixed;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-lg);\r\n            box-shadow:\r\n                var(--shadow-xl),\r\n                0 0 30px rgba(0, 0, 0, 0.15);\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            padding: var(--space-4);\r\n            max-width: 400px;\r\n            z-index: 1000;\r\n            transform: translateX(calc(100% + var(--space-4)));\r\n            opacity: 0;\r\n            transition: all var(--transition-normal);\r\n            backdrop-filter: blur(20px);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .toast::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 2px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);\r\n        }\r\n\r\n        .toast.show {\r\n            transform: translateX(0);\r\n            opacity: 1;\r\n            animation: toastSlideIn 0.3s ease-out;\r\n        }\r\n\r\n        @keyframes toastSlideIn {\r\n            0% {\r\n                transform: translateX(calc(100% + var(--space-4))) scale(0.9);\r\n                opacity: 0;\r\n            }\r\n            50% {\r\n                transform: translateX(-10px) scale(1.02);\r\n            }\r\n            100% {\r\n                transform: translateX(0) scale(1);\r\n                opacity: 1;\r\n            }\r\n        }\r\n\r\n        .toast-success {\r\n            border-left: 4px solid var(--success-500);\r\n            background: linear-gradient(135deg,\r\n                rgba(16, 185, 129, 0.1) 0%,\r\n                rgba(255, 255, 255, 0.95) 100%);\r\n            border: 1px solid rgba(16, 185, 129, 0.2);\r\n        }\r\n\r\n        .toast-success::after {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 4px;\r\n            height: 100%;\r\n            background: linear-gradient(180deg, var(--success-400), var(--success-600));\r\n            box-shadow: 0 0 10px var(--success-500);\r\n        }\r\n\r\n        .toast-error {\r\n            border-left: 4px solid var(--error-500);\r\n        }\r\n\r\n        .toast-warning {\r\n            border-left: 4px solid var(--warning-500);\r\n        }\r\n\r\n        .toast-info {\r\n            border-left: 4px solid var(--primary-500);\r\n        }\r\n\r\n        /* ======== RESPONSIVE DESIGN ======== */\r\n        /* Tablet Styles */\r\n        @media (max-width: 768px) {\r\n            body {\r\n                padding: var(--space-2);\r\n                font-size: 15px;\r\n            }\r\n\r\n            .container {\r\n                margin: 0;\r\n                border-radius: var(--radius-lg);\r\n                box-shadow: var(--shadow-lg);\r\n            }\r\n\r\n            .header {\r\n                padding: var(--space-5) var(--space-4);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.8rem;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                position: relative;\r\n            }\r\n\r\n            .tab {\r\n                flex: 1;\r\n                min-width: 120px;\r\n                font-size: 0.85rem;\r\n                padding: var(--space-3) var(--space-2);\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-5) var(--space-4);\r\n                min-height: 500px;\r\n            }\r\n\r\n            .form-grid {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-5);\r\n                margin-bottom: var(--space-5);\r\n            }\r\n\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .btn-group {\r\n                flex-direction: column;\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .sales-item-info {\r\n                grid-template-columns: 1fr;\r\n            }\r\n\r\n            /* Make buttons more touch-friendly */\r\n            .btn {\r\n                min-height: 48px;\r\n                padding: var(--space-3) var(--space-4);\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Customer search results */\r\n            #customer-search-results {\r\n                max-height: 250px;\r\n            }\r\n\r\n            /* Toast notifications positioning */\r\n            .toast {\r\n                top: var(--space-2);\r\n                right: var(--space-2);\r\n                left: var(--space-2);\r\n                max-width: none;\r\n            }\r\n        }\r\n\r\n        /* Mobile Styles */\r\n        @media (max-width: 480px) {\r\n            body {\r\n                padding: var(--space-1);\r\n                font-size: 14px;\r\n            }\r\n\r\n            .container {\r\n                margin: 0;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .header {\r\n                padding: var(--space-4) var(--space-3);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.5rem;\r\n                line-height: 1.2;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.85rem;\r\n                margin-top: var(--space-1);\r\n            }\r\n\r\n            .tabs {\r\n                overflow-x: auto;\r\n                flex-wrap: nowrap;\r\n                scrollbar-width: none;\r\n                -ms-overflow-style: none;\r\n                padding-bottom: 2px;\r\n                background: var(--neutral-50);\r\n                border-bottom: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tabs::-webkit-scrollbar {\r\n                display: none;\r\n            }\r\n\r\n            .tab {\r\n                min-width: 100px;\r\n                font-size: 0.8rem;\r\n                padding: var(--space-3) var(--space-2);\r\n                white-space: nowrap;\r\n                flex-shrink: 0;\r\n                gap: var(--space-1);\r\n                min-height: 65px;\r\n                flex-direction: column;\r\n                line-height: 1.1;\r\n                text-align: center;\r\n            }\r\n\r\n            .tab span {\r\n                display: block;\r\n                margin-top: var(--space-1);\r\n                font-size: 0.75rem;\r\n                line-height: 1.1;\r\n                text-align: center;\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-4) var(--space-3);\r\n                min-height: 400px;\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .form-section h3 {\r\n                font-size: 1.1rem;\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .form-group {\r\n                margin-bottom: var(--space-4);\r\n            }\r\n\r\n            .form-control {\r\n                padding: var(--space-3);\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n                border-radius: var(--radius-md);\r\n                min-height: 44px; /* iOS touch target minimum */\r\n            }\r\n\r\n            .form-control:focus {\r\n                border-width: 2px;\r\n                transform: none; /* Removes transform to prevent layout issues */\r\n            }\r\n\r\n            /* Buttons optimized for mobile */\r\n            .btn {\r\n                min-height: 50px;\r\n                padding: var(--space-4);\r\n                font-size: 1rem;\r\n                font-weight: 600;\r\n                border-radius: var(--radius-md);\r\n                width: 100%;\r\n                margin-bottom: var(--space-2);\r\n            }\r\n\r\n            .btn-group {\r\n                flex-direction: column;\r\n                width: 100%;\r\n            }\r\n\r\n            .btn-group .btn {\r\n                margin-bottom: var(--space-2);\r\n            }\r\n\r\n            /* Dashboard stats */\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: var(--space-4);\r\n                text-align: center;\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 1.8rem;\r\n            }\r\n\r\n            .stat-card p {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            /* Search input mobile optimization */\r\n            .search-input input {\r\n                padding: var(--space-3) var(--space-4) var(--space-3) var(--space-10);\r\n                font-size: 16px;\r\n                min-height: 44px;\r\n            }\r\n\r\n            .search-input i {\r\n                left: var(--space-3);\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Customer search results */\r\n            #customer-search-results {\r\n                max-height: 200px;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .customer-search-result {\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .customer-name {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            .customer-details {\r\n                font-size: 0.85rem;\r\n            }\r\n\r\n            /* Filter section */\r\n            .filter-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .filter-header h3 {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Sales records table/list mobile view */\r\n            .sales-item {\r\n                flex-direction: column;\r\n                padding: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .sales-item-info {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-2);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .sales-item-actions {\r\n                justify-content: stretch;\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .edit-btn, .delete-btn {\r\n                flex: 1;\r\n                min-height: 40px;\r\n                font-size: 0.85rem;\r\n            }\r\n\r\n            /* Toast notifications for mobile */\r\n            .toast {\r\n                top: var(--space-2);\r\n                right: var(--space-2);\r\n                left: var(--space-2);\r\n                max-width: none;\r\n                padding: var(--space-3);\r\n                font-size: 0.9rem;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            /* Charts container */\r\n            .chart-container {\r\n                margin: var(--space-3) 0;\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            /* Make scrollable containers touch-friendly */\r\n            .scrollable-container {\r\n                max-height: 400px;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n\r\n            .scrollable-container::-webkit-scrollbar {\r\n                width: 94px;\r\n            }\r\n        }\r\n\r\n        /* Extra small devices */\r\n        @media (max-width: 360px) {\r\n            .header h1 {\r\n                font-size: 1.35rem;\r\n            }\r\n\r\n            .tab {\r\n                min-width: 90px;\r\n                font-size: 0.7rem;\r\n                line-height: 1;\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n                padding: var(--space-2) var(--space-2);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.7rem;\r\n                line-height: 1;\r\n            }\r\n\r\n        /* Very small screens - Show abbreviated text */\r\n        @media (max-width: 320px) {\r\n            .tab {\r\n                min-width: 75px;\r\n                padding: var(--space-2) var(--space-1);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.65rem;\r\n                line-height: 0.9;\r\n            }\r\n\r\n            /* Abbreviate long tab names for very small screens */\r\n            .tab:nth-child(1) span::after { content: \"Entry\"; }\r\n            .tab:nth-child(1) span { font-size: 0; }\r\n            .tab:nth-child(1) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(2) span::after { content: \"Recent\"; }\r\n            .tab:nth-child(2) span { font-size: 0; }\r\n            .tab:nth-child(2) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(3) span::after { content: \"Stats\"; }\r\n            .tab:nth-child(3) span { font-size: 0; }\r\n            .tab:nth-child(3) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(4) span::after { content: \"Contacts\"; }\r\n            .tab:nth-child(4) span { font-size: 0; }\r\n            .tab:nth-child(4) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(5) span::after { content: \"Charts\"; }\r\n            .tab:nth-child(5) span { font-size: 0; }\r\n            .tab:nth-child(5) span::after { font-size: 0.65rem; }\r\n        }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            .btn {\r\n                min-height: 48px;\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .dashboard-stats {\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 1.5rem;\r\n            }\r\n        }\r\n\r\n        /* Very small screens - Show abbreviated text */\r\n        @media (max-width: 320px) {\r\n            .tab {\r\n                min-width: 75px;\r\n                padding: var(--space-2) var(--space-1);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.65rem;\r\n                line-height: 0.9;\r\n            }\r\n\r\n            /* Abbreviate long tab names for very small screens */\r\n            .tab:nth-child(1) span::after { content: \"Entry\"; }\r\n            .tab:nth-child(1) span { font-size: 0; }\r\n            .tab:nth-child(1) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(2) span::after { content: \"Recent\"; }\r\n            .tab:nth-child(2) span { font-size: 0; }\r\n            .tab:nth-child(2) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(3) span::after { content: \"Stats\"; }\r\n            .tab:nth-child(3) span { font-size: 0; }\r\n            .tab:nth-child(3) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(4) span::after { content: \"Contacts\"; }\r\n            .tab:nth-child(4) span { font-size: 0; }\r\n            .tab:nth-child(4) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(5) span::after { content: \"Charts\"; }\r\n            .tab:nth-child(5) span { font-size: 0; }\r\n            .tab:nth-child(5) span::after { font-size: 0.65rem; }\r\n        }\r\n\r\n        /* Enhanced mobile navigation */\r\n        @media (max-width: 480px) {\r\n            /* Add horizontal scroll indicator */\r\n            .tabs::after {\r\n                content: '';\r\n                position: absolute;\r\n                bottom: 0;\r\n                right: 0;\r\n                width: 20px;\r\n                height: 100%;\r\n                background: linear-gradient(to right, transparent, var(--neutral-50));\r\n                pointer-events: none;\r\n                z-index: 1;\r\n            }\r\n\r\n            /* Better visual feedback for active tab */\r\n            .tab.active {\r\n                box-shadow: 0 -3px 0 var(--accent-500) inset;\r\n                background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-500) 100%);\r\n            }\r\n\r\n            /* Improve readability */\r\n            .tab {\r\n                border-right: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tab:last-child {\r\n                border-right: none;\r\n            }\r\n        }\r\n\r\n        /* Landscape orientation on mobile */\r\n        @media (max-width: 768px) and (orientation: landscape) {\r\n            .header {\r\n                padding: var(--space-3) var(--space-4);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.4rem;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.8rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n        }\r\n\r\n        /* ======== MOBILE-SPECIFIC ENHANCEMENTS ======== */\r\n        /* Touch-friendly interactions */\r\n        @media (hover: none) and (pointer: coarse) {\r\n            .btn {\r\n                min-height: 48px;\r\n                padding: var(--space-4);\r\n                font-size: 1rem;\r\n                font-weight: 600;\r\n            }\r\n\r\n            .form-control {\r\n                min-height: 48px;\r\n                padding: var(--space-4);\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n\r\n            .tab {\r\n                min-height: 48px;\r\n                padding: var(--space-3) var(--space-2);\r\n            }\r\n\r\n            /* Remove hover effects on touch devices */\r\n            .btn:hover,\r\n            .form-control:hover,\r\n            .tab:hover {\r\n                transform: none;\r\n            }\r\n\r\n            /* Enhanced tap targets */\r\n            .customer-search-result {\r\n                min-height: 60px;\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .edit-btn, .delete-btn {\r\n                min-height: 44px;\r\n                min-width: 80px;\r\n            }\r\n        }\r\n\r\n        /* Enhanced mobile navigation */\r\n        @media (max-width: 480px) {\r\n            /* Add horizontal scroll indicator */\r\n            .tabs::after {\r\n                content: '';\r\n                position: absolute;\r\n                bottom: 0;\r\n                right: 0;\r\n                width: 20px;\r\n                height: 100%;\r\n                background: linear-gradient(to right, transparent, var(--neutral-50));\r\n                pointer-events: none;\r\n                z-index: 1;\r\n            }\r\n\r\n            /* Better visual feedback for active tab */\r\n            .tab.active {\r\n                box-shadow: 0 -3px 0 var(--accent-500) inset;\r\n                background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-500) 100%);\r\n            }\r\n\r\n            /* Improve readability */\r\n            .tab {\r\n                border-right: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tab:last-child {\r\n                border-right: none;\r\n            }\r\n        }\r\n\r\n        /* iOS Safari specific fixes */\r\n        @supports (-webkit-appearance: none) {\r\n            .form-control {\r\n                -webkit-appearance: none;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            select.form-control {\r\n                background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e\");\r\n                background-repeat: no-repeat;\r\n                background-position: right var(--space-3) center;\r\n                background-size: 20px;\r\n                padding-right: var(--space-12);\r\n            }\r\n        }\r\n\r\n        /* Android Chrome specific optimizations */\r\n        @media screen and (-webkit-min-device-pixel-ratio: 1) {\r\n            .form-control:focus {\r\n                zoom: 1; /* Prevent zoom on Android */\r\n            }\r\n        }\r\n\r\n        /* High DPI displays */\r\n        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\r\n            .btn, .form-control, .tab {\r\n                border-width: 0.5px;\r\n            }\r\n        }\r\n\r\n        /* Print styles */\r\n        @media print {\r\n            body {\r\n                background: white;\r\n                color: black;\r\n                font-size: 12pt;\r\n                line-height: 1.4;\r\n            }\r\n\r\n            .header {\r\n                background: none;\r\n                color: black;\r\n                border-bottom: 2px solid black;\r\n            }\r\n\r\n            .tabs, .btn {\r\n                display: none;\r\n            }\r\n\r\n            .tab-content {\r\n                display: block !important;\r\n                padding: 0;\r\n            }\r\n\r\n            .form-section {\r\n                border: 1px solid black;\r\n                margin-bottom: 20pt;\r\n                page-break-inside: avoid;\r\n            }\r\n\r\n            .container {\r\n                box-shadow: none;\r\n                border-radius: 0;\r\n            }\r\n        }\r\n\r\n        /* ======== UTILITY CLASSES ======== */\r\n        .sr-only {\r\n            position: absolute;\r\n            width: 1px;\r\n            height: 1px;\r\n            padding: 0;\r\n            margin: -1px;\r\n            overflow: hidden;\r\n            clip: rect(0, 0, 0, 0);\r\n            white-space: nowrap;\r\n            border: 0;\r\n        }\r\n\r\n        .text-center { text-align: center; }\r\n        .text-right { text-align: right; }\r\n        .text-left { text-align: left; }\r\n\r\n        .fw-bold { font-weight: 700; }\r\n        .fw-semibold { font-weight: 600; }\r\n        .fw-medium { font-weight: 500; }\r\n        .fw-normal { font-weight: 400; }\r\n\r\n        .text-primary { color: var(--primary-600); }\r\n        .text-secondary { color: var(--secondary-600); }\r\n        .text-success { color: var(--success-600); }\r\n        .text-error { color: var(--error-600); }\r\n        .text-warning { color: var(--warning-600); }\r\n        .text-muted { color: var(--neutral-500); }\r\n\r\n        .bg-primary { background-color: var(--primary-600); }\r\n        .bg-secondary { background-color: var(--secondary-600); }\r\n        .bg-success { background-color: var(--success-600); }\r\n        .bg-error { background-color: var(--error-600); }\r\n        .bg-warning { background-color: var(--warning-600); }\r\n\r\n        .mb-2 { margin-bottom: var(--space-2); }\r\n        .mb-3 { margin-bottom: var(--space-3); }\r\n        .mb-4 { margin-bottom: var(--space-4); }\r\n        .mb-6 { margin-bottom: var(--space-6); }\r\n\r\n        .mt-2 { margin-top: var(--space-2); }\r\n        .mt-3 { margin-top: var(--space-3); }\r\n        .mt-4 { margin-top: var(--space-4); }\r\n        .mt-6 { margin-top: var(--space-6); }\r\n\r\n        .edit-form {\r\n            background: #fff;\r\n            border: 2px solid #4ecdc4;\r\n            border-radius: 8px;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            position: relative;\r\n        }\r\n\r\n        .edit-form h4 {\r\n            color: #4ecdc4;\r\n            margin-bottom: 15px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .edit-form-row {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            gap: 10px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group label {\r\n            display: block;\r\n            margin-bottom: 3px;\r\n            font-weight: 600;\r\n            color: #333;\r\n            font-size: 12px;\r\n        }\r\n\r\n        .edit-form-group input,\r\n        .edit-form-group select,\r\n        .edit-form-group textarea {\r\n            width: 100%;\r\n            padding: 8px;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 4px;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .edit-form-buttons {\r\n            display: flex;\r\n            gap: 10px;\r\n            margin-top: 15px;\r\n        }\r\n\r\n        .edit-form-buttons button {\r\n            flex: 1;\r\n            padding: 10px;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .save-edit-btn {\r\n            background: #28a745;\r\n            color: white;\r\n        }\r\n\r\n        .save-edit-btn:hover {\r\n            background: #218838;\r\n        }\r\n\r\n        .cancel-edit-btn {\r\n            background: #6c757d;\r\n            color: white;\r\n        }\r\n\r\n        .cancel-edit-btn:hover {\r\n            background: #5a6268;\r\n        }\r\n\r\n        /* Customer search styles */\r\n        .customer-search-result {\r\n            padding: 12px;\r\n            cursor: pointer;\r\n            border-bottom: 1px solid #eee;\r\n            border-left: 3px solid transparent;\r\n            transition: all 0.2s ease;\r\n        }\r\n\r\n        .customer-search-result:hover {\r\n            background-color: #f8f9fa;\r\n            border-left-color: #4ecdc4;\r\n            transform: translateX(2px);\r\n        }\r\n\r\n        .customer-search-result:last-child {\r\n            border-bottom: none;\r\n        }\r\n\r\n        .customer-name {\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin-bottom: 4px;\r\n            font-size: 15px;\r\n        }\r\n\r\n        .customer-details {\r\n            font-size: 12px;\r\n            color: #666;\r\n            margin-bottom: 2px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n        }\r\n\r\n        .customer-stats {\r\n            font-size: 11px;\r\n            color: #4ecdc4;\r\n            margin-top: 8px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .customer-source-badge {\r\n            font-size: 10px;\r\n            color: #999;\r\n            padding: 2px 6px;\r\n            background: #f0f0f0;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .customer-last-purchase {\r\n            font-size: 10px;\r\n            color: #999;\r\n            font-style: italic;\r\n        }\r\n\r\n        /* Enhanced search results container */\r\n        #customer-search-results {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            border-radius: 8px;\r\n            border: 1px solid #ddd;\r\n            background: white;\r\n            max-height: 300px;\r\n            overflow-y: auto;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb:hover {\r\n            background: #45b7b8;\r\n        }\r\n\r\n        /* Section headers */\r\n        .section-header {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-bottom: 15px;\r\n            padding-bottom: 8px;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .section-icon {\r\n            margin-right: 8px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        /* Additional mobile-specific styles for components */\r\n        @media (max-width: 600px) {\r\n            /* Import section responsive */\r\n            .import-section {\r\n                flex-direction: column !important;\r\n                gap: var(--space-3) !important;\r\n            }\r\n\r\n            .import-section button {\r\n                width: 100% !important;\r\n                margin-bottom: var(--space-2);\r\n                min-height: 48px;\r\n            }\r\n\r\n            /* Customer database responsive design */\r\n            .customer-info-grid {\r\n                grid-template-columns: 1fr !important;\r\n                gap: var(--space-2) !important;\r\n            }\r\n\r\n            .customer-purchase-stats {\r\n                grid-template-columns: repeat(2, 1fr) !important;\r\n                gap: var(--space-2) !important;\r\n            }\r\n\r\n            .customer-card {\r\n                padding: var(--space-4) !important;\r\n                margin-bottom: var(--space-3) !important;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .enhanced-customers-container {\r\n                max-height: 400px !important;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n\r\n            /* Sales items mobile layout */\r\n            .customer-item,\r\n            .sale-item {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-3);\r\n                border-radius: var(--radius-md);\r\n                border: 1px solid var(--neutral-200);\r\n                background: white;\r\n            }\r\n        }\r\n\r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n\r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n\r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n\r\n        /* ======== MOBILE-FRIENDLY MODAL/ALERT SYSTEM ======== */\r\n        .mobile-modal {\r\n            display: none;\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: rgba(0, 0, 0, 0.5);\r\n            z-index: 2000;\r\n            align-items: center;\r\n            justify-content: center;\r\n            padding: var(--space-4);\r\n        }\r\n\r\n        .mobile-modal.show {\r\n            display: flex;\r\n        }\r\n\r\n        .mobile-modal-content {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-6);\r\n            max-width: 400px;\r\n            width: 100%;\r\n            max-height: 80vh;\r\n            overflow-y: auto;\r\n            box-shadow: var(--shadow-2xl);\r\n            text-align: center;\r\n            animation: modalSlideIn 0.3s ease-out;\r\n        }\r\n\r\n        @keyframes modalSlideIn {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(-20px) scale(0.95);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0) scale(1);\r\n            }\r\n        }\r\n\r\n        .mobile-modal-header {\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            margin-bottom: var(--space-4);\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .mobile-modal-body {\r\n            margin-bottom: var(--space-6);\r\n            color: var(--neutral-700);\r\n            line-height: 1.5;\r\n            text-align: left;\r\n        }\r\n\r\n        .mobile-modal-buttons {\r\n            display: flex;\r\n            gap: var(--space-3);\r\n            justify-content: center;\r\n        }\r\n\r\n        .mobile-modal-buttons .btn {\r\n            flex: 1;\r\n            max-width: 120px;\r\n        }\r\n\r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n\r\n        /* Multi-Select Category Styles */\r\n        .multi-select-display:hover {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display:focus-within {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display.active {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display.active #category-arrow {\r\n            transform: rotate(180deg);\r\n        }\r\n\r\n        .category-option:hover {\r\n            background-color: var(--primary-50) !important;\r\n        }\r\n\r\n        .category-option input[type=\"checkbox\"] {\r\n            accent-color: var(--primary-600);\r\n        }\r\n\r\n        .category-tag {\r\n            background: var(--primary-600);\r\n            color: white;\r\n            padding: 4px 8px;\r\n            border-radius: 12px;\r\n            font-size: 12px;\r\n            font-weight: 500;\r\n            display: inline-flex;\r\n            align-items: center;\r\n            gap: 4px;\r\n            max-width: 120px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        .category-tag .remove-tag {\r\n            background: rgba(255, 255, 255, 0.3);\r\n            border: none;\r\n            color: white;\r\n            width: 16px;\r\n            height: 16px;\r\n            border-radius: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            cursor: pointer;\r\n            font-size: 10px;\r\n            margin-left: 4px;\r\n            transition: background-color 0.2s;\r\n        }\r\n\r\n        .category-tag .remove-tag:hover {\r\n            background: rgba(255, 255, 255, 0.5);\r\n        }\r\n\r\n        /* Enhanced Multi-Select Dropdown Styles */\r\n        .multi-select-container {\r\n            position: relative;\r\n            z-index: 100;\r\n        }\r\n\r\n        /* Create stacking context for dropdown */\r\n        .form-section:has(.multi-select-container) {\r\n            z-index: 100 !important;\r\n        }\r\n\r\n        .multi-select-dropdown {\r\n            animation: fadeInDown 0.3s ease-out;\r\n            z-index: 99999 !important;\r\n            position: absolute !important;\r\n            width: 100% !important;\r\n            box-shadow:\r\n                0 20px 25px -5px rgba(0, 0, 0, 0.3),\r\n                0 10px 10px -5px rgba(0, 0, 0, 0.1) !important;\r\n            border: 2px solid var(--primary-600) !important;\r\n            background: white !important;\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar-track {\r\n            background: var(--neutral-100);\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar-thumb {\r\n            background: var(--primary-600);\r\n            border-radius: 3px;\r\n        }\r\n\r\n        /* Additional dropdown positioning fixes */\r\n        .multi-select-dropdown[style*=\"display: block\"],\r\n        .multi-select-dropdown[style*=\"display: flex\"] {\r\n            position: fixed !important;\r\n            z-index: 99999 !important;\r\n            transform: translateZ(0) !important;\r\n            will-change: transform !important;\r\n        }\r\n\r\n        /* Prevent other elements from overlapping */\r\n        .form-section:not(:has(.multi-select-container)) {\r\n            z-index: 1 !important;\r\n        }\r\n\r\n        @keyframes fadeInDown {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(-10px);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        /* Enhanced Sales Container Scrolling */\r\n        .enhanced-sales-container {\r\n            position: relative !important;\r\n            max-height: 600px !important;\r\n            overflow-y: auto !important;\r\n            overflow-x: hidden !important;\r\n            border: 1px solid #e9ecef !important;\r\n            border-radius: 8px !important;\r\n            background: #fafafa !important;\r\n            scrollbar-width: thin;\r\n            scrollbar-color: #4ecdc4 #f1f1f1;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 4px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 4px;\r\n            transition: background 0.3s ease;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb:hover {\r\n            background: #44a08d;\r\n        }\r\n\r\n        /* Purchase History Container */\r\n        .enhanced-purchase-container {\r\n            position: relative !important;\r\n            max-height: 500px !important;\r\n            overflow-y: auto !important;\r\n            overflow-x: hidden !important;\r\n            border: 1px solid #e9ecef !important;\r\n            border-radius: 8px !important;\r\n            background: #f8f9fa !important;\r\n            scrollbar-width: thin;\r\n            scrollbar-color: #667eea #f1f1f1;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 4px;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-thumb {\r\n            background: #667eea;\r\n            border-radius: 4px;\r\n            transition: background 0.3s ease;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-thumb:hover {\r\n            background: #764ba2;\r\n        }\r\n\r\n        /* Ensure sales records have proper layout */\r\n        #sales-records, #purchase-records {\r\n            padding: 10px !important;\r\n            min-height: 100px !important;\r\n            height: auto !important;\r\n            overflow: visible !important;\r\n        }\r\n\r\n        /* Sales and Purchase record items */\r\n        .sale-record-item, .purchase-record-item {\r\n            margin-bottom: 15px;\r\n            padding: 15px;\r\n            background: white;\r\n            border-radius: 8px;\r\n            border: 1px solid #e9ecef;\r\n            transition: all 0.2s ease;\r\n            position: relative;\r\n        }\r\n\r\n        .sale-record-item:hover, .purchase-record-item:hover {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .purchase-record-item {\r\n            border-left: 4px solid #667eea;\r\n        }\r\n\r\n        /* Fix for parent containers that might affect scrolling */\r\n        #sales-content-container, #purchase-content-container {\r\n            overflow: visible !important;\r\n            height: auto !important;\r\n            max-height: none !important;\r\n        }\r\n\r\n        .tab-content {\r\n            overflow: visible !important;\r\n            height: auto !important;\r\n            max-height: none !important;\r\n        }\r\n\r\n        /* Collapsible sections */\r\n        .collapsible-section {\r\n            transition: all 0.3s ease;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .collapsible-section.collapsed {\r\n            max-height: 0;\r\n            padding: 0;\r\n            margin: 0;\r\n        }\r\n\r\n        .collapsible-section.expanded {\r\n            max-height: 2000px;\r\n        }\r\n\r\n        /* Toggle buttons */\r\n        .toggle-btn {\r\n            background: rgba(255,255,255,0.2);\r\n            border: none;\r\n            color: white;\r\n            font-size: 18px;\r\n            cursor: pointer;\r\n            padding: 8px 12px;\r\n            border-radius: 6px;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .toggle-btn:hover {\r\n            background: rgba(255,255,255,0.3);\r\n            transform: scale(1.1);\r\n        }\r\n\r\n        .toggle-btn.collapsed {\r\n            transform: rotate(-90deg);\r\n        }\r\n\r\n        /* Ensure proper scrolling behavior on mobile */\r\n        @media (max-width: 768px) {\r\n            .enhanced-sales-container, .enhanced-purchase-container {\r\n                max-height: 400px !important;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n        }\r\n\r\n        /* ======== ENHANCED VISUAL ELEMENTS ======== */\r\n        .form-section h3 i {\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n            background-clip: text;\r\n            font-size: 1.2em;\r\n            margin-right: 8px;\r\n            animation: iconShine 3s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes iconShine {\r\n            0%, 100% { opacity: 1; }\r\n            50% { opacity: 0.7; }\r\n        }\r\n\r\n        /* Floating Quick Actions */\r\n        .floating-actions {\r\n            position: fixed;\r\n            bottom: 20px;\r\n            right: 20px;\r\n            z-index: 1000;\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 12px;\r\n        }\r\n\r\n        .floating-btn {\r\n            width: 56px;\r\n            height: 56px;\r\n            border-radius: 50%;\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            color: white;\r\n            border: none;\r\n            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);\r\n            cursor: pointer;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-size: 20px;\r\n            transition: all 0.3s ease;\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .floating-btn::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: -100%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\r\n            transition: left 0.5s ease;\r\n        }\r\n\r\n        .floating-btn:hover {\r\n            transform: scale(1.1);\r\n            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);\r\n        }\r\n\r\n        .floating-btn:hover::before {\r\n            left: 100%;\r\n        }\r\n\r\n        /* Progress indicators */\r\n        .progress-bar {\r\n            width: 100%;\r\n            height: 8px;\r\n            background: rgba(255, 255, 255, 0.2);\r\n            border-radius: 4px;\r\n            overflow: hidden;\r\n            margin: 10px 0;\r\n        }\r\n\r\n        .progress-fill {\r\n            height: 100%;\r\n            background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);\r\n            background-size: 200% 100%;\r\n            animation: progressShine 2s linear infinite;\r\n            transition: width 0.5s ease;\r\n        }\r\n\r\n        @keyframes progressShine {\r\n            0% { background-position: -200% 0; }\r\n            100% { background-position: 200% 0; }\r\n        }\r\n\r\n        /* Enhanced form labels */\r\n        .form-group label {\r\n            position: relative;\r\n        }\r\n\r\n        .form-group label::before {\r\n            content: '';\r\n            position: absolute;\r\n            left: -15px;\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            width: 4px;\r\n            height: 100%;\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            border-radius: 2px;\r\n            opacity: 0;\r\n            transition: opacity 0.3s ease;\r\n        }\r\n\r\n        .form-group:focus-within label::before {\r\n            opacity: 1;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <header class=\"header\">\r\n            <h1>💎 Theia Jewelz</h1>\r\n            <p class=\"subtitle\">Modern Sales Management System</p>\r\n        </header>\r\n\r\n        <nav class=\"tabs\" role=\"tablist\" aria-label=\"Main navigation\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\" role=\"tab\" aria-selected=\"true\" aria-controls=\"sales\">\r\n                <i class=\"fas fa-plus-circle\"></i>\r\n                <span>Sales Entry</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('recent-sales')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"recent-sales\">\r\n                <i class=\"fas fa-list\"></i>\r\n                <span>Recent Sales</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"dashboard\">\r\n                <i class=\"fas fa-chart-pie\"></i>\r\n                <span>Dashboard</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"customers\">\r\n                <i class=\"fas fa-users\"></i>\r\n                <span>Customers</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"analytics\">\r\n                <i class=\"fas fa-chart-line\"></i>\r\n                <span>Analytics</span>\r\n            </button>\r\n        </nav>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\" role=\"tabpanel\" aria-labelledby=\"sales-tab\">\r\n            <div class=\"filter-section\">\r\n                <div class=\"filter-header\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <h3>Search Existing Customer</h3>\r\n                </div>\r\n                <div class=\"search-input\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <input type=\"text\" id=\"customerSearch\" placeholder=\"Type customer name, phone, or email to search...\"\r\n                           oninput=\"searchCustomers()\" onkeydown=\"handleSearchKeydown(event)\" autocomplete=\"off\"\r\n                           class=\"form-control\">\r\n                    <div id=\"customer-search-results\" style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                         background: white; border: 1px solid var(--neutral-300); border-top: none; border-radius: 0 0 var(--radius-md) var(--radius-md);\r\n                         max-height: 250px; overflow-y: auto; z-index: 1000; box-shadow: var(--shadow-lg);\">\r\n                    </div>\r\n                </div>\r\n                <p class=\"text-muted\" style=\"font-size: 0.875rem; margin-top: var(--space-2);\">\r\n                    <i class=\"fas fa-info-circle\"></i>\r\n                    Search from <span id=\"total-customers\" class=\"fw-semibold\">0</span> customers - includes database & sales records\r\n                </p>\r\n            </div>\r\n\r\n            <!-- Success/Error Messages -->\r\n            <div id=\"success-toast\" class=\"toast toast-success\" style=\"display: none;\">\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"fas fa-check-circle\"></i>\r\n                    <span id=\"success-message\"></span>\r\n                </div>\r\n            </div>\r\n            <div id=\"error-toast\" class=\"toast toast-error\" style=\"display: none;\">\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"fas fa-exclamation-circle\"></i>\r\n                    <span id=\"error-message\"></span>\r\n                </div>\r\n            </div>\r\n\r\n            <form id=\"sales-form\" style=\"position: relative; z-index: 1;\">\r\n                <!-- Customer Information Section -->\r\n                <div class=\"form-section\">\r\n                    <h3><i class=\"fas fa-user\"></i> Customer Information</h3>\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"customerName\" class=\"required\">Customer Name</label>\r\n                            <input type=\"text\" id=\"customerName\" class=\"form-control\" required\r\n                                   placeholder=\"Enter customer name\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Customer name is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"customerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"customerPhone\" class=\"form-control\"\r\n                                   placeholder=\"Enter phone number\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"customerAddress\">Address</label>\r\n                            <textarea id=\"customerAddress\" class=\"form-control\" rows=\"2\"\r\n                                      placeholder=\"Enter customer address (optional)\"></textarea>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Item Information Section -->\r\n                <div class=\"form-section\" style=\"z-index: 10; position: relative;\">\r\n                    <h3><i class=\"fas fa-gem\"></i> Item Information</h3>\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"itemName\" class=\"required\">Item Name</label>\r\n                            <input type=\"text\" id=\"itemName\" class=\"form-control\" required\r\n                                   placeholder=\"e.g., Gold Plated Necklace\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Item name is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"category\" class=\"required\">Categories</label>\r\n                            <div class=\"multi-select-container\" style=\"position: relative;\">\r\n                                <div class=\"multi-select-display\" id=\"category-display\" onclick=\"toggleCategoryDropdown()\"\r\n                                     style=\"border: 2px solid var(--neutral-300); border-radius: var(--radius-md); padding: var(--space-3) var(--space-4);\r\n                                            background: white; cursor: pointer; min-height: 48px; display: flex; align-items: center;\r\n                                            justify-content: space-between; transition: var(--transition-normal);\">\r\n                                    <span id=\"category-placeholder\" style=\"color: var(--neutral-400);\">Select categories...</span>\r\n                                    <span id=\"category-selected\" style=\"display: none; flex-wrap: wrap; gap: 6px; flex: 1;\"></span>\r\n                                    <i class=\"fas fa-chevron-down\" id=\"category-arrow\" style=\"transition: transform 0.3s ease;\"></i>\r\n                                </div>\r\n\r\n                                <div class=\"multi-select-dropdown\" id=\"category-dropdown\"\r\n                                     style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                                            background: white !important; border: 2px solid var(--primary-600) !important; border-top: none;\r\n                                            border-radius: 0 0 var(--radius-md) var(--radius-md); max-height: 250px;\r\n                                            overflow-y: auto; z-index: 99999 !important;\r\n                                            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1) !important;\r\n                                            transform: translateZ(0) !important;\">\r\n\r\n                                    <div style=\"padding: 12px; border-bottom: 1px solid var(--neutral-200); background: var(--neutral-50);\">\r\n                                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                                            <button type=\"button\" onclick=\"selectAllCategories()\"\r\n                                                    style=\"background: var(--primary-600); color: white; border: none; padding: 4px 8px;\r\n                                                           border-radius: 4px; font-size: 12px; cursor: pointer;\">Select All</button>\r\n                                            <button type=\"button\" onclick=\"clearAllCategories()\"\r\n                                                    style=\"background: var(--neutral-400); color: white; border: none; padding: 4px 8px;\r\n                                                           border-radius: 4px; font-size: 12px; cursor: pointer;\">Clear All</button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"category-options\" style=\"padding: 8px;\">\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Necklaces\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>✨ Necklaces</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Earrings\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>👂 Earrings</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Bracelets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🔗 Bracelets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Rings\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>💍 Rings</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Anklets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🦶 Anklets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Sets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>💎 Sets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Bangles\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>⚪ Bangles</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Chains\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🔗 Chains</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Pendants\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🏷️ Pendants</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Brooches\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>📎 Brooches</span>\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-error\" id=\"category-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Please select at least one category</span>\r\n                            </div>\r\n                            <p style=\"font-size: 12px; color: var(--neutral-500); margin-top: 5px;\">\r\n                                💡 You can select multiple categories for combination items (e.g., Necklace + Earrings set)\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"saleDate\" class=\"required\">Sale Date</label>\r\n                            <input type=\"date\" id=\"saleDate\" class=\"form-control\" required>\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Sale date is required</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Pricing Information Section -->\r\n                <div class=\"form-section\" style=\"z-index: 1; position: relative;\">\r\n                    <h3><i class=\"fas fa-money-bill-wave\"></i> Pricing Information</h3>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"costPrice\">Cost Price (₹) *</label>\r\n                        <input type=\"number\" id=\"costPrice\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"sellingPrice\">Selling Price (₹) *</label>\r\n                        <input type=\"number\" id=\"sellingPrice\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\r\n                        <label for=\"profit\">Profit (₹)</label>\r\n                        <input type=\"number\" id=\"profit\" readonly placeholder=\"Auto-calculated\" style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"button\" class=\"btn btn-primary add-sale-btn\" onclick=\"addSaleRecord()\">💾 Add Sale Record</button>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n        <!-- Recent Sales Tab -->\r\n        <div id=\"recent-sales\" class=\"tab-content\">\r\n            <h2>📋 Recent Sales & Import</h2>\r\n\r\n            <!-- Select Record to Display Section -->\r\n            <div style=\"margin-bottom: 30px; padding: 20px; background: linear-gradient(135deg, #667eea, #764ba2); border-radius: 12px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                <div style=\"display: flex; align-items: center; gap: 15px; color: white;\">\r\n                    <i class=\"fas fa-filter\" style=\"font-size: 20px; color: #ffd700;\"></i>\r\n                    <div style=\"flex: 1;\">\r\n                        <label style=\"display: block; margin-bottom: 8px; font-weight: 600; font-size: 16px; color: white;\">\r\n                            Select Record to Display\r\n                        </label>\r\n                        <select id=\"record-display-selector\" onchange=\"changeRecordDisplay()\"\r\n                                style=\"width: 100%; max-width: 300px; padding: 12px; border: 2px solid rgba(255,255,255,0.3); border-radius: 8px; font-size: 14px; background: rgba(255,255,255,0.95); color: #333; font-weight: 500;\">\r\n                            <option value=\"sales-record\" selected>Sales Record</option>\r\n                            <option value=\"daily-sales-report\">Daily Sales Report</option>\r\n                            <option value=\"purchase-history\">Purchase History</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Sales Import Section -->\r\n            <div id=\"sales-import-section\" style=\"margin-bottom: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px; border: 2px solid #e9ecef;\">\r\n                <h3 style=\"margin: 0 0 15px 0; color: #4ecdc4;\">📤 Bulk Import Sales</h3>\r\n                <p style=\"margin: 0 0 15px 0; color: #666; font-size: 14px;\">Import multiple sales records from CSV or Excel file</p>\r\n\r\n                <div style=\"display: flex; gap: 10px; align-items: center; flex-wrap: wrap;\" class=\"import-section\">\r\n                    <input type=\"file\" id=\"sales-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importSales(event)\">\r\n                    <button class=\"btn btn-primary\" onclick=\"document.getElementById('sales-import-file').click()\" style=\"width: auto; padding: 10px 16px; font-size: 14px;\" title=\"Import sales from CSV or Excel file\">\r\n                        📤 Import Sales Data\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"downloadSalesTemplate()\" style=\"width: auto; padding: 10px 16px; font-size: 14px; background-color: #6c757d; color: white;\" title=\"Download sample CSV template\">\r\n                        📋 Download Template\r\n                    </button>\r\n                    <small style=\"color: #666; font-size: 12px;\">Supports CSV and Excel files with required columns: Item Name, Category, Cost Price, Selling Price, Sale Date, Customer Name</small>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Recent Sales Section -->\r\n            <div id=\"sales-records-section\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">📋 Sales Records (<span id=\"sales-count\">0</span>)</h3>\r\n                            <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" class=\"toggle-btn\" title=\"Expand/Collapse Sales Records\">\r\n                                ►\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                            <button class=\"btn\" onclick=\"downloadExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                📥 Export All\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"sales-content-container\" class=\"collapsible-section collapsed\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                    <div style=\"padding: 20px;\">\r\n                        <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                            <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Sales Summary</h4>\r\n                            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Sales</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Cost</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-selling\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Profit</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <!-- Search and Filter Section -->\r\n                        <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                            <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                <div>\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Sales</label>\r\n                                    <input type=\"text\" id=\"sales-search\" placeholder=\"Search by item name, customer name, or category...\"\r\n                                           oninput=\"filterSales()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                </div>\r\n                                <div style=\"display: flex; gap: 10px;\">\r\n                                    <button onclick=\"clearSalesFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        🔄 Clear\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Sales Records Container with Enhanced Scrolling -->\r\n                        <div class=\"enhanced-sales-container\">\r\n                            <div id=\"sales-records\"></div>\r\n                            <div id=\"load-more-container\" style=\"text-align: center; padding: 20px; display: none;\">\r\n                                <button id=\"load-more-btn\" class=\"btn btn-primary\" onclick=\"loadMoreSales()\" style=\"width: auto; padding: 12px 24px; font-size: 14px; border-radius: 20px;\">\r\n                                    📖 Load More Sales\r\n                                </button>\r\n                            </div>\r\n                            <div id=\"no-sales-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                <h3 style=\"color: #999;\">📭 No Sales Records Found</h3>\r\n                                <p>Add your first sale in the Sales Entry tab or import existing data!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Daily Sales Report Section -->\r\n            <div id=\"daily-sales-report\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden; margin-bottom: 30px; display: none;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <h3 style=\"margin: 0; font-size: 20px;\">📅 Daily Sales Report</h3>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"exportDailySalesReport()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-size: 12px;\">\r\n                                📥 Export Report\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"daily-sales-content\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                        <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Daily Sales Summary</h4>\r\n                        <div id=\"daily-sales-summary\" style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Sales</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-revenue\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Revenue</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Profit</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-avg-sale\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Sale Value</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Purchase History Section -->\r\n                <div id=\"purchase-history-section\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden; margin-top: 30px; display: none;\">\r\n                    <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                            <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                                <h3 style=\"margin: 0; font-size: 20px;\">📦 Purchase History (<span id=\"purchase-count\">0</span>)</h3>\r\n                                <button id=\"purchase-toggle-btn\" onclick=\"togglePurchaseSection()\" class=\"toggle-btn\" title=\"Expand/Collapse Purchase History\">\r\n                                    ►\r\n                                </button>\r\n                            </div>\r\n                            <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                                <button class=\"btn\" onclick=\"exportPurchaseHistory()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                    📥 Export Purchases\r\n                                </button>\r\n                                <button class=\"btn\" onclick=\"addToPurchaseHistory()\" style=\"background: #10B981; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                    ➕ Add Purchase\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"purchase-content-container\" class=\"collapsible-section collapsed\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                        <!-- Purchase Summary -->\r\n                        <div style=\"padding: 20px;\">\r\n                            <div id=\"purchase-summary\" style=\"background: linear-gradient(45deg, #10B981, #059669); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                                <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Purchase Summary</h4>\r\n                                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-purchases\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Items</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-purchase-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Purchase Cost</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-selling-value\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling Value</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-potential-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Potential Profit</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Purchase Search and Filter -->\r\n                            <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                                <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                    <div>\r\n                                        <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Purchases</label>\r\n                                        <input type=\"text\" id=\"purchase-search\" placeholder=\"Search by item name, category, or supplier...\"\r\n                                               oninput=\"filterPurchases()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                    </div>\r\n                                    <div style=\"display: flex; gap: 10px;\">\r\n                                        <button onclick=\"clearPurchaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                            🔄 Clear\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Add Purchase Form Section -->\r\n                            <div id=\"add-purchase-form\" style=\"background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 10px; padding: 20px; margin-bottom: 20px; display: none;\">\r\n                                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\">\r\n                                    <h4 style=\"margin: 0; color: #333; display: flex; align-items: center; gap: 10px;\">\r\n                                        <i class=\"fas fa-plus-circle\" style=\"color: #10B981;\"></i>\r\n                                        Add New Purchase\r\n                                    </h4>\r\n                                    <button onclick=\"cancelAddPurchase()\" style=\"background: #dc3545; color: white; border: none; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        ✕ Cancel\r\n                                    </button>\r\n                                </div>\r\n\r\n                                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;\">\r\n                                    <!-- Left Column -->\r\n                                    <div>\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-tag\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Supplier Name <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"supplier-name\" placeholder=\"Enter supplier name\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-gem\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Purchase Name (Item) <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"purchase-name\" placeholder=\"Enter item name\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-rupee-sign\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Purchase Cost <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"purchase-cost\" placeholder=\"Enter purchase cost\" min=\"0\" step=\"0.01\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <!-- Right Column -->\r\n                                    <div>\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-list\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Category\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"purchase-category\" placeholder=\"e.g., Necklaces, Earrings, Rings\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-money-bill-wave\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Selling Price\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"selling-price\" placeholder=\"Enter intended selling price\" min=\"0\" step=\"0.01\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-sort-numeric-up\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Quantity\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"purchase-quantity\" placeholder=\"Enter quantity\" min=\"1\" value=\"1\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div style=\"margin-bottom: 20px;\">\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                        <i class=\"fas fa-sticky-note\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                        Notes (Optional)\r\n                                    </label>\r\n                                    <textarea id=\"purchase-notes\" placeholder=\"Enter any additional notes...\" rows=\"3\"\r\n                                              style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; resize: vertical; transition: border-color 0.3s ease;\"></textarea>\r\n                                </div>\r\n\r\n                                <div style=\"display: flex; gap: 15px; justify-content: flex-end;\">\r\n                                    <button onclick=\"cancelAddPurchase()\" style=\"background: #6c757d; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 600;\">\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button onclick=\"savePurchaseFromForm()\" style=\"background: #10B981; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 600;\">\r\n                                        <i class=\"fas fa-save\" style=\"margin-right: 5px;\"></i>\r\n                                        Save Purchase\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Purchase Records Container -->\r\n                            <div class=\"enhanced-purchase-container\">\r\n                                <div id=\"purchase-records\"></div>\r\n                                <div id=\"no-purchase-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                    <h3 style=\"color: #999;\">📦 No Purchase Records Found</h3>\r\n                                    <p>Add your first purchase record to track inventory!</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n\r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n\r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n\r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n\r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n\r\n            <!-- Enhanced Customer Database Section -->\r\n            <div style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <!-- Header Section -->\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">👥 Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                            <button id=\"customer-stats-toggle\" onclick=\"toggleCustomerStats()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; font-size: 16px; cursor: pointer; padding: 8px 12px; border-radius: 6px; transition: all 0.3s ease;\" title=\"Show/Hide Customer Statistics\">\r\n                                📊 Stats\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                            <input type=\"file\" id=\"customer-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importCustomers(event)\">\r\n                            <button class=\"btn\" onclick=\"document.getElementById('customer-import-file').click()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\" title=\"Import customers from CSV or Excel file\">\r\n                                📤 Import\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomerTemplate()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📋 Template\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomersExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📥 Export\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customer Statistics Panel -->\r\n                <div id=\"customer-stats-panel\" style=\"display: none; background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Customer Statistics</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;\">\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Customers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-active-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Active Buyers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-avg-orders\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Orders</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-clv\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total CLV</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Search and Filter Section -->\r\n                <div style=\"padding: 20px; background: #f8f9fa; border-bottom: 1px solid #e9ecef;\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr auto auto; gap: 15px; align-items: end;\">\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Customers</label>\r\n                            <input type=\"text\" id=\"customer-database-search\" placeholder=\"Search by name, phone, email, or address...\"\r\n                                   oninput=\"filterCustomerDatabase()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                        </div>\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">📋 Sort By</label>\r\n                            <select id=\"customer-sort-select\" onchange=\"sortCustomerDatabase()\" style=\"padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                <option value=\"name-asc\">Name (A-Z)</option>\r\n                                <option value=\"name-desc\">Name (Z-A)</option>\r\n                                <option value=\"purchases-desc\">Most Purchases</option>\r\n                                <option value=\"purchases-asc\">Least Purchases</option>\r\n                                <option value=\"spending-desc\">Highest Spending</option>\r\n                                <option value=\"spending-asc\">Lowest Spending</option>\r\n                                <option value=\"recent-desc\">Recently Added</option>\r\n                                <option value=\"recent-asc\">Oldest Added</option>\r\n                            </select>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"clearCustomerDatabaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                🔄 Clear\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customers List Container with Enhanced UI -->\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"customer-view-mode\" style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <div style=\"font-size: 14px; color: #666;\">\r\n                            Showing <span id=\"customers-showing\">0</span> of <span id=\"customers-total\">0</span> customers\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; align-items: center;\">\r\n                            <label style=\"font-size: 14px; color: #666;\">View:</label>\r\n                            <select id=\"customers-per-page\" onchange=\"changeCustomersPerPage()\" style=\"padding: 5px 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px;\">\r\n                                <option value=\"10\">10 per page</option>\r\n                                <option value=\"25\" selected>25 per page</option>\r\n                                <option value=\"50\">50 per page</option>\r\n                                <option value=\"100\">100 per page</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Enhanced Customer Cards Container -->\r\n                    <div class=\"enhanced-customers-container\" style=\"max-height: 500px; overflow-y: auto; background: #fafafa; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;\">\r\n                        <div id=\"customers-list-container\"></div>\r\n\r\n                        <!-- Pagination Controls -->\r\n                        <div id=\"customer-pagination\" style=\"display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 20px; padding: 15px;\">\r\n                            <button id=\"prev-customers-btn\" onclick=\"previousCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                ◀ Previous\r\n                            </button>\r\n                            <span id=\"customer-page-info\" style=\"font-size: 14px; color: #666; margin: 0 15px;\">Page 1 of 1</span>\r\n                            <button id=\"next-customers-btn\" onclick=\"nextCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                Next ▶\r\n                            </button>\r\n                        </div>\r\n\r\n                        <!-- No Customers Message -->\r\n                        <div id=\"no-customers-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                            <h3 style=\"color: #999;\">👥 No Customers Found</h3>\r\n                            <p>Add your first customer above or import existing customer data!</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n\r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n        let displayedSalesCount = 20; // Initial number of sales to show\r\n\r\n        // Multi-select category variables\r\n        let selectedCategories = [];\r\n        let isCategoryDropdownOpen = false;\r\n\r\n        // Function to handle record display selection\r\n        function changeRecordDisplay() {\r\n            const selector = document.getElementById('record-display-selector');\r\n            const selectedValue = selector.value;\r\n\r\n            // Get all sections by their IDs\r\n            const salesImportSection = document.getElementById('sales-import-section');\r\n            const salesRecordSection = document.getElementById('sales-records-section');\r\n            const dailySalesReportSection = document.getElementById('daily-sales-report');\r\n            const purchaseHistorySection = document.getElementById('purchase-history-section');\r\n\r\n            // Hide all sections initially\r\n            if (salesImportSection) salesImportSection.style.display = 'none';\r\n            if (salesRecordSection) salesRecordSection.style.display = 'none';\r\n            if (dailySalesReportSection) dailySalesReportSection.style.display = 'none';\r\n            if (purchaseHistorySection) purchaseHistorySection.style.display = 'none';\r\n\r\n            // Show selected section(s)\r\n            switch(selectedValue) {\r\n                case 'sales-record':\r\n                    if (salesImportSection) salesImportSection.style.display = 'block';\r\n                    if (salesRecordSection) salesRecordSection.style.display = 'block';\r\n                    break;\r\n                case 'daily-sales-report':\r\n                    if (dailySalesReportSection) dailySalesReportSection.style.display = 'block';\r\n                    break;\r\n                case 'purchase-history':\r\n                    if (purchaseHistorySection) purchaseHistorySection.style.display = 'block';\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Initialize the display on page load\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            // Set the dropdown to sales-record (default)\r\n            const selector = document.getElementById('record-display-selector');\r\n            if (selector) {\r\n                selector.value = 'sales-record';\r\n            }\r\n            \r\n            // Set initial display to show only sales records\r\n            changeRecordDisplay();\r\n        });\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n\r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n\r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n\r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Multi-Select Category Functions\r\n        function toggleCategoryDropdown() {\r\n            const dropdown = document.getElementById('category-dropdown');\r\n            const display = document.getElementById('category-display');\r\n            const arrow = document.getElementById('category-arrow');\r\n\r\n            isCategoryDropdownOpen = !isCategoryDropdownOpen;\r\n\r\n            if (isCategoryDropdownOpen) {\r\n                // Position dropdown correctly\r\n                const rect = display.getBoundingClientRect();\r\n                const viewportHeight = window.innerHeight;\r\n                const dropdownHeight = 250; // max-height of dropdown\r\n\r\n                // Check if dropdown would go below viewport\r\n                if (rect.bottom + dropdownHeight > viewportHeight) {\r\n                    // Position dropdown above the input\r\n                    dropdown.style.top = 'auto';\r\n                    dropdown.style.bottom = '100%';\r\n                    dropdown.style.borderRadius = 'var(--radius-md) var(--radius-md) 0 0';\r\n                    dropdown.style.borderTop = '2px solid var(--primary-600)';\r\n                    dropdown.style.borderBottom = 'none';\r\n                } else {\r\n                    // Position dropdown below the input (default)\r\n                    dropdown.style.top = '100%';\r\n                    dropdown.style.bottom = 'auto';\r\n                    dropdown.style.borderRadius = '0 0 var(--radius-md) var(--radius-md)';\r\n                    dropdown.style.borderTop = 'none';\r\n                    dropdown.style.borderBottom = '2px solid var(--primary-600)';\r\n                }\r\n\r\n                dropdown.style.display = 'block';\r\n                display.classList.add('active');\r\n                arrow.style.transform = 'rotate(180deg)';\r\n\r\n                // Ensure dropdown is above all other elements\r\n                dropdown.style.zIndex = '99999';\r\n            } else {\r\n                dropdown.style.display = 'none';\r\n                display.classList.remove('active');\r\n                arrow.style.transform = 'rotate(0deg)';\r\n            }\r\n        }\r\n\r\n        function updateSelectedCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            const placeholder = document.getElementById('category-placeholder');\r\n            const selectedContainer = document.getElementById('category-selected');\r\n            const errorDiv = document.getElementById('category-error');\r\n\r\n            selectedCategories = [];\r\n            checkboxes.forEach(checkbox => {\r\n                if (checkbox.checked) {\r\n                    selectedCategories.push(checkbox.value);\r\n                }\r\n            });\r\n\r\n            // Hide error if categories are selected\r\n            if (selectedCategories.length > 0) {\r\n                errorDiv.style.display = 'none';\r\n            }\r\n\r\n            if (selectedCategories.length === 0) {\r\n                placeholder.style.display = 'block';\r\n                selectedContainer.style.display = 'none';\r\n                placeholder.textContent = 'Select categories...';\r\n            } else {\r\n                placeholder.style.display = 'none';\r\n                selectedContainer.style.display = 'flex';\r\n\r\n                selectedContainer.innerHTML = selectedCategories.map(category => {\r\n                    const icon = getCategoryIcon(category);\r\n                    return `\r\n                        <span class=\"category-tag\">\r\n                            ${icon} ${category}\r\n                            <button type=\"button\" class=\"remove-tag\" onclick=\"removeCategory('${category}')\" title=\"Remove ${category}\">\r\n                                ✕\r\n                            </button>\r\n                        </span>\r\n                    `;\r\n                }).join('');\r\n            }\r\n        }\r\n\r\n        function getCategoryIcon(category) {\r\n            const icons = {\r\n                'Necklaces': '✨',\r\n                'Earrings': '👂',\r\n                'Bracelets': '🔗',\r\n                'Rings': '💍',\r\n                'Anklets': '🦶',\r\n                'Sets': '💎',\r\n                'Bangles': '⚪',\r\n                'Chains': '🔗',\r\n                'Pendants': '🏷️',\r\n                'Brooches': '📎'\r\n            };\r\n            return icons[category] || '💎';\r\n        }\r\n\r\n        function removeCategory(categoryToRemove) {\r\n            const checkbox = document.querySelector(`input[value=\"${categoryToRemove}\"]`);\r\n            if (checkbox) {\r\n                checkbox.checked = false;\r\n                updateSelectedCategories();\r\n            }\r\n        }\r\n\r\n        function selectAllCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            checkboxes.forEach(checkbox => {\r\n                checkbox.checked = true;\r\n            });\r\n            updateSelectedCategories();\r\n        }\r\n\r\n        function clearAllCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            checkboxes.forEach(checkbox => {\r\n                checkbox.checked = false;\r\n            });\r\n            updateSelectedCategories();\r\n        }\r\n\r\n        // Close dropdown when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const container = document.querySelector('.multi-select-container');\r\n            if (container && !container.contains(event.target)) {\r\n                if (isCategoryDropdownOpen) {\r\n                    toggleCategoryDropdown();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Initialize Collapsible Sections\r\n        function initializeCollapsibleSections() {\r\n            // Initialize Sales Section as collapsed\r\n            const salesContainer = document.getElementById('sales-content-container');\r\n            const salesToggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (salesContainer && salesToggleBtn) {\r\n                salesContainer.classList.add('collapsed');\r\n                salesToggleBtn.textContent = '►';\r\n                salesToggleBtn.classList.add('collapsed');\r\n                salesToggleBtn.title = 'Expand Sales Records';\r\n            }\r\n\r\n            // Initialize Purchase History Section as collapsed\r\n            const purchaseContainer = document.getElementById('purchase-content-container');\r\n            const purchaseToggleBtn = document.getElementById('purchase-toggle-btn');\r\n\r\n            if (purchaseContainer && purchaseToggleBtn) {\r\n                purchaseContainer.classList.add('collapsed');\r\n                purchaseToggleBtn.textContent = '►';\r\n                purchaseToggleBtn.classList.add('collapsed');\r\n                purchaseToggleBtn.title = 'Expand Purchase History';\r\n            }\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (container.classList.contains('collapsed')) {\r\n                container.classList.remove('collapsed');\r\n                container.classList.add('expanded');\r\n                toggleBtn.textContent = '▼';\r\n                toggleBtn.classList.remove('collapsed');\r\n                toggleBtn.title = 'Collapse Sales Records';\r\n                // Load sales data when expanded\r\n                loadSalesRecords();\r\n            } else {\r\n                container.classList.remove('expanded');\r\n                container.classList.add('collapsed');\r\n                toggleBtn.textContent = '►';\r\n                toggleBtn.classList.add('collapsed');\r\n                toggleBtn.title = 'Expand Sales Records';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n\r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n\r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n\r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n\r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n\r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n\r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n\r\n            document.body.appendChild(updateDiv);\r\n\r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n\r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Initialize collapsible sections\r\n                initializeCollapsibleSections();\r\n\r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n\r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n\r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n\r\n            const cleanedData = [];\r\n\r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n\r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n\r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n\r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n\r\n                    cleanedData.push(cleanedSale);\r\n\r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n\r\n            return cleanedData;\r\n        }\r\n\r\n\r\n\r\n        // Update customer count in search hint to include all unique customers\r\n        function updateCustomerCount() {\r\n            try {\r\n                const countElement = document.getElementById('total-customers');\r\n                if (countElement) {\r\n                    const allUniqueCustomers = getUniqueCustomers();\r\n                    countElement.textContent = allUniqueCustomers.length;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating customer count:', error);\r\n            }\r\n        }\r\n\r\n        // Import customers from CSV/Excel file\r\n        function importCustomers(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVCustomers(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelCustomers(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import customers from CSV\r\n        function importCSVCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\r\n                    const requiredHeaders = ['name', 'phone'];\r\n                    const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\r\n\r\n                    if (missingHeaders.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingHeaders.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Find column indices\r\n                    const nameIndex = headers.indexOf('name');\r\n                    const phoneIndex = headers.indexOf('phone');\r\n                    const addressIndex = headers.indexOf('address');\r\n                    const emailIndex = headers.indexOf('email');\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        const customerName = values[nameIndex];\r\n                        const customerPhone = values[phoneIndex] || '';\r\n                        const customerAddress = addressIndex >= 0 ? values[addressIndex] || '' : '';\r\n                        const customerEmail = emailIndex >= 0 ? values[emailIndex] || '' : '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import customers from Excel\r\n        function importExcelCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    jsonData.forEach(row => {\r\n                        const customerName = row.Name || row.name || row.customer_name || row['Customer Name'];\r\n                        const customerPhone = row.Phone || row.phone || row.mobile || row.Mobile || '';\r\n                        const customerAddress = row.Address || row.address || '';\r\n                        const customerEmail = row.Email || row.email || '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download customer import template\r\n        function downloadCustomerTemplate() {\r\n            const csvContent = [\r\n                'name,phone,address,email',\r\n                'John Doe,+91-9876543210,123 Main Street Mumbai,john@example.com',\r\n                'Jane Smith,+91-8765432109,456 Oak Avenue Delhi,jane@example.com',\r\n                'Mike Johnson,+91-7654321098,789 Pine Road Bangalore,mike@example.com'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'customer_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Customer import template downloaded! Use this format for importing customers.');\r\n        }\r\n\r\n        // Enhanced Customer Database Functionality\r\n        let currentCustomerPage = 1;\r\n        let customersPerPage = 25;\r\n        let filteredCustomers = [];\r\n        let isCustomerSearchActive = false;\r\n        let currentCustomerSort = 'name-asc';\r\n\r\n        function toggleCustomerStats() {\r\n            const panel = document.getElementById('customer-stats-panel');\r\n            const button = document.getElementById('customer-stats-toggle');\r\n\r\n            if (panel.style.display === 'none') {\r\n                panel.style.display = 'block';\r\n                button.textContent = '📊 Hide Stats';\r\n                updateCustomerStatistics();\r\n            } else {\r\n                panel.style.display = 'none';\r\n                button.textContent = '📊 Stats';\r\n            }\r\n        }\r\n\r\n        function updateCustomerStatistics() {\r\n            const totalCustomers = customersData.length;\r\n            const activeCustomers = customersData.filter(customer => {\r\n                const purchases = salesData.filter(sale => sale.customerName === customer.name);\r\n                return purchases.length > 0;\r\n            }).length;\r\n\r\n            const totalOrders = salesData.length;\r\n            const avgOrdersPerCustomer = activeCustomers > 0 ? (totalOrders / activeCustomers).toFixed(1) : 0;\r\n\r\n            const totalCLV = customersData.reduce((sum, customer) => {\r\n                const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                const customerSpending = customerSales.reduce((total, sale) => total + sale.sellingPrice, 0);\r\n                return sum + customerSpending;\r\n            }, 0);\r\n\r\n            document.getElementById('stat-total-customers').textContent = totalCustomers;\r\n            document.getElementById('stat-active-customers').textContent = activeCustomers;\r\n            document.getElementById('stat-avg-orders').textContent = avgOrdersPerCustomer;\r\n            document.getElementById('stat-total-clv').textContent = `₹${totalCLV.toFixed(2)}`;\r\n        }\r\n\r\n        function filterCustomerDatabase() {\r\n            const searchTerm = document.getElementById('customer-database-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                isCustomerSearchActive = false;\r\n                filteredCustomers = [];\r\n                currentCustomerPage = 1;\r\n                displayCustomerDatabase();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return;\r\n            }\r\n\r\n            filteredCustomers = customersData.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                (customer.phone && customer.phone.toLowerCase().includes(searchTerm)) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm)) ||\r\n                (customer.address && customer.address.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isCustomerSearchActive = true;\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function sortCustomerDatabase() {\r\n            currentCustomerSort = document.getElementById('customer-sort-select').value;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function clearCustomerDatabaseFilter() {\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n            currentCustomerSort = 'name-asc';\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function changeCustomersPerPage() {\r\n            customersPerPage = parseInt(document.getElementById('customers-per-page').value);\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function displayCustomerDatabase() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const sortedData = sortCustomersData(dataToDisplay);\r\n\r\n            const totalCustomers = sortedData.length;\r\n            const startIndex = (currentCustomerPage - 1) * customersPerPage;\r\n            const endIndex = Math.min(startIndex + customersPerPage, totalCustomers);\r\n            const currentPageData = sortedData.slice(startIndex, endIndex);\r\n\r\n            const container = document.getElementById('customers-list-container');\r\n            const noCustomersMessage = document.getElementById('no-customers-message');\r\n\r\n            if (totalCustomers === 0) {\r\n                container.innerHTML = '';\r\n                noCustomersMessage.style.display = 'block';\r\n                updateCustomerPagination(0, 0, 0);\r\n                return;\r\n            }\r\n\r\n            noCustomersMessage.style.display = 'none';\r\n\r\n            container.innerHTML = currentPageData.map(customer => createCustomerCardHTML(customer)).join('');\r\n\r\n            // Update pagination\r\n            updateCustomerPagination(currentCustomerPage, Math.ceil(totalCustomers / customersPerPage), totalCustomers);\r\n\r\n            // Update showing info\r\n            document.getElementById('customers-showing').textContent = `${startIndex + 1}-${endIndex}`;\r\n            document.getElementById('customers-total').textContent = totalCustomers;\r\n        }\r\n\r\n        function sortCustomersData(data) {\r\n            const sortedData = [...data];\r\n\r\n            switch (currentCustomerSort) {\r\n                case 'name-asc':\r\n                    return sortedData.sort((a, b) => a.name.localeCompare(b.name));\r\n                case 'name-desc':\r\n                    return sortedData.sort((a, b) => b.name.localeCompare(a.name));\r\n                case 'purchases-desc':\r\n                case 'purchases-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aPurchases = salesData.filter(sale => sale.customerName === a.name).length;\r\n                        const bPurchases = salesData.filter(sale => sale.customerName === b.name).length;\r\n                        return currentCustomerSort === 'purchases-desc' ? bPurchases - aPurchases : aPurchases - bPurchases;\r\n                    });\r\n                case 'spending-desc':\r\n                case 'spending-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aSpending = salesData.filter(sale => sale.customerName === a.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        const bSpending = salesData.filter(sale => sale.customerName === b.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        return currentCustomerSort === 'spending-desc' ? bSpending - aSpending : aSpending - bSpending;\r\n                    });\r\n                case 'recent-desc':\r\n                    return sortedData.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n                case 'recent-asc':\r\n                    return sortedData.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\r\n                default:\r\n                    return sortedData;\r\n            }\r\n        }\r\n\r\n        function createCustomerCardHTML(customer) {\r\n            const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n            const totalPurchases = customerSales.length;\r\n            const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const avgOrderValue = totalPurchases > 0 ? (totalSpent / totalPurchases) : 0;\r\n            const lastPurchase = customerSales.length > 0 ?\r\n                Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime())) : null;\r\n\r\n            const isActive = totalPurchases > 0;\r\n            const statusClass = isActive ? 'active' : 'inactive';\r\n            const statusText = isActive ? 'Active' : 'Inactive';\r\n\r\n            return `\r\n                <div class=\"customer-card\">\r\n                    <div class=\"customer-card-header\">\r\n                        <h4 class=\"customer-name\">👤 ${customer.name}</h4>\r\n                        <span class=\"customer-status ${statusClass}\">${statusText}</span>\r\n                    </div>\r\n\r\n                    <div class=\"customer-info-grid\">\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📞 Phone:</span>\r\n                            ${customer.phone || 'Not provided'}\r\n                        </div>\r\n                        ${customer.email ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📧 Email:</span>\r\n                                ${customer.email}\r\n                            </div>\r\n                        ` : ''}\r\n                        ${customer.address ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📍 Address:</span>\r\n                                ${customer.address}\r\n                            </div>\r\n                        ` : ''}\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📅 Added:</span>\r\n                            ${new Date(customer.createdAt).toLocaleDateString()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"customer-purchase-stats\">\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">${totalPurchases}</div>\r\n                            <div class=\"customer-stat-label\">Total Orders</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${totalSpent.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Total Spent</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${avgOrderValue.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Avg Order</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">\r\n                                ${lastPurchase ? new Date(lastPurchase).toLocaleDateString() : 'Never'}\r\n                            </div>\r\n                            <div class=\"customer-stat-label\">Last Purchase</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        function updateCustomerPagination(currentPage, totalPages, totalCustomers) {\r\n            const prevBtn = document.getElementById('prev-customers-btn');\r\n            const nextBtn = document.getElementById('next-customers-btn');\r\n            const pageInfo = document.getElementById('customer-page-info');\r\n\r\n            prevBtn.disabled = currentPage <= 1;\r\n            nextBtn.disabled = currentPage >= totalPages;\r\n\r\n            pageInfo.textContent = totalPages > 0 ? `Page ${currentPage} of ${totalPages}` : 'No pages';\r\n\r\n            // Update button styles based on disabled state\r\n            prevBtn.style.opacity = prevBtn.disabled ? '0.5' : '1';\r\n            nextBtn.style.opacity = nextBtn.disabled ? '0.5' : '1';\r\n            prevBtn.style.cursor = prevBtn.disabled ? 'not-allowed' : 'pointer';\r\n            nextBtn.style.cursor = nextBtn.disabled ? 'not-allowed' : 'pointer';\r\n        }\r\n\r\n        function previousCustomersPage() {\r\n            if (currentCustomerPage > 1) {\r\n                currentCustomerPage--;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        function nextCustomersPage() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const totalPages = Math.ceil(dataToDisplay.length / customersPerPage);\r\n\r\n            if (currentCustomerPage < totalPages) {\r\n                currentCustomerPage++;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        // Import sales from CSV/Excel file\r\n        function importSales(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVSales(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelSales(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import sales from CSV\r\n        function importCSVSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase().replace(/\"/g, ''));\r\n                    const requiredHeaders = ['item_name', 'category', 'cost_price', 'selling_price', 'sale_date', 'customer_name'];\r\n\r\n                    // Check for alternative header names\r\n                    const headerMapping = {\r\n                        'item_name': ['item_name', 'item name', 'itemname', 'product_name', 'product name', 'name'],\r\n                        'category': ['category', 'item_category', 'product_category', 'type'],\r\n                        'cost_price': ['cost_price', 'cost price', 'costprice', 'cost', 'purchase_price', 'cp'],\r\n                        'selling_price': ['selling_price', 'selling price', 'sellingprice', 'price', 'sale_price', 'sp'],\r\n                        'sale_date': ['sale_date', 'sale date', 'saledate', 'date', 'purchase_date'],\r\n                        'customer_name': ['customer_name', 'customer name', 'customername', 'customer', 'buyer']\r\n                    };\r\n\r\n                    // Find column indices\r\n                    const columnIndices = {};\r\n                    let missingColumns = [];\r\n\r\n                    for (const [key, alternatives] of Object.entries(headerMapping)) {\r\n                        const foundIndex = headers.findIndex(h => alternatives.includes(h));\r\n                        if (foundIndex >= 0) {\r\n                            columnIndices[key] = foundIndex;\r\n                        } else {\r\n                            missingColumns.push(key);\r\n                        }\r\n                    }\r\n\r\n                    if (missingColumns.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingColumns.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Optional columns\r\n                    const phoneIndex = headers.findIndex(h => ['customer_phone', 'customer phone', 'phone', 'mobile'].includes(h));\r\n                    const addressIndex = headers.findIndex(h => ['customer_address', 'customer address', 'address'].includes(h));\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        try {\r\n                            const itemName = values[columnIndices.item_name]?.trim();\r\n                            const category = values[columnIndices.category]?.trim();\r\n                            const costPrice = parseFloat(values[columnIndices.cost_price]) || 0;\r\n                            const sellingPrice = parseFloat(values[columnIndices.selling_price]) || 0;\r\n                            const saleDate = values[columnIndices.sale_date]?.trim();\r\n                            const customerName = values[columnIndices.customer_name]?.trim();\r\n                            const customerPhone = phoneIndex >= 0 ? values[phoneIndex]?.trim() || '' : '';\r\n                            const customerAddress = addressIndex >= 0 ? values[addressIndex]?.trim() || '' : '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${i + 1}: Missing required fields`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${i + 1}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate date format\r\n                            const dateObj = new Date(saleDate);\r\n                            if (isNaN(dateObj.getTime())) {\r\n                                errors.push(`Row ${i + 1}: Invalid date format \"${saleDate}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: saleDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${i + 1}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import sales from Excel\r\n        function importExcelSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    jsonData.forEach((row, index) => {\r\n                        try {\r\n                            // Try different column name variations\r\n                            const itemName = row['Item Name'] || row['Item_Name'] || row['itemname'] || row['Product Name'] || row['Name'];\r\n                            const category = row['Category'] || row['Item Category'] || row['Type'];\r\n                            const costPrice = parseFloat(row['Cost Price'] || row['Cost_Price'] || row['costprice'] || row['Cost'] || row['CP']) || 0;\r\n                            const sellingPrice = parseFloat(row['Selling Price'] || row['Selling_Price'] || row['sellingprice'] || row['Price'] || row['SP']) || 0;\r\n                            const saleDate = row['Sale Date'] || row['Sale_Date'] || row['saledate'] || row['Date'];\r\n                            const customerName = row['Customer Name'] || row['Customer_Name'] || row['customername'] || row['Customer'];\r\n                            const customerPhone = row['Customer Phone'] || row['Customer_Phone'] || row['Phone'] || row['Mobile'] || '';\r\n                            const customerAddress = row['Customer Address'] || row['Customer_Address'] || row['Address'] || '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${index + 2}: Missing required fields`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${index + 2}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate and format date\r\n                            let formattedDate = saleDate;\r\n                            if (saleDate instanceof Date) {\r\n                                formattedDate = saleDate.toISOString().split('T')[0];\r\n                            } else if (typeof saleDate === 'string') {\r\n                                const dateObj = new Date(saleDate);\r\n                                if (isNaN(dateObj.getTime())) {\r\n                                    errors.push(`Row ${index + 2}: Invalid date format \"${saleDate}\"`);\r\n                                    skippedCount++;\r\n                                    return;\r\n                                }\r\n                                formattedDate = dateObj.toISOString().split('T')[0];\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: formattedDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${index + 2}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download sales import template\r\n        function downloadSalesTemplate() {\r\n            const csvContent = [\r\n                'item_name,category,cost_price,selling_price,sale_date,customer_name,customer_phone,customer_address',\r\n                'Gold Plated Necklace,Necklaces,500,800,2024-01-15,John Doe,+91-9876543210,123 Main Street Mumbai',\r\n                'Diamond Earrings,Earrings,1000,1500,2024-01-16,Jane Smith,+91-8765432109,456 Oak Avenue Delhi',\r\n                'Silver Bracelet,Bracelets,300,450,2024-01-17,Mike Johnson,+91-7654321098,789 Pine Road Bangalore'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'sales_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Sales import template downloaded! Use this format for importing sales data.');\r\n        }\r\n\r\n        // Sales search and filter functionality\r\n        let filteredSalesData = [];\r\n        let isSearchActive = false;\r\n\r\n        function filterSales() {\r\n            const searchTerm = document.getElementById('sales-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                // Clear filter\r\n                isSearchActive = false;\r\n                filteredSalesData = [];\r\n                resetSalesDisplay();\r\n                loadSalesRecords();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return; // Wait for at least 2 characters\r\n            }\r\n\r\n            // Filter sales data\r\n            filteredSalesData = salesData.filter(sale =>\r\n                sale.itemName.toLowerCase().includes(searchTerm) ||\r\n                sale.customerName.toLowerCase().includes(searchTerm) ||\r\n                sale.category.toLowerCase().includes(searchTerm) ||\r\n                (sale.customerPhone && sale.customerPhone.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isSearchActive = true;\r\n            displayFilteredSales();\r\n        }\r\n\r\n        function displayFilteredSales() {\r\n            const salesRecordsDiv = document.getElementById('sales-records');\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n            const noSalesMessage = document.getElementById('no-sales-message');\r\n\r\n            if (filteredSalesData.length === 0) {\r\n                salesRecordsDiv.innerHTML = '';\r\n                loadMoreContainer.style.display = 'none';\r\n                noSalesMessage.style.display = 'block';\r\n                noSalesMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Sales Found</h3>\r\n                    <p>No sales records match your search criteria.</p>\r\n                `;\r\n                document.getElementById('sales-count').textContent = '0';\r\n                return;\r\n            }\r\n\r\n            // Display all filtered results\r\n            salesRecordsDiv.innerHTML = filteredSalesData.map(sale => createSaleItemHTML(sale)).join('');\r\n            loadMoreContainer.style.display = 'none';\r\n            noSalesMessage.style.display = 'none';\r\n            document.getElementById('sales-count').textContent = filteredSalesData.length;\r\n\r\n            // Update summary for filtered data\r\n            updateSalesSummary(filteredSalesData);\r\n        }\r\n\r\n        function clearSalesFilter() {\r\n            document.getElementById('sales-search').value = '';\r\n            isSearchActive = false;\r\n            filteredSalesData = [];\r\n            resetSalesDisplay();\r\n            loadSalesRecords();\r\n        }\r\n\r\n        function updateSalesSummary(dataToSummarize = null) {\r\n            const dataToUse = dataToSummarize || salesData;\r\n\r\n            const totalSales = dataToUse.length;\r\n            const totalCost = dataToUse.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = dataToUse.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = totalSelling - totalCost;\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n        }\r\n\r\n        function createSaleItemHTML(sale) {\r\n            const saleDate = new Date(sale.saleDate);\r\n            const formattedDate = saleDate.toLocaleDateString('en-IN', {\r\n                day: '2-digit',\r\n                month: 'short',\r\n                year: 'numeric'\r\n            });\r\n\r\n            const profitColor = sale.profit > 0 ? '#4ecdc4' : sale.profit < 0 ? '#ff6b6b' : '#666';\r\n\r\n            return `\r\n                <div class=\"sales-item\" style=\"position: relative; margin-bottom: 15px; padding: 15px; background: white; border-radius: 8px; border-left: 4px solid ${profitColor}; box-shadow: 0 2px 5px rgba(0,0,0,0.1);\">\r\n                    <div class=\"action-buttons\" style=\"position: absolute; top: 10px; right: 10px; display: flex; gap: 5px;\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale('${sale.id}')\" style=\"background: #007bff; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            ✏️ Edit\r\n                        </button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale('${sale.id}')\" style=\"background: #ff6b6b; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            🗑️ Delete\r\n                        </button>\r\n                    </div>\r\n\r\n                    <h4 style=\"margin: 0 0 8px 0; color: #333; font-size: 16px; padding-right: 120px;\">${sale.itemName}</h4>\r\n\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 14px; color: #666;\">\r\n                        <p style=\"margin: 0;\"><strong>📂 Category:</strong> ${sale.category}</p>\r\n                        <p style=\"margin: 0;\"><strong>📅 Date:</strong> ${formattedDate}</p>\r\n                        <p style=\"margin: 0;\"><strong>💰 Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>💵 Selling:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>📈 Profit:</strong> <span style=\"color: ${profitColor}; font-weight: bold;\">₹${sale.profit.toFixed(2)}</span></p>\r\n                        <p style=\"margin: 0;\"><strong>👤 Customer:</strong> ${sale.customerName}</p>\r\n                    </div>\r\n\r\n                    ${sale.customerPhone ? `<p style=\"margin: 8px 0 0 0; font-size: 13px; color: #888;\"><strong>📞 Phone:</strong> ${sale.customerPhone}</p>` : ''}\r\n                    ${sale.customerAddress ? `<p style=\"margin: 4px 0 0 0; font-size: 13px; color: #888;\"><strong>📍 Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Customer search functionality\r\n        function searchCustomers() {\r\n            const searchTerm = document.getElementById('customerSearch').value.trim().toLowerCase();\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            selectedSearchIndex = -1; // Reset selection\r\n\r\n            if (searchTerm.length < 2) {\r\n                resultsContainer.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Get unique customers from both database and sales data\r\n            const allUniqueCustomers = getUniqueCustomers();\r\n\r\n            // Update total customer count\r\n            document.getElementById('total-customers').textContent = allUniqueCustomers.length;\r\n\r\n            // Filter customers based on search term\r\n            const matchingCustomers = allUniqueCustomers.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                customer.phone.toLowerCase().includes(searchTerm) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            if (matchingCustomers.length === 0) {\r\n                resultsContainer.innerHTML = '<div style=\"padding: 10px; color: #666; font-style: italic;\">No customers found. You can enter new customer details below.</div>';\r\n                resultsContainer.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            // Display matching customers\r\n            resultsContainer.innerHTML = matchingCustomers.map(customer => {\r\n                const lastPurchaseText = customer.lastPurchase\r\n                    ? `Last purchase: ${new Date(customer.lastPurchase).toLocaleDateString()}`\r\n                    : 'No purchases yet';\r\n\r\n                const sourceIcon = customer.source === 'database' ? '📁' : '💳';\r\n                const sourceText = customer.source === 'database' ? 'In Customer DB' : 'From Sales Only';\r\n\r\n                return `\r\n                <div style=\"padding: 12px; cursor: pointer; border-bottom: 1px solid #eee; transition: all 0.2s; border-left: 3px solid transparent;\"\r\n                     onclick=\"selectCustomer('${escapeQuotes(customer.name)}', '${escapeQuotes(customer.phone)}', '${escapeQuotes(customer.address)}', '${escapeQuotes(customer.email)}')\"\r\n                     onmouseover=\"this.style.backgroundColor='#f8f9fa'; this.style.borderLeftColor='#4ecdc4';\"\r\n                     onmouseout=\"this.style.backgroundColor='white'; this.style.borderLeftColor='transparent';\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 4px;\">\r\n                            <div style=\"font-weight: bold; color: #333; font-size: 15px;\">${customer.name}</div>\r\n                    <div style=\"font-size: 10px; color: #999; padding: 2px 6px; background: #f0f0f0; border-radius: 10px;\">\r\n                            ${sourceIcon} ${sourceText}\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 6px;\">\r\n                        ${customer.phone !== 'Not provided' ?\r\n                                `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📞 ${customer.phone}</div>` : ''}\r\n                        ${customer.email && customer.email !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📧 ${customer.email}</div>` : ''}\r\n                    ${customer.address && customer.address !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #888; margin-bottom: 6px; line-height: 1.3;\">📍 ${customer.address}</div>` : ''}\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 8px;\">\r\n                        </div>\r\n                    <div style=\"font-size: 11px; color: #4ecdc4; font-weight: 600;\">\r\n                            ${customer.totalPurchases > 0 ?\r\n                                `${customer.totalPurchases} purchase${customer.totalPurchases > 1 ? 's' : ''} • ₹${customer.totalSpent.toFixed(2)} total` :\r\n                                'New customer'\r\n                            }\r\n                        </div>\r\n                        <div style=\"font-size: 10px; color: #999; font-style: italic;\">\r\n                            ${lastPurchaseText}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            }).join('');\r\n\r\n            resultsContainer.style.display = 'block';\r\n        }\r\n\r\n        // Get customers from customer database and sales data with purchase stats\r\n        function getUniqueCustomers() {\r\n            const allCustomers = new Map();\r\n\r\n            // Add customers from customer database\r\n            customersData.forEach(customer => {\r\n                const customerSales = salesData.filter(sale =>\r\n                    sale.customerName.toLowerCase() === customer.name.toLowerCase() ||\r\n                    sale.customerPhone === customer.phone\r\n                );\r\n\r\n                const totalPurchases = customerSales.length;\r\n                const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                const lastPurchase = customerSales.length > 0\r\n                    ? Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime()))\r\n                    : null;\r\n\r\n                const customerKey = customer.name.toLowerCase() + '|' + (customer.phone || '');\r\n                allCustomers.set(customerKey, {\r\n                    name: customer.name,\r\n                    phone: customer.phone || 'Not provided',\r\n                    address: customer.address || 'Not provided',\r\n                    email: customer.email || 'Not provided',\r\n                    totalPurchases: totalPurchases,\r\n                    totalSpent: totalSpent,\r\n                    lastPurchase: lastPurchase,\r\n                    source: 'database'\r\n                });\r\n            });\r\n\r\n            // Add customers from sales data who are not in customer database\r\n            salesData.forEach(sale => {\r\n                const customerKey = sale.customerName.toLowerCase() + '|' + (sale.customerPhone || '');\r\n\r\n                if (!allCustomers.has(customerKey)) {\r\n                    const customerSales = salesData.filter(s =>\r\n                        s.customerName.toLowerCase() === sale.customerName.toLowerCase() ||\r\n                        (s.customerPhone && sale.customerPhone && s.customerPhone === sale.customerPhone)\r\n                    );\r\n\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, s) => sum + s.sellingPrice, 0);\r\n                    const lastPurchase = Math.max(...customerSales.map(s => new Date(s.saleDate).getTime()));\r\n\r\n                    allCustomers.set(customerKey, {\r\n                        name: sale.customerName,\r\n                        phone: sale.customerPhone || 'Not provided',\r\n                        address: sale.customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        totalPurchases: totalPurchases,\r\n                        totalSpent: totalSpent,\r\n                        lastPurchase: lastPurchase,\r\n                        source: 'sales'\r\n                    });\r\n                }\r\n            });\r\n\r\n            // Convert to array and sort by total spent (descending), then by last purchase date (descending)\r\n            return Array.from(allCustomers.values()).sort((a, b) => {\r\n                if (b.totalSpent !== a.totalSpent) {\r\n                    return b.totalSpent - a.totalSpent;\r\n                }\r\n                if (a.lastPurchase && b.lastPurchase) {\r\n                    return b.lastPurchase - a.lastPurchase;\r\n                }\r\n                return a.lastPurchase ? -1 : (b.lastPurchase ? 1 : 0);\r\n            });\r\n        }\r\n\r\n        // Escape quotes for HTML attributes\r\n        function escapeQuotes(str) {\r\n            if (!str) return '';\r\n            return str.replace(/'/g, '&#39;').replace(/\"/g, '&quot;');\r\n        }\r\n\r\n        // Select customer from search results\r\n        function selectCustomer(name, phone, address, email) {\r\n            document.getElementById('customerName').value = name;\r\n            document.getElementById('customerPhone').value = phone !== 'Not provided' ? phone : '';\r\n            document.getElementById('customerAddress').value = address !== 'Not provided' ? address : '';\r\n\r\n            // Clear search\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n\r\n            // Show success message\r\n            showSuccess(`✅ Customer \"${name}\" selected! Details filled automatically.`);\r\n\r\n            // Focus on item name field\r\n            document.getElementById('itemName').focus();\r\n        }\r\n\r\n        // Clear customer search\r\n        function clearCustomerSearch() {\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n        }\r\n\r\n        // Handle keyboard navigation in search\r\n        let selectedSearchIndex = -1;\r\n        function handleSearchKeydown(event) {\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            const results = resultsContainer.querySelectorAll('[onclick*=\"selectCustomer\"]');\r\n\r\n            if (results.length === 0) return;\r\n\r\n            switch(event.key) {\r\n                case 'ArrowDown':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.min(selectedSearchIndex + 1, results.length - 1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'ArrowUp':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.max(selectedSearchIndex - 1, -1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'Enter':\r\n                    event.preventDefault();\r\n                    if (selectedSearchIndex >= 0 && selectedSearchIndex < results.length) {\r\n                        results[selectedSearchIndex].click();\r\n                    }\r\n                    break;\r\n                case 'Escape':\r\n                    clearCustomerSearch();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function highlightSearchResult(results) {\r\n            // Remove previous highlights\r\n            results.forEach((result, index) => {\r\n                if (index === selectedSearchIndex) {\r\n                    result.style.backgroundColor = '#4ecdc4';\r\n                    result.style.color = 'white';\r\n                } else {\r\n                    result.style.backgroundColor = 'white';\r\n                    result.style.color = 'inherit';\r\n                }\r\n            });\r\n        }\r\n\r\n        // Hide search results when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const searchContainer = document.getElementById('customerSearch').parentElement;\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n\r\n            if (!searchContainer.contains(event.target)) {\r\n                resultsContainer.style.display = 'none';\r\n            }\r\n        });\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            const profitField = document.getElementById('profit');\r\n            profitField.value = profit.toFixed(2);\r\n\r\n            // Change color based on profit\r\n            if (profit > 0) {\r\n                profitField.style.color = '#4ecdc4';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else if (profit < 0) {\r\n                profitField.style.color = '#ff6b6b';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else {\r\n                profitField.style.color = '#666';\r\n                profitField.style.fontWeight = 'normal';\r\n            }\r\n        }\r\n\r\n        // Add sale record function\r\n        function addSaleRecord() {\r\n            try {\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validate required fields with alerts\r\n                if (!itemName) {\r\n                    showError('Please enter item name');\r\n                    alert('⚠️ Validation Error:\\nPlease enter the item name to proceed.');\r\n                    document.getElementById('itemName').focus();\r\n                    return;\r\n                }\r\n                if (selectedCategories.length === 0) {\r\n                    showError('Please select at least one category');\r\n                    alert('⚠️ Validation Error:\\nPlease select at least one category for the item.');\r\n                    document.getElementById('category-error').style.display = 'flex';\r\n                    return;\r\n                }\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    showError('Please enter a valid cost price');\r\n                    alert('⚠️ Validation Error:\\nPlease enter a valid cost price (must be greater than 0).');\r\n                    document.getElementById('costPrice').focus();\r\n                    return;\r\n                }\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    showError('Please enter a valid selling price');\r\n                    alert('⚠️ Validation Error:\\nPlease enter a valid selling price (must be greater than 0).');\r\n                    document.getElementById('sellingPrice').focus();\r\n                    return;\r\n                }\r\n                if (sellingPrice < costPrice) {\r\n                    showError('Selling price cannot be less than cost price');\r\n                    alert('⚠️ Validation Error:\\nSelling price cannot be less than cost price.\\nThis would result in a loss!');\r\n                    document.getElementById('sellingPrice').focus();\r\n                    return;\r\n                }\r\n                if (!saleDate) {\r\n                    showError('Please select a sale date');\r\n                    alert('⚠️ Validation Error:\\nPlease select the sale date.');\r\n                    document.getElementById('saleDate').focus();\r\n                    return;\r\n                }\r\n                if (!customerName) {\r\n                    showError('Please enter customer name');\r\n                    alert('⚠️ Validation Error:\\nPlease enter the customer name to proceed.');\r\n                    document.getElementById('customerName').focus();\r\n                    return;\r\n                }\r\n\r\n                // Save customer to database automatically when adding sale\r\n                saveCustomerFromSale(customerName, customerPhone, customerAddress);\r\n\r\n                // Create sale record with multiple categories\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: selectedCategories.join(', '), // Join multiple categories with comma\r\n                    categories: selectedCategories, // Keep array for advanced filtering\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    alert('⚠️ Storage Error!\\n\\nFailed to save the sale record to local storage:\\n\\n' + storageError.message + '\\n\\nThis might be due to storage limits or browser settings. Please try clearing some browser data or contact support.');\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                document.getElementById('customerSearch').value = '';\r\n                document.getElementById('customer-search-results').style.display = 'none';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Clear selected categories\r\n                clearAllCategories();\r\n\r\n                // Reset sales display to show latest sales\r\n                resetSalesDisplay();\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Show success message\r\n                showSuccess('✅ Sale record added successfully! Customer saved to database.');\r\n                alert('✅ Success!\\n\\nSale record has been added successfully!\\n\\n📊 Details:\\n• Item: ' + itemName + '\\n• Categories: ' + selectedCategories.join(', ') + '\\n• Customer: ' + customerName + '\\n• Profit: ₹' + (sellingPrice - costPrice).toFixed(2));\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                showError('Error adding sale record: ' + error.message);\r\n                alert('❌ Error!\\n\\nAn unexpected error occurred while adding the sale record:\\n\\n' + error.message + '\\n\\nPlease try again or contact support if the problem persists.');\r\n            }\r\n        }\r\n\r\n        // Save customer from sale entry automatically\r\n        function saveCustomerFromSale(customerName, customerPhone, customerAddress) {\r\n            try {\r\n                if (!customerName.trim()) return;\r\n\r\n                // Check if customer already exists by name or phone\r\n                const existingCustomerIndex = customersData.findIndex(customer =>\r\n                    customer.name.toLowerCase() === customerName.toLowerCase() ||\r\n                    (customerPhone && customer.phone === customerPhone)\r\n                );\r\n\r\n                if (existingCustomerIndex !== -1) {\r\n                    // Update existing customer with any new information\r\n                    const existingCustomer = customersData[existingCustomerIndex];\r\n                    let updated = false;\r\n\r\n                    if (customerPhone && customerPhone !== existingCustomer.phone && existingCustomer.phone === 'Not provided') {\r\n                        existingCustomer.phone = customerPhone;\r\n                        updated = true;\r\n                    }\r\n\r\n                    if (customerAddress && customerAddress !== existingCustomer.address && existingCustomer.address === 'Not provided') {\r\n                        existingCustomer.address = customerAddress;\r\n                        updated = true;\r\n                    }\r\n\r\n                    // Update last purchase date\r\n                    existingCustomer.lastPurchase = new Date().toISOString();\r\n                    updated = true;\r\n\r\n                    if (updated) {\r\n                        customersData[existingCustomerIndex] = existingCustomer;\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                    }\r\n                } else {\r\n                    // Add new customer\r\n                    const newCustomer = {\r\n                        id: Date.now(),\r\n                        name: customerName,\r\n                        phone: customerPhone || 'Not provided',\r\n                        address: customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        status: 'active',\r\n                        notes: `Auto-added from sale entry on ${new Date().toLocaleDateString()}`,\r\n                        createdAt: new Date().toISOString(),\r\n                        lastPurchase: new Date().toISOString()\r\n                    };\r\n\r\n                    customersData.push(newCustomer);\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                }\r\n            } catch (error) {\r\n                console.error('Error saving customer from sale:', error);\r\n                // Don't throw error to not interrupt sale process\r\n            }\r\n        }\r\n\r\n        // Show success message\r\n        function showSuccess(message) {\r\n            const successDiv = document.getElementById('success-message');\r\n            const errorDiv = document.getElementById('error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show error message\r\n        function showError(message) {\r\n            const errorDiv = document.getElementById('error-message');\r\n            const successDiv = document.getElementById('success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n\r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n            const dailyReportDiv = document.getElementById('daily-sales-report');\r\n\r\n            countElement.textContent = salesData.length;\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                dailyReportDiv.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n\r\n            // Update daily sales report\r\n            updateDailySalesReport();\r\n            dailyReportDiv.style.display = 'block';\r\n\r\n            // Show sales with pagination\r\n            const recentSales = salesData.slice().reverse(); // All sales in reverse order\r\n            const salesToShow = recentSales.slice(0, displayedSalesCount);\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n\r\n            container.innerHTML = salesToShow.map(sale => `\r\n                <div class=\"sales-item\" id=\"sale-item-${sale.id}\">\r\n                    <div class=\"action-buttons\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale(${sale.id})\" title=\"Edit Sale\">✏️</button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\" title=\"Delete Sale\">🗑️</button>\r\n                    </div>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n\r\n            // Show/hide Load More button\r\n            if (recentSales.length > displayedSalesCount) {\r\n                loadMoreContainer.style.display = 'block';\r\n                const remainingCount = recentSales.length - displayedSalesCount;\r\n                document.getElementById('load-more-btn').innerHTML = `📖 Load More Sales (${remainingCount} remaining)`;\r\n            } else {\r\n                loadMoreContainer.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Daily Sales Report variables\r\n        let isDailyViewDetailed = false;\r\n\r\n        // Update Daily Sales Report\r\n        function updateDailySalesReport() {\r\n            const dailyStats = calculateDailyStats();\r\n            const contentDiv = document.getElementById('daily-sales-content');\r\n\r\n            if (Object.keys(dailyStats).length === 0) {\r\n                contentDiv.innerHTML = '<p>No daily sales data available.</p>';\r\n                return;\r\n            }\r\n\r\n            // Always show detailed view\r\n            contentDiv.innerHTML = generateDetailedDailyView(dailyStats);\r\n        }\r\n\r\n        // Calculate Daily Statistics\r\n        function calculateDailyStats() {\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const saleDate = sale.saleDate;\r\n\r\n                if (!dailyStats[saleDate]) {\r\n                    dailyStats[saleDate] = {\r\n                        date: saleDate,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        categories: {},\r\n                        customers: new Set(),\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: '',\r\n                        topCustomer: ''\r\n                    };\r\n                }\r\n\r\n                const dayData = dailyStats[saleDate];\r\n                dayData.totalSales++;\r\n                dayData.totalRevenue += sale.sellingPrice;\r\n                dayData.totalCost += sale.costPrice;\r\n                dayData.totalProfit += sale.profit;\r\n                dayData.customers.add(sale.customerName);\r\n\r\n                // Category breakdown\r\n                if (!dayData.categories[sale.category]) {\r\n                    dayData.categories[sale.category] = {\r\n                        count: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dayData.categories[sale.category].count++;\r\n                dayData.categories[sale.category].revenue += sale.sellingPrice;\r\n                dayData.categories[sale.category].profit += sale.profit;\r\n            });\r\n\r\n            // Calculate derived stats\r\n            Object.values(dailyStats).forEach(day => {\r\n                day.avgOrderValue = day.totalRevenue / day.totalSales;\r\n                day.profitMargin = (day.totalProfit / day.totalRevenue) * 100;\r\n                day.uniqueCustomers = day.customers.size;\r\n\r\n                // Find top category by revenue\r\n                let topCategoryRevenue = 0;\r\n                Object.entries(day.categories).forEach(([category, data]) => {\r\n                    if (data.revenue > topCategoryRevenue) {\r\n                        topCategoryRevenue = data.revenue;\r\n                        day.topCategory = category;\r\n                    }\r\n                });\r\n            });\r\n\r\n            return dailyStats;\r\n        }\r\n\r\n        // Generate Compact Daily View\r\n        function generateCompactDailyView(dailyStats) {\r\n            const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n            const recentDays = sortedDays.slice(0, 7); // Show last 7 days\r\n\r\n            return `\r\n                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;\">\r\n                    ${recentDays.map(day => `\r\n                        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; cursor: pointer;\" onclick=\"showDayDetails('${day.date}')\">\r\n                            <div style=\"display: flex; justify-content: between; align-items: center; margin-bottom: 10px;\">\r\n                                <h5 style=\"margin: 0; font-size: 14px; opacity: 0.9;\">${new Date(day.date).toLocaleDateString()}</h5>\r\n                                <span style=\"font-size: 12px; opacity: 0.8;\">📅</span>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 20px; font-weight: bold; margin-bottom: 2px;\">${day.totalSales}</div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Sales</div>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 16px; font-weight: bold; margin-bottom: 2px;\">₹${day.totalRevenue.toFixed(0)}</div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Revenue</div>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 14px; font-weight: bold; margin-bottom: 2px; color: ${day.profitMargin >= 20 ? '#4ade80' : day.profitMargin >= 10 ? '#fbbf24' : '#f87171'};\">\r\n                                    ${day.profitMargin.toFixed(1)}%\r\n                                </div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Profit Margin</div>\r\n                            </div>\r\n                            <div style=\"font-size: 11px; opacity: 0.7; margin-top: 8px;\">\r\n                                Top: ${day.topCategory}\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n                ${sortedDays.length > 7 ? `\r\n                    <div style=\"text-align: center; margin-top: 15px;\">\r\n                        <button onclick=\"showAllDays()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 12px;\">\r\n                            📊 View All ${sortedDays.length} Days\r\n                        </button>\r\n                    </div>\r\n                ` : ''}\r\n            `;\r\n        }\r\n\r\n        // Generate Detailed Daily View\r\n        function generateDetailedDailyView(dailyStats) {\r\n            const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n            return `\r\n                <div style=\"max-height: 500px; overflow-y: auto;\">\r\n                    ${sortedDays.map(day => {\r\n                        const salesForDay = salesData.filter(sale => sale.saleDate === day.date);\r\n\r\n                        return `\r\n                            <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin-bottom: 15px;\">\r\n                                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                                    <h5 style=\"margin: 0; font-size: 16px;\">${new Date(day.date).toLocaleDateString('en-US', {\r\n                                        weekday: 'long',\r\n                                        year: 'numeric',\r\n                                        month: 'long',\r\n                                        day: 'numeric'\r\n                                    })}</h5>\r\n                                    <div style=\"font-size: 12px; opacity: 0.8;\">\r\n                                        ${day.totalSales} sales • ₹${day.totalRevenue.toFixed(0)} revenue • ₹${day.totalProfit.toFixed(0)} profit\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <!-- Individual Sales Records -->\r\n                                <div style=\"background: rgba(255,255,255,0.05); border-radius: 6px; padding: 10px;\">\r\n                                    <h6 style=\"margin: 0 0 10px 0; font-size: 12px; opacity: 0.9;\">📋 Sales Records:</h6>\r\n                                    <div style=\"display: flex; flex-direction: column; gap: 8px;\">\r\n                                        ${salesForDay.map((sale, index) => `\r\n                                            <div style=\"background: rgba(255,255,255,0.1); padding: 12px; border-radius: 6px; display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 1fr; gap: 15px; align-items: center; font-size: 12px;\">\r\n                                                <div style=\"font-weight: bold;\">\r\n                                                    <div style=\"font-size: 13px; margin-bottom: 2px;\">${sale.itemName}</div>\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">👤 ${sale.customerName}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Category</div>\r\n                                                    <div style=\"font-weight: bold;\">${sale.category}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Cost</div>\r\n                                                    <div style=\"font-weight: bold;\">₹${sale.costPrice.toFixed(0)}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Selling</div>\r\n                                                    <div style=\"font-weight: bold;\">₹${sale.sellingPrice.toFixed(0)}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Profit</div>\r\n                                                    <div style=\"font-weight: bold; color: ${sale.profit >= 0 ? '#4ade80' : '#f87171'};\">₹${sale.profit.toFixed(0)}</div>\r\n                                                </div>\r\n                                            </div>\r\n                                        `).join('')}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        `;\r\n                    }).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Toggle Daily Sales View (function kept for compatibility)\r\n        function toggleDailySalesView() {\r\n            // Function removed - always show detailed view\r\n        }\r\n\r\n        // Show specific day details (future enhancement)\r\n        function showDayDetails(date) {\r\n            const dailyStats = calculateDailyStats();\r\n            const dayData = dailyStats[date];\r\n\r\n            if (!dayData) return;\r\n\r\n            const salesForDay = salesData.filter(sale => sale.saleDate === date);\r\n\r\n            alert(`📅 Sales Details for ${new Date(date).toLocaleDateString()}\r\n\r\n📊 Summary:\r\n• Total Sales: ${dayData.totalSales}\r\n• Revenue: ₹${dayData.totalRevenue.toFixed(2)}\r\n• Profit: ₹${dayData.totalProfit.toFixed(2)}\r\n• Profit Margin: ${dayData.profitMargin.toFixed(1)}%\r\n• Unique Customers: ${dayData.uniqueCustomers}\r\n• Average Order Value: ₹${dayData.avgOrderValue.toFixed(2)}\r\n\r\n🏷️ Categories:\r\n${Object.entries(dayData.categories).map(([cat, data]) =>\r\n`• ${cat}: ${data.count} sales (₹${data.revenue.toFixed(2)})`\r\n).join('\\n')}\r\n\r\n👥 Customers:\r\n${[...dayData.customers].join(', ')}`);\r\n        }\r\n\r\n        // Show all days (future enhancement)\r\n        function showAllDays() {\r\n            isDailyViewDetailed = true;\r\n            updateDailySalesReport();\r\n            document.getElementById('daily-view-toggle').textContent = '📋 Compact View';\r\n        }\r\n\r\n        // Export Daily Sales Report\r\n        function exportDailySalesReport() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available to export!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const dailyStats = calculateDailyStats();\r\n                const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n                // Prepare data for export\r\n                const reportData = sortedDays.map(day => ({\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Day of Week': new Date(day.date).toLocaleDateString('en-US', { weekday: 'long' }),\r\n                    'Total Sales': day.totalSales,\r\n                    'Total Revenue (₹)': day.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': day.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': day.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': day.profitMargin.toFixed(2),\r\n                    'Average Order Value (₹)': day.avgOrderValue.toFixed(2),\r\n                    'Unique Customers': day.uniqueCustomers,\r\n                    'Top Category': day.topCategory,\r\n                    'Categories Count': Object.keys(day.categories).length\r\n                }));\r\n\r\n                // Create detailed category breakdown sheet\r\n                const categoryData = [];\r\n                sortedDays.forEach(day => {\r\n                    Object.entries(day.categories).forEach(([category, data]) => {\r\n                        categoryData.push({\r\n                            'Date': new Date(day.date).toLocaleDateString(),\r\n                            'Category': category,\r\n                            'Sales Count': data.count,\r\n                            'Revenue (₹)': data.revenue.toFixed(2),\r\n                            'Profit (₹)': data.profit.toFixed(2),\r\n                            'Avg Sale Value (₹)': (data.revenue / data.count).toFixed(2)\r\n                        });\r\n                    });\r\n                });\r\n\r\n                // Create workbook\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Add main daily report sheet\r\n                const ws1 = XLSX.utils.json_to_sheet(reportData);\r\n                XLSX.utils.book_append_sheet(wb, ws1, 'Daily Sales Summary');\r\n\r\n                // Add category breakdown sheet\r\n                const ws2 = XLSX.utils.json_to_sheet(categoryData);\r\n                XLSX.utils.book_append_sheet(wb, ws2, 'Daily Category Breakdown');\r\n\r\n                // Export file\r\n                const fileName = `Daily_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Daily Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting daily sales report:', error);\r\n                alert('Error exporting report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n\r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Edit sale functionality\r\n        let currentEditingSaleId = null;\r\n\r\n        function editSale(id) {\r\n            // Check if another sale is being edited\r\n            if (currentEditingSaleId && currentEditingSaleId !== id) {\r\n                showError('Please finish editing the current sale before editing another one.');\r\n                return;\r\n            }\r\n\r\n            const sale = salesData.find(s => s.id === id);\r\n            if (!sale) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const saleItem = document.getElementById(`sale-item-${id}`);\r\n            if (!saleItem) {\r\n                showError('Sale item not found in DOM!');\r\n                return;\r\n            }\r\n\r\n            currentEditingSaleId = id;\r\n\r\n            // Create edit form\r\n            const editForm = `\r\n                <div class=\"edit-form\">\r\n                    <h4>✏️ Edit Sale Record</h4>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-itemName-${id}\">Item Name *</label>\r\n                            <input type=\"text\" id=\"edit-itemName-${id}\" value=\"${sale.itemName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-category-${id}\">Category *</label>\r\n                            <select id=\"edit-category-${id}\" required>\r\n                                <option value=\"Necklaces\" ${sale.category === 'Necklaces' ? 'selected' : ''}>Necklaces</option>\r\n                                <option value=\"Earrings\" ${sale.category === 'Earrings' ? 'selected' : ''}>Earrings</option>\r\n                                <option value=\"Bracelets\" ${sale.category === 'Bracelets' ? 'selected' : ''}>Bracelets</option>\r\n                                <option value=\"Rings\" ${sale.category === 'Rings' ? 'selected' : ''}>Rings</option>\r\n                                <option value=\"Anklets\" ${sale.category === 'Anklets' ? 'selected' : ''}>Anklets</option>\r\n                                <option value=\"Sets\" ${sale.category === 'Sets' ? 'selected' : ''}>Sets</option>\r\n                                <option value=\"Bangles\" ${sale.category === 'Bangles' ? 'selected' : ''}>Bangles</option>\r\n                                <option value=\"Chains\" ${sale.category === 'Chains' ? 'selected' : ''}>Chains</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-costPrice-${id}\">Cost Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-costPrice-${id}\" value=\"${sale.costPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-sellingPrice-${id}\">Selling Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-sellingPrice-${id}\" value=\"${sale.sellingPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-profit-${id}\">Profit (₹)</label>\r\n                            <input type=\"number\" id=\"edit-profit-${id}\" value=\"${sale.profit}\" readonly style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-saleDate-${id}\">Sale Date *</label>\r\n                            <input type=\"date\" id=\"edit-saleDate-${id}\" value=\"${sale.saleDate}\" required>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerName-${id}\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"edit-customerName-${id}\" value=\"${sale.customerName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerPhone-${id}\">Customer Phone</label>\r\n                            <input type=\"tel\" id=\"edit-customerPhone-${id}\" value=\"${sale.customerPhone}\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-group\">\r\n                        <label for=\"edit-customerAddress-${id}\">Customer Address</label>\r\n                        <textarea id=\"edit-customerAddress-${id}\" rows=\"2\">${sale.customerAddress || ''}</textarea>\r\n                    </div>\r\n                    <div class=\"edit-form-buttons\">\r\n                        <button class=\"save-edit-btn\" onclick=\"saveSaleEdit(${id})\">💾 Save Changes</button>\r\n                        <button class=\"cancel-edit-btn\" onclick=\"cancelSaleEdit(${id})\">❌ Cancel</button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            saleItem.innerHTML = editForm;\r\n\r\n            // Scroll the edited item into view\r\n            saleItem.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n\r\n        function calculateEditProfit(id) {\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            document.getElementById(`edit-profit-${id}`).value = profit.toFixed(2);\r\n        }\r\n\r\n        function saveSaleEdit(id) {\r\n            const itemName = document.getElementById(`edit-itemName-${id}`).value.trim();\r\n            const category = document.getElementById(`edit-category-${id}`).value;\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value);\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value);\r\n            const saleDate = document.getElementById(`edit-saleDate-${id}`).value;\r\n            const customerName = document.getElementById(`edit-customerName-${id}`).value.trim();\r\n            const customerPhone = document.getElementById(`edit-customerPhone-${id}`).value.trim();\r\n            const customerAddress = document.getElementById(`edit-customerAddress-${id}`).value.trim();\r\n\r\n            // Validation\r\n            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                showError('Please fill in all required fields marked with *');\r\n                return;\r\n            }\r\n\r\n            if (costPrice < 0 || sellingPrice < 0) {\r\n                showError('Cost price and selling price must be positive numbers');\r\n                return;\r\n            }\r\n\r\n            // Find and update the sale\r\n            const saleIndex = salesData.findIndex(s => s.id === id);\r\n            if (saleIndex === -1) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            // Update the sale data\r\n            salesData[saleIndex] = {\r\n                ...salesData[saleIndex],\r\n                itemName,\r\n                category,\r\n                costPrice,\r\n                sellingPrice,\r\n                profit,\r\n                saleDate,\r\n                customerName,\r\n                customerPhone: customerPhone || 'Not provided',\r\n                customerAddress: customerAddress || 'Not provided'\r\n            };\r\n\r\n            // Save to localStorage\r\n            localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n            // Reset editing state\r\n            currentEditingSaleId = null;\r\n\r\n            // Refresh displays\r\n            loadSalesRecords();\r\n            updateDashboard();\r\n            loadCustomers();\r\n\r\n            showSuccess('Sale record updated successfully!');\r\n        }\r\n\r\n        function cancelSaleEdit(id) {\r\n            currentEditingSaleId = null;\r\n            loadSalesRecords();\r\n        }\r\n\r\n        // Load more sales functionality\r\n        function loadMoreSales() {\r\n            displayedSalesCount += 20; // Load 20 more sales\r\n            loadSalesRecords();\r\n\r\n            // Smooth scroll to maintain position\r\n            const loadMoreBtn = document.getElementById('load-more-btn');\r\n            setTimeout(() => {\r\n                loadMoreBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }, 100);\r\n        }\r\n\r\n        // Reset displayed sales count when needed\r\n        function resetSalesDisplay() {\r\n            displayedSalesCount = 20;\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n\r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n\r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n\r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n\r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n\r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n\r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n\r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n\r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n\r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer =>\r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers with enhanced display\r\n        function loadCustomers() {\r\n            const countElement = document.getElementById('customers-count');\r\n            countElement.textContent = customersData.length;\r\n\r\n            // Reset pagination and filters when loading fresh data\r\n            currentCustomerPage = 1;\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n\r\n            // Clear search and sort inputs\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            currentCustomerSort = 'name-asc';\r\n\r\n            // Display the enhanced customer database\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        // Download customers Excel report\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const customersWithStats = customersData.map(customer => {\r\n                    const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                    const lastPurchase = customerSales.length > 0 ?\r\n                        new Date(Math.max(...customerSales.map(sale => new Date(sale.saleDate)))).toLocaleDateString() : 'Never';\r\n\r\n                    return {\r\n                        'Customer Name': customer.name,\r\n                        'Phone': customer.phone || 'Not provided',\r\n                        'Email': customer.email || 'Not provided',\r\n                        'Address': customer.address || 'Not provided',\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Average Order Value (₹)': totalPurchases > 0 ? (totalSpent / totalPurchases).toFixed(2) : 0,\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Customer Status': totalPurchases > 0 ? 'Active' : 'Inactive',\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Database');\r\n\r\n                const fileName = `Customer_Database_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Customer database exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting customers:', error);\r\n                showError('Error exporting customer data: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nThis will NOT affect sales records, but customer search functionality will be limited.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL CUSTOMERS\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL CUSTOMERS') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        updateCustomerCount();\r\n                        showSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL CUSTOMERS\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n\r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n\r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n\r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n\r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n\r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n\r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n\r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n\r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n\r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n\r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n\r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n\r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong>\r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' :\r\n                          month.profitMargin > 10 ? '📊 Good Performance' :\r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n\r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n\r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n\r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                    // Find top category\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n\r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' :\r\n                                         month.profitMargin > 10 ? 'Good' :\r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n\r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n\r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n\r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n\r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n\r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong>\r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' :\r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' :\r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n\r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong>\r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' :\r\n                          cat.salesPercentage > 20 ? '📈 High Demand' :\r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' :\r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n\r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n\r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n\r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n\r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n\r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' :\r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' :\r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n\r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Customer Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n\r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' :\r\n                                   cat.salesPercentage > 20 ? 'High Demand' :\r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' :\r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n\r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Category Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n\r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n\r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n\r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n\r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Sales Trends exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Mobile-friendly alert function\r\n        function mobileAlert(title, message, type = 'info') {\r\n            // For now, use native alert but this can be enhanced with custom modal\r\n            if (type === 'error') {\r\n                alert('❌ ' + title + '\\n\\n' + message);\r\n            } else if (type === 'success') {\r\n                alert('✅ ' + title + '\\n\\n' + message);\r\n            } else if (type === 'warning') {\r\n                alert('⚠️ ' + title + '\\n\\n' + message);\r\n            } else {\r\n                alert('ℹ️ ' + title + '\\n\\n' + message);\r\n            }\r\n        }\r\n\r\n        // ======== PURCHASE HISTORY FUNCTIONS ========\r\n\r\n        // Purchase history data\r\n        let purchaseData = [];\r\n\r\n        // Initialize purchase data from localStorage\r\n        function initializePurchaseData() {\r\n            const savedPurchases = localStorage.getItem('jewelryPurchases');\r\n            if (savedPurchases) {\r\n                purchaseData = JSON.parse(savedPurchases);\r\n            } else {\r\n                purchaseData = [];\r\n            }\r\n        }\r\n\r\n        // Save purchase data to localStorage\r\n        function savePurchaseData() {\r\n            localStorage.setItem('jewelryPurchases', JSON.stringify(purchaseData));\r\n        }\r\n\r\n        // Toggle purchase history section\r\n        function togglePurchaseSection() {\r\n            const container = document.getElementById('purchase-content-container');\r\n            const toggleBtn = document.getElementById('purchase-toggle-btn');\r\n\r\n            if (container.classList.contains('collapsed')) {\r\n                container.classList.remove('collapsed');\r\n                toggleBtn.title = 'Collapse Purchase History';\r\n                container.classList.add('expanded');\r\n                toggleBtn.textContent = '▼';\r\n                toggleBtn.classList.remove('collapsed');\r\n                loadPurchaseHistory();\r\n            } else {\r\n                container.classList.remove('expanded');\r\n                container.classList.add('collapsed');\r\n                toggleBtn.title = 'Expand Purchase History';\r\n                toggleBtn.textContent = '►';\r\n                toggleBtn.classList.add('collapsed');\r\n            }\r\n        }\r\n\r\n        // Load and display purchase history\r\n        function loadPurchaseHistory() {\r\n            initializePurchaseData();\r\n            updatePurchaseSummary();\r\n            displayPurchaseRecords();\r\n            updatePurchaseCount();\r\n        }\r\n\r\n        // Update purchase summary statistics\r\n        function updatePurchaseSummary() {\r\n            const totalPurchases = purchaseData.length;\r\n            const totalPurchaseCost = purchaseData.reduce((sum, item) => sum + item.purchaseCost, 0);\r\n            const totalSellingValue = purchaseData.reduce((sum, item) => sum + item.sellingPrice, 0);\r\n            const potentialProfit = totalSellingValue - totalPurchaseCost;\r\n\r\n            document.getElementById('summary-total-purchases').textContent = totalPurchases;\r\n            document.getElementById('summary-total-purchase-cost').textContent = `₹${totalPurchaseCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling-value').textContent = `₹${totalSellingValue.toFixed(2)}`;\r\n            document.getElementById('summary-potential-profit').textContent = `₹${potentialProfit.toFixed(2)}`;\r\n        }\r\n\r\n        // Update purchase count\r\n        function updatePurchaseCount() {\r\n            document.getElementById('purchase-count').textContent = purchaseData.length;\r\n        }\r\n\r\n        // Display purchase records\r\n        function displayPurchaseRecords() {\r\n            const container = document.getElementById('purchase-records');\r\n            const noDataMessage = document.getElementById('no-purchase-message');\r\n\r\n            if (purchaseData.length === 0) {\r\n                container.innerHTML = '';\r\n                noDataMessage.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            noDataMessage.style.display = 'none';\r\n\r\n            // Sort by purchase date (newest first)\r\n            const sortedPurchases = [...purchaseData].sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate));\r\n\r\n            container.innerHTML = sortedPurchases.map((item, index) => {\r\n                const profitMargin = ((item.sellingPrice - item.purchaseCost) / item.sellingPrice * 100).toFixed(1);\r\n                const profit = item.sellingPrice - item.purchaseCost;\r\n                const profitColor = profit >= 0 ? '#10B981' : '#EF4444';\r\n                const statusColor = item.status === 'sold' ? '#10B981' : item.status === 'reserved' ? '#F59E0B' : '#6B7280';\r\n\r\n                return `\r\n                    <div class=\"purchase-record-item\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <h4 style=\"color: #333; margin: 0 0 5px 0; font-size: 16px;\">${item.itemName}</h4>\r\n                                <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\r\n                                    <span style=\"background: #667eea; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;\">\r\n                                        ${getCategoryIcon(item.category)} ${item.category}\r\n                                    </span>\r\n                                    <span style=\"background: ${statusColor}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px; text-transform: uppercase;\">\r\n                                        ${item.status || 'Available'}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div style=\"text-align: right;\">\r\n                                <div style=\"display: flex; gap: 5px;\">\r\n                                    <button onclick=\"editPurchaseRecord(${index})\" style=\"background: #4ecdc4; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Edit\">\r\n                                        ✏️\r\n                                    </button>\r\n                                    <button onclick=\"deletePurchaseRecord(${index})\" style=\"background: #ff6b6b; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Delete\">\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💰 Purchase Cost:</strong> ₹${item.purchaseCost.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💎 Selling Price:</strong> ₹${item.sellingPrice.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: ${profitColor}; font-size: 14px;\">\r\n                                    <strong>📈 Potential Profit:</strong> ₹${profit.toFixed(2)} (${profitMargin}%)\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📅 Purchase Date:</strong> ${new Date(item.purchaseDate).toLocaleDateString()}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>🏪 Supplier:</strong> ${item.supplier || 'Not specified'}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📦 Quantity:</strong> ${item.quantity || 1}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        ${item.notes ? `\r\n                            <div style=\"background: #f8f9fa; padding: 10px; border-radius: 6px; margin-top: 10px;\">\r\n                                <p style=\"margin: 0; color: #666; font-size: 13px;\">\r\n                                    <strong>📝 Notes:</strong> ${item.notes}\r\n                                </p>\r\n                            </div>\r\n                        ` : ''}\r\n                    </div>\r\n                `;\r\n            }).join('');\r\n        }\r\n\r\n        // Add new purchase record - Show form instead of prompts\r\n        function addToPurchaseHistory() {\r\n            const form = document.getElementById('add-purchase-form');\r\n            if (form.style.display === 'none' || form.style.display === '') {\r\n                // Show the form and scroll to it\r\n                form.style.display = 'block';\r\n                form.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n\r\n                // Clear any previous values\r\n                document.getElementById('supplier-name').value = '';\r\n                document.getElementById('purchase-name').value = '';\r\n                document.getElementById('purchase-cost').value = '';\r\n                document.getElementById('purchase-category').value = '';\r\n                document.getElementById('selling-price').value = '';\r\n                document.getElementById('purchase-quantity').value = '1';\r\n                document.getElementById('purchase-notes').value = '';\r\n                } else {\r\n                // Hide the form if it's already shown\r\n                form.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Cancel adding purchase - Hide the form\r\n        function cancelAddPurchase() {\r\n            const form = document.getElementById('add-purchase-form');\r\n            form.style.display = 'none';\r\n        }\r\n\r\n        // Save purchase from form data\r\n        function savePurchaseFromForm() {\r\n            const supplierName = document.getElementById('supplier-name').value.trim();\r\n            const purchaseName = document.getElementById('purchase-name').value.trim();\r\n            const purchaseCost = parseFloat(document.getElementById('purchase-cost').value);\r\n            const category = document.getElementById('purchase-category').value.trim();\r\n                // Focus on the first input\r\n                document.getElementById('supplier-name').focus();\r\n\r\n            const sellingPrice = parseFloat(document.getElementById('selling-price').value);\r\n            const quantity = parseInt(document.getElementById('purchase-quantity').value) || 1;\r\n            const notes = document.getElementById('purchase-notes').value.trim();\r\n\r\n            // Validation\r\n            if (!supplierName) {\r\n                alert('❌ Please enter supplier name.');\r\n                document.getElementById('supplier-name').focus();\r\n                return;\r\n            }\r\n\r\n            if (!purchaseName) {\r\n                alert('❌ Please enter purchase name (item name).');\r\n                document.getElementById('purchase-name').focus();\r\n                return;\r\n            }\r\n\r\n            if (isNaN(purchaseCost) || purchaseCost <= 0) {\r\n                alert('❌ Please enter a valid purchase cost.');\r\n                document.getElementById('purchase-cost').focus();\r\n                return;\r\n            }\r\n\r\n            if (sellingPrice && (isNaN(sellingPrice) || sellingPrice <= 0)) {\r\n                alert('❌ Please enter a valid selling price or leave it empty.');\r\n                document.getElementById('selling-price').focus();\r\n                return;\r\n            }\r\n\r\n            // Create purchase record\r\n            const purchaseRecord = {\r\n                id: Date.now().toString(),\r\n                itemName: purchaseName,\r\n                category: category || 'General',\r\n                purchaseCost: purchaseCost,\r\n                sellingPrice: sellingPrice || 0,\r\n                supplier: supplierName,\r\n                quantity: quantity,\r\n                status: 'available',\r\n                purchaseDate: new Date().toISOString().split('T')[0],\r\n                notes: notes\r\n            };\r\n\r\n            // Add to data and save\r\n            purchaseData.unshift(purchaseRecord);\r\n            savePurchaseData();\r\n            loadPurchaseHistory();\r\n\r\n            // Hide form and show success message\r\n            document.getElementById('add-purchase-form').style.display = 'none';\r\n            alert('✅ Purchase record added successfully!');\r\n        }\r\n\r\n        // Handle Enter key in purchase form\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            const purchaseFormInputs = document.querySelectorAll('#add-purchase-form input, #add-purchase-form textarea');\r\n            purchaseFormInputs.forEach(input => {\r\n                input.addEventListener('keypress', function(e) {\r\n                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                        e.preventDefault();\r\n                        // If it's the last input or textarea, save the form\r\n                        if (input.id === 'purchase-notes') {\r\n                            savePurchaseFromForm();\r\n                        } else {\r\n                            // Move to next input\r\n                            const inputs = Array.from(purchaseFormInputs);\r\n                            const currentIndex = inputs.indexOf(input);\r\n                            if (currentIndex < inputs.length - 1) {\r\n                                inputs[currentIndex + 1].focus();\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        // Edit purchase record\r\n        function editPurchaseRecord(index) {\r\n            const item = purchaseData[index];\r\n            if (!item) return;\r\n\r\n            const newItemName = prompt('Edit item name:', item.itemName);\r\n            if (newItemName === null) return;\r\n\r\n            const newCategory = prompt('Edit category:', item.category);\r\n            if (newCategory === null) return;\r\n\r\n            const newPurchaseCost = parseFloat(prompt('Edit purchase cost:', item.purchaseCost));\r\n            if (isNaN(newPurchaseCost)) return;\r\n\r\n            const newSellingPrice = parseFloat(prompt('Edit selling price:', item.sellingPrice));\r\n            if (isNaN(newSellingPrice)) return;\r\n\r\n            const newSupplier = prompt('Edit supplier:', item.supplier || '');\r\n            const newQuantity = parseInt(prompt('Edit quantity:', item.quantity || 1));\r\n            const newNotes = prompt('Edit notes:', item.notes || '');\r\n\r\n            purchaseData[index] = {\r\n                ...item,\r\n                itemName: newItemName.trim(),\r\n                category: newCategory.trim(),\r\n                purchaseCost: newPurchaseCost,\r\n                sellingPrice: newSellingPrice,\r\n                supplier: (newSupplier || '').trim() || 'Not specified',\r\n                quantity: isNaN(newQuantity) ? 1 : newQuantity,\r\n                notes: (newNotes || '').trim()\r\n            };\r\n\r\n            savePurchaseData();\r\n            loadPurchaseHistory();\r\n            alert('✅ Purchase record updated successfully!');\r\n        }\r\n\r\n        // Delete purchase record\r\n        function deletePurchaseRecord(index) {\r\n            const item = purchaseData[index];\r\n            if (!item) return;\r\n\r\n            if (confirm(`Are you sure you want to delete \"${item.itemName}\"?`)) {\r\n                purchaseData.splice(index, 1);\r\n                savePurchaseData();\r\n                loadPurchaseHistory();\r\n                alert('🗑️ Purchase record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Filter purchases based on search\r\n        function filterPurchases() {\r\n            const searchTerm = document.getElementById('purchase-search').value.toLowerCase();\r\n\r\n            if (!searchTerm) {\r\n                displayPurchaseRecords();\r\n                return;\r\n            }\r\n\r\n            const filteredPurchases = purchaseData.filter(item =>\r\n                item.itemName.toLowerCase().includes(searchTerm) ||\r\n                item.category.toLowerCase().includes(searchTerm) ||\r\n                (item.supplier && item.supplier.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            const container = document.getElementById('purchase-records');\r\n            const noDataMessage = document.getElementById('no-purchase-message');\r\n\r\n            if (filteredPurchases.length === 0) {\r\n                container.innerHTML = '';\r\n                noDataMessage.style.display = 'block';\r\n                noDataMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Purchase Records Found</h3>\r\n                    <p>No purchases match your search term \"${searchTerm}\"</p>\r\n                `;\r\n                return;\r\n            }\r\n\r\n            noDataMessage.style.display = 'none';\r\n            // Display filtered results (reuse the same display logic)\r\n            const sortedPurchases = [...filteredPurchases].sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate));\r\n\r\n            container.innerHTML = sortedPurchases.map((item, index) => {\r\n                const originalIndex = purchaseData.findIndex(p => p.id === item.id);\r\n                const profitMargin = ((item.sellingPrice - item.purchaseCost) / item.sellingPrice * 100).toFixed(1);\r\n                const profit = item.sellingPrice - item.purchaseCost;\r\n                const profitColor = profit >= 0 ? '#10B981' : '#EF4444';\r\n                const statusColor = item.status === 'sold' ? '#10B981' : item.status === 'reserved' ? '#F59E0B' : '#6B7280';\r\n\r\n                return `\r\n                    <div class=\"purchase-record-item\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <h4 style=\"color: #333; margin: 0 0 5px 0; font-size: 16px;\">${item.itemName}</h4>\r\n                                <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\r\n                                    <span style=\"background: #667eea; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;\">\r\n                                        ${getCategoryIcon(item.category)} ${item.category}\r\n                                    </span>\r\n                                    <span style=\"background: ${statusColor}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px; text-transform: uppercase;\">\r\n                                        ${item.status || 'Available'}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div style=\"text-align: right;\">\r\n                                <div style=\"display: flex; gap: 5px;\">\r\n                                    <button onclick=\"editPurchaseRecord(${originalIndex})\" style=\"background: #4ecdc4; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Edit\">\r\n                                        ✏️\r\n                                    </button>\r\n                                    <button onclick=\"deletePurchaseRecord(${originalIndex})\" style=\"background: #ff6b6b; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Delete\">\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💰 Purchase Cost:</strong> ₹${item.purchaseCost.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💎 Selling Price:</strong> ₹${item.sellingPrice.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: ${profitColor}; font-size: 14px;\">\r\n                                    <strong>📈 Potential Profit:</strong> ₹${profit.toFixed(2)} (${profitMargin}%)\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📅 Purchase Date:</strong> ${new Date(item.purchaseDate).toLocaleDateString()}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>🏪 Supplier:</strong> ${item.supplier || 'Not specified'}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📦 Quantity:</strong> ${item.quantity || 1}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        ${item.notes ? `\r\n                            <div style=\"background: #f8f9fa; padding: 10px; border-radius: 6px; margin-top: 10px;\">\r\n                                <p style=\"margin: 0; color: #666; font-size: 13px;\">\r\n                                    <strong>📝 Notes:</strong> ${item.notes}\r\n                                </p>\r\n                            </div>\r\n                        ` : ''}\r\n                    </div>\r\n                `;\r\n            }).join('');\r\n        }\r\n\r\n        // Clear purchase search filter\r\n        function clearPurchaseFilter() {\r\n            document.getElementById('purchase-search').value = '';\r\n            displayPurchaseRecords();\r\n        }\r\n\r\n        // Export purchase history to Excel\r\n        function exportPurchaseHistory() {\r\n            if (purchaseData.length === 0) {\r\n                alert('No purchase records to export!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const dataToExport = purchaseData.map(item => ({\r\n                    'Item Name': item.itemName,\r\n                    'Category': item.category,\r\n                    'Purchase Cost (₹)': item.purchaseCost.toFixed(2),\r\n                    'Selling Price (₹)': item.sellingPrice.toFixed(2),\r\n                    'Potential Profit (₹)': (item.sellingPrice - item.purchaseCost).toFixed(2),\r\n                    'Profit Margin (%)': (((item.sellingPrice - item.purchaseCost) / item.sellingPrice) * 100).toFixed(1),\r\n                    'Purchase Date': item.purchaseDate,\r\n                    'Supplier': item.supplier || 'Not specified',\r\n                    'Quantity': item.quantity || 1,\r\n                    'Status': item.status || 'Available',\r\n                    'Notes': item.notes || ''\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(dataToExport);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Purchase History');\r\n\r\n                const fileName = `Purchase_History_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert(`📦 Purchase history exported successfully!\\n\\nFile: ${fileName}\\nRecords: ${purchaseData.length}`);\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting purchase history:', error);\r\n                alert('Error exporting purchase history: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Initialize purchase data when the app loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializePurchaseData();\r\n            updatePurchaseCount();\r\n        });\r\n    </script>\r\n\r\n    <!-- Mobile-friendly modal for alerts (future enhancement) -->\r\n    <div id=\"mobile-modal\" class=\"mobile-modal\">\r\n        <div class=\"mobile-modal-content\">\r\n            <div id=\"mobile-modal-header\" class=\"mobile-modal-header\"></div>\r\n            <div id=\"mobile-modal-body\" class=\"mobile-modal-body\"></div>\r\n            <div class=\"mobile-modal-buttons\">\r\n                <button id=\"mobile-modal-ok\" class=\"btn btn-primary\">OK</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Floating Action Buttons -->\r\n    <div class=\"floating-actions\">\r\n        <button class=\"floating-btn\" title=\"Scroll to Top\" onclick=\"window.scrollTo({top: 0, behavior: 'smooth'})\">\r\n            <i class=\"fas fa-arrow-up\"></i>\r\n        </button>\r\n        <button class=\"floating-btn\" title=\"Quick Add Sale\" onclick=\"showTab('sales'); document.getElementById('customerName').focus();\">\r\n            <i class=\"fas fa-plus\"></i>\r\n        </button>\r\n        <button class=\"floating-btn\" title=\"Dashboard\" onclick=\"showTab('dashboard')\">\r\n            <i class=\"fas fa-chart-pie\"></i>\r\n        </button>\r\n    </div>\r\n\r\n    <!-- Enhanced loading overlay -->\r\n    <div id=\"loading-overlay\" style=\"display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; \r\n         background: rgba(102, 126, 234, 0.9); z-index: 9999; align-items: center; justify-content: center;\">\r\n        <div style=\"text-align: center; color: white;\">\r\n            <div class=\"loading-spinner\" style=\"width: 60px; height: 60px; border: 4px solid rgba(255,255,255,0.3); \r\n                 border-top: 4px solid white; margin: 0 auto 20px;\"></div>\r\n            <h3 style=\"margin: 0; font-weight: 300;\">Processing...</h3>\r\n            <p style=\"margin: 10px 0 0; opacity: 0.8;\">Please wait while we save your data</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1752346092877,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "show pricing information and item information in same card"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "87cfedc1-d975-4abc-87df-9d9423d81762",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I'll combine the Item Information and Pricing Information sections into a single card for better organization and visual appeal."
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01QLd6Y2v91f72JhdmUwUZke",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -2804,11 +2804,12 @@\n                     </div>\n                 </div>\n \n-                <!-- Item Information Section -->\n+                <!-- Item Information & Pricing Section -->\n                 <div class=\"form-section\" style=\"z-index: 10; position: relative;\">\n-                    <h3><i class=\"fas fa-gem\"></i> Item Information</h3>\n+                    <h3><i class=\"fas fa-gem\"></i> Item Information & Pricing</h3>\n                     <div class=\"form-grid\">\n-                        <div class=\"form-group\">\n+                        <!-- Item Details -->\n+                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\n                             <label for=\"itemName\" class=\"required\">Item Name</label>\n                             <input type=\"text\" id=\"itemName\" class=\"form-control\" required\n                                    placeholder=\"e.g., Gold Plated Necklace\">\n@@ -2818,7 +2819,7 @@\n                             </div>\n                         </div>\n \n-                        <div class=\"form-group\">\n+                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\n                             <label for=\"category\" class=\"required\">Categories</label>\n                             <div class=\"multi-select-container\" style=\"position: relative;\">\n                                 <div class=\"multi-select-display\" id=\"category-display\" onclick=\"toggleCategoryDropdown()\"\n@@ -2930,26 +2931,36 @@\n                                 <span>Sale date is required</span>\n                             </div>\n                         </div>\n-                    </div>\n-                </div>\n-\n-                <!-- Pricing Information Section -->\n-                <div class=\"form-section\" style=\"z-index: 1; position: relative;\">\n-                    <h3><i class=\"fas fa-money-bill-wave\"></i> Pricing Information</h3>\n-\n-                    <div class=\"form-group\">\n-                        <label for=\"costPrice\">Cost Price (₹) *</label>\n-                        <input type=\"number\" id=\"costPrice\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\n-                    </div>\n-\n-                    <div class=\"form-group\">\n-                        <label for=\"sellingPrice\">Selling Price (₹) *</label>\n-                        <input type=\"number\" id=\"sellingPrice\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\n-                    </div>\n-\n-                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\n-                        <label for=\"profit\">Profit (₹)</label>\n-                        <input type=\"number\" id=\"profit\" readonly placeholder=\"Auto-calculated\" style=\"background-color: #f8f9fa; cursor: not-allowed;\">\n+\n+                        <!-- Pricing Information -->\n+                        <div class=\"form-group\">\n+                            <label for=\"costPrice\">Cost Price (₹) *</label>\n+                            <input type=\"number\" id=\"costPrice\" class=\"form-control\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\n+                        </div>\n+\n+                        <div class=\"form-group\">\n+                            <label for=\"sellingPrice\">Selling Price (₹) *</label>\n+                            <input type=\"number\" id=\"sellingPrice\" class=\"form-control\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\n+                        </div>\n+\n+                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\n+                            <label for=\"profit\">💰 Profit (₹)</label>\n+                            <input type=\"number\" id=\"profit\" class=\"form-control\" readonly placeholder=\"Auto-calculated\" \n+                                   style=\"background: linear-gradient(135deg, #d1fae5, #a7f3d0); cursor: not-allowed; font-weight: 600; color: #065f46;\">\n+                            <div id=\"profit-display\" style=\"margin-top: 8px; padding: 12px; background: linear-gradient(135deg, #f0f9ff, #e0f2fe); \n+                                 border-radius: 8px; border-left: 4px solid #0ea5e9; display: none;\">\n+                                <div style=\"display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;\">\n+                                    <div style=\"display: flex; align-items: center; gap: 8px;\">\n+                                        <i class=\"fas fa-chart-line\" style=\"color: #0ea5e9;\"></i>\n+                                        <span style=\"font-weight: 600; color: #0c4a6e;\">Profit Margin:</span>\n+                                        <span id=\"profit-margin\" style=\"font-weight: 700; color: #065f46; font-size: 1.1em;\">0%</span>\n+                                    </div>\n+                                    <div style=\"font-size: 12px; color: #64748b;\">\n+                                        Higher margin = Better profitability 📈\n+                                    </div>\n+                                </div>\n+                            </div>\n+                        </div>\n                     </div>\n                 </div>\n ",
                    "refToolCallId": "toolu_01QLd6Y2v91f72JhdmUwUZke"
                },
                {
                    "type": "text",
                    "text": "Now I need to update the JavaScript `calculateProfit()` function to also show the profit margin and enhance the visual feedback:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01RtD3W5MzJQPxRuiGnsMA9F",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_012qwSSbWXKWfREnaVmesuTg",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01H51J9nz4Ur57k3yaipLMqA",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now I'll enhance the calculateProfit function to show the profit margin and better visual feedback:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_012FkHGoiqceQ3utGFT49kku",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -5252,19 +5252,78 @@\n             const profit = sellingPrice - costPrice;\n \n             const profitField = document.getElementById('profit');\n+            const profitDisplay = document.getElementById('profit-display');\n+            const profitMargin = document.getElementById('profit-margin');\n+            \n             profitField.value = profit.toFixed(2);\n \n-            // Change color based on profit\n+            // Calculate profit margin percentage\n+            let marginPercentage = 0;\n+            if (sellingPrice > 0) {\n+                marginPercentage = ((profit / sellingPrice) * 100);\n+            }\n+\n+            // Update profit margin display\n+            if (profitMargin) {\n+                profitMargin.textContent = marginPercentage.toFixed(1) + '%';\n+            }\n+\n+            // Show/hide profit display\n+            if (costPrice > 0 && sellingPrice > 0) {\n+                profitDisplay.style.display = 'block';\n+            } else {\n+                profitDisplay.style.display = 'none';\n+            }\n+\n+            // Enhanced color coding based on profit\n             if (profit > 0) {\n-                profitField.style.color = '#4ecdc4';\n-                profitField.style.fontWeight = 'bold';\n+                profitField.style.background = 'linear-gradient(135deg, #d1fae5, #a7f3d0)';\n+                profitField.style.color = '#065f46';\n+                profitField.style.fontWeight = '600';\n+                profitField.style.borderColor = '#34d399';\n+                \n+                // Color code the margin based on percentage\n+                if (marginPercentage >= 30) {\n+                    profitMargin.style.color = '#065f46'; // Excellent\n+                    profitMargin.style.background = '#d1fae5';\n+                } else if (marginPercentage >= 20) {\n+                    profitMargin.style.color = '#047857'; // Good\n+                    profitMargin.style.background = '#ecfdf5';\n+                } else if (marginPercentage >= 10) {\n+                    profitMargin.style.color = '#d97706'; // Fair\n+                    profitMargin.style.background = '#fef3c7';\n+                } else {\n+                    profitMargin.style.color = '#dc2626'; // Low\n+                    profitMargin.style.background = '#fee2e2';\n+                }\n+                \n             } else if (profit < 0) {\n-                profitField.style.color = '#ff6b6b';\n-                profitField.style.fontWeight = 'bold';\n+                profitField.style.background = 'linear-gradient(135deg, #fee2e2, #fecaca)';\n+                profitField.style.color = '#dc2626';\n+                profitField.style.fontWeight = '600';\n+                profitField.style.borderColor = '#f87171';\n+                \n+                if (profitMargin) {\n+                    profitMargin.style.color = '#dc2626';\n+                    profitMargin.style.background = '#fee2e2';\n+                }\n             } else {\n-                profitField.style.color = '#666';\n+                profitField.style.background = 'linear-gradient(135deg, #f3f4f6, #e5e7eb)';\n+                profitField.style.color = '#6b7280';\n                 profitField.style.fontWeight = 'normal';\n-            }\n+                profitField.style.borderColor = '#d1d5db';\n+                \n+                if (profitMargin) {\n+                    profitMargin.style.color = '#6b7280';\n+                    profitMargin.style.background = '#f3f4f6';\n+                }\n+            }\n+\n+            // Add visual feedback animation\n+            profitField.style.transform = 'scale(1.02)';\n+            setTimeout(() => {\n+                profitField.style.transform = 'scale(1)';\n+            }, 200);\n         }\n \n         // Add sale record function",
                    "refToolCallId": "toolu_012FkHGoiqceQ3utGFT49kku"
                },
                {
                    "type": "text",
                    "text": "Perfect! Now let me add some improved styling for better visual hierarchy and spacing within the combined card:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01JzvxiupFWKW77Nj8a4C2au",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -2605,6 +2605,41 @@\n             font-size: 1.2em;\n             margin-right: 8px;\n             animation: iconShine 3s ease-in-out infinite;\n+        }\n+\n+        /* Enhanced form section styling */\n+        .form-section {\n+            background: linear-gradient(145deg, rgba(255, 255, 255, 0.98), rgba(248, 250, 252, 0.95));\n+            border: 1px solid rgba(255, 255, 255, 0.3);\n+            border-radius: var(--radius-xl);\n+            padding: var(--space-6);\n+            margin-bottom: var(--space-6);\n+            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);\n+            backdrop-filter: blur(20px);\n+            position: relative;\n+            overflow: hidden;\n+        }\n+\n+        .form-section::before {\n+            content: '';\n+            position: absolute;\n+            top: 0;\n+            left: 0;\n+            right: 0;\n+            height: 2px;\n+            background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);\n+            opacity: 0.8;\n+        }\n+\n+        .form-section h3 {\n+            color: var(--neutral-800);\n+            font-size: 1.25rem;\n+            font-weight: 600;\n+            margin-bottom: var(--space-4);\n+            display: flex;\n+            align-items: center;\n+            padding-bottom: var(--space-3);\n+            border-bottom: 1px solid rgba(102, 126, 234, 0.1);\n         }\n \n         @keyframes iconShine {",
                    "refToolCallId": "toolu_01JzvxiupFWKW77Nj8a4C2au"
                },
                {
                    "type": "text",
                    "text": "Now let me add some CSS to create a visual separator between the item details and pricing within the same card:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01HM9JUkuWreJEX5G9CqndTx",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -2967,6 +2967,16 @@\n                             </div>\n                         </div>\n \n+                        <!-- Pricing Information Separator -->\n+                        <div style=\"grid-column: 1 / -1; margin: var(--space-4) 0; padding: var(--space-3) 0; \n+                             border-top: 2px solid rgba(102, 126, 234, 0.1); position: relative;\">\n+                            <div style=\"position: absolute; top: -1px; left: 50%; transform: translateX(-50%); \n+                                 background: white; padding: 0 var(--space-3); color: #667eea; font-weight: 600; font-size: 0.9rem;\">\n+                                <i class=\"fas fa-money-bill-wave\" style=\"margin-right: 6px;\"></i>\n+                                Pricing Details\n+                            </div>\n+                        </div>\n+\n                         <!-- Pricing Information -->\n                         <div class=\"form-group\">\n                             <label for=\"costPrice\">Cost Price (₹) *</label>",
                    "refToolCallId": "toolu_01HM9JUkuWreJEX5G9CqndTx"
                },
                {
                    "type": "text",
                    "text": "Now let me run the HTML file to see the improvements:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01FbyVfKfwYiVvmoxZvGdmA7",
                    "status": "IN_PROGRESS",
                    "isHidden": true,
                    "localResult": "{\"status\":\"ERROR\",\"exitCode\":1,\"output\":\"\\u001b[?9001h\\u001b[?1004h\\u001b[?25l\\u001b[2J\\u001b[m\\u001b[H\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\u001b[H\\u001b]0;C:\\\\WINDOWS\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\\u0007\\u001b[?25h\\u001b[38;5;9mStart-Process : Cannot validate argument on parameter 'FilePath'. The argument is null or empty. Provide an argument that is not null or empty, and then \\r\\ntry the command again.\\r\\nAt line:1 char:7\\r\\n+ start \\\"\\\" \\\"C:/Users/Deeksha/IdeaProjects/TheiaSales/jewelry_sales_fina ...\\r\\n+       ~~\\r\\n    + CategoryInfo          : InvalidData: (:) [Start-Process], ParameterBindingValidationException\\u001b[m\\r\\n\\u001b[38;5;9m    + FullyQualifiedErrorId : ParameterArgumentValidationError,Microsoft.PowerShell.Commands.StartProcessCommand\\u001b[m\\r\\n\\u001b[38;5;9m\\u001b[1C\\u001b[m\\r\\n\"}"
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "jewelry_sales_final.html",
                            "patch": "@@ -79780,32 +79780,1227 @@\n ;%0D%0A        %7D%0D%0A%0D%0A\n+        /* Enhanced form section styling */%0D%0A        .form-section %7B%0D%0A            background: linear-gradient(145deg, rgba(255, 255, 255, 0.98), rgba(248, 250, 252, 0.95));%0D%0A            border: 1px solid rgba(255, 255, 255, 0.3);%0D%0A            border-radius: var(--radius-xl);%0D%0A            padding: var(--space-6);%0D%0A            margin-bottom: var(--space-6);%0D%0A            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);%0D%0A            backdrop-filter: blur(20px);%0D%0A            position: relative;%0D%0A            overflow: hidden;%0D%0A        %7D%0D%0A%0D%0A        .form-section::before %7B%0D%0A            content: '';%0D%0A            position: absolute;%0D%0A            top: 0;%0D%0A            left: 0;%0D%0A            right: 0;%0D%0A            height: 2px;%0D%0A            background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);%0D%0A            opacity: 0.8;%0D%0A        %7D%0D%0A%0D%0A        .form-section h3 %7B%0D%0A            color: var(--neutral-800);%0D%0A            font-size: 1.25rem;%0D%0A            font-weight: 600;%0D%0A            margin-bottom: var(--space-4);%0D%0A            display: flex;%0D%0A            align-items: center;%0D%0A            padding-bottom: var(--space-3);%0D%0A            border-bottom: 1px solid rgba(102, 126, 234, 0.1);%0D%0A        %7D%0D%0A%0D%0A\n         @keyfram\n@@ -89237,32 +89237,42 @@\n tem Information \n+& Pricing \n Section --%3E%0D%0A   \n@@ -89412,32 +89412,42 @@\n Item Information\n+ & Pricing\n %3C/h3%3E%0D%0A         \n@@ -89507,37 +89507,113 @@\n        %3C\n-div class=%22form-group\n+!-- Item Details --%3E%0D%0A                        %3Cdiv class=%22form-group%22 style=%22grid-column: 1 / -1;\n %22%3E%0D%0A    \n@@ -90195,32 +90195,61 @@\n ass=%22form-group%22\n+ style=%22grid-column: 1 / -1;%22\n %3E%0D%0A             \n@@ -100563,32 +100563,38 @@\n         %3C/div%3E%0D%0A\n+%0D%0A    \n                 \n@@ -100602,174 +100602,502 @@\n    %3C\n-/div%3E%0D%0A                %3C/div%3E%0D%0A%0D%0A                %3C!-- Pricing Information Section --%3E%0D%0A                %3Cdiv class=%22form-section%22 style=%22z-index: 1; position: relative\n+!-- Pricing Information Separator --%3E%0D%0A                        %3Cdiv style=%22grid-column: 1 / -1; margin: var(--space-4) 0; padding: var(--space-3) 0; %0D%0A                             border-top: 2px solid rgba(102, 126, 234, 0.1); position: relative;%22%3E%0D%0A                            %3Cdiv style=%22position: absolute; top: -1px; left: 50%25; transform: translateX(-50%25); %0D%0A                                 background: white; padding: 0 var(--space-3); color: #667eea; font-weight: 600; font-size: 0.9rem\n ;%22%3E%0D\n@@ -101109,36 +101109,44 @@\n                 \n-%3Ch3%3E\n+            \n %3Ci class=%22fas fa\n@@ -101162,21 +101162,197 @@\n ll-wave%22\n-%3E%3C/i%3E\n+ style=%22margin-right: 6px;%22%3E%3C/i%3E%0D%0A                                Pricing Details%0D%0A                            %3C/div%3E%0D%0A                        %3C/div%3E%0D%0A%0D%0A                        %3C!--\n  Pricing\n@@ -101367,17 +101367,18 @@\n tion\n-%3C/h3%3E%0D%0A%0D%0A\n+ --%3E%0D%0A    \n     \n@@ -101411,32 +101411,36 @@\n =%22form-group%22%3E%0D%0A\n+    \n                 \n@@ -101512,32 +101512,36 @@\n                 \n+    \n %3Cinput type=%22num\n@@ -101555,24 +101555,45 @@\n =%22costPrice%22\n+ class=%22form-control%22\n  required pl\n@@ -101683,32 +101683,36 @@\n                 \n+    \n %3C/div%3E%0D%0A%0D%0A      \n@@ -101697,32 +101697,36 @@\n       %3C/div%3E%0D%0A%0D%0A\n+    \n                 \n@@ -101771,32 +101771,36 @@\n                 \n+    \n %3Clabel for=%22sell\n@@ -101854,32 +101854,36 @@\n                 \n+    \n %3Cinput type=%22num\n@@ -101904,16 +101904,37 @@\n ngPrice%22\n+ class=%22form-control%22\n  require\n@@ -102031,32 +102031,36 @@\n                 \n+    \n %3C/div%3E%0D%0A%0D%0A      \n@@ -102065,32 +102065,36 @@\n                 \n+    \n %3Cdiv class=%22form\n@@ -102108,37 +102108,44 @@\n  style=%22\n-margin-bottom: 0\n+grid-column: 1 / -1\n ;%22%3E%0D%0A\n+    \n         \n@@ -102180,16 +102180,18 @@\n profit%22%3E\n+%F0%9F%92%B0 \n Profit (\n@@ -102218,32 +102218,36 @@\n                 \n+    \n %3Cinput type=%22num\n@@ -102262,16 +102262,37 @@\n %22profit%22\n+ class=%22form-control%22\n  readonl\n@@ -102327,63 +102327,1360 @@\n ed%22 \n-style=%22background-color: #f8f9fa; cursor: not-allowed;%22\n+%0D%0A                                   style=%22background: linear-gradient(135deg, #d1fae5, #a7f3d0); cursor: not-allowed; font-weight: 600; color: #065f46;%22%3E%0D%0A                            %3Cdiv id=%22profit-display%22 style=%22margin-top: 8px; padding: 12px; background: linear-gradient(135deg, #f0f9ff, #e0f2fe); %0D%0A                                 border-radius: 8px; border-left: 4px solid #0ea5e9; display: none;%22%3E%0D%0A                                %3Cdiv style=%22display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;%22%3E%0D%0A                                    %3Cdiv style=%22display: flex; align-items: center; gap: 8px;%22%3E%0D%0A                                        %3Ci class=%22fas fa-chart-line%22 style=%22color: #0ea5e9;%22%3E%3C/i%3E%0D%0A                                        %3Cspan style=%22font-weight: 600; color: #0c4a6e;%22%3EProfit Margin:%3C/span%3E%0D%0A                                        %3Cspan id=%22profit-margin%22 style=%22font-weight: 700; color: #065f46; font-size: 1.1em;%22%3E0%25%3C/span%3E%0D%0A                                    %3C/div%3E%0D%0A                                    %3Cdiv style=%22font-size: 12px; color: #64748b;%22%3E%0D%0A                                        Higher margin = Better profitability %F0%9F%93%88%0D%0A                                    %3C/div%3E%0D%0A                                %3C/div%3E%0D%0A                            %3C/div%3E%0D%0A                        %3C/div\n %3E%0D%0A \n@@ -226424,124 +226424,1026 @@\n     \n-profitField.value = profit.toFixed(2);%0D%0A%0D%0A            // Change color based on profit%0D%0A            if (profit %3E 0) %7B\n+const profitDisplay = document.getElementById('profit-display');%0D%0A            const profitMargin = document.getElementById('profit-margin');%0D%0A            %0D%0A            profitField.value = profit.toFixed(2);%0D%0A%0D%0A            // Calculate profit margin percentage%0D%0A            let marginPercentage = 0;%0D%0A            if (sellingPrice %3E 0) %7B%0D%0A                marginPercentage = ((profit / sellingPrice) * 100);%0D%0A            %7D%0D%0A%0D%0A            // Update profit margin display%0D%0A            if (profitMargin) %7B%0D%0A                profitMargin.textContent = marginPercentage.toFixed(1) + '%25';%0D%0A            %7D%0D%0A%0D%0A            // Show/hide profit display%0D%0A            if (costPrice %3E 0 && sellingPrice %3E 0) %7B%0D%0A                profitDisplay.style.display = 'block';%0D%0A            %7D else %7B%0D%0A                profitDisplay.style.display = 'none';%0D%0A            %7D%0D%0A%0D%0A            // Enhanced color coding based on profit%0D%0A            if (profit %3E 0) %7B%0D%0A                profitField.style.background = 'linear-gradient(135deg, #d1fae5, #a7f3d0)';\n %0D%0A  \n@@ -227476,38 +227476,38 @@\n style.color = '#\n-4ecdc4\n+065f46\n ';%0D%0A            \n@@ -227546,48 +227546,571 @@\n  = '\n-bold';%0D%0A            %7D else if (profit %3C \n+600';%0D%0A                profitField.style.borderColor = '#34d399';%0D%0A                %0D%0A                // Color code the margin based on percentage%0D%0A                if (marginPercentage %3E= 30) %7B%0D%0A                    profitMargin.style.color = '#065f46'; // Excellent%0D%0A                    profitMargin.style.background = '#d1fae5';%0D%0A                %7D else if (marginPercentage %3E= 20) %7B%0D%0A                    profitMargin.style.color = '#047857'; // Good%0D%0A                    profitMargin.style.background = '#ecfdf5';%0D%0A                %7D else if (marginPercentage %3E= 1\n 0) %7B\n@@ -228131,122 +228131,926 @@\n     \n+    \n profit\n-Field.style.color = '#ff6b6b';%0D%0A                profitField.style.fontWeight = 'bold';%0D%0A            %7D else %7B\n+Margin.style.color = '#d97706'; // Fair%0D%0A                    profitMargin.style.background = '#fef3c7';%0D%0A                %7D else %7B%0D%0A                    profitMargin.style.color = '#dc2626'; // Low%0D%0A                    profitMargin.style.background = '#fee2e2';%0D%0A                %7D%0D%0A                %0D%0A            %7D else if (profit %3C 0) %7B%0D%0A                profitField.style.background = 'linear-gradient(135deg, #fee2e2, #fecaca)';%0D%0A                profitField.style.color = '#dc2626';%0D%0A                profitField.style.fontWeight = '600';%0D%0A                profitField.style.borderColor = '#f87171';%0D%0A                %0D%0A                if (profitMargin) %7B%0D%0A                    profitMargin.style.color = '#dc2626';%0D%0A                    profitMargin.style.background = '#fee2e2';%0D%0A                %7D%0D%0A            %7D else %7B%0D%0A                profitField.style.background = 'linear-gradient(135deg, #f3f4f6, #e5e7eb)';\n %0D%0A  \n@@ -229088,26 +229088,29 @@\n .color = '#6\n-66\n+b7280\n ';%0D%0A        \n@@ -229163,33 +229163,509 @@\n ';%0D%0A            \n-%7D\n+    profitField.style.borderColor = '#d1d5db';%0D%0A                %0D%0A                if (profitMargin) %7B%0D%0A                    profitMargin.style.color = '#6b7280';%0D%0A                    profitMargin.style.background = '#f3f4f6';%0D%0A                %7D%0D%0A            %7D%0D%0A%0D%0A            // Add visual feedback animation%0D%0A            profitField.style.transform = 'scale(1.02)';%0D%0A            setTimeout(() =%3E %7B%0D%0A                profitField.style.transform = 'scale(1)';%0D%0A            %7D, 200);\n %0D%0A        %7D%0D%0A%0D%0A \n",
                            "isNew": false,
                            "isApplied": true
                        }
                    ]
                },
                {
                    "type": "shellCommand",
                    "command": "start \"\" \"C:/Users/Deeksha/IdeaProjects/TheiaSales/jewelry_sales_final.html\"",
                    "id": "2597e4ba-6fd0-4253-9033-1ca581cb4028",
                    "status": "ERROR",
                    "toolCallId": "toolu_01FbyVfKfwYiVvmoxZvGdmA7",
                    "commandsRequiringConfirmation": [
                        {
                            "name": "start",
                            "arguments": []
                        }
                    ],
                    "exitCode": 1,
                    "output": "\u001b[?9001h\u001b[?1004h\u001b[?25l\u001b[2J\u001b[m\u001b[H\r\n\r\n\r\n\r\n\r\n\u001b[H\u001b]0;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\u0007\u001b[?25h\u001b[38;5;9mStart-Process : Cannot validate argument on parameter 'FilePath'. The argument is null or empty. Provide an argument that is not null or empty, and then \r\ntry the command again.\r\nAt line:1 char:7\r\n+ start \"\" \"C:/Users/Deeksha/IdeaProjects/TheiaSales/jewelry_sales_fina ...\r\n+       ~~\r\n    + CategoryInfo          : InvalidData: (:) [Start-Process], ParameterBindingValidationException\u001b[m\r\n\u001b[38;5;9m    + FullyQualifiedErrorId : ParameterArgumentValidationError,Microsoft.PowerShell.Commands.StartProcessCommand\u001b[m\r\n\u001b[38;5;9m\u001b[1C\u001b[m\r\n",
                    "outputPath": ".zencoder/Zencoder-06fbd303-0056-45a4-b175-e873dd506666.log"
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "58a40027-8564-480c-ab8c-14200d0867ad"
            },
            "createdAt": 1752346101693,
            "isInternal": false
        },
        {
            "id": "9f2327b1-0dd8-409c-aa45-da64a9011a3b",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "Let me try a different approach to open the file:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_0112F2zvr3CMZJbNtugFYwJx",
                    "status": "IN_PROGRESS",
                    "isHidden": true
                },
                {
                    "type": "shellCommand",
                    "command": "Invoke-Item \"C:/Users/Deeksha/IdeaProjects/TheiaSales/jewelry_sales_final.html\"",
                    "id": "7ee4f621-3786-4472-8e70-2876d627f10a",
                    "status": "CONFIRMATION",
                    "toolCallId": "toolu_0112F2zvr3CMZJbNtugFYwJx",
                    "commandsRequiringConfirmation": [
                        {
                            "name": "invoke-item",
                            "arguments": []
                        }
                    ]
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "bdf9d6d4-c264-4df4-9c1d-c8b14cafcee7"
            },
            "createdAt": 1752346344451,
            "isInternal": false
        },
        {
            "id": "7f3cb79c-ba42-413c-a7ed-9aebee04e46e",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "remove scroll up quick add sales  dashboard button from the add sales page"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "jewelry_sales_final.html",
                    "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n\r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#6366F1\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n\r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n\r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n\r\n    <!-- Modern Typography -->\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@300;400;500;600;700;800&display=swap\" rel=\"stylesheet\">\r\n\r\n    <!-- Icons -->\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\r\n\r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    <style>\r\n        /* ======== MODERN DESIGN SYSTEM ======== */\r\n        :root {\r\n            /* Enhanced Color Palette */\r\n            --primary-600: #6366F1;\r\n            --primary-500: #8B5CF6;\r\n            --primary-400: #A78BFA;\r\n            --primary-300: #C4B5FD;\r\n            --primary-100: #EDE9FE;\r\n            --primary-50: #F5F3FF;\r\n\r\n            --secondary-600: #DB2777;\r\n            --secondary-500: #EC4899;\r\n            --secondary-400: #F472B6;\r\n            --secondary-300: #F9A8D4;\r\n            --secondary-100: #FCE7F3;\r\n\r\n            --accent-600: #059669;\r\n            --accent-500: #10B981;\r\n            --accent-400: #34D399;\r\n            --accent-300: #6EE7B7;\r\n            --accent-100: #D1FAE5;\r\n\r\n            --neutral-900: #111827;\r\n            --neutral-800: #1F2937;\r\n            --neutral-700: #374151;\r\n            --neutral-600: #4B5563;\r\n            --neutral-500: #6B7280;\r\n            --neutral-400: #9CA3AF;\r\n            --neutral-300: #D1D5DB;\r\n            --neutral-200: #E5E7EB;\r\n            --neutral-100: #F3F4F6;\r\n            --neutral-50: #F9FAFB;\r\n\r\n            --error-600: #DC2626;\r\n            --error-500: #EF4444;\r\n            --error-100: #FEE2E2;\r\n\r\n            --warning-600: #D97706;\r\n            --warning-500: #F59E0B;\r\n            --warning-100: #FEF3C7;\r\n\r\n            --success-600: #059669;\r\n            --success-500: #10B981;\r\n            --success-100: #D1FAE5;\r\n\r\n            /* Interactive Colors */\r\n            --interactive-hover: #4F46E5;\r\n            --interactive-active: #3730A3;\r\n            --interactive-focus: #6366F1;\r\n            --interactive-disabled: #9CA3AF;\r\n\r\n            /* Glass Effect */\r\n            --glass-bg: rgba(255, 255, 255, 0.95);\r\n            --glass-border: rgba(255, 255, 255, 0.2);\r\n            --glass-shadow: rgba(0, 0, 0, 0.1);\r\n\r\n            /* Animations */\r\n            --bounce-scale: 1.05;\r\n            --slide-distance: 10px;\r\n\r\n            /* Typography */\r\n            --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n            --font-secondary: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n\r\n            /* Spacing */\r\n            --space-1: 0.25rem;\r\n            --space-2: 0.5rem;\r\n            --space-3: 0.75rem;\r\n            --space-4: 1rem;\r\n            --space-5: 1.25rem;\r\n            --space-6: 1.5rem;\r\n            --space-8: 2rem;\r\n            --space-10: 2.5rem;\r\n            --space-12: 3rem;\r\n            --space-16: 4rem;\r\n            --space-20: 5rem;\r\n\r\n            /* Border Radius */\r\n            --radius-sm: 0.375rem;\r\n            --radius-md: 0.5rem;\r\n            --radius-lg: 0.75rem;\r\n            --radius-xl: 1rem;\r\n            --radius-2xl: 1.5rem;\r\n\r\n            /* Shadows */\r\n            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\r\n            --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\r\n\r\n            /* Transitions */\r\n            --transition-fast: 150ms ease-in-out;\r\n            --transition-normal: 300ms ease-in-out;\r\n            --transition-slow: 500ms ease-in-out;\r\n        }\r\n\r\n        /* ======== RESET & BASE STYLES ======== */\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        *:focus {\r\n            outline: 2px solid var(--primary-600);\r\n            outline-offset: 2px;\r\n        }\r\n\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        body {\r\n            font-family: var(--font-primary);\r\n            font-size: 16px;\r\n            line-height: 1.6;\r\n            color: var(--neutral-800);\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 35%, #f093fb 70%, #f5576c 100%);\r\n            background-size: 400% 400%;\r\n            animation: gradientShift 15s ease infinite;\r\n            min-height: 100vh;\r\n            padding: var(--space-4);\r\n            overflow-x: hidden;\r\n            position: relative;\r\n        }\r\n\r\n        @keyframes gradientShift {\r\n            0% { background-position: 0% 50%; }\r\n            50% { background-position: 100% 50%; }\r\n            100% { background-position: 0% 50%; }\r\n        }\r\n\r\n        body::before {\r\n            content: '';\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background:\r\n                radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),\r\n                radial-gradient(circle at 80% 80%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),\r\n                radial-gradient(circle at 40% 60%, rgba(255, 255, 255, 0.05) 0%, transparent 50%);\r\n            pointer-events: none;\r\n            z-index: 0;\r\n        }\r\n\r\n        body::after {\r\n            content: '';\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"dots\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\"><circle cx=\"10\" cy=\"10\" r=\"1\" fill=\"white\" opacity=\"0.05\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23dots)\"/></svg>');\r\n            pointer-events: none;\r\n            z-index: 0;\r\n        }\r\n\r\n        /* ======== LOADING SPINNER ======== */\r\n        .loading-spinner {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: 50%;\r\n            border-top-color: var(--primary-600);\r\n            animation: spin 1s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            to { transform: rotate(360deg); }\r\n        }\r\n\r\n        /* ======== MAIN CONTAINER ======== */\r\n        .container {\r\n            max-width: 1200px;\r\n            margin: 0 auto;\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-2xl);\r\n            box-shadow:\r\n                var(--shadow-2xl),\r\n                0 0 0 1px var(--glass-border),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.5);\r\n            overflow: hidden;\r\n            backdrop-filter: blur(20px);\r\n            animation: slideInUp 0.6s ease-out;\r\n            position: relative;\r\n            z-index: 1;\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .container::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 1px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);\r\n            z-index: 1;\r\n        }\r\n\r\n        @keyframes slideInUp {\r\n            from {\r\n                opacity: 0;\r\n                transform: translate3d(0, 30px, 0);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translate3d(0, 0, 0);\r\n            }\r\n        }\r\n\r\n        /* ======== HEADER ======== */\r\n        .header {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);\r\n            color: white;\r\n            text-align: center;\r\n            padding: var(--space-8) var(--space-6);\r\n            position: relative;\r\n            overflow: hidden;\r\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\r\n        }\r\n\r\n        .header::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grain\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"25\" cy=\"25\" r=\"1\" fill=\"white\" opacity=\"0.1\"/><circle cx=\"75\" cy=\"75\" r=\"1\" fill=\"white\" opacity=\"0.05\"/><circle cx=\"50\" cy=\"10\" r=\"0.5\" fill=\"white\" opacity=\"0.1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grain)\"/></svg>');\r\n            pointer-events: none;\r\n        }\r\n\r\n        .header h1 {\r\n            font-family: var(--font-secondary);\r\n            font-size: clamp(1.8rem, 4vw, 2.8rem);\r\n            font-weight: 800;\r\n            margin: 0;\r\n            position: relative;\r\n            z-index: 1;\r\n            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n            letter-spacing: 1px;\r\n            animation: headerPulse 3s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes headerPulse {\r\n            0%, 100% { \r\n                transform: scale(1);\r\n                text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n            }\r\n            50% { \r\n                transform: scale(1.02);\r\n                text-shadow: 0 6px 12px rgba(0, 0, 0, 0.4), 0 0 20px rgba(255, 255, 255, 0.2);\r\n            }\r\n        }\r\n\r\n        .header .subtitle {\r\n            font-size: 1rem;\r\n            opacity: 0.9;\r\n            margin-top: var(--space-2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        /* ======== NAVIGATION TABS ======== */\r\n        .tabs {\r\n            display: flex;\r\n            background: var(--glass-bg);\r\n            border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n            position: sticky;\r\n            top: 0;\r\n            z-index: 10;\r\n            backdrop-filter: blur(20px);\r\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: var(--space-4) var(--space-3);\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: transparent;\r\n            border: none;\r\n            font-family: var(--font-primary);\r\n            font-size: 0.95rem;\r\n            font-weight: 500;\r\n            color: var(--neutral-600);\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: var(--space-2);\r\n            min-height: 60px;\r\n            overflow: hidden;\r\n            border-radius: var(--radius-md) var(--radius-md) 0 0;\r\n            margin: 0 2px;\r\n        }\r\n\r\n        .tab::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\r\n            opacity: 0;\r\n            transition: opacity var(--transition-normal);\r\n        }\r\n\r\n        .tab:hover {\r\n            color: var(--primary-700);\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .tab:hover::before {\r\n            opacity: 0.05;\r\n        }\r\n\r\n        .tab.active {\r\n            color: white;\r\n            font-weight: 600;\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .tab.active::before {\r\n            opacity: 1;\r\n        }\r\n\r\n        .tab.active::after {\r\n            content: '';\r\n            position: absolute;\r\n            bottom: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 3px;\r\n            background: var(--accent-500);\r\n            z-index: 1;\r\n            box-shadow: 0 0 10px var(--accent-500);\r\n        }\r\n\r\n        .tab span, .tab i {\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .tab i {\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        /* ======== TAB CONTENT ======== */\r\n        .tab-content {\r\n            display: none;\r\n            padding: var(--space-8) var(--space-6);\r\n            min-height: 600px;\r\n            animation: fadeIn 0.4s ease-in-out;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        @keyframes fadeIn {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(10px);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        /* ======== FORM COMPONENTS ======== */\r\n        .form-section {\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n            box-shadow:\r\n                0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n                0 2px 4px -1px rgba(0, 0, 0, 0.06),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n            backdrop-filter: blur(10px);\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            overflow: visible;\r\n        }\r\n\r\n        .form-section::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 1px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.5), transparent);\r\n        }\r\n\r\n        .form-section:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow:\r\n                0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n                0 4px 6px -2px rgba(0, 0, 0, 0.05),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .form-section h3 {\r\n            font-family: var(--font-secondary);\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin-bottom: var(--space-4);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n        }\r\n\r\n        .form-section h3 i {\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .form-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n            gap: var(--space-4);\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: var(--space-5);\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: var(--space-2);\r\n            font-weight: 500;\r\n            color: var(--neutral-700);\r\n            font-size: 0.9rem;\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.5px;\r\n        }\r\n\r\n        .form-group label.required::after {\r\n            content: '*';\r\n            color: var(--error-500);\r\n            margin-left: var(--space-1);\r\n        }\r\n\r\n        .form-control {\r\n            width: 100%;\r\n            padding: var(--space-3) var(--space-4);\r\n            border: 2px solid rgba(255, 255, 255, 0.3);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            font-family: var(--font-primary);\r\n            transition: all var(--transition-normal);\r\n            background: linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.9));\r\n            color: var(--neutral-800);\r\n            backdrop-filter: blur(10px);\r\n            position: relative;\r\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n        }\r\n\r\n        .form-control:focus {\r\n            outline: none;\r\n            border-color: #667eea;\r\n            box-shadow:\r\n                0 0 0 4px rgba(102, 126, 234, 0.2),\r\n                0 8px 16px -4px rgba(0, 0, 0, 0.15),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.5);\r\n            transform: translateY(-3px) scale(1.01);\r\n            background: rgba(255, 255, 255, 0.98);\r\n            animation: inputFocus 0.3s ease;\r\n        }\r\n\r\n        @keyframes inputFocus {\r\n            0% {\r\n                transform: translateY(0) scale(1);\r\n                box-shadow: none;\r\n            }\r\n            50% {\r\n                transform: translateY(-1px) scale(1.005);\r\n            }\r\n            100% {\r\n                transform: translateY(-3px) scale(1.01);\r\n                box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.2), 0 8px 16px -4px rgba(0, 0, 0, 0.15);\r\n            }\r\n        }\r\n\r\n        .form-control:hover {\r\n            border-color: rgba(255, 255, 255, 0.5);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .form-control:invalid {\r\n            border-color: var(--error-500);\r\n        }\r\n\r\n        .form-control:disabled {\r\n            background: var(--neutral-100);\r\n            color: var(--neutral-500);\r\n            cursor: not-allowed;\r\n        }\r\n\r\n        .form-control::placeholder {\r\n            color: var(--neutral-400);\r\n        }\r\n\r\n        .form-error {\r\n            display: none;\r\n            color: var(--error-600);\r\n            font-size: 0.875rem;\r\n            margin-top: var(--space-1);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .form-error i {\r\n            font-size: 0.8rem;\r\n        }\r\n\r\n        .form-success {\r\n            display: none;\r\n            color: var(--success-600);\r\n            font-size: 0.875rem;\r\n            margin-top: var(--space-1);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .form-success i {\r\n            font-size: 0.8rem;\r\n        }\r\n\r\n        /* ======== PURCHASE FORM STYLES ======== */\r\n        #add-purchase-form input:focus,\r\n        #add-purchase-form textarea:focus {\r\n            border-color: var(--primary-600) !important;\r\n            box-shadow: 0 0 0 3px var(--primary-100) !important;\r\n            outline: none !important;\r\n        }\r\n\r\n        #add-purchase-form input:hover,\r\n        #add-purchase-form textarea:hover {\r\n            border-color: var(--neutral-400) !important;\r\n        }\r\n\r\n        #add-purchase-form .required-field {\r\n            position: relative;\r\n        }\r\n\r\n        #add-purchase-form .required-field::after {\r\n            content: '*';\r\n            color: var(--error-500);\r\n            position: absolute;\r\n            right: 12px;\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            font-weight: bold;\r\n        }\r\n\r\n        /* ======== BUTTON COMPONENTS ======== */\r\n        .btn {\r\n            display: inline-flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: var(--space-2);\r\n            padding: var(--space-3) var(--space-6);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            font-family: var(--font-primary);\r\n            font-size: 0.95rem;\r\n            font-weight: 500;\r\n            text-decoration: none;\r\n            cursor: pointer;\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            user-select: none;\r\n            min-height: 44px;\r\n            background: var(--glass-bg);\r\n            backdrop-filter: blur(10px);\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            box-shadow:\r\n                0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n                0 2px 4px -1px rgba(0, 0, 0, 0.06),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .btn::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: -100%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\r\n            transition: left var(--transition-normal);\r\n        }\r\n\r\n        .btn:hover::before {\r\n            left: 100%;\r\n        }\r\n\r\n        .btn:hover {\r\n            transform: translateY(-2px) scale(var(--bounce-scale));\r\n            box-shadow:\r\n                0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n                0 4px 6px -2px rgba(0, 0, 0, 0.05),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .btn:active {\r\n            transform: translateY(0) scale(0.98);\r\n        }\r\n\r\n        .btn:disabled {\r\n            opacity: 0.6;\r\n            cursor: not-allowed;\r\n            transform: none !important;\r\n        }\r\n\r\n        .btn.loading {\r\n            color: transparent;\r\n        }\r\n\r\n        .btn.loading::after {\r\n            content: '';\r\n            position: absolute;\r\n            width: 16px;\r\n            height: 16px;\r\n            top: 50%;\r\n            left: 50%;\r\n            margin-left: -8px;\r\n            margin-top: -8px;\r\n            border: 2px solid transparent;\r\n            border-top-color: currentColor;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        /* Button Variants */\r\n        .btn-primary {\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            color: white;\r\n            box-shadow:\r\n                var(--shadow-md),\r\n                0 0 25px rgba(102, 126, 234, 0.4);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .btn-primary::after {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: -100%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n            transition: left 0.5s ease;\r\n        }\r\n\r\n        .btn-primary:hover::after {\r\n            left: 100%;\r\n        }\r\n\r\n        .btn-primary::before {\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n        }\r\n\r\n        .btn-primary:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--interactive-hover), var(--primary-600));\r\n            transform: translateY(-3px) scale(var(--bounce-scale));\r\n            box-shadow:\r\n                var(--shadow-xl),\r\n                0 0 30px rgba(99, 102, 241, 0.5);\r\n        }\r\n\r\n        /* Special styling for Add Sale Record button - no hover color change */\r\n        .btn-primary.add-sale-btn:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-500));\r\n            transform: none;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-primary:active {\r\n            transform: translateY(0);\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: linear-gradient(135deg, var(--secondary-600), var(--secondary-500));\r\n            color: white;\r\n            box-shadow:\r\n                var(--shadow-md),\r\n                0 0 20px rgba(219, 39, 119, 0.3);\r\n            border: 1px solid rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .btn-secondary::before {\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n        }\r\n\r\n        .btn-secondary:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--secondary-700), var(--secondary-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-accent {\r\n            background: linear-gradient(135deg, var(--accent-600), var(--accent-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-accent:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--accent-700), var(--accent-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-outline {\r\n            background: transparent;\r\n            border: 2px solid var(--primary-600);\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .btn-outline:hover:not(:disabled) {\r\n            background: var(--primary-600);\r\n            color: white;\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .btn-ghost {\r\n            background: transparent;\r\n            color: var(--neutral-600);\r\n            box-shadow: none;\r\n        }\r\n\r\n        .btn-ghost:hover:not(:disabled) {\r\n            background: var(--neutral-100);\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .btn-danger {\r\n            background: linear-gradient(135deg, var(--error-600), var(--error-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-danger:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--error-700), var(--error-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        /* Button Sizes */\r\n        .btn-sm {\r\n            padding: var(--space-2) var(--space-4);\r\n            font-size: 0.875rem;\r\n            min-height: 36px;\r\n        }\r\n\r\n        .btn-lg {\r\n            padding: var(--space-4) var(--space-8);\r\n            font-size: 1.1rem;\r\n            min-height: 52px;\r\n        }\r\n\r\n        .btn-full {\r\n            width: 100%;\r\n        }\r\n\r\n        /* Button Groups */\r\n        .btn-group {\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            margin-top: var(--space-4);\r\n        }\r\n\r\n        .btn-group .btn {\r\n            flex: 1;\r\n        }\r\n\r\n        /* ======== CARD COMPONENTS ======== */\r\n        .card {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-md);\r\n            border: 1px solid var(--neutral-200);\r\n            overflow: hidden;\r\n            transition: var(--transition-normal);\r\n        }\r\n\r\n        .card:hover {\r\n            box-shadow: var(--shadow-lg);\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .card-header {\r\n            padding: var(--space-4) var(--space-5);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n            background: var(--neutral-50);\r\n        }\r\n\r\n        .card-header h3 {\r\n            margin: 0;\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .card-body {\r\n            padding: var(--space-5);\r\n        }\r\n\r\n        .card-footer {\r\n            padding: var(--space-4) var(--space-5);\r\n            background: var(--neutral-50);\r\n            border-top: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        /* Sales Item Cards */\r\n        .sales-item {\r\n            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);\r\n            border: 1px solid var(--neutral-200);\r\n            border-left: 6px solid #667eea;\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-4);\r\n            position: relative;\r\n            transition: all var(--transition-normal);\r\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\r\n            overflow: hidden;\r\n        }\r\n\r\n        .sales-item::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            width: 100px;\r\n            height: 100px;\r\n            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(240, 147, 251, 0.1));\r\n            border-radius: 50%;\r\n            transform: translate(50%, -50%);\r\n            transition: all var(--transition-normal);\r\n        }\r\n\r\n        .sales-item:hover {\r\n            border-left-color: #f093fb;\r\n            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);\r\n            transform: translateX(8px) translateY(-2px);\r\n        }\r\n\r\n        .sales-item:hover::before {\r\n            width: 120px;\r\n            height: 120px;\r\n            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(240, 147, 251, 0.2));\r\n        }\r\n\r\n        .sales-item-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: start;\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: var(--neutral-800);\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            margin: 0;\r\n        }\r\n\r\n        .sales-item-info {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n            gap: var(--space-3);\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .sales-item-info-item {\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        .sales-item-info-label {\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n            color: var(--neutral-500);\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.5px;\r\n            margin-bottom: var(--space-1);\r\n        }\r\n\r\n        .sales-item-info-value {\r\n            font-size: 0.95rem;\r\n            color: var(--neutral-700);\r\n            font-weight: 500;\r\n        }\r\n\r\n        .sales-item-amount {\r\n            font-size: 1.2rem;\r\n            font-weight: 700;\r\n            color: var(--accent-600);\r\n        }\r\n\r\n        /* Dashboard Stats */\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n            gap: var(--space-5);\r\n            margin-bottom: var(--space-8);\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);\r\n            color: white;\r\n            padding: var(--space-6);\r\n            border-radius: var(--radius-xl);\r\n            text-align: center;\r\n            position: relative;\r\n            overflow: hidden;\r\n            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);\r\n            transition: all var(--transition-normal);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .stat-card::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: -50%;\r\n            right: -50%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);\r\n        }\r\n\r\n        .stat-card:hover {\r\n            transform: translateY(-8px) scale(1.02);\r\n            box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);\r\n            animation: statCardGlow 2s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes statCardGlow {\r\n            0%, 100% {\r\n                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);\r\n            }\r\n            50% {\r\n                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.6), 0 0 30px rgba(240, 147, 251, 0.3);\r\n            }\r\n        }\r\n\r\n        .stat-card-icon {\r\n            font-size: 2.5rem;\r\n            margin-bottom: var(--space-3);\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 2.5rem;\r\n            font-weight: 700;\r\n            margin-bottom: var(--space-2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 0.95rem;\r\n            opacity: 0.9;\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        /* Chart Container */\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-md);\r\n            border: 1px solid var(--neutral-200);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            height: 450px;\r\n            position: relative;\r\n        }\r\n\r\n        .chart-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: var(--space-4);\r\n            padding-bottom: var(--space-3);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        .chart-title {\r\n            font-size: 1.2rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        /* Customer Item Cards */\r\n        .customer-item {\r\n            background: white;\r\n            border: 1px solid var(--neutral-200);\r\n            border-left: 4px solid var(--secondary-600);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-4);\r\n            position: relative;\r\n            transition: var(--transition-normal);\r\n            box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        .customer-item:hover {\r\n            border-left-color: var(--accent-500);\r\n            box-shadow: var(--shadow-md);\r\n            transform: translateX(4px);\r\n        }\r\n\r\n        /* Empty State */\r\n        .no-data {\r\n            text-align: center;\r\n            color: var(--neutral-500);\r\n            font-style: italic;\r\n            padding: var(--space-16);\r\n            font-size: 1.1rem;\r\n            background: var(--neutral-50);\r\n            border-radius: var(--radius-lg);\r\n            border: 2px dashed var(--neutral-300);\r\n        }\r\n\r\n        .no-data i {\r\n            font-size: 3rem;\r\n            color: var(--neutral-400);\r\n            margin-bottom: var(--space-4);\r\n            display: block;\r\n        }\r\n\r\n        /* Action Buttons */\r\n        .action-buttons {\r\n            position: absolute;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            z-index: 2;\r\n        }\r\n\r\n        .edit-btn, .delete-btn {\r\n            padding: var(--space-2) var(--space-3);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            cursor: pointer;\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n            transition: var(--transition-fast);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .edit-btn {\r\n            background: var(--primary-600);\r\n            color: white;\r\n        }\r\n\r\n        .edit-btn:hover {\r\n            background: var(--primary-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .delete-btn {\r\n            background: var(--error-600);\r\n            color: white;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: var(--error-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        /* ======== SCROLLABLE CONTAINERS ======== */\r\n        .scrollable-container {\r\n            max-height: 650px;\r\n            overflow-y: auto;\r\n            padding-right: var(--space-2);\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-track {\r\n            background: var(--neutral-200);\r\n            border-radius: var(--radius-lg);\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-thumb {\r\n            background: linear-gradient(135deg, var(--primary-500), var(--primary-600));\r\n            border-radius: var(--radius-lg);\r\n            border: 2px solid var(--neutral-200);\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-thumb:hover {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-700));\r\n        }\r\n\r\n        /* ======== SEARCH AND FILTER ======== */\r\n        .filter-section {\r\n            background: var(--neutral-50);\r\n            border: 1px solid var(--neutral-200);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-6);\r\n        }\r\n\r\n        .filter-header {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n            margin-bottom: var(--space-4);\r\n        }\r\n\r\n        .filter-header h3 {\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin: 0;\r\n        }\r\n\r\n        .search-input {\r\n            position: relative;\r\n        }\r\n\r\n        .search-input input {\r\n            width: 100%;\r\n            padding: var(--space-3) var(--space-4) var(--space-3) var(--space-12);\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            transition: var(--transition-normal);\r\n            background: white;\r\n        }\r\n\r\n        .search-input input:focus {\r\n            outline: none;\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .search-input i {\r\n            position: absolute;\r\n            left: var(--space-4);\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            color: var(--neutral-400);\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        /* ======== NOTIFICATIONS & TOASTS ======== */\r\n        .toast {\r\n            position: fixed;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-lg);\r\n            box-shadow:\r\n                var(--shadow-xl),\r\n                0 0 30px rgba(0, 0, 0, 0.15);\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            padding: var(--space-4);\r\n            max-width: 400px;\r\n            z-index: 1000;\r\n            transform: translateX(calc(100% + var(--space-4)));\r\n            opacity: 0;\r\n            transition: all var(--transition-normal);\r\n            backdrop-filter: blur(20px);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .toast::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 2px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);\r\n        }\r\n\r\n        .toast.show {\r\n            transform: translateX(0);\r\n            opacity: 1;\r\n            animation: toastSlideIn 0.3s ease-out;\r\n        }\r\n\r\n        @keyframes toastSlideIn {\r\n            0% {\r\n                transform: translateX(calc(100% + var(--space-4))) scale(0.9);\r\n                opacity: 0;\r\n            }\r\n            50% {\r\n                transform: translateX(-10px) scale(1.02);\r\n            }\r\n            100% {\r\n                transform: translateX(0) scale(1);\r\n                opacity: 1;\r\n            }\r\n        }\r\n\r\n        .toast-success {\r\n            border-left: 4px solid var(--success-500);\r\n            background: linear-gradient(135deg,\r\n                rgba(16, 185, 129, 0.1) 0%,\r\n                rgba(255, 255, 255, 0.95) 100%);\r\n            border: 1px solid rgba(16, 185, 129, 0.2);\r\n        }\r\n\r\n        .toast-success::after {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 4px;\r\n            height: 100%;\r\n            background: linear-gradient(180deg, var(--success-400), var(--success-600));\r\n            box-shadow: 0 0 10px var(--success-500);\r\n        }\r\n\r\n        .toast-error {\r\n            border-left: 4px solid var(--error-500);\r\n        }\r\n\r\n        .toast-warning {\r\n            border-left: 4px solid var(--warning-500);\r\n        }\r\n\r\n        .toast-info {\r\n            border-left: 4px solid var(--primary-500);\r\n        }\r\n\r\n        /* ======== RESPONSIVE DESIGN ======== */\r\n        /* Tablet Styles */\r\n        @media (max-width: 768px) {\r\n            body {\r\n                padding: var(--space-2);\r\n                font-size: 15px;\r\n            }\r\n\r\n            .container {\r\n                margin: 0;\r\n                border-radius: var(--radius-lg);\r\n                box-shadow: var(--shadow-lg);\r\n            }\r\n\r\n            .header {\r\n                padding: var(--space-5) var(--space-4);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.8rem;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                position: relative;\r\n            }\r\n\r\n            .tab {\r\n                flex: 1;\r\n                min-width: 120px;\r\n                font-size: 0.85rem;\r\n                padding: var(--space-3) var(--space-2);\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-5) var(--space-4);\r\n                min-height: 500px;\r\n            }\r\n\r\n            .form-grid {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-5);\r\n                margin-bottom: var(--space-5);\r\n            }\r\n\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .btn-group {\r\n                flex-direction: column;\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .sales-item-info {\r\n                grid-template-columns: 1fr;\r\n            }\r\n\r\n            /* Make buttons more touch-friendly */\r\n            .btn {\r\n                min-height: 48px;\r\n                padding: var(--space-3) var(--space-4);\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Customer search results */\r\n            #customer-search-results {\r\n                max-height: 250px;\r\n            }\r\n\r\n            /* Toast notifications positioning */\r\n            .toast {\r\n                top: var(--space-2);\r\n                right: var(--space-2);\r\n                left: var(--space-2);\r\n                max-width: none;\r\n            }\r\n        }\r\n\r\n        /* Mobile Styles */\r\n        @media (max-width: 480px) {\r\n            body {\r\n                padding: var(--space-1);\r\n                font-size: 14px;\r\n            }\r\n\r\n            .container {\r\n                margin: 0;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .header {\r\n                padding: var(--space-4) var(--space-3);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.5rem;\r\n                line-height: 1.2;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.85rem;\r\n                margin-top: var(--space-1);\r\n            }\r\n\r\n            .tabs {\r\n                overflow-x: auto;\r\n                flex-wrap: nowrap;\r\n                scrollbar-width: none;\r\n                -ms-overflow-style: none;\r\n                padding-bottom: 2px;\r\n                background: var(--neutral-50);\r\n                border-bottom: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tabs::-webkit-scrollbar {\r\n                display: none;\r\n            }\r\n\r\n            .tab {\r\n                min-width: 100px;\r\n                font-size: 0.8rem;\r\n                padding: var(--space-3) var(--space-2);\r\n                white-space: nowrap;\r\n                flex-shrink: 0;\r\n                gap: var(--space-1);\r\n                min-height: 65px;\r\n                flex-direction: column;\r\n                line-height: 1.1;\r\n                text-align: center;\r\n            }\r\n\r\n            .tab span {\r\n                display: block;\r\n                margin-top: var(--space-1);\r\n                font-size: 0.75rem;\r\n                line-height: 1.1;\r\n                text-align: center;\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-4) var(--space-3);\r\n                min-height: 400px;\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .form-section h3 {\r\n                font-size: 1.1rem;\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .form-group {\r\n                margin-bottom: var(--space-4);\r\n            }\r\n\r\n            .form-control {\r\n                padding: var(--space-3);\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n                border-radius: var(--radius-md);\r\n                min-height: 44px; /* iOS touch target minimum */\r\n            }\r\n\r\n            .form-control:focus {\r\n                border-width: 2px;\r\n                transform: none; /* Removes transform to prevent layout issues */\r\n            }\r\n\r\n            /* Buttons optimized for mobile */\r\n            .btn {\r\n                min-height: 50px;\r\n                padding: var(--space-4);\r\n                font-size: 1rem;\r\n                font-weight: 600;\r\n                border-radius: var(--radius-md);\r\n                width: 100%;\r\n                margin-bottom: var(--space-2);\r\n            }\r\n\r\n            .btn-group {\r\n                flex-direction: column;\r\n                width: 100%;\r\n            }\r\n\r\n            .btn-group .btn {\r\n                margin-bottom: var(--space-2);\r\n            }\r\n\r\n            /* Dashboard stats */\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: var(--space-4);\r\n                text-align: center;\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 1.8rem;\r\n            }\r\n\r\n            .stat-card p {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            /* Search input mobile optimization */\r\n            .search-input input {\r\n                padding: var(--space-3) var(--space-4) var(--space-3) var(--space-10);\r\n                font-size: 16px;\r\n                min-height: 44px;\r\n            }\r\n\r\n            .search-input i {\r\n                left: var(--space-3);\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Customer search results */\r\n            #customer-search-results {\r\n                max-height: 200px;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .customer-search-result {\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .customer-name {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            .customer-details {\r\n                font-size: 0.85rem;\r\n            }\r\n\r\n            /* Filter section */\r\n            .filter-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .filter-header h3 {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Sales records table/list mobile view */\r\n            .sales-item {\r\n                flex-direction: column;\r\n                padding: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .sales-item-info {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-2);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .sales-item-actions {\r\n                justify-content: stretch;\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .edit-btn, .delete-btn {\r\n                flex: 1;\r\n                min-height: 40px;\r\n                font-size: 0.85rem;\r\n            }\r\n\r\n            /* Toast notifications for mobile */\r\n            .toast {\r\n                top: var(--space-2);\r\n                right: var(--space-2);\r\n                left: var(--space-2);\r\n                max-width: none;\r\n                padding: var(--space-3);\r\n                font-size: 0.9rem;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            /* Charts container */\r\n            .chart-container {\r\n                margin: var(--space-3) 0;\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            /* Make scrollable containers touch-friendly */\r\n            .scrollable-container {\r\n                max-height: 400px;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n\r\n            .scrollable-container::-webkit-scrollbar {\r\n                width: 94px;\r\n            }\r\n        }\r\n\r\n        /* Extra small devices */\r\n        @media (max-width: 360px) {\r\n            .header h1 {\r\n                font-size: 1.35rem;\r\n            }\r\n\r\n            .tab {\r\n                min-width: 90px;\r\n                font-size: 0.7rem;\r\n                line-height: 1;\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n                padding: var(--space-2) var(--space-2);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.7rem;\r\n                line-height: 1;\r\n            }\r\n\r\n        /* Very small screens - Show abbreviated text */\r\n        @media (max-width: 320px) {\r\n            .tab {\r\n                min-width: 75px;\r\n                padding: var(--space-2) var(--space-1);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.65rem;\r\n                line-height: 0.9;\r\n            }\r\n\r\n            /* Abbreviate long tab names for very small screens */\r\n            .tab:nth-child(1) span::after { content: \"Entry\"; }\r\n            .tab:nth-child(1) span { font-size: 0; }\r\n            .tab:nth-child(1) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(2) span::after { content: \"Recent\"; }\r\n            .tab:nth-child(2) span { font-size: 0; }\r\n            .tab:nth-child(2) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(3) span::after { content: \"Stats\"; }\r\n            .tab:nth-child(3) span { font-size: 0; }\r\n            .tab:nth-child(3) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(4) span::after { content: \"Contacts\"; }\r\n            .tab:nth-child(4) span { font-size: 0; }\r\n            .tab:nth-child(4) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(5) span::after { content: \"Charts\"; }\r\n            .tab:nth-child(5) span { font-size: 0; }\r\n            .tab:nth-child(5) span::after { font-size: 0.65rem; }\r\n        }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            .btn {\r\n                min-height: 48px;\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .dashboard-stats {\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 1.5rem;\r\n            }\r\n        }\r\n\r\n        /* Very small screens - Show abbreviated text */\r\n        @media (max-width: 320px) {\r\n            .tab {\r\n                min-width: 75px;\r\n                padding: var(--space-2) var(--space-1);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.65rem;\r\n                line-height: 0.9;\r\n            }\r\n\r\n            /* Abbreviate long tab names for very small screens */\r\n            .tab:nth-child(1) span::after { content: \"Entry\"; }\r\n            .tab:nth-child(1) span { font-size: 0; }\r\n            .tab:nth-child(1) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(2) span::after { content: \"Recent\"; }\r\n            .tab:nth-child(2) span { font-size: 0; }\r\n            .tab:nth-child(2) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(3) span::after { content: \"Stats\"; }\r\n            .tab:nth-child(3) span { font-size: 0; }\r\n            .tab:nth-child(3) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(4) span::after { content: \"Contacts\"; }\r\n            .tab:nth-child(4) span { font-size: 0; }\r\n            .tab:nth-child(4) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(5) span::after { content: \"Charts\"; }\r\n            .tab:nth-child(5) span { font-size: 0; }\r\n            .tab:nth-child(5) span::after { font-size: 0.65rem; }\r\n        }\r\n\r\n        /* Enhanced mobile navigation */\r\n        @media (max-width: 480px) {\r\n            /* Add horizontal scroll indicator */\r\n            .tabs::after {\r\n                content: '';\r\n                position: absolute;\r\n                bottom: 0;\r\n                right: 0;\r\n                width: 20px;\r\n                height: 100%;\r\n                background: linear-gradient(to right, transparent, var(--neutral-50));\r\n                pointer-events: none;\r\n                z-index: 1;\r\n            }\r\n\r\n            /* Better visual feedback for active tab */\r\n            .tab.active {\r\n                box-shadow: 0 -3px 0 var(--accent-500) inset;\r\n                background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-500) 100%);\r\n            }\r\n\r\n            /* Improve readability */\r\n            .tab {\r\n                border-right: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tab:last-child {\r\n                border-right: none;\r\n            }\r\n        }\r\n\r\n        /* Landscape orientation on mobile */\r\n        @media (max-width: 768px) and (orientation: landscape) {\r\n            .header {\r\n                padding: var(--space-3) var(--space-4);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.4rem;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.8rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n        }\r\n\r\n        /* ======== MOBILE-SPECIFIC ENHANCEMENTS ======== */\r\n        /* Touch-friendly interactions */\r\n        @media (hover: none) and (pointer: coarse) {\r\n            .btn {\r\n                min-height: 48px;\r\n                padding: var(--space-4);\r\n                font-size: 1rem;\r\n                font-weight: 600;\r\n            }\r\n\r\n            .form-control {\r\n                min-height: 48px;\r\n                padding: var(--space-4);\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n\r\n            .tab {\r\n                min-height: 48px;\r\n                padding: var(--space-3) var(--space-2);\r\n            }\r\n\r\n            /* Remove hover effects on touch devices */\r\n            .btn:hover,\r\n            .form-control:hover,\r\n            .tab:hover {\r\n                transform: none;\r\n            }\r\n\r\n            /* Enhanced tap targets */\r\n            .customer-search-result {\r\n                min-height: 60px;\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .edit-btn, .delete-btn {\r\n                min-height: 44px;\r\n                min-width: 80px;\r\n            }\r\n        }\r\n\r\n        /* Enhanced mobile navigation */\r\n        @media (max-width: 480px) {\r\n            /* Add horizontal scroll indicator */\r\n            .tabs::after {\r\n                content: '';\r\n                position: absolute;\r\n                bottom: 0;\r\n                right: 0;\r\n                width: 20px;\r\n                height: 100%;\r\n                background: linear-gradient(to right, transparent, var(--neutral-50));\r\n                pointer-events: none;\r\n                z-index: 1;\r\n            }\r\n\r\n            /* Better visual feedback for active tab */\r\n            .tab.active {\r\n                box-shadow: 0 -3px 0 var(--accent-500) inset;\r\n                background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-500) 100%);\r\n            }\r\n\r\n            /* Improve readability */\r\n            .tab {\r\n                border-right: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tab:last-child {\r\n                border-right: none;\r\n            }\r\n        }\r\n\r\n        /* iOS Safari specific fixes */\r\n        @supports (-webkit-appearance: none) {\r\n            .form-control {\r\n                -webkit-appearance: none;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            select.form-control {\r\n                background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e\");\r\n                background-repeat: no-repeat;\r\n                background-position: right var(--space-3) center;\r\n                background-size: 20px;\r\n                padding-right: var(--space-12);\r\n            }\r\n        }\r\n\r\n        /* Android Chrome specific optimizations */\r\n        @media screen and (-webkit-min-device-pixel-ratio: 1) {\r\n            .form-control:focus {\r\n                zoom: 1; /* Prevent zoom on Android */\r\n            }\r\n        }\r\n\r\n        /* High DPI displays */\r\n        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\r\n            .btn, .form-control, .tab {\r\n                border-width: 0.5px;\r\n            }\r\n        }\r\n\r\n        /* Print styles */\r\n        @media print {\r\n            body {\r\n                background: white;\r\n                color: black;\r\n                font-size: 12pt;\r\n                line-height: 1.4;\r\n            }\r\n\r\n            .header {\r\n                background: none;\r\n                color: black;\r\n                border-bottom: 2px solid black;\r\n            }\r\n\r\n            .tabs, .btn {\r\n                display: none;\r\n            }\r\n\r\n            .tab-content {\r\n                display: block !important;\r\n                padding: 0;\r\n            }\r\n\r\n            .form-section {\r\n                border: 1px solid black;\r\n                margin-bottom: 20pt;\r\n                page-break-inside: avoid;\r\n            }\r\n\r\n            .container {\r\n                box-shadow: none;\r\n                border-radius: 0;\r\n            }\r\n        }\r\n\r\n        /* ======== UTILITY CLASSES ======== */\r\n        .sr-only {\r\n            position: absolute;\r\n            width: 1px;\r\n            height: 1px;\r\n            padding: 0;\r\n            margin: -1px;\r\n            overflow: hidden;\r\n            clip: rect(0, 0, 0, 0);\r\n            white-space: nowrap;\r\n            border: 0;\r\n        }\r\n\r\n        .text-center { text-align: center; }\r\n        .text-right { text-align: right; }\r\n        .text-left { text-align: left; }\r\n\r\n        .fw-bold { font-weight: 700; }\r\n        .fw-semibold { font-weight: 600; }\r\n        .fw-medium { font-weight: 500; }\r\n        .fw-normal { font-weight: 400; }\r\n\r\n        .text-primary { color: var(--primary-600); }\r\n        .text-secondary { color: var(--secondary-600); }\r\n        .text-success { color: var(--success-600); }\r\n        .text-error { color: var(--error-600); }\r\n        .text-warning { color: var(--warning-600); }\r\n        .text-muted { color: var(--neutral-500); }\r\n\r\n        .bg-primary { background-color: var(--primary-600); }\r\n        .bg-secondary { background-color: var(--secondary-600); }\r\n        .bg-success { background-color: var(--success-600); }\r\n        .bg-error { background-color: var(--error-600); }\r\n        .bg-warning { background-color: var(--warning-600); }\r\n\r\n        .mb-2 { margin-bottom: var(--space-2); }\r\n        .mb-3 { margin-bottom: var(--space-3); }\r\n        .mb-4 { margin-bottom: var(--space-4); }\r\n        .mb-6 { margin-bottom: var(--space-6); }\r\n\r\n        .mt-2 { margin-top: var(--space-2); }\r\n        .mt-3 { margin-top: var(--space-3); }\r\n        .mt-4 { margin-top: var(--space-4); }\r\n        .mt-6 { margin-top: var(--space-6); }\r\n\r\n        .edit-form {\r\n            background: #fff;\r\n            border: 2px solid #4ecdc4;\r\n            border-radius: 8px;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            position: relative;\r\n        }\r\n\r\n        .edit-form h4 {\r\n            color: #4ecdc4;\r\n            margin-bottom: 15px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .edit-form-row {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            gap: 10px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group label {\r\n            display: block;\r\n            margin-bottom: 3px;\r\n            font-weight: 600;\r\n            color: #333;\r\n            font-size: 12px;\r\n        }\r\n\r\n        .edit-form-group input,\r\n        .edit-form-group select,\r\n        .edit-form-group textarea {\r\n            width: 100%;\r\n            padding: 8px;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 4px;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .edit-form-buttons {\r\n            display: flex;\r\n            gap: 10px;\r\n            margin-top: 15px;\r\n        }\r\n\r\n        .edit-form-buttons button {\r\n            flex: 1;\r\n            padding: 10px;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .save-edit-btn {\r\n            background: #28a745;\r\n            color: white;\r\n        }\r\n\r\n        .save-edit-btn:hover {\r\n            background: #218838;\r\n        }\r\n\r\n        .cancel-edit-btn {\r\n            background: #6c757d;\r\n            color: white;\r\n        }\r\n\r\n        .cancel-edit-btn:hover {\r\n            background: #5a6268;\r\n        }\r\n\r\n        /* Customer search styles */\r\n        .customer-search-result {\r\n            padding: 12px;\r\n            cursor: pointer;\r\n            border-bottom: 1px solid #eee;\r\n            border-left: 3px solid transparent;\r\n            transition: all 0.2s ease;\r\n        }\r\n\r\n        .customer-search-result:hover {\r\n            background-color: #f8f9fa;\r\n            border-left-color: #4ecdc4;\r\n            transform: translateX(2px);\r\n        }\r\n\r\n        .customer-search-result:last-child {\r\n            border-bottom: none;\r\n        }\r\n\r\n        .customer-name {\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin-bottom: 4px;\r\n            font-size: 15px;\r\n        }\r\n\r\n        .customer-details {\r\n            font-size: 12px;\r\n            color: #666;\r\n            margin-bottom: 2px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n        }\r\n\r\n        .customer-stats {\r\n            font-size: 11px;\r\n            color: #4ecdc4;\r\n            margin-top: 8px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .customer-source-badge {\r\n            font-size: 10px;\r\n            color: #999;\r\n            padding: 2px 6px;\r\n            background: #f0f0f0;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .customer-last-purchase {\r\n            font-size: 10px;\r\n            color: #999;\r\n            font-style: italic;\r\n        }\r\n\r\n        /* Enhanced search results container */\r\n        #customer-search-results {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            border-radius: 8px;\r\n            border: 1px solid #ddd;\r\n            background: white;\r\n            max-height: 300px;\r\n            overflow-y: auto;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb:hover {\r\n            background: #45b7b8;\r\n        }\r\n\r\n        /* Section headers */\r\n        .section-header {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-bottom: 15px;\r\n            padding-bottom: 8px;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .section-icon {\r\n            margin-right: 8px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        /* Additional mobile-specific styles for components */\r\n        @media (max-width: 600px) {\r\n            /* Import section responsive */\r\n            .import-section {\r\n                flex-direction: column !important;\r\n                gap: var(--space-3) !important;\r\n            }\r\n\r\n            .import-section button {\r\n                width: 100% !important;\r\n                margin-bottom: var(--space-2);\r\n                min-height: 48px;\r\n            }\r\n\r\n            /* Customer database responsive design */\r\n            .customer-info-grid {\r\n                grid-template-columns: 1fr !important;\r\n                gap: var(--space-2) !important;\r\n            }\r\n\r\n            .customer-purchase-stats {\r\n                grid-template-columns: repeat(2, 1fr) !important;\r\n                gap: var(--space-2) !important;\r\n            }\r\n\r\n            .customer-card {\r\n                padding: var(--space-4) !important;\r\n                margin-bottom: var(--space-3) !important;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .enhanced-customers-container {\r\n                max-height: 400px !important;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n\r\n            /* Sales items mobile layout */\r\n            .customer-item,\r\n            .sale-item {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-3);\r\n                border-radius: var(--radius-md);\r\n                border: 1px solid var(--neutral-200);\r\n                background: white;\r\n            }\r\n        }\r\n\r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n\r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n\r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n\r\n        /* ======== MOBILE-FRIENDLY MODAL/ALERT SYSTEM ======== */\r\n        .mobile-modal {\r\n            display: none;\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: rgba(0, 0, 0, 0.5);\r\n            z-index: 2000;\r\n            align-items: center;\r\n            justify-content: center;\r\n            padding: var(--space-4);\r\n        }\r\n\r\n        .mobile-modal.show {\r\n            display: flex;\r\n        }\r\n\r\n        .mobile-modal-content {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-6);\r\n            max-width: 400px;\r\n            width: 100%;\r\n            max-height: 80vh;\r\n            overflow-y: auto;\r\n            box-shadow: var(--shadow-2xl);\r\n            text-align: center;\r\n            animation: modalSlideIn 0.3s ease-out;\r\n        }\r\n\r\n        @keyframes modalSlideIn {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(-20px) scale(0.95);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0) scale(1);\r\n            }\r\n        }\r\n\r\n        .mobile-modal-header {\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            margin-bottom: var(--space-4);\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .mobile-modal-body {\r\n            margin-bottom: var(--space-6);\r\n            color: var(--neutral-700);\r\n            line-height: 1.5;\r\n            text-align: left;\r\n        }\r\n\r\n        .mobile-modal-buttons {\r\n            display: flex;\r\n            gap: var(--space-3);\r\n            justify-content: center;\r\n        }\r\n\r\n        .mobile-modal-buttons .btn {\r\n            flex: 1;\r\n            max-width: 120px;\r\n        }\r\n\r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n\r\n        /* Multi-Select Category Styles */\r\n        .multi-select-display:hover {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display:focus-within {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display.active {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display.active #category-arrow {\r\n            transform: rotate(180deg);\r\n        }\r\n\r\n        .category-option:hover {\r\n            background-color: var(--primary-50) !important;\r\n        }\r\n\r\n        .category-option input[type=\"checkbox\"] {\r\n            accent-color: var(--primary-600);\r\n        }\r\n\r\n        .category-tag {\r\n            background: var(--primary-600);\r\n            color: white;\r\n            padding: 4px 8px;\r\n            border-radius: 12px;\r\n            font-size: 12px;\r\n            font-weight: 500;\r\n            display: inline-flex;\r\n            align-items: center;\r\n            gap: 4px;\r\n            max-width: 120px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        .category-tag .remove-tag {\r\n            background: rgba(255, 255, 255, 0.3);\r\n            border: none;\r\n            color: white;\r\n            width: 16px;\r\n            height: 16px;\r\n            border-radius: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            cursor: pointer;\r\n            font-size: 10px;\r\n            margin-left: 4px;\r\n            transition: background-color 0.2s;\r\n        }\r\n\r\n        .category-tag .remove-tag:hover {\r\n            background: rgba(255, 255, 255, 0.5);\r\n        }\r\n\r\n        /* Enhanced Multi-Select Dropdown Styles */\r\n        .multi-select-container {\r\n            position: relative;\r\n            z-index: 100;\r\n        }\r\n\r\n        /* Create stacking context for dropdown */\r\n        .form-section:has(.multi-select-container) {\r\n            z-index: 100 !important;\r\n        }\r\n\r\n        .multi-select-dropdown {\r\n            animation: fadeInDown 0.3s ease-out;\r\n            z-index: 99999 !important;\r\n            position: absolute !important;\r\n            width: 100% !important;\r\n            box-shadow:\r\n                0 20px 25px -5px rgba(0, 0, 0, 0.3),\r\n                0 10px 10px -5px rgba(0, 0, 0, 0.1) !important;\r\n            border: 2px solid var(--primary-600) !important;\r\n            background: white !important;\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar-track {\r\n            background: var(--neutral-100);\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar-thumb {\r\n            background: var(--primary-600);\r\n            border-radius: 3px;\r\n        }\r\n\r\n        /* Additional dropdown positioning fixes */\r\n        .multi-select-dropdown[style*=\"display: block\"],\r\n        .multi-select-dropdown[style*=\"display: flex\"] {\r\n            position: fixed !important;\r\n            z-index: 99999 !important;\r\n            transform: translateZ(0) !important;\r\n            will-change: transform !important;\r\n        }\r\n\r\n        /* Prevent other elements from overlapping */\r\n        .form-section:not(:has(.multi-select-container)) {\r\n            z-index: 1 !important;\r\n        }\r\n\r\n        @keyframes fadeInDown {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(-10px);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        /* Enhanced Sales Container Scrolling */\r\n        .enhanced-sales-container {\r\n            position: relative !important;\r\n            max-height: 600px !important;\r\n            overflow-y: auto !important;\r\n            overflow-x: hidden !important;\r\n            border: 1px solid #e9ecef !important;\r\n            border-radius: 8px !important;\r\n            background: #fafafa !important;\r\n            scrollbar-width: thin;\r\n            scrollbar-color: #4ecdc4 #f1f1f1;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 4px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 4px;\r\n            transition: background 0.3s ease;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb:hover {\r\n            background: #44a08d;\r\n        }\r\n\r\n        /* Purchase History Container */\r\n        .enhanced-purchase-container {\r\n            position: relative !important;\r\n            max-height: 500px !important;\r\n            overflow-y: auto !important;\r\n            overflow-x: hidden !important;\r\n            border: 1px solid #e9ecef !important;\r\n            border-radius: 8px !important;\r\n            background: #f8f9fa !important;\r\n            scrollbar-width: thin;\r\n            scrollbar-color: #667eea #f1f1f1;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 4px;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-thumb {\r\n            background: #667eea;\r\n            border-radius: 4px;\r\n            transition: background 0.3s ease;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-thumb:hover {\r\n            background: #764ba2;\r\n        }\r\n\r\n        /* Ensure sales records have proper layout */\r\n        #sales-records, #purchase-records {\r\n            padding: 10px !important;\r\n            min-height: 100px !important;\r\n            height: auto !important;\r\n            overflow: visible !important;\r\n        }\r\n\r\n        /* Sales and Purchase record items */\r\n        .sale-record-item, .purchase-record-item {\r\n            margin-bottom: 15px;\r\n            padding: 15px;\r\n            background: white;\r\n            border-radius: 8px;\r\n            border: 1px solid #e9ecef;\r\n            transition: all 0.2s ease;\r\n            position: relative;\r\n        }\r\n\r\n        .sale-record-item:hover, .purchase-record-item:hover {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .purchase-record-item {\r\n            border-left: 4px solid #667eea;\r\n        }\r\n\r\n        /* Fix for parent containers that might affect scrolling */\r\n        #sales-content-container, #purchase-content-container {\r\n            overflow: visible !important;\r\n            height: auto !important;\r\n            max-height: none !important;\r\n        }\r\n\r\n        .tab-content {\r\n            overflow: visible !important;\r\n            height: auto !important;\r\n            max-height: none !important;\r\n        }\r\n\r\n        /* Collapsible sections */\r\n        .collapsible-section {\r\n            transition: all 0.3s ease;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .collapsible-section.collapsed {\r\n            max-height: 0;\r\n            padding: 0;\r\n            margin: 0;\r\n        }\r\n\r\n        .collapsible-section.expanded {\r\n            max-height: 2000px;\r\n        }\r\n\r\n        /* Toggle buttons */\r\n        .toggle-btn {\r\n            background: rgba(255,255,255,0.2);\r\n            border: none;\r\n            color: white;\r\n            font-size: 18px;\r\n            cursor: pointer;\r\n            padding: 8px 12px;\r\n            border-radius: 6px;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .toggle-btn:hover {\r\n            background: rgba(255,255,255,0.3);\r\n            transform: scale(1.1);\r\n        }\r\n\r\n        .toggle-btn.collapsed {\r\n            transform: rotate(-90deg);\r\n        }\r\n\r\n        /* Ensure proper scrolling behavior on mobile */\r\n        @media (max-width: 768px) {\r\n            .enhanced-sales-container, .enhanced-purchase-container {\r\n                max-height: 400px !important;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n        }\r\n\r\n        /* ======== ENHANCED VISUAL ELEMENTS ======== */\r\n        .form-section h3 i {\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n            background-clip: text;\r\n            font-size: 1.2em;\r\n            margin-right: 8px;\r\n            animation: iconShine 3s ease-in-out infinite;\r\n        }\r\n\r\n        /* Enhanced form section styling */\r\n        .form-section {\r\n            background: linear-gradient(145deg, rgba(255, 255, 255, 0.98), rgba(248, 250, 252, 0.95));\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            border-radius: var(--radius-xl);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);\r\n            backdrop-filter: blur(20px);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .form-section::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 2px;\r\n            background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);\r\n            opacity: 0.8;\r\n        }\r\n\r\n        .form-section h3 {\r\n            color: var(--neutral-800);\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            margin-bottom: var(--space-4);\r\n            display: flex;\r\n            align-items: center;\r\n            padding-bottom: var(--space-3);\r\n            border-bottom: 1px solid rgba(102, 126, 234, 0.1);\r\n        }\r\n\r\n        @keyframes iconShine {\r\n            0%, 100% { opacity: 1; }\r\n            50% { opacity: 0.7; }\r\n        }\r\n\r\n        /* Floating Quick Actions */\r\n        .floating-actions {\r\n            position: fixed;\r\n            bottom: 20px;\r\n            right: 20px;\r\n            z-index: 1000;\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 12px;\r\n        }\r\n\r\n        .floating-btn {\r\n            width: 56px;\r\n            height: 56px;\r\n            border-radius: 50%;\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            color: white;\r\n            border: none;\r\n            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);\r\n            cursor: pointer;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-size: 20px;\r\n            transition: all 0.3s ease;\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .floating-btn::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: -100%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\r\n            transition: left 0.5s ease;\r\n        }\r\n\r\n        .floating-btn:hover {\r\n            transform: scale(1.1);\r\n            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);\r\n        }\r\n\r\n        .floating-btn:hover::before {\r\n            left: 100%;\r\n        }\r\n\r\n        /* Progress indicators */\r\n        .progress-bar {\r\n            width: 100%;\r\n            height: 8px;\r\n            background: rgba(255, 255, 255, 0.2);\r\n            border-radius: 4px;\r\n            overflow: hidden;\r\n            margin: 10px 0;\r\n        }\r\n\r\n        .progress-fill {\r\n            height: 100%;\r\n            background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);\r\n            background-size: 200% 100%;\r\n            animation: progressShine 2s linear infinite;\r\n            transition: width 0.5s ease;\r\n        }\r\n\r\n        @keyframes progressShine {\r\n            0% { background-position: -200% 0; }\r\n            100% { background-position: 200% 0; }\r\n        }\r\n\r\n        /* Enhanced form labels */\r\n        .form-group label {\r\n            position: relative;\r\n        }\r\n\r\n        .form-group label::before {\r\n            content: '';\r\n            position: absolute;\r\n            left: -15px;\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            width: 4px;\r\n            height: 100%;\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            border-radius: 2px;\r\n            opacity: 0;\r\n            transition: opacity 0.3s ease;\r\n        }\r\n\r\n        .form-group:focus-within label::before {\r\n            opacity: 1;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <header class=\"header\">\r\n            <h1>💎 Theia Jewelz</h1>\r\n            <p class=\"subtitle\">Modern Sales Management System</p>\r\n        </header>\r\n\r\n        <nav class=\"tabs\" role=\"tablist\" aria-label=\"Main navigation\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\" role=\"tab\" aria-selected=\"true\" aria-controls=\"sales\">\r\n                <i class=\"fas fa-plus-circle\"></i>\r\n                <span>Sales Entry</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('recent-sales')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"recent-sales\">\r\n                <i class=\"fas fa-list\"></i>\r\n                <span>Recent Sales</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"dashboard\">\r\n                <i class=\"fas fa-chart-pie\"></i>\r\n                <span>Dashboard</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"customers\">\r\n                <i class=\"fas fa-users\"></i>\r\n                <span>Customers</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"analytics\">\r\n                <i class=\"fas fa-chart-line\"></i>\r\n                <span>Analytics</span>\r\n            </button>\r\n        </nav>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\" role=\"tabpanel\" aria-labelledby=\"sales-tab\">\r\n            <div class=\"filter-section\">\r\n                <div class=\"filter-header\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <h3>Search Existing Customer</h3>\r\n                </div>\r\n                <div class=\"search-input\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <input type=\"text\" id=\"customerSearch\" placeholder=\"Type customer name, phone, or email to search...\"\r\n                           oninput=\"searchCustomers()\" onkeydown=\"handleSearchKeydown(event)\" autocomplete=\"off\"\r\n                           class=\"form-control\">\r\n                    <div id=\"customer-search-results\" style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                         background: white; border: 1px solid var(--neutral-300); border-top: none; border-radius: 0 0 var(--radius-md) var(--radius-md);\r\n                         max-height: 250px; overflow-y: auto; z-index: 1000; box-shadow: var(--shadow-lg);\">\r\n                    </div>\r\n                </div>\r\n                <p class=\"text-muted\" style=\"font-size: 0.875rem; margin-top: var(--space-2);\">\r\n                    <i class=\"fas fa-info-circle\"></i>\r\n                    Search from <span id=\"total-customers\" class=\"fw-semibold\">0</span> customers - includes database & sales records\r\n                </p>\r\n            </div>\r\n\r\n            <!-- Success/Error Messages -->\r\n            <div id=\"success-toast\" class=\"toast toast-success\" style=\"display: none;\">\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"fas fa-check-circle\"></i>\r\n                    <span id=\"success-message\"></span>\r\n                </div>\r\n            </div>\r\n            <div id=\"error-toast\" class=\"toast toast-error\" style=\"display: none;\">\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"fas fa-exclamation-circle\"></i>\r\n                    <span id=\"error-message\"></span>\r\n                </div>\r\n            </div>\r\n\r\n            <form id=\"sales-form\" style=\"position: relative; z-index: 1;\">\r\n                <!-- Customer Information Section -->\r\n                <div class=\"form-section\">\r\n                    <h3><i class=\"fas fa-user\"></i> Customer Information</h3>\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"customerName\" class=\"required\">Customer Name</label>\r\n                            <input type=\"text\" id=\"customerName\" class=\"form-control\" required\r\n                                   placeholder=\"Enter customer name\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Customer name is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"customerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"customerPhone\" class=\"form-control\"\r\n                                   placeholder=\"Enter phone number\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"customerAddress\">Address</label>\r\n                            <textarea id=\"customerAddress\" class=\"form-control\" rows=\"2\"\r\n                                      placeholder=\"Enter customer address (optional)\"></textarea>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Item Information & Pricing Section -->\r\n                <div class=\"form-section\" style=\"z-index: 10; position: relative;\">\r\n                    <h3><i class=\"fas fa-gem\"></i> Item Information & Pricing</h3>\r\n                    <div class=\"form-grid\">\r\n                        <!-- Item Details -->\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"itemName\" class=\"required\">Item Name</label>\r\n                            <input type=\"text\" id=\"itemName\" class=\"form-control\" required\r\n                                   placeholder=\"e.g., Gold Plated Necklace\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Item name is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"category\" class=\"required\">Categories</label>\r\n                            <div class=\"multi-select-container\" style=\"position: relative;\">\r\n                                <div class=\"multi-select-display\" id=\"category-display\" onclick=\"toggleCategoryDropdown()\"\r\n                                     style=\"border: 2px solid var(--neutral-300); border-radius: var(--radius-md); padding: var(--space-3) var(--space-4);\r\n                                            background: white; cursor: pointer; min-height: 48px; display: flex; align-items: center;\r\n                                            justify-content: space-between; transition: var(--transition-normal);\">\r\n                                    <span id=\"category-placeholder\" style=\"color: var(--neutral-400);\">Select categories...</span>\r\n                                    <span id=\"category-selected\" style=\"display: none; flex-wrap: wrap; gap: 6px; flex: 1;\"></span>\r\n                                    <i class=\"fas fa-chevron-down\" id=\"category-arrow\" style=\"transition: transform 0.3s ease;\"></i>\r\n                                </div>\r\n\r\n                                <div class=\"multi-select-dropdown\" id=\"category-dropdown\"\r\n                                     style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                                            background: white !important; border: 2px solid var(--primary-600) !important; border-top: none;\r\n                                            border-radius: 0 0 var(--radius-md) var(--radius-md); max-height: 250px;\r\n                                            overflow-y: auto; z-index: 99999 !important;\r\n                                            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1) !important;\r\n                                            transform: translateZ(0) !important;\">\r\n\r\n                                    <div style=\"padding: 12px; border-bottom: 1px solid var(--neutral-200); background: var(--neutral-50);\">\r\n                                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                                            <button type=\"button\" onclick=\"selectAllCategories()\"\r\n                                                    style=\"background: var(--primary-600); color: white; border: none; padding: 4px 8px;\r\n                                                           border-radius: 4px; font-size: 12px; cursor: pointer;\">Select All</button>\r\n                                            <button type=\"button\" onclick=\"clearAllCategories()\"\r\n                                                    style=\"background: var(--neutral-400); color: white; border: none; padding: 4px 8px;\r\n                                                           border-radius: 4px; font-size: 12px; cursor: pointer;\">Clear All</button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"category-options\" style=\"padding: 8px;\">\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Necklaces\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>✨ Necklaces</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Earrings\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>👂 Earrings</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Bracelets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🔗 Bracelets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Rings\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>💍 Rings</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Anklets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🦶 Anklets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Sets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>💎 Sets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Bangles\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>⚪ Bangles</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Chains\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🔗 Chains</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Pendants\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🏷️ Pendants</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Brooches\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>📎 Brooches</span>\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-error\" id=\"category-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Please select at least one category</span>\r\n                            </div>\r\n                            <p style=\"font-size: 12px; color: var(--neutral-500); margin-top: 5px;\">\r\n                                💡 You can select multiple categories for combination items (e.g., Necklace + Earrings set)\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"saleDate\" class=\"required\">Sale Date</label>\r\n                            <input type=\"date\" id=\"saleDate\" class=\"form-control\" required>\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Sale date is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Pricing Information Separator -->\r\n                        <div style=\"grid-column: 1 / -1; margin: var(--space-4) 0; padding: var(--space-3) 0; \r\n                             border-top: 2px solid rgba(102, 126, 234, 0.1); position: relative;\">\r\n                            <div style=\"position: absolute; top: -1px; left: 50%; transform: translateX(-50%); \r\n                                 background: white; padding: 0 var(--space-3); color: #667eea; font-weight: 600; font-size: 0.9rem;\">\r\n                                <i class=\"fas fa-money-bill-wave\" style=\"margin-right: 6px;\"></i>\r\n                                Pricing Details\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Pricing Information -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"costPrice\">Cost Price (₹) *</label>\r\n                            <input type=\"number\" id=\"costPrice\" class=\"form-control\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"sellingPrice\">Selling Price (₹) *</label>\r\n                            <input type=\"number\" id=\"sellingPrice\" class=\"form-control\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"profit\">💰 Profit (₹)</label>\r\n                            <input type=\"number\" id=\"profit\" class=\"form-control\" readonly placeholder=\"Auto-calculated\" \r\n                                   style=\"background: linear-gradient(135deg, #d1fae5, #a7f3d0); cursor: not-allowed; font-weight: 600; color: #065f46;\">\r\n                            <div id=\"profit-display\" style=\"margin-top: 8px; padding: 12px; background: linear-gradient(135deg, #f0f9ff, #e0f2fe); \r\n                                 border-radius: 8px; border-left: 4px solid #0ea5e9; display: none;\">\r\n                                <div style=\"display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;\">\r\n                                    <div style=\"display: flex; align-items: center; gap: 8px;\">\r\n                                        <i class=\"fas fa-chart-line\" style=\"color: #0ea5e9;\"></i>\r\n                                        <span style=\"font-weight: 600; color: #0c4a6e;\">Profit Margin:</span>\r\n                                        <span id=\"profit-margin\" style=\"font-weight: 700; color: #065f46; font-size: 1.1em;\">0%</span>\r\n                                    </div>\r\n                                    <div style=\"font-size: 12px; color: #64748b;\">\r\n                                        Higher margin = Better profitability 📈\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"button\" class=\"btn btn-primary add-sale-btn\" onclick=\"addSaleRecord()\">💾 Add Sale Record</button>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n        <!-- Recent Sales Tab -->\r\n        <div id=\"recent-sales\" class=\"tab-content\">\r\n            <h2>📋 Recent Sales & Import</h2>\r\n\r\n            <!-- Select Record to Display Section -->\r\n            <div style=\"margin-bottom: 30px; padding: 20px; background: linear-gradient(135deg, #667eea, #764ba2); border-radius: 12px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                <div style=\"display: flex; align-items: center; gap: 15px; color: white;\">\r\n                    <i class=\"fas fa-filter\" style=\"font-size: 20px; color: #ffd700;\"></i>\r\n                    <div style=\"flex: 1;\">\r\n                        <label style=\"display: block; margin-bottom: 8px; font-weight: 600; font-size: 16px; color: white;\">\r\n                            Select Record to Display\r\n                        </label>\r\n                        <select id=\"record-display-selector\" onchange=\"changeRecordDisplay()\"\r\n                                style=\"width: 100%; max-width: 300px; padding: 12px; border: 2px solid rgba(255,255,255,0.3); border-radius: 8px; font-size: 14px; background: rgba(255,255,255,0.95); color: #333; font-weight: 500;\">\r\n                            <option value=\"sales-record\" selected>Sales Record</option>\r\n                            <option value=\"daily-sales-report\">Daily Sales Report</option>\r\n                            <option value=\"purchase-history\">Purchase History</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Sales Import Section -->\r\n            <div id=\"sales-import-section\" style=\"margin-bottom: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px; border: 2px solid #e9ecef;\">\r\n                <h3 style=\"margin: 0 0 15px 0; color: #4ecdc4;\">📤 Bulk Import Sales</h3>\r\n                <p style=\"margin: 0 0 15px 0; color: #666; font-size: 14px;\">Import multiple sales records from CSV or Excel file</p>\r\n\r\n                <div style=\"display: flex; gap: 10px; align-items: center; flex-wrap: wrap;\" class=\"import-section\">\r\n                    <input type=\"file\" id=\"sales-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importSales(event)\">\r\n                    <button class=\"btn btn-primary\" onclick=\"document.getElementById('sales-import-file').click()\" style=\"width: auto; padding: 10px 16px; font-size: 14px;\" title=\"Import sales from CSV or Excel file\">\r\n                        📤 Import Sales Data\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"downloadSalesTemplate()\" style=\"width: auto; padding: 10px 16px; font-size: 14px; background-color: #6c757d; color: white;\" title=\"Download sample CSV template\">\r\n                        📋 Download Template\r\n                    </button>\r\n                    <small style=\"color: #666; font-size: 12px;\">Supports CSV and Excel files with required columns: Item Name, Category, Cost Price, Selling Price, Sale Date, Customer Name</small>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Recent Sales Section -->\r\n            <div id=\"sales-records-section\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">📋 Sales Records (<span id=\"sales-count\">0</span>)</h3>\r\n                            <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" class=\"toggle-btn\" title=\"Expand/Collapse Sales Records\">\r\n                                ►\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                            <button class=\"btn\" onclick=\"downloadExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                📥 Export All\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"sales-content-container\" class=\"collapsible-section collapsed\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                    <div style=\"padding: 20px;\">\r\n                        <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                            <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Sales Summary</h4>\r\n                            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Sales</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Cost</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-selling\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Profit</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <!-- Search and Filter Section -->\r\n                        <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                            <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                <div>\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Sales</label>\r\n                                    <input type=\"text\" id=\"sales-search\" placeholder=\"Search by item name, customer name, or category...\"\r\n                                           oninput=\"filterSales()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                </div>\r\n                                <div style=\"display: flex; gap: 10px;\">\r\n                                    <button onclick=\"clearSalesFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        🔄 Clear\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Sales Records Container with Enhanced Scrolling -->\r\n                        <div class=\"enhanced-sales-container\">\r\n                            <div id=\"sales-records\"></div>\r\n                            <div id=\"load-more-container\" style=\"text-align: center; padding: 20px; display: none;\">\r\n                                <button id=\"load-more-btn\" class=\"btn btn-primary\" onclick=\"loadMoreSales()\" style=\"width: auto; padding: 12px 24px; font-size: 14px; border-radius: 20px;\">\r\n                                    📖 Load More Sales\r\n                                </button>\r\n                            </div>\r\n                            <div id=\"no-sales-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                <h3 style=\"color: #999;\">📭 No Sales Records Found</h3>\r\n                                <p>Add your first sale in the Sales Entry tab or import existing data!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Daily Sales Report Section -->\r\n            <div id=\"daily-sales-report\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden; margin-bottom: 30px; display: none;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <h3 style=\"margin: 0; font-size: 20px;\">📅 Daily Sales Report</h3>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"exportDailySalesReport()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-size: 12px;\">\r\n                                📥 Export Report\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"daily-sales-content\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                        <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Daily Sales Summary</h4>\r\n                        <div id=\"daily-sales-summary\" style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Sales</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-revenue\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Revenue</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Profit</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-avg-sale\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Sale Value</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Purchase History Section -->\r\n                <div id=\"purchase-history-section\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden; margin-top: 30px; display: none;\">\r\n                    <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                            <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                                <h3 style=\"margin: 0; font-size: 20px;\">📦 Purchase History (<span id=\"purchase-count\">0</span>)</h3>\r\n                                <button id=\"purchase-toggle-btn\" onclick=\"togglePurchaseSection()\" class=\"toggle-btn\" title=\"Expand/Collapse Purchase History\">\r\n                                    ►\r\n                                </button>\r\n                            </div>\r\n                            <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                                <button class=\"btn\" onclick=\"exportPurchaseHistory()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                    📥 Export Purchases\r\n                                </button>\r\n                                <button class=\"btn\" onclick=\"addToPurchaseHistory()\" style=\"background: #10B981; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                    ➕ Add Purchase\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"purchase-content-container\" class=\"collapsible-section collapsed\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                        <!-- Purchase Summary -->\r\n                        <div style=\"padding: 20px;\">\r\n                            <div id=\"purchase-summary\" style=\"background: linear-gradient(45deg, #10B981, #059669); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                                <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Purchase Summary</h4>\r\n                                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-purchases\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Items</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-purchase-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Purchase Cost</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-selling-value\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling Value</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-potential-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Potential Profit</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Purchase Search and Filter -->\r\n                            <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                                <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                    <div>\r\n                                        <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Purchases</label>\r\n                                        <input type=\"text\" id=\"purchase-search\" placeholder=\"Search by item name, category, or supplier...\"\r\n                                               oninput=\"filterPurchases()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                    </div>\r\n                                    <div style=\"display: flex; gap: 10px;\">\r\n                                        <button onclick=\"clearPurchaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                            🔄 Clear\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Add Purchase Form Section -->\r\n                            <div id=\"add-purchase-form\" style=\"background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 10px; padding: 20px; margin-bottom: 20px; display: none;\">\r\n                                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\">\r\n                                    <h4 style=\"margin: 0; color: #333; display: flex; align-items: center; gap: 10px;\">\r\n                                        <i class=\"fas fa-plus-circle\" style=\"color: #10B981;\"></i>\r\n                                        Add New Purchase\r\n                                    </h4>\r\n                                    <button onclick=\"cancelAddPurchase()\" style=\"background: #dc3545; color: white; border: none; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        ✕ Cancel\r\n                                    </button>\r\n                                </div>\r\n\r\n                                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;\">\r\n                                    <!-- Left Column -->\r\n                                    <div>\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-tag\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Supplier Name <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"supplier-name\" placeholder=\"Enter supplier name\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-gem\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Purchase Name (Item) <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"purchase-name\" placeholder=\"Enter item name\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-rupee-sign\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Purchase Cost <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"purchase-cost\" placeholder=\"Enter purchase cost\" min=\"0\" step=\"0.01\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <!-- Right Column -->\r\n                                    <div>\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-list\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Category\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"purchase-category\" placeholder=\"e.g., Necklaces, Earrings, Rings\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-money-bill-wave\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Selling Price\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"selling-price\" placeholder=\"Enter intended selling price\" min=\"0\" step=\"0.01\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-sort-numeric-up\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Quantity\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"purchase-quantity\" placeholder=\"Enter quantity\" min=\"1\" value=\"1\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div style=\"margin-bottom: 20px;\">\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                        <i class=\"fas fa-sticky-note\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                        Notes (Optional)\r\n                                    </label>\r\n                                    <textarea id=\"purchase-notes\" placeholder=\"Enter any additional notes...\" rows=\"3\"\r\n                                              style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; resize: vertical; transition: border-color 0.3s ease;\"></textarea>\r\n                                </div>\r\n\r\n                                <div style=\"display: flex; gap: 15px; justify-content: flex-end;\">\r\n                                    <button onclick=\"cancelAddPurchase()\" style=\"background: #6c757d; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 600;\">\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button onclick=\"savePurchaseFromForm()\" style=\"background: #10B981; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 600;\">\r\n                                        <i class=\"fas fa-save\" style=\"margin-right: 5px;\"></i>\r\n                                        Save Purchase\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Purchase Records Container -->\r\n                            <div class=\"enhanced-purchase-container\">\r\n                                <div id=\"purchase-records\"></div>\r\n                                <div id=\"no-purchase-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                    <h3 style=\"color: #999;\">📦 No Purchase Records Found</h3>\r\n                                    <p>Add your first purchase record to track inventory!</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n\r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n\r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n\r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n\r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n\r\n            <!-- Enhanced Customer Database Section -->\r\n            <div style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <!-- Header Section -->\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">👥 Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                            <button id=\"customer-stats-toggle\" onclick=\"toggleCustomerStats()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; font-size: 16px; cursor: pointer; padding: 8px 12px; border-radius: 6px; transition: all 0.3s ease;\" title=\"Show/Hide Customer Statistics\">\r\n                                📊 Stats\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                            <input type=\"file\" id=\"customer-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importCustomers(event)\">\r\n                            <button class=\"btn\" onclick=\"document.getElementById('customer-import-file').click()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\" title=\"Import customers from CSV or Excel file\">\r\n                                📤 Import\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomerTemplate()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📋 Template\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomersExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📥 Export\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customer Statistics Panel -->\r\n                <div id=\"customer-stats-panel\" style=\"display: none; background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Customer Statistics</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;\">\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Customers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-active-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Active Buyers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-avg-orders\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Orders</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-clv\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total CLV</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Search and Filter Section -->\r\n                <div style=\"padding: 20px; background: #f8f9fa; border-bottom: 1px solid #e9ecef;\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr auto auto; gap: 15px; align-items: end;\">\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Customers</label>\r\n                            <input type=\"text\" id=\"customer-database-search\" placeholder=\"Search by name, phone, email, or address...\"\r\n                                   oninput=\"filterCustomerDatabase()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                        </div>\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">📋 Sort By</label>\r\n                            <select id=\"customer-sort-select\" onchange=\"sortCustomerDatabase()\" style=\"padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                <option value=\"name-asc\">Name (A-Z)</option>\r\n                                <option value=\"name-desc\">Name (Z-A)</option>\r\n                                <option value=\"purchases-desc\">Most Purchases</option>\r\n                                <option value=\"purchases-asc\">Least Purchases</option>\r\n                                <option value=\"spending-desc\">Highest Spending</option>\r\n                                <option value=\"spending-asc\">Lowest Spending</option>\r\n                                <option value=\"recent-desc\">Recently Added</option>\r\n                                <option value=\"recent-asc\">Oldest Added</option>\r\n                            </select>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"clearCustomerDatabaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                🔄 Clear\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customers List Container with Enhanced UI -->\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"customer-view-mode\" style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <div style=\"font-size: 14px; color: #666;\">\r\n                            Showing <span id=\"customers-showing\">0</span> of <span id=\"customers-total\">0</span> customers\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; align-items: center;\">\r\n                            <label style=\"font-size: 14px; color: #666;\">View:</label>\r\n                            <select id=\"customers-per-page\" onchange=\"changeCustomersPerPage()\" style=\"padding: 5px 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px;\">\r\n                                <option value=\"10\">10 per page</option>\r\n                                <option value=\"25\" selected>25 per page</option>\r\n                                <option value=\"50\">50 per page</option>\r\n                                <option value=\"100\">100 per page</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Enhanced Customer Cards Container -->\r\n                    <div class=\"enhanced-customers-container\" style=\"max-height: 500px; overflow-y: auto; background: #fafafa; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;\">\r\n                        <div id=\"customers-list-container\"></div>\r\n\r\n                        <!-- Pagination Controls -->\r\n                        <div id=\"customer-pagination\" style=\"display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 20px; padding: 15px;\">\r\n                            <button id=\"prev-customers-btn\" onclick=\"previousCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                ◀ Previous\r\n                            </button>\r\n                            <span id=\"customer-page-info\" style=\"font-size: 14px; color: #666; margin: 0 15px;\">Page 1 of 1</span>\r\n                            <button id=\"next-customers-btn\" onclick=\"nextCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                Next ▶\r\n                            </button>\r\n                        </div>\r\n\r\n                        <!-- No Customers Message -->\r\n                        <div id=\"no-customers-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                            <h3 style=\"color: #999;\">👥 No Customers Found</h3>\r\n                            <p>Add your first customer above or import existing customer data!</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n\r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n        let displayedSalesCount = 20; // Initial number of sales to show\r\n\r\n        // Multi-select category variables\r\n        let selectedCategories = [];\r\n        let isCategoryDropdownOpen = false;\r\n\r\n        // Function to handle record display selection\r\n        function changeRecordDisplay() {\r\n            const selector = document.getElementById('record-display-selector');\r\n            const selectedValue = selector.value;\r\n\r\n            // Get all sections by their IDs\r\n            const salesImportSection = document.getElementById('sales-import-section');\r\n            const salesRecordSection = document.getElementById('sales-records-section');\r\n            const dailySalesReportSection = document.getElementById('daily-sales-report');\r\n            const purchaseHistorySection = document.getElementById('purchase-history-section');\r\n\r\n            // Hide all sections initially\r\n            if (salesImportSection) salesImportSection.style.display = 'none';\r\n            if (salesRecordSection) salesRecordSection.style.display = 'none';\r\n            if (dailySalesReportSection) dailySalesReportSection.style.display = 'none';\r\n            if (purchaseHistorySection) purchaseHistorySection.style.display = 'none';\r\n\r\n            // Show selected section(s)\r\n            switch(selectedValue) {\r\n                case 'sales-record':\r\n                    if (salesImportSection) salesImportSection.style.display = 'block';\r\n                    if (salesRecordSection) salesRecordSection.style.display = 'block';\r\n                    break;\r\n                case 'daily-sales-report':\r\n                    if (dailySalesReportSection) dailySalesReportSection.style.display = 'block';\r\n                    break;\r\n                case 'purchase-history':\r\n                    if (purchaseHistorySection) purchaseHistorySection.style.display = 'block';\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Initialize the display on page load\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            // Set the dropdown to sales-record (default)\r\n            const selector = document.getElementById('record-display-selector');\r\n            if (selector) {\r\n                selector.value = 'sales-record';\r\n            }\r\n            \r\n            // Set initial display to show only sales records\r\n            changeRecordDisplay();\r\n        });\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n\r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n\r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n\r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Multi-Select Category Functions\r\n        function toggleCategoryDropdown() {\r\n            const dropdown = document.getElementById('category-dropdown');\r\n            const display = document.getElementById('category-display');\r\n            const arrow = document.getElementById('category-arrow');\r\n\r\n            isCategoryDropdownOpen = !isCategoryDropdownOpen;\r\n\r\n            if (isCategoryDropdownOpen) {\r\n                // Position dropdown correctly\r\n                const rect = display.getBoundingClientRect();\r\n                const viewportHeight = window.innerHeight;\r\n                const dropdownHeight = 250; // max-height of dropdown\r\n\r\n                // Check if dropdown would go below viewport\r\n                if (rect.bottom + dropdownHeight > viewportHeight) {\r\n                    // Position dropdown above the input\r\n                    dropdown.style.top = 'auto';\r\n                    dropdown.style.bottom = '100%';\r\n                    dropdown.style.borderRadius = 'var(--radius-md) var(--radius-md) 0 0';\r\n                    dropdown.style.borderTop = '2px solid var(--primary-600)';\r\n                    dropdown.style.borderBottom = 'none';\r\n                } else {\r\n                    // Position dropdown below the input (default)\r\n                    dropdown.style.top = '100%';\r\n                    dropdown.style.bottom = 'auto';\r\n                    dropdown.style.borderRadius = '0 0 var(--radius-md) var(--radius-md)';\r\n                    dropdown.style.borderTop = 'none';\r\n                    dropdown.style.borderBottom = '2px solid var(--primary-600)';\r\n                }\r\n\r\n                dropdown.style.display = 'block';\r\n                display.classList.add('active');\r\n                arrow.style.transform = 'rotate(180deg)';\r\n\r\n                // Ensure dropdown is above all other elements\r\n                dropdown.style.zIndex = '99999';\r\n            } else {\r\n                dropdown.style.display = 'none';\r\n                display.classList.remove('active');\r\n                arrow.style.transform = 'rotate(0deg)';\r\n            }\r\n        }\r\n\r\n        function updateSelectedCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            const placeholder = document.getElementById('category-placeholder');\r\n            const selectedContainer = document.getElementById('category-selected');\r\n            const errorDiv = document.getElementById('category-error');\r\n\r\n            selectedCategories = [];\r\n            checkboxes.forEach(checkbox => {\r\n                if (checkbox.checked) {\r\n                    selectedCategories.push(checkbox.value);\r\n                }\r\n            });\r\n\r\n            // Hide error if categories are selected\r\n            if (selectedCategories.length > 0) {\r\n                errorDiv.style.display = 'none';\r\n            }\r\n\r\n            if (selectedCategories.length === 0) {\r\n                placeholder.style.display = 'block';\r\n                selectedContainer.style.display = 'none';\r\n                placeholder.textContent = 'Select categories...';\r\n            } else {\r\n                placeholder.style.display = 'none';\r\n                selectedContainer.style.display = 'flex';\r\n\r\n                selectedContainer.innerHTML = selectedCategories.map(category => {\r\n                    const icon = getCategoryIcon(category);\r\n                    return `\r\n                        <span class=\"category-tag\">\r\n                            ${icon} ${category}\r\n                            <button type=\"button\" class=\"remove-tag\" onclick=\"removeCategory('${category}')\" title=\"Remove ${category}\">\r\n                                ✕\r\n                            </button>\r\n                        </span>\r\n                    `;\r\n                }).join('');\r\n            }\r\n        }\r\n\r\n        function getCategoryIcon(category) {\r\n            const icons = {\r\n                'Necklaces': '✨',\r\n                'Earrings': '👂',\r\n                'Bracelets': '🔗',\r\n                'Rings': '💍',\r\n                'Anklets': '🦶',\r\n                'Sets': '💎',\r\n                'Bangles': '⚪',\r\n                'Chains': '🔗',\r\n                'Pendants': '🏷️',\r\n                'Brooches': '📎'\r\n            };\r\n            return icons[category] || '💎';\r\n        }\r\n\r\n        function removeCategory(categoryToRemove) {\r\n            const checkbox = document.querySelector(`input[value=\"${categoryToRemove}\"]`);\r\n            if (checkbox) {\r\n                checkbox.checked = false;\r\n                updateSelectedCategories();\r\n            }\r\n        }\r\n\r\n        function selectAllCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            checkboxes.forEach(checkbox => {\r\n                checkbox.checked = true;\r\n            });\r\n            updateSelectedCategories();\r\n        }\r\n\r\n        function clearAllCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            checkboxes.forEach(checkbox => {\r\n                checkbox.checked = false;\r\n            });\r\n            updateSelectedCategories();\r\n        }\r\n\r\n        // Close dropdown when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const container = document.querySelector('.multi-select-container');\r\n            if (container && !container.contains(event.target)) {\r\n                if (isCategoryDropdownOpen) {\r\n                    toggleCategoryDropdown();\r\n                }\r\n            }\r\n        });\r\n\r\n        // Initialize Collapsible Sections\r\n        function initializeCollapsibleSections() {\r\n            // Initialize Sales Section as collapsed\r\n            const salesContainer = document.getElementById('sales-content-container');\r\n            const salesToggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (salesContainer && salesToggleBtn) {\r\n                salesContainer.classList.add('collapsed');\r\n                salesToggleBtn.textContent = '►';\r\n                salesToggleBtn.classList.add('collapsed');\r\n                salesToggleBtn.title = 'Expand Sales Records';\r\n            }\r\n\r\n            // Initialize Purchase History Section as collapsed\r\n            const purchaseContainer = document.getElementById('purchase-content-container');\r\n            const purchaseToggleBtn = document.getElementById('purchase-toggle-btn');\r\n\r\n            if (purchaseContainer && purchaseToggleBtn) {\r\n                purchaseContainer.classList.add('collapsed');\r\n                purchaseToggleBtn.textContent = '►';\r\n                purchaseToggleBtn.classList.add('collapsed');\r\n                purchaseToggleBtn.title = 'Expand Purchase History';\r\n            }\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (container.classList.contains('collapsed')) {\r\n                container.classList.remove('collapsed');\r\n                container.classList.add('expanded');\r\n                toggleBtn.textContent = '▼';\r\n                toggleBtn.classList.remove('collapsed');\r\n                toggleBtn.title = 'Collapse Sales Records';\r\n                // Load sales data when expanded\r\n                loadSalesRecords();\r\n            } else {\r\n                container.classList.remove('expanded');\r\n                container.classList.add('collapsed');\r\n                toggleBtn.textContent = '►';\r\n                toggleBtn.classList.add('collapsed');\r\n                toggleBtn.title = 'Expand Sales Records';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n\r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n\r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n\r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n\r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n\r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n\r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n\r\n            document.body.appendChild(updateDiv);\r\n\r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n\r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Initialize collapsible sections\r\n                initializeCollapsibleSections();\r\n\r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n\r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n\r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n\r\n            const cleanedData = [];\r\n\r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n\r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n\r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n\r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n\r\n                    cleanedData.push(cleanedSale);\r\n\r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n\r\n            return cleanedData;\r\n        }\r\n\r\n\r\n\r\n        // Update customer count in search hint to include all unique customers\r\n        function updateCustomerCount() {\r\n            try {\r\n                const countElement = document.getElementById('total-customers');\r\n                if (countElement) {\r\n                    const allUniqueCustomers = getUniqueCustomers();\r\n                    countElement.textContent = allUniqueCustomers.length;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating customer count:', error);\r\n            }\r\n        }\r\n\r\n        // Import customers from CSV/Excel file\r\n        function importCustomers(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVCustomers(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelCustomers(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import customers from CSV\r\n        function importCSVCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\r\n                    const requiredHeaders = ['name', 'phone'];\r\n                    const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\r\n\r\n                    if (missingHeaders.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingHeaders.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Find column indices\r\n                    const nameIndex = headers.indexOf('name');\r\n                    const phoneIndex = headers.indexOf('phone');\r\n                    const addressIndex = headers.indexOf('address');\r\n                    const emailIndex = headers.indexOf('email');\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        const customerName = values[nameIndex];\r\n                        const customerPhone = values[phoneIndex] || '';\r\n                        const customerAddress = addressIndex >= 0 ? values[addressIndex] || '' : '';\r\n                        const customerEmail = emailIndex >= 0 ? values[emailIndex] || '' : '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import customers from Excel\r\n        function importExcelCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    jsonData.forEach(row => {\r\n                        const customerName = row.Name || row.name || row.customer_name || row['Customer Name'];\r\n                        const customerPhone = row.Phone || row.phone || row.mobile || row.Mobile || '';\r\n                        const customerAddress = row.Address || row.address || '';\r\n                        const customerEmail = row.Email || row.email || '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download customer import template\r\n        function downloadCustomerTemplate() {\r\n            const csvContent = [\r\n                'name,phone,address,email',\r\n                'John Doe,+91-9876543210,123 Main Street Mumbai,john@example.com',\r\n                'Jane Smith,+91-8765432109,456 Oak Avenue Delhi,jane@example.com',\r\n                'Mike Johnson,+91-7654321098,789 Pine Road Bangalore,mike@example.com'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'customer_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Customer import template downloaded! Use this format for importing customers.');\r\n        }\r\n\r\n        // Enhanced Customer Database Functionality\r\n        let currentCustomerPage = 1;\r\n        let customersPerPage = 25;\r\n        let filteredCustomers = [];\r\n        let isCustomerSearchActive = false;\r\n        let currentCustomerSort = 'name-asc';\r\n\r\n        function toggleCustomerStats() {\r\n            const panel = document.getElementById('customer-stats-panel');\r\n            const button = document.getElementById('customer-stats-toggle');\r\n\r\n            if (panel.style.display === 'none') {\r\n                panel.style.display = 'block';\r\n                button.textContent = '📊 Hide Stats';\r\n                updateCustomerStatistics();\r\n            } else {\r\n                panel.style.display = 'none';\r\n                button.textContent = '📊 Stats';\r\n            }\r\n        }\r\n\r\n        function updateCustomerStatistics() {\r\n            const totalCustomers = customersData.length;\r\n            const activeCustomers = customersData.filter(customer => {\r\n                const purchases = salesData.filter(sale => sale.customerName === customer.name);\r\n                return purchases.length > 0;\r\n            }).length;\r\n\r\n            const totalOrders = salesData.length;\r\n            const avgOrdersPerCustomer = activeCustomers > 0 ? (totalOrders / activeCustomers).toFixed(1) : 0;\r\n\r\n            const totalCLV = customersData.reduce((sum, customer) => {\r\n                const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                const customerSpending = customerSales.reduce((total, sale) => total + sale.sellingPrice, 0);\r\n                return sum + customerSpending;\r\n            }, 0);\r\n\r\n            document.getElementById('stat-total-customers').textContent = totalCustomers;\r\n            document.getElementById('stat-active-customers').textContent = activeCustomers;\r\n            document.getElementById('stat-avg-orders').textContent = avgOrdersPerCustomer;\r\n            document.getElementById('stat-total-clv').textContent = `₹${totalCLV.toFixed(2)}`;\r\n        }\r\n\r\n        function filterCustomerDatabase() {\r\n            const searchTerm = document.getElementById('customer-database-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                isCustomerSearchActive = false;\r\n                filteredCustomers = [];\r\n                currentCustomerPage = 1;\r\n                displayCustomerDatabase();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return;\r\n            }\r\n\r\n            filteredCustomers = customersData.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                (customer.phone && customer.phone.toLowerCase().includes(searchTerm)) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm)) ||\r\n                (customer.address && customer.address.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isCustomerSearchActive = true;\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function sortCustomerDatabase() {\r\n            currentCustomerSort = document.getElementById('customer-sort-select').value;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function clearCustomerDatabaseFilter() {\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n            currentCustomerSort = 'name-asc';\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function changeCustomersPerPage() {\r\n            customersPerPage = parseInt(document.getElementById('customers-per-page').value);\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function displayCustomerDatabase() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const sortedData = sortCustomersData(dataToDisplay);\r\n\r\n            const totalCustomers = sortedData.length;\r\n            const startIndex = (currentCustomerPage - 1) * customersPerPage;\r\n            const endIndex = Math.min(startIndex + customersPerPage, totalCustomers);\r\n            const currentPageData = sortedData.slice(startIndex, endIndex);\r\n\r\n            const container = document.getElementById('customers-list-container');\r\n            const noCustomersMessage = document.getElementById('no-customers-message');\r\n\r\n            if (totalCustomers === 0) {\r\n                container.innerHTML = '';\r\n                noCustomersMessage.style.display = 'block';\r\n                updateCustomerPagination(0, 0, 0);\r\n                return;\r\n            }\r\n\r\n            noCustomersMessage.style.display = 'none';\r\n\r\n            container.innerHTML = currentPageData.map(customer => createCustomerCardHTML(customer)).join('');\r\n\r\n            // Update pagination\r\n            updateCustomerPagination(currentCustomerPage, Math.ceil(totalCustomers / customersPerPage), totalCustomers);\r\n\r\n            // Update showing info\r\n            document.getElementById('customers-showing').textContent = `${startIndex + 1}-${endIndex}`;\r\n            document.getElementById('customers-total').textContent = totalCustomers;\r\n        }\r\n\r\n        function sortCustomersData(data) {\r\n            const sortedData = [...data];\r\n\r\n            switch (currentCustomerSort) {\r\n                case 'name-asc':\r\n                    return sortedData.sort((a, b) => a.name.localeCompare(b.name));\r\n                case 'name-desc':\r\n                    return sortedData.sort((a, b) => b.name.localeCompare(a.name));\r\n                case 'purchases-desc':\r\n                case 'purchases-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aPurchases = salesData.filter(sale => sale.customerName === a.name).length;\r\n                        const bPurchases = salesData.filter(sale => sale.customerName === b.name).length;\r\n                        return currentCustomerSort === 'purchases-desc' ? bPurchases - aPurchases : aPurchases - bPurchases;\r\n                    });\r\n                case 'spending-desc':\r\n                case 'spending-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aSpending = salesData.filter(sale => sale.customerName === a.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        const bSpending = salesData.filter(sale => sale.customerName === b.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        return currentCustomerSort === 'spending-desc' ? bSpending - aSpending : aSpending - bSpending;\r\n                    });\r\n                case 'recent-desc':\r\n                    return sortedData.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n                case 'recent-asc':\r\n                    return sortedData.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\r\n                default:\r\n                    return sortedData;\r\n            }\r\n        }\r\n\r\n        function createCustomerCardHTML(customer) {\r\n            const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n            const totalPurchases = customerSales.length;\r\n            const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const avgOrderValue = totalPurchases > 0 ? (totalSpent / totalPurchases) : 0;\r\n            const lastPurchase = customerSales.length > 0 ?\r\n                Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime())) : null;\r\n\r\n            const isActive = totalPurchases > 0;\r\n            const statusClass = isActive ? 'active' : 'inactive';\r\n            const statusText = isActive ? 'Active' : 'Inactive';\r\n\r\n            return `\r\n                <div class=\"customer-card\">\r\n                    <div class=\"customer-card-header\">\r\n                        <h4 class=\"customer-name\">👤 ${customer.name}</h4>\r\n                        <span class=\"customer-status ${statusClass}\">${statusText}</span>\r\n                    </div>\r\n\r\n                    <div class=\"customer-info-grid\">\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📞 Phone:</span>\r\n                            ${customer.phone || 'Not provided'}\r\n                        </div>\r\n                        ${customer.email ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📧 Email:</span>\r\n                                ${customer.email}\r\n                            </div>\r\n                        ` : ''}\r\n                        ${customer.address ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📍 Address:</span>\r\n                                ${customer.address}\r\n                            </div>\r\n                        ` : ''}\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📅 Added:</span>\r\n                            ${new Date(customer.createdAt).toLocaleDateString()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"customer-purchase-stats\">\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">${totalPurchases}</div>\r\n                            <div class=\"customer-stat-label\">Total Orders</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${totalSpent.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Total Spent</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${avgOrderValue.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Avg Order</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">\r\n                                ${lastPurchase ? new Date(lastPurchase).toLocaleDateString() : 'Never'}\r\n                            </div>\r\n                            <div class=\"customer-stat-label\">Last Purchase</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        function updateCustomerPagination(currentPage, totalPages, totalCustomers) {\r\n            const prevBtn = document.getElementById('prev-customers-btn');\r\n            const nextBtn = document.getElementById('next-customers-btn');\r\n            const pageInfo = document.getElementById('customer-page-info');\r\n\r\n            prevBtn.disabled = currentPage <= 1;\r\n            nextBtn.disabled = currentPage >= totalPages;\r\n\r\n            pageInfo.textContent = totalPages > 0 ? `Page ${currentPage} of ${totalPages}` : 'No pages';\r\n\r\n            // Update button styles based on disabled state\r\n            prevBtn.style.opacity = prevBtn.disabled ? '0.5' : '1';\r\n            nextBtn.style.opacity = nextBtn.disabled ? '0.5' : '1';\r\n            prevBtn.style.cursor = prevBtn.disabled ? 'not-allowed' : 'pointer';\r\n            nextBtn.style.cursor = nextBtn.disabled ? 'not-allowed' : 'pointer';\r\n        }\r\n\r\n        function previousCustomersPage() {\r\n            if (currentCustomerPage > 1) {\r\n                currentCustomerPage--;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        function nextCustomersPage() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const totalPages = Math.ceil(dataToDisplay.length / customersPerPage);\r\n\r\n            if (currentCustomerPage < totalPages) {\r\n                currentCustomerPage++;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        // Import sales from CSV/Excel file\r\n        function importSales(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVSales(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelSales(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import sales from CSV\r\n        function importCSVSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase().replace(/\"/g, ''));\r\n                    const requiredHeaders = ['item_name', 'category', 'cost_price', 'selling_price', 'sale_date', 'customer_name'];\r\n\r\n                    // Check for alternative header names\r\n                    const headerMapping = {\r\n                        'item_name': ['item_name', 'item name', 'itemname', 'product_name', 'product name', 'name'],\r\n                        'category': ['category', 'item_category', 'product_category', 'type'],\r\n                        'cost_price': ['cost_price', 'cost price', 'costprice', 'cost', 'purchase_price', 'cp'],\r\n                        'selling_price': ['selling_price', 'selling price', 'sellingprice', 'price', 'sale_price', 'sp'],\r\n                        'sale_date': ['sale_date', 'sale date', 'saledate', 'date', 'purchase_date'],\r\n                        'customer_name': ['customer_name', 'customer name', 'customername', 'customer', 'buyer']\r\n                    };\r\n\r\n                    // Find column indices\r\n                    const columnIndices = {};\r\n                    let missingColumns = [];\r\n\r\n                    for (const [key, alternatives] of Object.entries(headerMapping)) {\r\n                        const foundIndex = headers.findIndex(h => alternatives.includes(h));\r\n                        if (foundIndex >= 0) {\r\n                            columnIndices[key] = foundIndex;\r\n                        } else {\r\n                            missingColumns.push(key);\r\n                        }\r\n                    }\r\n\r\n                    if (missingColumns.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingColumns.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Optional columns\r\n                    const phoneIndex = headers.findIndex(h => ['customer_phone', 'customer phone', 'phone', 'mobile'].includes(h));\r\n                    const addressIndex = headers.findIndex(h => ['customer_address', 'customer address', 'address'].includes(h));\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        try {\r\n                            const itemName = values[columnIndices.item_name]?.trim();\r\n                            const category = values[columnIndices.category]?.trim();\r\n                            const costPrice = parseFloat(values[columnIndices.cost_price]) || 0;\r\n                            const sellingPrice = parseFloat(values[columnIndices.selling_price]) || 0;\r\n                            const saleDate = values[columnIndices.sale_date]?.trim();\r\n                            const customerName = values[columnIndices.customer_name]?.trim();\r\n                            const customerPhone = phoneIndex >= 0 ? values[phoneIndex]?.trim() || '' : '';\r\n                            const customerAddress = addressIndex >= 0 ? values[addressIndex]?.trim() || '' : '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${i + 1}: Missing required fields`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${i + 1}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate date format\r\n                            const dateObj = new Date(saleDate);\r\n                            if (isNaN(dateObj.getTime())) {\r\n                                errors.push(`Row ${i + 1}: Invalid date format \"${saleDate}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: saleDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${i + 1}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import sales from Excel\r\n        function importExcelSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    jsonData.forEach((row, index) => {\r\n                        try {\r\n                            // Try different column name variations\r\n                            const itemName = row['Item Name'] || row['Item_Name'] || row['itemname'] || row['Product Name'] || row['Name'];\r\n                            const category = row['Category'] || row['Item Category'] || row['Type'];\r\n                            const costPrice = parseFloat(row['Cost Price'] || row['Cost_Price'] || row['costprice'] || row['Cost'] || row['CP']) || 0;\r\n                            const sellingPrice = parseFloat(row['Selling Price'] || row['Selling_Price'] || row['sellingprice'] || row['Price'] || row['SP']) || 0;\r\n                            const saleDate = row['Sale Date'] || row['Sale_Date'] || row['saledate'] || row['Date'];\r\n                            const customerName = row['Customer Name'] || row['Customer_Name'] || row['customername'] || row['Customer'];\r\n                            const customerPhone = row['Customer Phone'] || row['Customer_Phone'] || row['Phone'] || row['Mobile'] || '';\r\n                            const customerAddress = row['Customer Address'] || row['Customer_Address'] || row['Address'] || '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${index + 2}: Missing required fields`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${index + 2}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate and format date\r\n                            let formattedDate = saleDate;\r\n                            if (saleDate instanceof Date) {\r\n                                formattedDate = saleDate.toISOString().split('T')[0];\r\n                            } else if (typeof saleDate === 'string') {\r\n                                const dateObj = new Date(saleDate);\r\n                                if (isNaN(dateObj.getTime())) {\r\n                                    errors.push(`Row ${index + 2}: Invalid date format \"${saleDate}\"`);\r\n                                    skippedCount++;\r\n                                    return;\r\n                                }\r\n                                formattedDate = dateObj.toISOString().split('T')[0];\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: formattedDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${index + 2}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download sales import template\r\n        function downloadSalesTemplate() {\r\n            const csvContent = [\r\n                'item_name,category,cost_price,selling_price,sale_date,customer_name,customer_phone,customer_address',\r\n                'Gold Plated Necklace,Necklaces,500,800,2024-01-15,John Doe,+91-9876543210,123 Main Street Mumbai',\r\n                'Diamond Earrings,Earrings,1000,1500,2024-01-16,Jane Smith,+91-8765432109,456 Oak Avenue Delhi',\r\n                'Silver Bracelet,Bracelets,300,450,2024-01-17,Mike Johnson,+91-7654321098,789 Pine Road Bangalore'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'sales_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Sales import template downloaded! Use this format for importing sales data.');\r\n        }\r\n\r\n        // Sales search and filter functionality\r\n        let filteredSalesData = [];\r\n        let isSearchActive = false;\r\n\r\n        function filterSales() {\r\n            const searchTerm = document.getElementById('sales-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                // Clear filter\r\n                isSearchActive = false;\r\n                filteredSalesData = [];\r\n                resetSalesDisplay();\r\n                loadSalesRecords();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return; // Wait for at least 2 characters\r\n            }\r\n\r\n            // Filter sales data\r\n            filteredSalesData = salesData.filter(sale =>\r\n                sale.itemName.toLowerCase().includes(searchTerm) ||\r\n                sale.customerName.toLowerCase().includes(searchTerm) ||\r\n                sale.category.toLowerCase().includes(searchTerm) ||\r\n                (sale.customerPhone && sale.customerPhone.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isSearchActive = true;\r\n            displayFilteredSales();\r\n        }\r\n\r\n        function displayFilteredSales() {\r\n            const salesRecordsDiv = document.getElementById('sales-records');\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n            const noSalesMessage = document.getElementById('no-sales-message');\r\n\r\n            if (filteredSalesData.length === 0) {\r\n                salesRecordsDiv.innerHTML = '';\r\n                loadMoreContainer.style.display = 'none';\r\n                noSalesMessage.style.display = 'block';\r\n                noSalesMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Sales Found</h3>\r\n                    <p>No sales records match your search criteria.</p>\r\n                `;\r\n                document.getElementById('sales-count').textContent = '0';\r\n                return;\r\n            }\r\n\r\n            // Display all filtered results\r\n            salesRecordsDiv.innerHTML = filteredSalesData.map(sale => createSaleItemHTML(sale)).join('');\r\n            loadMoreContainer.style.display = 'none';\r\n            noSalesMessage.style.display = 'none';\r\n            document.getElementById('sales-count').textContent = filteredSalesData.length;\r\n\r\n            // Update summary for filtered data\r\n            updateSalesSummary(filteredSalesData);\r\n        }\r\n\r\n        function clearSalesFilter() {\r\n            document.getElementById('sales-search').value = '';\r\n            isSearchActive = false;\r\n            filteredSalesData = [];\r\n            resetSalesDisplay();\r\n            loadSalesRecords();\r\n        }\r\n\r\n        function updateSalesSummary(dataToSummarize = null) {\r\n            const dataToUse = dataToSummarize || salesData;\r\n\r\n            const totalSales = dataToUse.length;\r\n            const totalCost = dataToUse.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = dataToUse.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = totalSelling - totalCost;\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n        }\r\n\r\n        function createSaleItemHTML(sale) {\r\n            const saleDate = new Date(sale.saleDate);\r\n            const formattedDate = saleDate.toLocaleDateString('en-IN', {\r\n                day: '2-digit',\r\n                month: 'short',\r\n                year: 'numeric'\r\n            });\r\n\r\n            const profitColor = sale.profit > 0 ? '#4ecdc4' : sale.profit < 0 ? '#ff6b6b' : '#666';\r\n\r\n            return `\r\n                <div class=\"sales-item\" style=\"position: relative; margin-bottom: 15px; padding: 15px; background: white; border-radius: 8px; border-left: 4px solid ${profitColor}; box-shadow: 0 2px 5px rgba(0,0,0,0.1);\">\r\n                    <div class=\"action-buttons\" style=\"position: absolute; top: 10px; right: 10px; display: flex; gap: 5px;\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale('${sale.id}')\" style=\"background: #007bff; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            ✏️ Edit\r\n                        </button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale('${sale.id}')\" style=\"background: #ff6b6b; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            🗑️ Delete\r\n                        </button>\r\n                    </div>\r\n\r\n                    <h4 style=\"margin: 0 0 8px 0; color: #333; font-size: 16px; padding-right: 120px;\">${sale.itemName}</h4>\r\n\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 14px; color: #666;\">\r\n                        <p style=\"margin: 0;\"><strong>📂 Category:</strong> ${sale.category}</p>\r\n                        <p style=\"margin: 0;\"><strong>📅 Date:</strong> ${formattedDate}</p>\r\n                        <p style=\"margin: 0;\"><strong>💰 Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>💵 Selling:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>📈 Profit:</strong> <span style=\"color: ${profitColor}; font-weight: bold;\">₹${sale.profit.toFixed(2)}</span></p>\r\n                        <p style=\"margin: 0;\"><strong>👤 Customer:</strong> ${sale.customerName}</p>\r\n                    </div>\r\n\r\n                    ${sale.customerPhone ? `<p style=\"margin: 8px 0 0 0; font-size: 13px; color: #888;\"><strong>📞 Phone:</strong> ${sale.customerPhone}</p>` : ''}\r\n                    ${sale.customerAddress ? `<p style=\"margin: 4px 0 0 0; font-size: 13px; color: #888;\"><strong>📍 Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Customer search functionality\r\n        function searchCustomers() {\r\n            const searchTerm = document.getElementById('customerSearch').value.trim().toLowerCase();\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            selectedSearchIndex = -1; // Reset selection\r\n\r\n            if (searchTerm.length < 2) {\r\n                resultsContainer.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Get unique customers from both database and sales data\r\n            const allUniqueCustomers = getUniqueCustomers();\r\n\r\n            // Update total customer count\r\n            document.getElementById('total-customers').textContent = allUniqueCustomers.length;\r\n\r\n            // Filter customers based on search term\r\n            const matchingCustomers = allUniqueCustomers.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                customer.phone.toLowerCase().includes(searchTerm) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            if (matchingCustomers.length === 0) {\r\n                resultsContainer.innerHTML = '<div style=\"padding: 10px; color: #666; font-style: italic;\">No customers found. You can enter new customer details below.</div>';\r\n                resultsContainer.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            // Display matching customers\r\n            resultsContainer.innerHTML = matchingCustomers.map(customer => {\r\n                const lastPurchaseText = customer.lastPurchase\r\n                    ? `Last purchase: ${new Date(customer.lastPurchase).toLocaleDateString()}`\r\n                    : 'No purchases yet';\r\n\r\n                const sourceIcon = customer.source === 'database' ? '📁' : '💳';\r\n                const sourceText = customer.source === 'database' ? 'In Customer DB' : 'From Sales Only';\r\n\r\n                return `\r\n                <div style=\"padding: 12px; cursor: pointer; border-bottom: 1px solid #eee; transition: all 0.2s; border-left: 3px solid transparent;\"\r\n                     onclick=\"selectCustomer('${escapeQuotes(customer.name)}', '${escapeQuotes(customer.phone)}', '${escapeQuotes(customer.address)}', '${escapeQuotes(customer.email)}')\"\r\n                     onmouseover=\"this.style.backgroundColor='#f8f9fa'; this.style.borderLeftColor='#4ecdc4';\"\r\n                     onmouseout=\"this.style.backgroundColor='white'; this.style.borderLeftColor='transparent';\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 4px;\">\r\n                            <div style=\"font-weight: bold; color: #333; font-size: 15px;\">${customer.name}</div>\r\n                    <div style=\"font-size: 10px; color: #999; padding: 2px 6px; background: #f0f0f0; border-radius: 10px;\">\r\n                            ${sourceIcon} ${sourceText}\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 6px;\">\r\n                        ${customer.phone !== 'Not provided' ?\r\n                                `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📞 ${customer.phone}</div>` : ''}\r\n                        ${customer.email && customer.email !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📧 ${customer.email}</div>` : ''}\r\n                    ${customer.address && customer.address !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #888; margin-bottom: 6px; line-height: 1.3;\">📍 ${customer.address}</div>` : ''}\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 8px;\">\r\n                        </div>\r\n                    <div style=\"font-size: 11px; color: #4ecdc4; font-weight: 600;\">\r\n                            ${customer.totalPurchases > 0 ?\r\n                                `${customer.totalPurchases} purchase${customer.totalPurchases > 1 ? 's' : ''} • ₹${customer.totalSpent.toFixed(2)} total` :\r\n                                'New customer'\r\n                            }\r\n                        </div>\r\n                        <div style=\"font-size: 10px; color: #999; font-style: italic;\">\r\n                            ${lastPurchaseText}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            }).join('');\r\n\r\n            resultsContainer.style.display = 'block';\r\n        }\r\n\r\n        // Get customers from customer database and sales data with purchase stats\r\n        function getUniqueCustomers() {\r\n            const allCustomers = new Map();\r\n\r\n            // Add customers from customer database\r\n            customersData.forEach(customer => {\r\n                const customerSales = salesData.filter(sale =>\r\n                    sale.customerName.toLowerCase() === customer.name.toLowerCase() ||\r\n                    sale.customerPhone === customer.phone\r\n                );\r\n\r\n                const totalPurchases = customerSales.length;\r\n                const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                const lastPurchase = customerSales.length > 0\r\n                    ? Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime()))\r\n                    : null;\r\n\r\n                const customerKey = customer.name.toLowerCase() + '|' + (customer.phone || '');\r\n                allCustomers.set(customerKey, {\r\n                    name: customer.name,\r\n                    phone: customer.phone || 'Not provided',\r\n                    address: customer.address || 'Not provided',\r\n                    email: customer.email || 'Not provided',\r\n                    totalPurchases: totalPurchases,\r\n                    totalSpent: totalSpent,\r\n                    lastPurchase: lastPurchase,\r\n                    source: 'database'\r\n                });\r\n            });\r\n\r\n            // Add customers from sales data who are not in customer database\r\n            salesData.forEach(sale => {\r\n                const customerKey = sale.customerName.toLowerCase() + '|' + (sale.customerPhone || '');\r\n\r\n                if (!allCustomers.has(customerKey)) {\r\n                    const customerSales = salesData.filter(s =>\r\n                        s.customerName.toLowerCase() === sale.customerName.toLowerCase() ||\r\n                        (s.customerPhone && sale.customerPhone && s.customerPhone === sale.customerPhone)\r\n                    );\r\n\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, s) => sum + s.sellingPrice, 0);\r\n                    const lastPurchase = Math.max(...customerSales.map(s => new Date(s.saleDate).getTime()));\r\n\r\n                    allCustomers.set(customerKey, {\r\n                        name: sale.customerName,\r\n                        phone: sale.customerPhone || 'Not provided',\r\n                        address: sale.customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        totalPurchases: totalPurchases,\r\n                        totalSpent: totalSpent,\r\n                        lastPurchase: lastPurchase,\r\n                        source: 'sales'\r\n                    });\r\n                }\r\n            });\r\n\r\n            // Convert to array and sort by total spent (descending), then by last purchase date (descending)\r\n            return Array.from(allCustomers.values()).sort((a, b) => {\r\n                if (b.totalSpent !== a.totalSpent) {\r\n                    return b.totalSpent - a.totalSpent;\r\n                }\r\n                if (a.lastPurchase && b.lastPurchase) {\r\n                    return b.lastPurchase - a.lastPurchase;\r\n                }\r\n                return a.lastPurchase ? -1 : (b.lastPurchase ? 1 : 0);\r\n            });\r\n        }\r\n\r\n        // Escape quotes for HTML attributes\r\n        function escapeQuotes(str) {\r\n            if (!str) return '';\r\n            return str.replace(/'/g, '&#39;').replace(/\"/g, '&quot;');\r\n        }\r\n\r\n        // Select customer from search results\r\n        function selectCustomer(name, phone, address, email) {\r\n            document.getElementById('customerName').value = name;\r\n            document.getElementById('customerPhone').value = phone !== 'Not provided' ? phone : '';\r\n            document.getElementById('customerAddress').value = address !== 'Not provided' ? address : '';\r\n\r\n            // Clear search\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n\r\n            // Show success message\r\n            showSuccess(`✅ Customer \"${name}\" selected! Details filled automatically.`);\r\n\r\n            // Focus on item name field\r\n            document.getElementById('itemName').focus();\r\n        }\r\n\r\n        // Clear customer search\r\n        function clearCustomerSearch() {\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n        }\r\n\r\n        // Handle keyboard navigation in search\r\n        let selectedSearchIndex = -1;\r\n        function handleSearchKeydown(event) {\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            const results = resultsContainer.querySelectorAll('[onclick*=\"selectCustomer\"]');\r\n\r\n            if (results.length === 0) return;\r\n\r\n            switch(event.key) {\r\n                case 'ArrowDown':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.min(selectedSearchIndex + 1, results.length - 1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'ArrowUp':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.max(selectedSearchIndex - 1, -1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'Enter':\r\n                    event.preventDefault();\r\n                    if (selectedSearchIndex >= 0 && selectedSearchIndex < results.length) {\r\n                        results[selectedSearchIndex].click();\r\n                    }\r\n                    break;\r\n                case 'Escape':\r\n                    clearCustomerSearch();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function highlightSearchResult(results) {\r\n            // Remove previous highlights\r\n            results.forEach((result, index) => {\r\n                if (index === selectedSearchIndex) {\r\n                    result.style.backgroundColor = '#4ecdc4';\r\n                    result.style.color = 'white';\r\n                } else {\r\n                    result.style.backgroundColor = 'white';\r\n                    result.style.color = 'inherit';\r\n                }\r\n            });\r\n        }\r\n\r\n        // Hide search results when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const searchContainer = document.getElementById('customerSearch').parentElement;\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n\r\n            if (!searchContainer.contains(event.target)) {\r\n                resultsContainer.style.display = 'none';\r\n            }\r\n        });\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            const profitField = document.getElementById('profit');\r\n            const profitDisplay = document.getElementById('profit-display');\r\n            const profitMargin = document.getElementById('profit-margin');\r\n            \r\n            profitField.value = profit.toFixed(2);\r\n\r\n            // Calculate profit margin percentage\r\n            let marginPercentage = 0;\r\n            if (sellingPrice > 0) {\r\n                marginPercentage = ((profit / sellingPrice) * 100);\r\n            }\r\n\r\n            // Update profit margin display\r\n            if (profitMargin) {\r\n                profitMargin.textContent = marginPercentage.toFixed(1) + '%';\r\n            }\r\n\r\n            // Show/hide profit display\r\n            if (costPrice > 0 && sellingPrice > 0) {\r\n                profitDisplay.style.display = 'block';\r\n            } else {\r\n                profitDisplay.style.display = 'none';\r\n            }\r\n\r\n            // Enhanced color coding based on profit\r\n            if (profit > 0) {\r\n                profitField.style.background = 'linear-gradient(135deg, #d1fae5, #a7f3d0)';\r\n                profitField.style.color = '#065f46';\r\n                profitField.style.fontWeight = '600';\r\n                profitField.style.borderColor = '#34d399';\r\n                \r\n                // Color code the margin based on percentage\r\n                if (marginPercentage >= 30) {\r\n                    profitMargin.style.color = '#065f46'; // Excellent\r\n                    profitMargin.style.background = '#d1fae5';\r\n                } else if (marginPercentage >= 20) {\r\n                    profitMargin.style.color = '#047857'; // Good\r\n                    profitMargin.style.background = '#ecfdf5';\r\n                } else if (marginPercentage >= 10) {\r\n                    profitMargin.style.color = '#d97706'; // Fair\r\n                    profitMargin.style.background = '#fef3c7';\r\n                } else {\r\n                    profitMargin.style.color = '#dc2626'; // Low\r\n                    profitMargin.style.background = '#fee2e2';\r\n                }\r\n                \r\n            } else if (profit < 0) {\r\n                profitField.style.background = 'linear-gradient(135deg, #fee2e2, #fecaca)';\r\n                profitField.style.color = '#dc2626';\r\n                profitField.style.fontWeight = '600';\r\n                profitField.style.borderColor = '#f87171';\r\n                \r\n                if (profitMargin) {\r\n                    profitMargin.style.color = '#dc2626';\r\n                    profitMargin.style.background = '#fee2e2';\r\n                }\r\n            } else {\r\n                profitField.style.background = 'linear-gradient(135deg, #f3f4f6, #e5e7eb)';\r\n                profitField.style.color = '#6b7280';\r\n                profitField.style.fontWeight = 'normal';\r\n                profitField.style.borderColor = '#d1d5db';\r\n                \r\n                if (profitMargin) {\r\n                    profitMargin.style.color = '#6b7280';\r\n                    profitMargin.style.background = '#f3f4f6';\r\n                }\r\n            }\r\n\r\n            // Add visual feedback animation\r\n            profitField.style.transform = 'scale(1.02)';\r\n            setTimeout(() => {\r\n                profitField.style.transform = 'scale(1)';\r\n            }, 200);\r\n        }\r\n\r\n        // Add sale record function\r\n        function addSaleRecord() {\r\n            try {\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validate required fields with alerts\r\n                if (!itemName) {\r\n                    showError('Please enter item name');\r\n                    alert('⚠️ Validation Error:\\nPlease enter the item name to proceed.');\r\n                    document.getElementById('itemName').focus();\r\n                    return;\r\n                }\r\n                if (selectedCategories.length === 0) {\r\n                    showError('Please select at least one category');\r\n                    alert('⚠️ Validation Error:\\nPlease select at least one category for the item.');\r\n                    document.getElementById('category-error').style.display = 'flex';\r\n                    return;\r\n                }\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    showError('Please enter a valid cost price');\r\n                    alert('⚠️ Validation Error:\\nPlease enter a valid cost price (must be greater than 0).');\r\n                    document.getElementById('costPrice').focus();\r\n                    return;\r\n                }\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    showError('Please enter a valid selling price');\r\n                    alert('⚠️ Validation Error:\\nPlease enter a valid selling price (must be greater than 0).');\r\n                    document.getElementById('sellingPrice').focus();\r\n                    return;\r\n                }\r\n                if (sellingPrice < costPrice) {\r\n                    showError('Selling price cannot be less than cost price');\r\n                    alert('⚠️ Validation Error:\\nSelling price cannot be less than cost price.\\nThis would result in a loss!');\r\n                    document.getElementById('sellingPrice').focus();\r\n                    return;\r\n                }\r\n                if (!saleDate) {\r\n                    showError('Please select a sale date');\r\n                    alert('⚠️ Validation Error:\\nPlease select the sale date.');\r\n                    document.getElementById('saleDate').focus();\r\n                    return;\r\n                }\r\n                if (!customerName) {\r\n                    showError('Please enter customer name');\r\n                    alert('⚠️ Validation Error:\\nPlease enter the customer name to proceed.');\r\n                    document.getElementById('customerName').focus();\r\n                    return;\r\n                }\r\n\r\n                // Save customer to database automatically when adding sale\r\n                saveCustomerFromSale(customerName, customerPhone, customerAddress);\r\n\r\n                // Create sale record with multiple categories\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: selectedCategories.join(', '), // Join multiple categories with comma\r\n                    categories: selectedCategories, // Keep array for advanced filtering\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    alert('⚠️ Storage Error!\\n\\nFailed to save the sale record to local storage:\\n\\n' + storageError.message + '\\n\\nThis might be due to storage limits or browser settings. Please try clearing some browser data or contact support.');\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                document.getElementById('customerSearch').value = '';\r\n                document.getElementById('customer-search-results').style.display = 'none';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Clear selected categories\r\n                clearAllCategories();\r\n\r\n                // Reset sales display to show latest sales\r\n                resetSalesDisplay();\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Show success message\r\n                showSuccess('✅ Sale record added successfully! Customer saved to database.');\r\n                alert('✅ Success!\\n\\nSale record has been added successfully!\\n\\n📊 Details:\\n• Item: ' + itemName + '\\n• Categories: ' + selectedCategories.join(', ') + '\\n• Customer: ' + customerName + '\\n• Profit: ₹' + (sellingPrice - costPrice).toFixed(2));\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                showError('Error adding sale record: ' + error.message);\r\n                alert('❌ Error!\\n\\nAn unexpected error occurred while adding the sale record:\\n\\n' + error.message + '\\n\\nPlease try again or contact support if the problem persists.');\r\n            }\r\n        }\r\n\r\n        // Save customer from sale entry automatically\r\n        function saveCustomerFromSale(customerName, customerPhone, customerAddress) {\r\n            try {\r\n                if (!customerName.trim()) return;\r\n\r\n                // Check if customer already exists by name or phone\r\n                const existingCustomerIndex = customersData.findIndex(customer =>\r\n                    customer.name.toLowerCase() === customerName.toLowerCase() ||\r\n                    (customerPhone && customer.phone === customerPhone)\r\n                );\r\n\r\n                if (existingCustomerIndex !== -1) {\r\n                    // Update existing customer with any new information\r\n                    const existingCustomer = customersData[existingCustomerIndex];\r\n                    let updated = false;\r\n\r\n                    if (customerPhone && customerPhone !== existingCustomer.phone && existingCustomer.phone === 'Not provided') {\r\n                        existingCustomer.phone = customerPhone;\r\n                        updated = true;\r\n                    }\r\n\r\n                    if (customerAddress && customerAddress !== existingCustomer.address && existingCustomer.address === 'Not provided') {\r\n                        existingCustomer.address = customerAddress;\r\n                        updated = true;\r\n                    }\r\n\r\n                    // Update last purchase date\r\n                    existingCustomer.lastPurchase = new Date().toISOString();\r\n                    updated = true;\r\n\r\n                    if (updated) {\r\n                        customersData[existingCustomerIndex] = existingCustomer;\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                    }\r\n                } else {\r\n                    // Add new customer\r\n                    const newCustomer = {\r\n                        id: Date.now(),\r\n                        name: customerName,\r\n                        phone: customerPhone || 'Not provided',\r\n                        address: customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        status: 'active',\r\n                        notes: `Auto-added from sale entry on ${new Date().toLocaleDateString()}`,\r\n                        createdAt: new Date().toISOString(),\r\n                        lastPurchase: new Date().toISOString()\r\n                    };\r\n\r\n                    customersData.push(newCustomer);\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                }\r\n            } catch (error) {\r\n                console.error('Error saving customer from sale:', error);\r\n                // Don't throw error to not interrupt sale process\r\n            }\r\n        }\r\n\r\n        // Show success message\r\n        function showSuccess(message) {\r\n            const successDiv = document.getElementById('success-message');\r\n            const errorDiv = document.getElementById('error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show error message\r\n        function showError(message) {\r\n            const errorDiv = document.getElementById('error-message');\r\n            const successDiv = document.getElementById('success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n\r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n            const dailyReportDiv = document.getElementById('daily-sales-report');\r\n\r\n            countElement.textContent = salesData.length;\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                dailyReportDiv.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n\r\n            // Update daily sales report\r\n            updateDailySalesReport();\r\n            dailyReportDiv.style.display = 'block';\r\n\r\n            // Show sales with pagination\r\n            const recentSales = salesData.slice().reverse(); // All sales in reverse order\r\n            const salesToShow = recentSales.slice(0, displayedSalesCount);\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n\r\n            container.innerHTML = salesToShow.map(sale => `\r\n                <div class=\"sales-item\" id=\"sale-item-${sale.id}\">\r\n                    <div class=\"action-buttons\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale(${sale.id})\" title=\"Edit Sale\">✏️</button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\" title=\"Delete Sale\">🗑️</button>\r\n                    </div>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n\r\n            // Show/hide Load More button\r\n            if (recentSales.length > displayedSalesCount) {\r\n                loadMoreContainer.style.display = 'block';\r\n                const remainingCount = recentSales.length - displayedSalesCount;\r\n                document.getElementById('load-more-btn').innerHTML = `📖 Load More Sales (${remainingCount} remaining)`;\r\n            } else {\r\n                loadMoreContainer.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Daily Sales Report variables\r\n        let isDailyViewDetailed = false;\r\n\r\n        // Update Daily Sales Report\r\n        function updateDailySalesReport() {\r\n            const dailyStats = calculateDailyStats();\r\n            const contentDiv = document.getElementById('daily-sales-content');\r\n\r\n            if (Object.keys(dailyStats).length === 0) {\r\n                contentDiv.innerHTML = '<p>No daily sales data available.</p>';\r\n                return;\r\n            }\r\n\r\n            // Always show detailed view\r\n            contentDiv.innerHTML = generateDetailedDailyView(dailyStats);\r\n        }\r\n\r\n        // Calculate Daily Statistics\r\n        function calculateDailyStats() {\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const saleDate = sale.saleDate;\r\n\r\n                if (!dailyStats[saleDate]) {\r\n                    dailyStats[saleDate] = {\r\n                        date: saleDate,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        categories: {},\r\n                        customers: new Set(),\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: '',\r\n                        topCustomer: ''\r\n                    };\r\n                }\r\n\r\n                const dayData = dailyStats[saleDate];\r\n                dayData.totalSales++;\r\n                dayData.totalRevenue += sale.sellingPrice;\r\n                dayData.totalCost += sale.costPrice;\r\n                dayData.totalProfit += sale.profit;\r\n                dayData.customers.add(sale.customerName);\r\n\r\n                // Category breakdown\r\n                if (!dayData.categories[sale.category]) {\r\n                    dayData.categories[sale.category] = {\r\n                        count: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dayData.categories[sale.category].count++;\r\n                dayData.categories[sale.category].revenue += sale.sellingPrice;\r\n                dayData.categories[sale.category].profit += sale.profit;\r\n            });\r\n\r\n            // Calculate derived stats\r\n            Object.values(dailyStats).forEach(day => {\r\n                day.avgOrderValue = day.totalRevenue / day.totalSales;\r\n                day.profitMargin = (day.totalProfit / day.totalRevenue) * 100;\r\n                day.uniqueCustomers = day.customers.size;\r\n\r\n                // Find top category by revenue\r\n                let topCategoryRevenue = 0;\r\n                Object.entries(day.categories).forEach(([category, data]) => {\r\n                    if (data.revenue > topCategoryRevenue) {\r\n                        topCategoryRevenue = data.revenue;\r\n                        day.topCategory = category;\r\n                    }\r\n                });\r\n            });\r\n\r\n            return dailyStats;\r\n        }\r\n\r\n        // Generate Compact Daily View\r\n        function generateCompactDailyView(dailyStats) {\r\n            const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n            const recentDays = sortedDays.slice(0, 7); // Show last 7 days\r\n\r\n            return `\r\n                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;\">\r\n                    ${recentDays.map(day => `\r\n                        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; cursor: pointer;\" onclick=\"showDayDetails('${day.date}')\">\r\n                            <div style=\"display: flex; justify-content: between; align-items: center; margin-bottom: 10px;\">\r\n                                <h5 style=\"margin: 0; font-size: 14px; opacity: 0.9;\">${new Date(day.date).toLocaleDateString()}</h5>\r\n                                <span style=\"font-size: 12px; opacity: 0.8;\">📅</span>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 20px; font-weight: bold; margin-bottom: 2px;\">${day.totalSales}</div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Sales</div>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 16px; font-weight: bold; margin-bottom: 2px;\">₹${day.totalRevenue.toFixed(0)}</div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Revenue</div>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 14px; font-weight: bold; margin-bottom: 2px; color: ${day.profitMargin >= 20 ? '#4ade80' : day.profitMargin >= 10 ? '#fbbf24' : '#f87171'};\">\r\n                                    ${day.profitMargin.toFixed(1)}%\r\n                                </div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Profit Margin</div>\r\n                            </div>\r\n                            <div style=\"font-size: 11px; opacity: 0.7; margin-top: 8px;\">\r\n                                Top: ${day.topCategory}\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n                ${sortedDays.length > 7 ? `\r\n                    <div style=\"text-align: center; margin-top: 15px;\">\r\n                        <button onclick=\"showAllDays()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 12px;\">\r\n                            📊 View All ${sortedDays.length} Days\r\n                        </button>\r\n                    </div>\r\n                ` : ''}\r\n            `;\r\n        }\r\n\r\n        // Generate Detailed Daily View\r\n        function generateDetailedDailyView(dailyStats) {\r\n            const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n            return `\r\n                <div style=\"max-height: 500px; overflow-y: auto;\">\r\n                    ${sortedDays.map(day => {\r\n                        const salesForDay = salesData.filter(sale => sale.saleDate === day.date);\r\n\r\n                        return `\r\n                            <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin-bottom: 15px;\">\r\n                                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                                    <h5 style=\"margin: 0; font-size: 16px;\">${new Date(day.date).toLocaleDateString('en-US', {\r\n                                        weekday: 'long',\r\n                                        year: 'numeric',\r\n                                        month: 'long',\r\n                                        day: 'numeric'\r\n                                    })}</h5>\r\n                                    <div style=\"font-size: 12px; opacity: 0.8;\">\r\n                                        ${day.totalSales} sales • ₹${day.totalRevenue.toFixed(0)} revenue • ₹${day.totalProfit.toFixed(0)} profit\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <!-- Individual Sales Records -->\r\n                                <div style=\"background: rgba(255,255,255,0.05); border-radius: 6px; padding: 10px;\">\r\n                                    <h6 style=\"margin: 0 0 10px 0; font-size: 12px; opacity: 0.9;\">📋 Sales Records:</h6>\r\n                                    <div style=\"display: flex; flex-direction: column; gap: 8px;\">\r\n                                        ${salesForDay.map((sale, index) => `\r\n                                            <div style=\"background: rgba(255,255,255,0.1); padding: 12px; border-radius: 6px; display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 1fr; gap: 15px; align-items: center; font-size: 12px;\">\r\n                                                <div style=\"font-weight: bold;\">\r\n                                                    <div style=\"font-size: 13px; margin-bottom: 2px;\">${sale.itemName}</div>\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">👤 ${sale.customerName}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Category</div>\r\n                                                    <div style=\"font-weight: bold;\">${sale.category}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Cost</div>\r\n                                                    <div style=\"font-weight: bold;\">₹${sale.costPrice.toFixed(0)}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Selling</div>\r\n                                                    <div style=\"font-weight: bold;\">₹${sale.sellingPrice.toFixed(0)}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Profit</div>\r\n                                                    <div style=\"font-weight: bold; color: ${sale.profit >= 0 ? '#4ade80' : '#f87171'};\">₹${sale.profit.toFixed(0)}</div>\r\n                                                </div>\r\n                                            </div>\r\n                                        `).join('')}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        `;\r\n                    }).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Toggle Daily Sales View (function kept for compatibility)\r\n        function toggleDailySalesView() {\r\n            // Function removed - always show detailed view\r\n        }\r\n\r\n        // Show specific day details (future enhancement)\r\n        function showDayDetails(date) {\r\n            const dailyStats = calculateDailyStats();\r\n            const dayData = dailyStats[date];\r\n\r\n            if (!dayData) return;\r\n\r\n            const salesForDay = salesData.filter(sale => sale.saleDate === date);\r\n\r\n            alert(`📅 Sales Details for ${new Date(date).toLocaleDateString()}\r\n\r\n📊 Summary:\r\n• Total Sales: ${dayData.totalSales}\r\n• Revenue: ₹${dayData.totalRevenue.toFixed(2)}\r\n• Profit: ₹${dayData.totalProfit.toFixed(2)}\r\n• Profit Margin: ${dayData.profitMargin.toFixed(1)}%\r\n• Unique Customers: ${dayData.uniqueCustomers}\r\n• Average Order Value: ₹${dayData.avgOrderValue.toFixed(2)}\r\n\r\n🏷️ Categories:\r\n${Object.entries(dayData.categories).map(([cat, data]) =>\r\n`• ${cat}: ${data.count} sales (₹${data.revenue.toFixed(2)})`\r\n).join('\\n')}\r\n\r\n👥 Customers:\r\n${[...dayData.customers].join(', ')}`);\r\n        }\r\n\r\n        // Show all days (future enhancement)\r\n        function showAllDays() {\r\n            isDailyViewDetailed = true;\r\n            updateDailySalesReport();\r\n            document.getElementById('daily-view-toggle').textContent = '📋 Compact View';\r\n        }\r\n\r\n        // Export Daily Sales Report\r\n        function exportDailySalesReport() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available to export!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const dailyStats = calculateDailyStats();\r\n                const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n                // Prepare data for export\r\n                const reportData = sortedDays.map(day => ({\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Day of Week': new Date(day.date).toLocaleDateString('en-US', { weekday: 'long' }),\r\n                    'Total Sales': day.totalSales,\r\n                    'Total Revenue (₹)': day.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': day.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': day.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': day.profitMargin.toFixed(2),\r\n                    'Average Order Value (₹)': day.avgOrderValue.toFixed(2),\r\n                    'Unique Customers': day.uniqueCustomers,\r\n                    'Top Category': day.topCategory,\r\n                    'Categories Count': Object.keys(day.categories).length\r\n                }));\r\n\r\n                // Create detailed category breakdown sheet\r\n                const categoryData = [];\r\n                sortedDays.forEach(day => {\r\n                    Object.entries(day.categories).forEach(([category, data]) => {\r\n                        categoryData.push({\r\n                            'Date': new Date(day.date).toLocaleDateString(),\r\n                            'Category': category,\r\n                            'Sales Count': data.count,\r\n                            'Revenue (₹)': data.revenue.toFixed(2),\r\n                            'Profit (₹)': data.profit.toFixed(2),\r\n                            'Avg Sale Value (₹)': (data.revenue / data.count).toFixed(2)\r\n                        });\r\n                    });\r\n                });\r\n\r\n                // Create workbook\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Add main daily report sheet\r\n                const ws1 = XLSX.utils.json_to_sheet(reportData);\r\n                XLSX.utils.book_append_sheet(wb, ws1, 'Daily Sales Summary');\r\n\r\n                // Add category breakdown sheet\r\n                const ws2 = XLSX.utils.json_to_sheet(categoryData);\r\n                XLSX.utils.book_append_sheet(wb, ws2, 'Daily Category Breakdown');\r\n\r\n                // Export file\r\n                const fileName = `Daily_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Daily Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting daily sales report:', error);\r\n                alert('Error exporting report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n\r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Edit sale functionality\r\n        let currentEditingSaleId = null;\r\n\r\n        function editSale(id) {\r\n            // Check if another sale is being edited\r\n            if (currentEditingSaleId && currentEditingSaleId !== id) {\r\n                showError('Please finish editing the current sale before editing another one.');\r\n                return;\r\n            }\r\n\r\n            const sale = salesData.find(s => s.id === id);\r\n            if (!sale) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const saleItem = document.getElementById(`sale-item-${id}`);\r\n            if (!saleItem) {\r\n                showError('Sale item not found in DOM!');\r\n                return;\r\n            }\r\n\r\n            currentEditingSaleId = id;\r\n\r\n            // Create edit form\r\n            const editForm = `\r\n                <div class=\"edit-form\">\r\n                    <h4>✏️ Edit Sale Record</h4>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-itemName-${id}\">Item Name *</label>\r\n                            <input type=\"text\" id=\"edit-itemName-${id}\" value=\"${sale.itemName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-category-${id}\">Category *</label>\r\n                            <select id=\"edit-category-${id}\" required>\r\n                                <option value=\"Necklaces\" ${sale.category === 'Necklaces' ? 'selected' : ''}>Necklaces</option>\r\n                                <option value=\"Earrings\" ${sale.category === 'Earrings' ? 'selected' : ''}>Earrings</option>\r\n                                <option value=\"Bracelets\" ${sale.category === 'Bracelets' ? 'selected' : ''}>Bracelets</option>\r\n                                <option value=\"Rings\" ${sale.category === 'Rings' ? 'selected' : ''}>Rings</option>\r\n                                <option value=\"Anklets\" ${sale.category === 'Anklets' ? 'selected' : ''}>Anklets</option>\r\n                                <option value=\"Sets\" ${sale.category === 'Sets' ? 'selected' : ''}>Sets</option>\r\n                                <option value=\"Bangles\" ${sale.category === 'Bangles' ? 'selected' : ''}>Bangles</option>\r\n                                <option value=\"Chains\" ${sale.category === 'Chains' ? 'selected' : ''}>Chains</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-costPrice-${id}\">Cost Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-costPrice-${id}\" value=\"${sale.costPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-sellingPrice-${id}\">Selling Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-sellingPrice-${id}\" value=\"${sale.sellingPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-profit-${id}\">Profit (₹)</label>\r\n                            <input type=\"number\" id=\"edit-profit-${id}\" value=\"${sale.profit}\" readonly style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-saleDate-${id}\">Sale Date *</label>\r\n                            <input type=\"date\" id=\"edit-saleDate-${id}\" value=\"${sale.saleDate}\" required>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerName-${id}\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"edit-customerName-${id}\" value=\"${sale.customerName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerPhone-${id}\">Customer Phone</label>\r\n                            <input type=\"tel\" id=\"edit-customerPhone-${id}\" value=\"${sale.customerPhone}\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-group\">\r\n                        <label for=\"edit-customerAddress-${id}\">Customer Address</label>\r\n                        <textarea id=\"edit-customerAddress-${id}\" rows=\"2\">${sale.customerAddress || ''}</textarea>\r\n                    </div>\r\n                    <div class=\"edit-form-buttons\">\r\n                        <button class=\"save-edit-btn\" onclick=\"saveSaleEdit(${id})\">💾 Save Changes</button>\r\n                        <button class=\"cancel-edit-btn\" onclick=\"cancelSaleEdit(${id})\">❌ Cancel</button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            saleItem.innerHTML = editForm;\r\n\r\n            // Scroll the edited item into view\r\n            saleItem.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n\r\n        function calculateEditProfit(id) {\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            document.getElementById(`edit-profit-${id}`).value = profit.toFixed(2);\r\n        }\r\n\r\n        function saveSaleEdit(id) {\r\n            const itemName = document.getElementById(`edit-itemName-${id}`).value.trim();\r\n            const category = document.getElementById(`edit-category-${id}`).value;\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value);\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value);\r\n            const saleDate = document.getElementById(`edit-saleDate-${id}`).value;\r\n            const customerName = document.getElementById(`edit-customerName-${id}`).value.trim();\r\n            const customerPhone = document.getElementById(`edit-customerPhone-${id}`).value.trim();\r\n            const customerAddress = document.getElementById(`edit-customerAddress-${id}`).value.trim();\r\n\r\n            // Validation\r\n            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                showError('Please fill in all required fields marked with *');\r\n                return;\r\n            }\r\n\r\n            if (costPrice < 0 || sellingPrice < 0) {\r\n                showError('Cost price and selling price must be positive numbers');\r\n                return;\r\n            }\r\n\r\n            // Find and update the sale\r\n            const saleIndex = salesData.findIndex(s => s.id === id);\r\n            if (saleIndex === -1) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            // Update the sale data\r\n            salesData[saleIndex] = {\r\n                ...salesData[saleIndex],\r\n                itemName,\r\n                category,\r\n                costPrice,\r\n                sellingPrice,\r\n                profit,\r\n                saleDate,\r\n                customerName,\r\n                customerPhone: customerPhone || 'Not provided',\r\n                customerAddress: customerAddress || 'Not provided'\r\n            };\r\n\r\n            // Save to localStorage\r\n            localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n            // Reset editing state\r\n            currentEditingSaleId = null;\r\n\r\n            // Refresh displays\r\n            loadSalesRecords();\r\n            updateDashboard();\r\n            loadCustomers();\r\n\r\n            showSuccess('Sale record updated successfully!');\r\n        }\r\n\r\n        function cancelSaleEdit(id) {\r\n            currentEditingSaleId = null;\r\n            loadSalesRecords();\r\n        }\r\n\r\n        // Load more sales functionality\r\n        function loadMoreSales() {\r\n            displayedSalesCount += 20; // Load 20 more sales\r\n            loadSalesRecords();\r\n\r\n            // Smooth scroll to maintain position\r\n            const loadMoreBtn = document.getElementById('load-more-btn');\r\n            setTimeout(() => {\r\n                loadMoreBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }, 100);\r\n        }\r\n\r\n        // Reset displayed sales count when needed\r\n        function resetSalesDisplay() {\r\n            displayedSalesCount = 20;\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n\r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n\r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n\r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n\r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n\r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n\r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n\r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n\r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n\r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer =>\r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers with enhanced display\r\n        function loadCustomers() {\r\n            const countElement = document.getElementById('customers-count');\r\n            countElement.textContent = customersData.length;\r\n\r\n            // Reset pagination and filters when loading fresh data\r\n            currentCustomerPage = 1;\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n\r\n            // Clear search and sort inputs\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            currentCustomerSort = 'name-asc';\r\n\r\n            // Display the enhanced customer database\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        // Download customers Excel report\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const customersWithStats = customersData.map(customer => {\r\n                    const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                    const lastPurchase = customerSales.length > 0 ?\r\n                        new Date(Math.max(...customerSales.map(sale => new Date(sale.saleDate)))).toLocaleDateString() : 'Never';\r\n\r\n                    return {\r\n                        'Customer Name': customer.name,\r\n                        'Phone': customer.phone || 'Not provided',\r\n                        'Email': customer.email || 'Not provided',\r\n                        'Address': customer.address || 'Not provided',\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Average Order Value (₹)': totalPurchases > 0 ? (totalSpent / totalPurchases).toFixed(2) : 0,\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Customer Status': totalPurchases > 0 ? 'Active' : 'Inactive',\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Database');\r\n\r\n                const fileName = `Customer_Database_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Customer database exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting customers:', error);\r\n                showError('Error exporting customer data: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nThis will NOT affect sales records, but customer search functionality will be limited.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL CUSTOMERS\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL CUSTOMERS') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        updateCustomerCount();\r\n                        showSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL CUSTOMERS\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n\r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n\r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n\r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n\r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n\r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n\r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n\r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n\r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n\r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n\r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n\r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n\r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong>\r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' :\r\n                          month.profitMargin > 10 ? '📊 Good Performance' :\r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n\r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n\r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n\r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                    // Find top category\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n\r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' :\r\n                                         month.profitMargin > 10 ? 'Good' :\r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n\r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n\r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n\r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n\r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n\r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong>\r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' :\r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' :\r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n\r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong>\r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' :\r\n                          cat.salesPercentage > 20 ? '📈 High Demand' :\r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' :\r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n\r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n\r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n\r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n\r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n\r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' :\r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' :\r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n\r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Customer Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n\r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' :\r\n                                   cat.salesPercentage > 20 ? 'High Demand' :\r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' :\r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n\r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Category Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n\r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n\r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n\r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n\r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Sales Trends exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Mobile-friendly alert function\r\n        function mobileAlert(title, message, type = 'info') {\r\n            // For now, use native alert but this can be enhanced with custom modal\r\n            if (type === 'error') {\r\n                alert('❌ ' + title + '\\n\\n' + message);\r\n            } else if (type === 'success') {\r\n                alert('✅ ' + title + '\\n\\n' + message);\r\n            } else if (type === 'warning') {\r\n                alert('⚠️ ' + title + '\\n\\n' + message);\r\n            } else {\r\n                alert('ℹ️ ' + title + '\\n\\n' + message);\r\n            }\r\n        }\r\n\r\n        // ======== PURCHASE HISTORY FUNCTIONS ========\r\n\r\n        // Purchase history data\r\n        let purchaseData = [];\r\n\r\n        // Initialize purchase data from localStorage\r\n        function initializePurchaseData() {\r\n            const savedPurchases = localStorage.getItem('jewelryPurchases');\r\n            if (savedPurchases) {\r\n                purchaseData = JSON.parse(savedPurchases);\r\n            } else {\r\n                purchaseData = [];\r\n            }\r\n        }\r\n\r\n        // Save purchase data to localStorage\r\n        function savePurchaseData() {\r\n            localStorage.setItem('jewelryPurchases', JSON.stringify(purchaseData));\r\n        }\r\n\r\n        // Toggle purchase history section\r\n        function togglePurchaseSection() {\r\n            const container = document.getElementById('purchase-content-container');\r\n            const toggleBtn = document.getElementById('purchase-toggle-btn');\r\n\r\n            if (container.classList.contains('collapsed')) {\r\n                container.classList.remove('collapsed');\r\n                toggleBtn.title = 'Collapse Purchase History';\r\n                container.classList.add('expanded');\r\n                toggleBtn.textContent = '▼';\r\n                toggleBtn.classList.remove('collapsed');\r\n                loadPurchaseHistory();\r\n            } else {\r\n                container.classList.remove('expanded');\r\n                container.classList.add('collapsed');\r\n                toggleBtn.title = 'Expand Purchase History';\r\n                toggleBtn.textContent = '►';\r\n                toggleBtn.classList.add('collapsed');\r\n            }\r\n        }\r\n\r\n        // Load and display purchase history\r\n        function loadPurchaseHistory() {\r\n            initializePurchaseData();\r\n            updatePurchaseSummary();\r\n            displayPurchaseRecords();\r\n            updatePurchaseCount();\r\n        }\r\n\r\n        // Update purchase summary statistics\r\n        function updatePurchaseSummary() {\r\n            const totalPurchases = purchaseData.length;\r\n            const totalPurchaseCost = purchaseData.reduce((sum, item) => sum + item.purchaseCost, 0);\r\n            const totalSellingValue = purchaseData.reduce((sum, item) => sum + item.sellingPrice, 0);\r\n            const potentialProfit = totalSellingValue - totalPurchaseCost;\r\n\r\n            document.getElementById('summary-total-purchases').textContent = totalPurchases;\r\n            document.getElementById('summary-total-purchase-cost').textContent = `₹${totalPurchaseCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling-value').textContent = `₹${totalSellingValue.toFixed(2)}`;\r\n            document.getElementById('summary-potential-profit').textContent = `₹${potentialProfit.toFixed(2)}`;\r\n        }\r\n\r\n        // Update purchase count\r\n        function updatePurchaseCount() {\r\n            document.getElementById('purchase-count').textContent = purchaseData.length;\r\n        }\r\n\r\n        // Display purchase records\r\n        function displayPurchaseRecords() {\r\n            const container = document.getElementById('purchase-records');\r\n            const noDataMessage = document.getElementById('no-purchase-message');\r\n\r\n            if (purchaseData.length === 0) {\r\n                container.innerHTML = '';\r\n                noDataMessage.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            noDataMessage.style.display = 'none';\r\n\r\n            // Sort by purchase date (newest first)\r\n            const sortedPurchases = [...purchaseData].sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate));\r\n\r\n            container.innerHTML = sortedPurchases.map((item, index) => {\r\n                const profitMargin = ((item.sellingPrice - item.purchaseCost) / item.sellingPrice * 100).toFixed(1);\r\n                const profit = item.sellingPrice - item.purchaseCost;\r\n                const profitColor = profit >= 0 ? '#10B981' : '#EF4444';\r\n                const statusColor = item.status === 'sold' ? '#10B981' : item.status === 'reserved' ? '#F59E0B' : '#6B7280';\r\n\r\n                return `\r\n                    <div class=\"purchase-record-item\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <h4 style=\"color: #333; margin: 0 0 5px 0; font-size: 16px;\">${item.itemName}</h4>\r\n                                <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\r\n                                    <span style=\"background: #667eea; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;\">\r\n                                        ${getCategoryIcon(item.category)} ${item.category}\r\n                                    </span>\r\n                                    <span style=\"background: ${statusColor}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px; text-transform: uppercase;\">\r\n                                        ${item.status || 'Available'}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div style=\"text-align: right;\">\r\n                                <div style=\"display: flex; gap: 5px;\">\r\n                                    <button onclick=\"editPurchaseRecord(${index})\" style=\"background: #4ecdc4; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Edit\">\r\n                                        ✏️\r\n                                    </button>\r\n                                    <button onclick=\"deletePurchaseRecord(${index})\" style=\"background: #ff6b6b; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Delete\">\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💰 Purchase Cost:</strong> ₹${item.purchaseCost.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💎 Selling Price:</strong> ₹${item.sellingPrice.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: ${profitColor}; font-size: 14px;\">\r\n                                    <strong>📈 Potential Profit:</strong> ₹${profit.toFixed(2)} (${profitMargin}%)\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📅 Purchase Date:</strong> ${new Date(item.purchaseDate).toLocaleDateString()}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>🏪 Supplier:</strong> ${item.supplier || 'Not specified'}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📦 Quantity:</strong> ${item.quantity || 1}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        ${item.notes ? `\r\n                            <div style=\"background: #f8f9fa; padding: 10px; border-radius: 6px; margin-top: 10px;\">\r\n                                <p style=\"margin: 0; color: #666; font-size: 13px;\">\r\n                                    <strong>📝 Notes:</strong> ${item.notes}\r\n                                </p>\r\n                            </div>\r\n                        ` : ''}\r\n                    </div>\r\n                `;\r\n            }).join('');\r\n        }\r\n\r\n        // Add new purchase record - Show form instead of prompts\r\n        function addToPurchaseHistory() {\r\n            const form = document.getElementById('add-purchase-form');\r\n            if (form.style.display === 'none' || form.style.display === '') {\r\n                // Show the form and scroll to it\r\n                form.style.display = 'block';\r\n                form.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n\r\n                // Clear any previous values\r\n                document.getElementById('supplier-name').value = '';\r\n                document.getElementById('purchase-name').value = '';\r\n                document.getElementById('purchase-cost').value = '';\r\n                document.getElementById('purchase-category').value = '';\r\n                document.getElementById('selling-price').value = '';\r\n                document.getElementById('purchase-quantity').value = '1';\r\n                document.getElementById('purchase-notes').value = '';\r\n                } else {\r\n                // Hide the form if it's already shown\r\n                form.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Cancel adding purchase - Hide the form\r\n        function cancelAddPurchase() {\r\n            const form = document.getElementById('add-purchase-form');\r\n            form.style.display = 'none';\r\n        }\r\n\r\n        // Save purchase from form data\r\n        function savePurchaseFromForm() {\r\n            const supplierName = document.getElementById('supplier-name').value.trim();\r\n            const purchaseName = document.getElementById('purchase-name').value.trim();\r\n            const purchaseCost = parseFloat(document.getElementById('purchase-cost').value);\r\n            const category = document.getElementById('purchase-category').value.trim();\r\n                // Focus on the first input\r\n                document.getElementById('supplier-name').focus();\r\n\r\n            const sellingPrice = parseFloat(document.getElementById('selling-price').value);\r\n            const quantity = parseInt(document.getElementById('purchase-quantity').value) || 1;\r\n            const notes = document.getElementById('purchase-notes').value.trim();\r\n\r\n            // Validation\r\n            if (!supplierName) {\r\n                alert('❌ Please enter supplier name.');\r\n                document.getElementById('supplier-name').focus();\r\n                return;\r\n            }\r\n\r\n            if (!purchaseName) {\r\n                alert('❌ Please enter purchase name (item name).');\r\n                document.getElementById('purchase-name').focus();\r\n                return;\r\n            }\r\n\r\n            if (isNaN(purchaseCost) || purchaseCost <= 0) {\r\n                alert('❌ Please enter a valid purchase cost.');\r\n                document.getElementById('purchase-cost').focus();\r\n                return;\r\n            }\r\n\r\n            if (sellingPrice && (isNaN(sellingPrice) || sellingPrice <= 0)) {\r\n                alert('❌ Please enter a valid selling price or leave it empty.');\r\n                document.getElementById('selling-price').focus();\r\n                return;\r\n            }\r\n\r\n            // Create purchase record\r\n            const purchaseRecord = {\r\n                id: Date.now().toString(),\r\n                itemName: purchaseName,\r\n                category: category || 'General',\r\n                purchaseCost: purchaseCost,\r\n                sellingPrice: sellingPrice || 0,\r\n                supplier: supplierName,\r\n                quantity: quantity,\r\n                status: 'available',\r\n                purchaseDate: new Date().toISOString().split('T')[0],\r\n                notes: notes\r\n            };\r\n\r\n            // Add to data and save\r\n            purchaseData.unshift(purchaseRecord);\r\n            savePurchaseData();\r\n            loadPurchaseHistory();\r\n\r\n            // Hide form and show success message\r\n            document.getElementById('add-purchase-form').style.display = 'none';\r\n            alert('✅ Purchase record added successfully!');\r\n        }\r\n\r\n        // Handle Enter key in purchase form\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            const purchaseFormInputs = document.querySelectorAll('#add-purchase-form input, #add-purchase-form textarea');\r\n            purchaseFormInputs.forEach(input => {\r\n                input.addEventListener('keypress', function(e) {\r\n                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                        e.preventDefault();\r\n                        // If it's the last input or textarea, save the form\r\n                        if (input.id === 'purchase-notes') {\r\n                            savePurchaseFromForm();\r\n                        } else {\r\n                            // Move to next input\r\n                            const inputs = Array.from(purchaseFormInputs);\r\n                            const currentIndex = inputs.indexOf(input);\r\n                            if (currentIndex < inputs.length - 1) {\r\n                                inputs[currentIndex + 1].focus();\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        // Edit purchase record\r\n        function editPurchaseRecord(index) {\r\n            const item = purchaseData[index];\r\n            if (!item) return;\r\n\r\n            const newItemName = prompt('Edit item name:', item.itemName);\r\n            if (newItemName === null) return;\r\n\r\n            const newCategory = prompt('Edit category:', item.category);\r\n            if (newCategory === null) return;\r\n\r\n            const newPurchaseCost = parseFloat(prompt('Edit purchase cost:', item.purchaseCost));\r\n            if (isNaN(newPurchaseCost)) return;\r\n\r\n            const newSellingPrice = parseFloat(prompt('Edit selling price:', item.sellingPrice));\r\n            if (isNaN(newSellingPrice)) return;\r\n\r\n            const newSupplier = prompt('Edit supplier:', item.supplier || '');\r\n            const newQuantity = parseInt(prompt('Edit quantity:', item.quantity || 1));\r\n            const newNotes = prompt('Edit notes:', item.notes || '');\r\n\r\n            purchaseData[index] = {\r\n                ...item,\r\n                itemName: newItemName.trim(),\r\n                category: newCategory.trim(),\r\n                purchaseCost: newPurchaseCost,\r\n                sellingPrice: newSellingPrice,\r\n                supplier: (newSupplier || '').trim() || 'Not specified',\r\n                quantity: isNaN(newQuantity) ? 1 : newQuantity,\r\n                notes: (newNotes || '').trim()\r\n            };\r\n\r\n            savePurchaseData();\r\n            loadPurchaseHistory();\r\n            alert('✅ Purchase record updated successfully!');\r\n        }\r\n\r\n        // Delete purchase record\r\n        function deletePurchaseRecord(index) {\r\n            const item = purchaseData[index];\r\n            if (!item) return;\r\n\r\n            if (confirm(`Are you sure you want to delete \"${item.itemName}\"?`)) {\r\n                purchaseData.splice(index, 1);\r\n                savePurchaseData();\r\n                loadPurchaseHistory();\r\n                alert('🗑️ Purchase record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Filter purchases based on search\r\n        function filterPurchases() {\r\n            const searchTerm = document.getElementById('purchase-search').value.toLowerCase();\r\n\r\n            if (!searchTerm) {\r\n                displayPurchaseRecords();\r\n                return;\r\n            }\r\n\r\n            const filteredPurchases = purchaseData.filter(item =>\r\n                item.itemName.toLowerCase().includes(searchTerm) ||\r\n                item.category.toLowerCase().includes(searchTerm) ||\r\n                (item.supplier && item.supplier.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            const container = document.getElementById('purchase-records');\r\n            const noDataMessage = document.getElementById('no-purchase-message');\r\n\r\n            if (filteredPurchases.length === 0) {\r\n                container.innerHTML = '';\r\n                noDataMessage.style.display = 'block';\r\n                noDataMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Purchase Records Found</h3>\r\n                    <p>No purchases match your search term \"${searchTerm}\"</p>\r\n                `;\r\n                return;\r\n            }\r\n\r\n            noDataMessage.style.display = 'none';\r\n            // Display filtered results (reuse the same display logic)\r\n            const sortedPurchases = [...filteredPurchases].sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate));\r\n\r\n            container.innerHTML = sortedPurchases.map((item, index) => {\r\n                const originalIndex = purchaseData.findIndex(p => p.id === item.id);\r\n                const profitMargin = ((item.sellingPrice - item.purchaseCost) / item.sellingPrice * 100).toFixed(1);\r\n                const profit = item.sellingPrice - item.purchaseCost;\r\n                const profitColor = profit >= 0 ? '#10B981' : '#EF4444';\r\n                const statusColor = item.status === 'sold' ? '#10B981' : item.status === 'reserved' ? '#F59E0B' : '#6B7280';\r\n\r\n                return `\r\n                    <div class=\"purchase-record-item\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <h4 style=\"color: #333; margin: 0 0 5px 0; font-size: 16px;\">${item.itemName}</h4>\r\n                                <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\r\n                                    <span style=\"background: #667eea; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;\">\r\n                                        ${getCategoryIcon(item.category)} ${item.category}\r\n                                    </span>\r\n                                    <span style=\"background: ${statusColor}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px; text-transform: uppercase;\">\r\n                                        ${item.status || 'Available'}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div style=\"text-align: right;\">\r\n                                <div style=\"display: flex; gap: 5px;\">\r\n                                    <button onclick=\"editPurchaseRecord(${originalIndex})\" style=\"background: #4ecdc4; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Edit\">\r\n                                        ✏️\r\n                                    </button>\r\n                                    <button onclick=\"deletePurchaseRecord(${originalIndex})\" style=\"background: #ff6b6b; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Delete\">\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💰 Purchase Cost:</strong> ₹${item.purchaseCost.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💎 Selling Price:</strong> ₹${item.sellingPrice.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: ${profitColor}; font-size: 14px;\">\r\n                                    <strong>📈 Potential Profit:</strong> ₹${profit.toFixed(2)} (${profitMargin}%)\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📅 Purchase Date:</strong> ${new Date(item.purchaseDate).toLocaleDateString()}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>🏪 Supplier:</strong> ${item.supplier || 'Not specified'}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📦 Quantity:</strong> ${item.quantity || 1}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        ${item.notes ? `\r\n                            <div style=\"background: #f8f9fa; padding: 10px; border-radius: 6px; margin-top: 10px;\">\r\n                                <p style=\"margin: 0; color: #666; font-size: 13px;\">\r\n                                    <strong>📝 Notes:</strong> ${item.notes}\r\n                                </p>\r\n                            </div>\r\n                        ` : ''}\r\n                    </div>\r\n                `;\r\n            }).join('');\r\n        }\r\n\r\n        // Clear purchase search filter\r\n        function clearPurchaseFilter() {\r\n            document.getElementById('purchase-search').value = '';\r\n            displayPurchaseRecords();\r\n        }\r\n\r\n        // Export purchase history to Excel\r\n        function exportPurchaseHistory() {\r\n            if (purchaseData.length === 0) {\r\n                alert('No purchase records to export!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const dataToExport = purchaseData.map(item => ({\r\n                    'Item Name': item.itemName,\r\n                    'Category': item.category,\r\n                    'Purchase Cost (₹)': item.purchaseCost.toFixed(2),\r\n                    'Selling Price (₹)': item.sellingPrice.toFixed(2),\r\n                    'Potential Profit (₹)': (item.sellingPrice - item.purchaseCost).toFixed(2),\r\n                    'Profit Margin (%)': (((item.sellingPrice - item.purchaseCost) / item.sellingPrice) * 100).toFixed(1),\r\n                    'Purchase Date': item.purchaseDate,\r\n                    'Supplier': item.supplier || 'Not specified',\r\n                    'Quantity': item.quantity || 1,\r\n                    'Status': item.status || 'Available',\r\n                    'Notes': item.notes || ''\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(dataToExport);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Purchase History');\r\n\r\n                const fileName = `Purchase_History_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert(`📦 Purchase history exported successfully!\\n\\nFile: ${fileName}\\nRecords: ${purchaseData.length}`);\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting purchase history:', error);\r\n                alert('Error exporting purchase history: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Initialize purchase data when the app loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializePurchaseData();\r\n            updatePurchaseCount();\r\n        });\r\n    </script>\r\n\r\n    <!-- Mobile-friendly modal for alerts (future enhancement) -->\r\n    <div id=\"mobile-modal\" class=\"mobile-modal\">\r\n        <div class=\"mobile-modal-content\">\r\n            <div id=\"mobile-modal-header\" class=\"mobile-modal-header\"></div>\r\n            <div id=\"mobile-modal-body\" class=\"mobile-modal-body\"></div>\r\n            <div class=\"mobile-modal-buttons\">\r\n                <button id=\"mobile-modal-ok\" class=\"btn btn-primary\">OK</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Floating Action Buttons -->\r\n    <div class=\"floating-actions\">\r\n        <button class=\"floating-btn\" title=\"Scroll to Top\" onclick=\"window.scrollTo({top: 0, behavior: 'smooth'})\">\r\n            <i class=\"fas fa-arrow-up\"></i>\r\n        </button>\r\n        <button class=\"floating-btn\" title=\"Quick Add Sale\" onclick=\"showTab('sales'); document.getElementById('customerName').focus();\">\r\n            <i class=\"fas fa-plus\"></i>\r\n        </button>\r\n        <button class=\"floating-btn\" title=\"Dashboard\" onclick=\"showTab('dashboard')\">\r\n            <i class=\"fas fa-chart-pie\"></i>\r\n        </button>\r\n    </div>\r\n\r\n    <!-- Enhanced loading overlay -->\r\n    <div id=\"loading-overlay\" style=\"display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; \r\n         background: rgba(102, 126, 234, 0.9); z-index: 9999; align-items: center; justify-content: center;\">\r\n        <div style=\"text-align: center; color: white;\">\r\n            <div class=\"loading-spinner\" style=\"width: 60px; height: 60px; border: 4px solid rgba(255,255,255,0.3); \r\n                 border-top: 4px solid white; margin: 0 auto 20px;\"></div>\r\n            <h3 style=\"margin: 0; font-weight: 300;\">Processing...</h3>\r\n            <p style=\"margin: 10px 0 0; opacity: 0.8;\">Please wait while we save your data</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1752346515913,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "remove scroll up quick add sales  dashboard button from the add sales page"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "d113e098-a14e-4589-aaf9-97b5818720ca",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I'll remove the floating action buttons from the sales page. Let me find and remove them:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01UQDwskv6EGCNf7HSjKDhMX",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -7859,18 +7859,7 @@\n         </div>\n     </div>\n \n-    <!-- Floating Action Buttons -->\n-    <div class=\"floating-actions\">\n-        <button class=\"floating-btn\" title=\"Scroll to Top\" onclick=\"window.scrollTo({top: 0, behavior: 'smooth'})\">\n-            <i class=\"fas fa-arrow-up\"></i>\n-        </button>\n-        <button class=\"floating-btn\" title=\"Quick Add Sale\" onclick=\"showTab('sales'); document.getElementById('customerName').focus();\">\n-            <i class=\"fas fa-plus\"></i>\n-        </button>\n-        <button class=\"floating-btn\" title=\"Dashboard\" onclick=\"showTab('dashboard')\">\n-            <i class=\"fas fa-chart-pie\"></i>\n-        </button>\n-    </div>\n+\n \n     <!-- Enhanced loading overlay -->\n     <div id=\"loading-overlay\" style=\"display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; ",
                    "refToolCallId": "toolu_01UQDwskv6EGCNf7HSjKDhMX"
                },
                {
                    "type": "text",
                    "text": "I should also remove the CSS for the floating buttons since they're no longer needed:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01UUYyRJCkELr55uwzEtrbi4",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -2647,54 +2647,7 @@\n             50% { opacity: 0.7; }\n         }\n \n-        /* Floating Quick Actions */\n-        .floating-actions {\n-            position: fixed;\n-            bottom: 20px;\n-            right: 20px;\n-            z-index: 1000;\n-            display: flex;\n-            flex-direction: column;\n-            gap: 12px;\n-        }\n-\n-        .floating-btn {\n-            width: 56px;\n-            height: 56px;\n-            border-radius: 50%;\n-            background: linear-gradient(135deg, #667eea, #764ba2);\n-            color: white;\n-            border: none;\n-            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);\n-            cursor: pointer;\n-            display: flex;\n-            align-items: center;\n-            justify-content: center;\n-            font-size: 20px;\n-            transition: all 0.3s ease;\n-            position: relative;\n-            overflow: hidden;\n-        }\n-\n-        .floating-btn::before {\n-            content: '';\n-            position: absolute;\n-            top: 0;\n-            left: -100%;\n-            width: 100%;\n-            height: 100%;\n-            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n-            transition: left 0.5s ease;\n-        }\n-\n-        .floating-btn:hover {\n-            transform: scale(1.1);\n-            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);\n-        }\n-\n-        .floating-btn:hover::before {\n-            left: 100%;\n-        }\n+\n \n         /* Progress indicators */\n         .progress-bar {",
                    "refToolCallId": "toolu_01UUYyRJCkELr55uwzEtrbi4"
                },
                {
                    "type": "text",
                    "text": "Perfect! I've successfully removed the floating action buttons (scroll up, quick add sales, and dashboard buttons) from the sales page. The floating buttons and their associated CSS styling have been completely removed from the HTML file.\n\nNow the sales page will have a cleaner interface without the floating action buttons that were previously positioned at the bottom-right corner of the screen. Users can still navigate using the main navigation tabs at the top of the page."
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "jewelry_sales_final.html",
                            "patch": "@@ -81105,1419 +81105,8 @@\n %0D%0A%0D%0A\n-        /* Floating Quick Actions */%0D%0A        .floating-actions %7B%0D%0A            position: fixed;%0D%0A            bottom: 20px;%0D%0A            right: 20px;%0D%0A            z-index: 1000;%0D%0A            display: flex;%0D%0A            flex-direction: column;%0D%0A            gap: 12px;%0D%0A        %7D%0D%0A%0D%0A        .floating-btn %7B%0D%0A            width: 56px;%0D%0A            height: 56px;%0D%0A            border-radius: 50%25;%0D%0A            background: linear-gradient(135deg, #667eea, #764ba2);%0D%0A            color: white;%0D%0A            border: none;%0D%0A            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);%0D%0A            cursor: pointer;%0D%0A            display: flex;%0D%0A            align-items: center;%0D%0A            justify-content: center;%0D%0A            font-size: 20px;%0D%0A            transition: all 0.3s ease;%0D%0A            position: relative;%0D%0A            overflow: hidden;%0D%0A        %7D%0D%0A%0D%0A        .floating-btn::before %7B%0D%0A            content: '';%0D%0A            position: absolute;%0D%0A            top: 0;%0D%0A            left: -100%25;%0D%0A            width: 100%25;%0D%0A            height: 100%25;%0D%0A            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);%0D%0A            transition: left 0.5s ease;%0D%0A        %7D%0D%0A%0D%0A        .floating-btn:hover %7B%0D%0A            transform: scale(1.1);%0D%0A            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);%0D%0A        %7D%0D%0A%0D%0A        .floating-btn:hover::before %7B%0D%0A            left: 100%25;%0D%0A        %7D\n %0D%0A%0D%0A\n@@ -351868,625 +351868,8 @@\n %0D%0A%0D%0A\n-    %3C!-- Floating Action Buttons --%3E%0D%0A    %3Cdiv class=%22floating-actions%22%3E%0D%0A        %3Cbutton class=%22floating-btn%22 title=%22Scroll to Top%22 onclick=%22window.scrollTo(%7Btop: 0, behavior: 'smooth'%7D)%22%3E%0D%0A            %3Ci class=%22fas fa-arrow-up%22%3E%3C/i%3E%0D%0A        %3C/button%3E%0D%0A        %3Cbutton class=%22floating-btn%22 title=%22Quick Add Sale%22 onclick=%22showTab('sales'); document.getElementById('customerName').focus();%22%3E%0D%0A            %3Ci class=%22fas fa-plus%22%3E%3C/i%3E%0D%0A        %3C/button%3E%0D%0A        %3Cbutton class=%22floating-btn%22 title=%22Dashboard%22 onclick=%22showTab('dashboard')%22%3E%0D%0A            %3Ci class=%22fas fa-chart-pie%22%3E%3C/i%3E%0D%0A        %3C/button%3E%0D%0A    %3C/div%3E\n %0D%0A%0D%0A\n",
                            "isNew": false,
                            "isApplied": true
                        }
                    ]
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "62480c1d-6321-46a7-a3f1-33cc77bb645c"
            },
            "createdAt": 1752346526721,
            "isInternal": false
        }
    ],
    "isAgent": true,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "autoApply": false
}
}