{
    "checksum": "b860c9bff4a17f8a66f5f2101b60a0f7f9767b18bb9763bef2028b7098da2211",
    "data": {
    "id": "5f1ea13c-1be2-458d-82a0-793b9a69212f",
    "createdAt": 1751270396143,
    "updatedAt": 1751272119118,
    "title": "Modern UI/UX Redesign Strategies",
    "messages": [
        {
            "id": "996db287-fd64-46b7-9b60-cfc754568579",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "redesign using below point"
                },
                {
                    "type": "text",
                    "text": "1. Design a modern, intuitive user interface that prioritizes:"
                },
                {
                    "type": "text",
                    "text": "- Easy navigation and clear menu structure"
                },
                {
                    "type": "text",
                    "text": "- Consistent visual elements and color scheme"
                },
                {
                    "type": "text",
                    "text": "- Responsive layout that works across all devices"
                },
                {
                    "type": "text",
                    "text": "- Accessible design features for all users"
                },
                {
                    "type": "text",
                    "text": "2. Enhance interactivity by incorporating:"
                },
                {
                    "type": "text",
                    "text": "- Smooth animations and transitions"
                },
                {
                    "type": "text",
                    "text": "- Clear feedback for user actions"
                },
                {
                    "type": "text",
                    "text": "- Interactive elements (buttons, forms, menus)"
                },
                {
                    "type": "text",
                    "text": "- Loading states and progress indicators"
                },
                {
                    "type": "text",
                    "text": "3. Implement these specific UI/UX elements:"
                },
                {
                    "type": "text",
                    "text": "- Clear call-to-action buttons"
                },
                {
                    "type": "text",
                    "text": "- Intuitive form layouts"
                },
                {
                    "type": "text",
                    "text": "- Readable typography with proper hierarchy"
                },
                {
                    "type": "text",
                    "text": "- Adequate white space and padding"
                },
                {
                    "type": "text",
                    "text": "- Error handling with user-friendly messages"
                },
                {
                    "type": "text",
                    "text": "4. Focus on these visual aspects:"
                },
                {
                    "type": "text",
                    "text": "- Color palette (provide specific hex codes)"
                },
                {
                    "type": "text",
                    "text": "- Typography choices (specify fonts)"
                },
                {
                    "type": "text",
                    "text": "- Icon style and placement"
                },
                {
                    "type": "text",
                    "text": "- Image guidelines and dimensions"
                },
                {
                    "type": "text",
                    "text": "- Component spacing and alignment"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "jewelry_sales_final.html",
                    "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n\r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#007bff\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n\r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n\r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n\r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 10px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 800px;\r\n            margin: 0 auto;\r\n            background: white;\r\n            border-radius: 15px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            overflow: hidden;\r\n        }\r\n\r\n        .header {\r\n            background: linear-gradient(45deg, #ff6b6b, #ffd93d);\r\n            color: white;\r\n            text-align: center;\r\n            padding: 20px;\r\n            font-size: 1.8em;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .tabs {\r\n            display: flex;\r\n            background: #f8f9fa;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: 15px;\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: #f8f9fa;\r\n            border: none;\r\n            font-size: 16px; \r\n            font-weight: 600;\r\n            transition: all 0.3s ease;\r\n            color: #6c757d;\r\n        }\r\n\r\n        .tab.active {\r\n            background: #4ecdc4;\r\n            color: white;\r\n        }\r\n\r\n        .tab-content {\r\n            display: none;\r\n            padding: 20px;\r\n            min-height: 500px;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            font-weight: 600;\r\n            color: #333;\r\n        }\r\n\r\n        .form-group input,\r\n        .form-group select {\r\n            width: 100%;\r\n            padding: 12px;\r\n            border: 2px solid #e9ecef;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .form-group input:focus,\r\n        .form-group select:focus {\r\n            outline: none;\r\n            border-color: #4ecdc4;\r\n        }\r\n\r\n        .btn {\r\n            width: 100%;\r\n            padding: 15px;\r\n            border: none;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            margin-top: 10px;\r\n            color: white;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .btn-primary {\r\n            background: #4ecdc4;\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: #ff6b6b;\r\n        }\r\n\r\n        .btn:hover {\r\n            opacity: 0.9;\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .btn:active {\r\n            transform: translateY(0);\r\n        }\r\n\r\n        .sales-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #4ecdc4;\r\n            position: relative;\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: #333;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .sales-item p {\r\n            margin: 3px 0;\r\n            color: #666;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n            gap: 15px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(45deg, #667eea, #764ba2);\r\n            color: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            text-align: center;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 28px;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 14px;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            margin-bottom: 20px;\r\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n            height: 400px;\r\n        }\r\n\r\n        .customer-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #ff6b6b;\r\n        }\r\n\r\n        .no-data {\r\n            text-align: center;\r\n            color: #666;\r\n            font-style: italic;\r\n            padding: 40px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .delete-btn {\r\n            background: #ff6b6b;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 12px;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 12px;\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: #ff5252;\r\n        }\r\n\r\n        .edit-btn {\r\n            background: #007bff;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 12px;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 12px;\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 60px;\r\n        }\r\n\r\n        .edit-btn:hover {\r\n            background: #0056b3;\r\n        }\r\n\r\n        .action-buttons {\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n            display: flex;\r\n            gap: 5px;\r\n        }\r\n\r\n        .sales-records-container {\r\n            max-height: 600px;\r\n            overflow-y: auto;\r\n            padding-right: 10px;\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .sales-records-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .sales-records-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .sales-records-container::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .sales-records-container::-webkit-scrollbar-thumb:hover {\r\n            background: #45b7b8;\r\n        }\r\n\r\n        /* Enhanced sales container styles */\r\n        .enhanced-sales-container {\r\n            background: #fafafa;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 8px;\r\n            max-height: 600px;\r\n            overflow-y: auto;\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar {\r\n            width: 10px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb {\r\n            background: linear-gradient(45deg, #4ecdc4, #44a08d);\r\n            border-radius: 10px;\r\n            border: 2px solid #f1f1f1;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb:hover {\r\n            background: linear-gradient(45deg, #45b7b8, #3a8f7e);\r\n        }\r\n\r\n        /* Sales search and filter styles */\r\n        .sales-filter-section {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            border-radius: 8px;\r\n            margin-bottom: 20px;\r\n            border: 1px solid #e9ecef;\r\n        }\r\n\r\n        .sales-search-input {\r\n            width: 100%;\r\n            padding: 10px;\r\n            border: 2px solid #e9ecef;\r\n            border-radius: 6px;\r\n            font-size: 14px;\r\n            transition: border-color 0.3s ease;\r\n        }\r\n\r\n        .sales-search-input:focus {\r\n            outline: none;\r\n            border-color: #4ecdc4;\r\n            box-shadow: 0 0 0 3px rgba(78, 205, 196, 0.1);\r\n        }\r\n\r\n        /* Enhanced customer container styles */\r\n        .enhanced-customers-container {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .enhanced-customers-container::-webkit-scrollbar {\r\n            width: 12px;\r\n        }\r\n\r\n        .enhanced-customers-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .enhanced-customers-container::-webkit-scrollbar-thumb {\r\n            background: linear-gradient(45deg, #667eea, #764ba2);\r\n            border-radius: 10px;\r\n            border: 2px solid #f1f1f1;\r\n        }\r\n\r\n        .enhanced-customers-container::-webkit-scrollbar-thumb:hover {\r\n            background: linear-gradient(45deg, #5a67d8, #6b46c1);\r\n        }\r\n\r\n        /* Enhanced customer card styles */\r\n        .customer-card {\r\n            background: white;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 10px;\r\n            padding: 15px;\r\n            margin-bottom: 15px;\r\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n            transition: all 0.3s ease;\r\n            position: relative;\r\n        }\r\n\r\n        .customer-card:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 4px 15px rgba(0,0,0,0.15);\r\n            border-color: #4ecdc4;\r\n        }\r\n\r\n        .customer-card-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: start;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .customer-name {\r\n            font-size: 18px;\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin: 0;\r\n        }\r\n\r\n        .customer-status {\r\n            padding: 4px 8px;\r\n            border-radius: 12px;\r\n            font-size: 11px;\r\n            font-weight: bold;\r\n            text-transform: uppercase;\r\n        }\r\n\r\n        .customer-status.active {\r\n            background: #d4edda;\r\n            color: #155724;\r\n        }\r\n\r\n        .customer-status.inactive {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n        }\r\n\r\n        .customer-info-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n            gap: 10px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .customer-info-item {\r\n            font-size: 14px;\r\n            color: #666;\r\n        }\r\n\r\n        .customer-info-label {\r\n            font-weight: 600;\r\n            color: #333;\r\n        }\r\n\r\n        .customer-purchase-stats {\r\n            background: #f8f9fa;\r\n            padding: 10px;\r\n            border-radius: 6px;\r\n            margin-top: 10px;\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\r\n            gap: 10px;\r\n            text-align: center;\r\n        }\r\n\r\n        .customer-stat-item {\r\n            padding: 5px;\r\n        }\r\n\r\n        .customer-stat-value {\r\n            font-size: 16px;\r\n            font-weight: bold;\r\n            color: #4ecdc4;\r\n        }\r\n\r\n        .customer-stat-label {\r\n            font-size: 11px;\r\n            color: #666;\r\n            text-transform: uppercase;\r\n        }\r\n\r\n        .edit-form {\r\n            background: #fff;\r\n            border: 2px solid #4ecdc4;\r\n            border-radius: 8px;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            position: relative;\r\n        }\r\n\r\n        .edit-form h4 {\r\n            color: #4ecdc4;\r\n            margin-bottom: 15px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .edit-form-row {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            gap: 10px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group label {\r\n            display: block;\r\n            margin-bottom: 3px;\r\n            font-weight: 600;\r\n            color: #333;\r\n            font-size: 12px;\r\n        }\r\n\r\n        .edit-form-group input,\r\n        .edit-form-group select,\r\n        .edit-form-group textarea {\r\n            width: 100%;\r\n            padding: 8px;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 4px;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .edit-form-buttons {\r\n            display: flex;\r\n            gap: 10px;\r\n            margin-top: 15px;\r\n        }\r\n\r\n        .edit-form-buttons button {\r\n            flex: 1;\r\n            padding: 10px;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .save-edit-btn {\r\n            background: #28a745;\r\n            color: white;\r\n        }\r\n\r\n        .save-edit-btn:hover {\r\n            background: #218838;\r\n        }\r\n\r\n        .cancel-edit-btn {\r\n            background: #6c757d;\r\n            color: white;\r\n        }\r\n\r\n        .cancel-edit-btn:hover {\r\n            background: #5a6268;\r\n        }\r\n\r\n        /* Customer search styles */\r\n        .customer-search-result {\r\n            padding: 12px;\r\n            cursor: pointer;\r\n            border-bottom: 1px solid #eee;\r\n            border-left: 3px solid transparent;\r\n            transition: all 0.2s ease;\r\n        }\r\n\r\n        .customer-search-result:hover {\r\n            background-color: #f8f9fa;\r\n            border-left-color: #4ecdc4;\r\n            transform: translateX(2px);\r\n        }\r\n\r\n        .customer-search-result:last-child {\r\n            border-bottom: none;\r\n        }\r\n\r\n        .customer-name {\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin-bottom: 4px;\r\n            font-size: 15px;\r\n        }\r\n\r\n        .customer-details {\r\n            font-size: 12px;\r\n            color: #666;\r\n            margin-bottom: 2px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n        }\r\n\r\n        .customer-stats {\r\n            font-size: 11px;\r\n            color: #4ecdc4;\r\n            margin-top: 8px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .customer-source-badge {\r\n            font-size: 10px;\r\n            color: #999;\r\n            padding: 2px 6px;\r\n            background: #f0f0f0;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .customer-last-purchase {\r\n            font-size: 10px;\r\n            color: #999;\r\n            font-style: italic;\r\n        }\r\n\r\n        /* Enhanced search results container */\r\n        #customer-search-results {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            border-radius: 8px;\r\n            border: 1px solid #ddd;\r\n            background: white;\r\n            max-height: 300px;\r\n            overflow-y: auto;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb:hover {\r\n            background: #45b7b8;\r\n        }\r\n\r\n        /* Section headers */\r\n        .section-header {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-bottom: 15px;\r\n            padding-bottom: 8px;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .section-icon {\r\n            margin-right: 8px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: 15px;\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 24px;\r\n            }\r\n\r\n            .header {\r\n                font-size: 1.4em;\r\n                padding: 15px;\r\n            }\r\n\r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                gap: 5px;\r\n            }\r\n\r\n            .tab {\r\n                flex: 1;\r\n                min-width: 100px;\r\n                font-size: 12px;\r\n                padding: 10px 5px;\r\n            }\r\n\r\n            .form-group {\r\n                margin-bottom: 15px;\r\n            }\r\n\r\n            .form-group input,\r\n            .form-group select,\r\n            .form-group textarea {\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n\r\n            .customer-item,\r\n            .sale-item {\r\n                padding: 15px;\r\n                margin-bottom: 15px;\r\n            }\r\n\r\n            .btn {\r\n                padding: 12px 16px;\r\n                font-size: 14px;\r\n                margin: 5px 2px;\r\n            }\r\n\r\n            /* Import section responsive */\r\n            .import-section {\r\n                flex-direction: column !important;\r\n                gap: 10px !important;\r\n            }\r\n\r\n            .import-section button {\r\n                width: 100% !important;\r\n                margin-bottom: 5px;\r\n            }\r\n        }\r\n\r\n        @media (max-width: 480px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n            }\r\n\r\n            .header {\r\n                font-size: 1.2em;\r\n                padding: 10px;\r\n                text-align: center;\r\n            }\r\n\r\n            .tabs {\r\n                justify-content: center;\r\n            }\r\n\r\n            .tab {\r\n                font-size: 11px;\r\n                padding: 8px 4px;\r\n            }\r\n\r\n            /* Customer database responsive design */\r\n            .customer-info-grid {\r\n                grid-template-columns: 1fr !important;\r\n                gap: 8px !important;\r\n            }\r\n\r\n            .customer-purchase-stats {\r\n                grid-template-columns: repeat(2, 1fr) !important;\r\n                gap: 8px !important;\r\n            }\r\n\r\n            .customer-card {\r\n                padding: 12px !important;\r\n                margin-bottom: 10px !important;\r\n            }\r\n\r\n            .enhanced-customers-container {\r\n                max-height: 400px !important;\r\n            }\r\n        }\r\n\r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n\r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n\r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n\r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"header\">\r\n            💎 Theia Jewelz\r\n        </div>\r\n\r\n        <div class=\"tabs\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\">📝 Sales Entry</button>\r\n            <button class=\"tab\" onclick=\"showTab('recent-sales')\">📋 Recent Sales</button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\">📊 Dashboard</button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\">👥 Customers</button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\">📈 Analytics</button>\r\n        </div>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\">\r\n            <h2>Add New Sale</h2>\r\n\r\n            <div id=\"success-message\" class=\"success-message\"></div>\r\n            <div id=\"error-message\" class=\"error-message\"></div>\r\n\r\n            <form id=\"sales-form\">\r\n                <!-- Customer Search Section -->\r\n                <div class=\"form-group\">\r\n                    <label for=\"customerSearch\">🔍 Search Existing Customer</label>\r\n                    <div style=\"position: relative;\">\r\n                        <input type=\"text\" id=\"customerSearch\" placeholder=\"Type customer name or phone to search...\"\r\n                               oninput=\"searchCustomers()\" onkeydown=\"handleSearchKeydown(event)\" autocomplete=\"off\"\r\n                               style=\"padding-right: 40px;\">\r\n                        <button type=\"button\" onclick=\"clearCustomerSearch()\"\r\n                                style=\"position: absolute; right: 10px; top: 50%; transform: translateY(-50%);\r\n                                       background: none; border: none; cursor: pointer; font-size: 16px;\"\r\n                                title=\"Clear search\">❌</button>\r\n                        <div id=\"customer-search-results\" style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                             background: white; border: 1px solid #ddd; border-top: none; border-radius: 0 0 8px 8px;\r\n                             max-height: 200px; overflow-y: auto; z-index: 1000; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\">\r\n                        </div>\r\n                    </div>\r\n                    <small style=\"color: #666; font-size: 12px;\">💡 Search from All Customers (<span id=\"total-customers\">0</span> customers) - includes database & sales records. Supports name, phone & email search</small>\r\n                </div>\r\n\r\n                <!-- Customer Details Section -->\r\n                <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; color: #4ecdc4; font-size: 16px;\">👤 Customer Information</h4>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n                        <label for=\"customerName\">Customer Name *</label>\r\n                        <input type=\"text\" id=\"customerName\" required placeholder=\"Enter customer name\"\r\n                               style=\"background: white;\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n                        <label for=\"customerPhone\">Customer Phone</label>\r\n                        <input type=\"tel\" id=\"customerPhone\" placeholder=\"Enter phone number\"\r\n                               style=\"background: white;\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\r\n                        <label for=\"customerAddress\">Customer Address</label>\r\n                        <textarea id=\"customerAddress\" rows=\"2\" placeholder=\"Enter customer address (optional)\"\r\n                                  style=\"background: white; width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Item Details Section -->\r\n                <div style=\"background: #fff; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; color: #ff6b6b; font-size: 16px;\">💎 Item Information</h4>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"itemName\">Item Name *</label>\r\n                        <input type=\"text\" id=\"itemName\" required placeholder=\"e.g., Gold Plated Necklace\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"category\">Category *</label>\r\n                        <select id=\"category\" required>\r\n                            <option value=\"\">Select Category</option>\r\n                            <option value=\"Necklaces\">Necklaces</option>\r\n                            <option value=\"Earrings\">Earrings</option>\r\n                            <option value=\"Bracelets\">Bracelets</option>\r\n                            <option value=\"Rings\">Rings</option>\r\n                            <option value=\"Anklets\">Anklets</option>\r\n                            <option value=\"Sets\">Sets</option>\r\n                            <option value=\"Bangles\">Bangles</option>\r\n                            <option value=\"Chains\">Chains</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\r\n                        <label for=\"saleDate\">Sale Date *</label>\r\n                        <input type=\"date\" id=\"saleDate\" required>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Pricing Section -->\r\n                <div style=\"background: #fff; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; color: #28a745; font-size: 16px;\">💰 Pricing Information</h4>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"costPrice\">Cost Price (₹) *</label>\r\n                        <input type=\"number\" id=\"costPrice\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"sellingPrice\">Selling Price (₹) *</label>\r\n                        <input type=\"number\" id=\"sellingPrice\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\r\n                        <label for=\"profit\">Profit (₹)</label>\r\n                        <input type=\"number\" id=\"profit\" readonly placeholder=\"Auto-calculated\" style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"addSaleRecord()\">💾 Add Sale Record</button>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n        <!-- Recent Sales Tab -->\r\n        <div id=\"recent-sales\" class=\"tab-content\">\r\n            <h2>📋 Recent Sales & Import</h2>\r\n\r\n            <!-- Sales Import Section -->\r\n            <div style=\"margin-bottom: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px; border: 2px solid #e9ecef;\">\r\n                <h3 style=\"margin: 0 0 15px 0; color: #4ecdc4;\">📤 Bulk Import Sales</h3>\r\n                <p style=\"margin: 0 0 15px 0; color: #666; font-size: 14px;\">Import multiple sales records from CSV or Excel file</p>\r\n\r\n                <div style=\"display: flex; gap: 10px; align-items: center; flex-wrap: wrap;\" class=\"import-section\">\r\n                    <input type=\"file\" id=\"sales-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importSales(event)\">\r\n                    <button class=\"btn btn-primary\" onclick=\"document.getElementById('sales-import-file').click()\" style=\"width: auto; padding: 10px 16px; font-size: 14px;\" title=\"Import sales from CSV or Excel file\">\r\n                        📤 Import Sales Data\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"downloadSalesTemplate()\" style=\"width: auto; padding: 10px 16px; font-size: 14px; background-color: #6c757d; color: white;\" title=\"Download sample CSV template\">\r\n                        📋 Download Template\r\n                    </button>\r\n                    <small style=\"color: #666; font-size: 12px;\">Supports CSV and Excel files with required columns: Item Name, Category, Cost Price, Selling Price, Sale Date, Customer Name</small>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Recent Sales Section -->\r\n            <div style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">📋 Sales Records (<span id=\"sales-count\">0</span>)</h3>\r\n                            <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; font-size: 18px; cursor: pointer; padding: 8px 12px; border-radius: 6px; transition: all 0.3s ease;\" title=\"Expand/Collapse Sales Summary\">\r\n                                ▼\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                            <button class=\"btn\" onclick=\"downloadExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                📥 Export All\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"sales-content-container\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                        <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; display: none; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                            <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Sales Summary</h4>\r\n                            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Sales</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Cost</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-selling\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Profit</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Search and Filter Section -->\r\n                        <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                            <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                <div>\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Sales</label>\r\n                                    <input type=\"text\" id=\"sales-search\" placeholder=\"Search by item name, customer name, or category...\"\r\n                                           oninput=\"filterSales()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                </div>\r\n                                <div style=\"display: flex; gap: 10px;\">\r\n                                    <button onclick=\"clearSalesFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        🔄 Clear\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Sales Records Container with Enhanced Scrolling -->\r\n                        <div class=\"enhanced-sales-container\" style=\"max-height: 600px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; background: #fafafa;\">\r\n                            <div id=\"sales-records\" style=\"padding: 10px;\"></div>\r\n                            <div id=\"load-more-container\" style=\"text-align: center; padding: 20px; display: none;\">\r\n                                <button id=\"load-more-btn\" class=\"btn btn-primary\" onclick=\"loadMoreSales()\" style=\"width: auto; padding: 12px 24px; font-size: 14px; border-radius: 20px;\">\r\n                                    📖 Load More Sales\r\n                                </button>\r\n                            </div>\r\n                            <div id=\"no-sales-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                <h3 style=\"color: #999;\">📭 No Sales Records Found</h3>\r\n                                <p>Add your first sale in the Sales Entry tab or import existing data!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n\r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n\r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n\r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n\r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n\r\n            <!-- Enhanced Customer Database Section -->\r\n            <div style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <!-- Header Section -->\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">👥 Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                            <button id=\"customer-stats-toggle\" onclick=\"toggleCustomerStats()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; font-size: 16px; cursor: pointer; padding: 8px 12px; border-radius: 6px; transition: all 0.3s ease;\" title=\"Show/Hide Customer Statistics\">\r\n                                📊 Stats\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                            <input type=\"file\" id=\"customer-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importCustomers(event)\">\r\n                            <button class=\"btn\" onclick=\"document.getElementById('customer-import-file').click()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\" title=\"Import customers from CSV or Excel file\">\r\n                                📤 Import\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomerTemplate()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📋 Template\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomersExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📥 Export\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customer Statistics Panel -->\r\n                <div id=\"customer-stats-panel\" style=\"display: none; background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Customer Statistics</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;\">\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Customers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-active-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Active Buyers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-avg-orders\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Orders</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-clv\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total CLV</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Search and Filter Section -->\r\n                <div style=\"padding: 20px; background: #f8f9fa; border-bottom: 1px solid #e9ecef;\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr auto auto; gap: 15px; align-items: end;\">\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Customers</label>\r\n                            <input type=\"text\" id=\"customer-database-search\" placeholder=\"Search by name, phone, email, or address...\"\r\n                                   oninput=\"filterCustomerDatabase()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                        </div>\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">📋 Sort By</label>\r\n                            <select id=\"customer-sort-select\" onchange=\"sortCustomerDatabase()\" style=\"padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                <option value=\"name-asc\">Name (A-Z)</option>\r\n                                <option value=\"name-desc\">Name (Z-A)</option>\r\n                                <option value=\"purchases-desc\">Most Purchases</option>\r\n                                <option value=\"purchases-asc\">Least Purchases</option>\r\n                                <option value=\"spending-desc\">Highest Spending</option>\r\n                                <option value=\"spending-asc\">Lowest Spending</option>\r\n                                <option value=\"recent-desc\">Recently Added</option>\r\n                                <option value=\"recent-asc\">Oldest Added</option>\r\n                            </select>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"clearCustomerDatabaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                🔄 Clear\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customers List Container with Enhanced UI -->\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"customer-view-mode\" style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <div style=\"font-size: 14px; color: #666;\">\r\n                            Showing <span id=\"customers-showing\">0</span> of <span id=\"customers-total\">0</span> customers\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; align-items: center;\">\r\n                            <label style=\"font-size: 14px; color: #666;\">View:</label>\r\n                            <select id=\"customers-per-page\" onchange=\"changeCustomersPerPage()\" style=\"padding: 5px 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px;\">\r\n                                <option value=\"10\">10 per page</option>\r\n                                <option value=\"25\" selected>25 per page</option>\r\n                                <option value=\"50\">50 per page</option>\r\n                                <option value=\"100\">100 per page</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Enhanced Customer Cards Container -->\r\n                    <div class=\"enhanced-customers-container\" style=\"max-height: 500px; overflow-y: auto; background: #fafafa; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;\">\r\n                        <div id=\"customers-list-container\"></div>\r\n\r\n                        <!-- Pagination Controls -->\r\n                        <div id=\"customer-pagination\" style=\"display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 20px; padding: 15px;\">\r\n                            <button id=\"prev-customers-btn\" onclick=\"previousCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                ◀ Previous\r\n                            </button>\r\n                            <span id=\"customer-page-info\" style=\"font-size: 14px; color: #666; margin: 0 15px;\">Page 1 of 1</span>\r\n                            <button id=\"next-customers-btn\" onclick=\"nextCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                Next ▶\r\n                            </button>\r\n                        </div>\r\n\r\n                        <!-- No Customers Message -->\r\n                        <div id=\"no-customers-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                            <h3 style=\"color: #999;\">👥 No Customers Found</h3>\r\n                            <p>Add your first customer above or import existing customer data!</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n\r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n        let displayedSalesCount = 20; // Initial number of sales to show\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n\r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n\r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n\r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Initialize Sales Section\r\n        function initializeSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            // Set expanded state by default\r\n            container.style.maxHeight = '1000px';\r\n            container.style.marginTop = '10px';\r\n            container.style.opacity = '1';\r\n            toggleBtn.innerHTML = '▼';\r\n            toggleBtn.title = 'Collapse Recent Sales';\r\n            toggleBtn.style.transform = 'rotate(0deg)';\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (container.style.maxHeight && container.style.maxHeight !== '0px') {\r\n                // Collapse\r\n                container.style.maxHeight = '0px';\r\n                container.style.marginTop = '0px';\r\n                container.style.opacity = '0';\r\n                toggleBtn.innerHTML = '▶';\r\n                toggleBtn.title = 'Expand Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(-90deg)';\r\n            } else {\r\n                // Expand\r\n                container.style.maxHeight = '1000px';\r\n                container.style.marginTop = '10px';\r\n                container.style.opacity = '1';\r\n                toggleBtn.innerHTML = '▼';\r\n                toggleBtn.title = 'Collapse Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(0deg)';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n\r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n\r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n\r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n\r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n\r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n\r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n\r\n            document.body.appendChild(updateDiv);\r\n\r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n\r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Initialize sales section as expanded\r\n                initializeSalesSection();\r\n\r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n\r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n\r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n\r\n            const cleanedData = [];\r\n\r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n\r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n\r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n\r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n\r\n                    cleanedData.push(cleanedSale);\r\n\r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n\r\n            return cleanedData;\r\n        }\r\n\r\n\r\n\r\n        // Update customer count in search hint to include all unique customers\r\n        function updateCustomerCount() {\r\n            try {\r\n                const countElement = document.getElementById('total-customers');\r\n                if (countElement) {\r\n                    const allUniqueCustomers = getUniqueCustomers();\r\n                    countElement.textContent = allUniqueCustomers.length;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating customer count:', error);\r\n            }\r\n        }\r\n\r\n        // Import customers from CSV/Excel file\r\n        function importCustomers(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVCustomers(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelCustomers(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import customers from CSV\r\n        function importCSVCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\r\n                    const requiredHeaders = ['name', 'phone'];\r\n                    const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\r\n\r\n                    if (missingHeaders.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingHeaders.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Find column indices\r\n                    const nameIndex = headers.indexOf('name');\r\n                    const phoneIndex = headers.indexOf('phone');\r\n                    const addressIndex = headers.indexOf('address');\r\n                    const emailIndex = headers.indexOf('email');\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        const customerName = values[nameIndex];\r\n                        const customerPhone = values[phoneIndex] || '';\r\n                        const customerAddress = addressIndex >= 0 ? values[addressIndex] || '' : '';\r\n                        const customerEmail = emailIndex >= 0 ? values[emailIndex] || '' : '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import customers from Excel\r\n        function importExcelCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    jsonData.forEach(row => {\r\n                        const customerName = row.Name || row.name || row.customer_name || row['Customer Name'];\r\n                        const customerPhone = row.Phone || row.phone || row.mobile || row.Mobile || '';\r\n                        const customerAddress = row.Address || row.address || '';\r\n                        const customerEmail = row.Email || row.email || '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download customer import template\r\n        function downloadCustomerTemplate() {\r\n            const csvContent = [\r\n                'name,phone,address,email',\r\n                'John Doe,+91-9876543210,123 Main Street Mumbai,john@example.com',\r\n                'Jane Smith,+91-8765432109,456 Oak Avenue Delhi,jane@example.com',\r\n                'Mike Johnson,+91-7654321098,789 Pine Road Bangalore,mike@example.com'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'customer_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Customer import template downloaded! Use this format for importing customers.');\r\n        }\r\n\r\n        // Enhanced Customer Database Functionality\r\n        let currentCustomerPage = 1;\r\n        let customersPerPage = 25;\r\n        let filteredCustomers = [];\r\n        let isCustomerSearchActive = false;\r\n        let currentCustomerSort = 'name-asc';\r\n\r\n        function toggleCustomerStats() {\r\n            const panel = document.getElementById('customer-stats-panel');\r\n            const button = document.getElementById('customer-stats-toggle');\r\n\r\n            if (panel.style.display === 'none') {\r\n                panel.style.display = 'block';\r\n                button.textContent = '📊 Hide Stats';\r\n                updateCustomerStatistics();\r\n            } else {\r\n                panel.style.display = 'none';\r\n                button.textContent = '📊 Stats';\r\n            }\r\n        }\r\n\r\n        function updateCustomerStatistics() {\r\n            const totalCustomers = customersData.length;\r\n            const activeCustomers = customersData.filter(customer => {\r\n                const purchases = salesData.filter(sale => sale.customerName === customer.name);\r\n                return purchases.length > 0;\r\n            }).length;\r\n\r\n            const totalOrders = salesData.length;\r\n            const avgOrdersPerCustomer = activeCustomers > 0 ? (totalOrders / activeCustomers).toFixed(1) : 0;\r\n\r\n            const totalCLV = customersData.reduce((sum, customer) => {\r\n                const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                const customerSpending = customerSales.reduce((total, sale) => total + sale.sellingPrice, 0);\r\n                return sum + customerSpending;\r\n            }, 0);\r\n\r\n            document.getElementById('stat-total-customers').textContent = totalCustomers;\r\n            document.getElementById('stat-active-customers').textContent = activeCustomers;\r\n            document.getElementById('stat-avg-orders').textContent = avgOrdersPerCustomer;\r\n            document.getElementById('stat-total-clv').textContent = `₹${totalCLV.toFixed(2)}`;\r\n        }\r\n\r\n        function filterCustomerDatabase() {\r\n            const searchTerm = document.getElementById('customer-database-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                isCustomerSearchActive = false;\r\n                filteredCustomers = [];\r\n                currentCustomerPage = 1;\r\n                displayCustomerDatabase();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return;\r\n            }\r\n\r\n            filteredCustomers = customersData.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                (customer.phone && customer.phone.toLowerCase().includes(searchTerm)) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm)) ||\r\n                (customer.address && customer.address.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isCustomerSearchActive = true;\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function sortCustomerDatabase() {\r\n            currentCustomerSort = document.getElementById('customer-sort-select').value;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function clearCustomerDatabaseFilter() {\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n            currentCustomerSort = 'name-asc';\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function changeCustomersPerPage() {\r\n            customersPerPage = parseInt(document.getElementById('customers-per-page').value);\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function displayCustomerDatabase() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const sortedData = sortCustomersData(dataToDisplay);\r\n\r\n            const totalCustomers = sortedData.length;\r\n            const startIndex = (currentCustomerPage - 1) * customersPerPage;\r\n            const endIndex = Math.min(startIndex + customersPerPage, totalCustomers);\r\n            const currentPageData = sortedData.slice(startIndex, endIndex);\r\n\r\n            const container = document.getElementById('customers-list-container');\r\n            const noCustomersMessage = document.getElementById('no-customers-message');\r\n\r\n            if (totalCustomers === 0) {\r\n                container.innerHTML = '';\r\n                noCustomersMessage.style.display = 'block';\r\n                updateCustomerPagination(0, 0, 0);\r\n                return;\r\n            }\r\n\r\n            noCustomersMessage.style.display = 'none';\r\n\r\n            container.innerHTML = currentPageData.map(customer => createCustomerCardHTML(customer)).join('');\r\n\r\n            // Update pagination\r\n            updateCustomerPagination(currentCustomerPage, Math.ceil(totalCustomers / customersPerPage), totalCustomers);\r\n\r\n            // Update showing info\r\n            document.getElementById('customers-showing').textContent = `${startIndex + 1}-${endIndex}`;\r\n            document.getElementById('customers-total').textContent = totalCustomers;\r\n        }\r\n\r\n        function sortCustomersData(data) {\r\n            const sortedData = [...data];\r\n\r\n            switch (currentCustomerSort) {\r\n                case 'name-asc':\r\n                    return sortedData.sort((a, b) => a.name.localeCompare(b.name));\r\n                case 'name-desc':\r\n                    return sortedData.sort((a, b) => b.name.localeCompare(a.name));\r\n                case 'purchases-desc':\r\n                case 'purchases-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aPurchases = salesData.filter(sale => sale.customerName === a.name).length;\r\n                        const bPurchases = salesData.filter(sale => sale.customerName === b.name).length;\r\n                        return currentCustomerSort === 'purchases-desc' ? bPurchases - aPurchases : aPurchases - bPurchases;\r\n                    });\r\n                case 'spending-desc':\r\n                case 'spending-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aSpending = salesData.filter(sale => sale.customerName === a.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        const bSpending = salesData.filter(sale => sale.customerName === b.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        return currentCustomerSort === 'spending-desc' ? bSpending - aSpending : aSpending - bSpending;\r\n                    });\r\n                case 'recent-desc':\r\n                    return sortedData.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n                case 'recent-asc':\r\n                    return sortedData.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\r\n                default:\r\n                    return sortedData;\r\n            }\r\n        }\r\n\r\n        function createCustomerCardHTML(customer) {\r\n            const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n            const totalPurchases = customerSales.length;\r\n            const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const avgOrderValue = totalPurchases > 0 ? (totalSpent / totalPurchases) : 0;\r\n            const lastPurchase = customerSales.length > 0 ?\r\n                Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime())) : null;\r\n\r\n            const isActive = totalPurchases > 0;\r\n            const statusClass = isActive ? 'active' : 'inactive';\r\n            const statusText = isActive ? 'Active' : 'Inactive';\r\n\r\n            return `\r\n                <div class=\"customer-card\">\r\n                    <div class=\"customer-card-header\">\r\n                        <h4 class=\"customer-name\">👤 ${customer.name}</h4>\r\n                        <span class=\"customer-status ${statusClass}\">${statusText}</span>\r\n                    </div>\r\n\r\n                    <div class=\"customer-info-grid\">\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📞 Phone:</span>\r\n                            ${customer.phone || 'Not provided'}\r\n                        </div>\r\n                        ${customer.email ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📧 Email:</span>\r\n                                ${customer.email}\r\n                            </div>\r\n                        ` : ''}\r\n                        ${customer.address ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📍 Address:</span>\r\n                                ${customer.address}\r\n                            </div>\r\n                        ` : ''}\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📅 Added:</span>\r\n                            ${new Date(customer.createdAt).toLocaleDateString()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"customer-purchase-stats\">\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">${totalPurchases}</div>\r\n                            <div class=\"customer-stat-label\">Total Orders</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${totalSpent.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Total Spent</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${avgOrderValue.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Avg Order</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">\r\n                                ${lastPurchase ? new Date(lastPurchase).toLocaleDateString() : 'Never'}\r\n                            </div>\r\n                            <div class=\"customer-stat-label\">Last Purchase</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        function updateCustomerPagination(currentPage, totalPages, totalCustomers) {\r\n            const prevBtn = document.getElementById('prev-customers-btn');\r\n            const nextBtn = document.getElementById('next-customers-btn');\r\n            const pageInfo = document.getElementById('customer-page-info');\r\n\r\n            prevBtn.disabled = currentPage <= 1;\r\n            nextBtn.disabled = currentPage >= totalPages;\r\n\r\n            pageInfo.textContent = totalPages > 0 ? `Page ${currentPage} of ${totalPages}` : 'No pages';\r\n\r\n            // Update button styles based on disabled state\r\n            prevBtn.style.opacity = prevBtn.disabled ? '0.5' : '1';\r\n            nextBtn.style.opacity = nextBtn.disabled ? '0.5' : '1';\r\n            prevBtn.style.cursor = prevBtn.disabled ? 'not-allowed' : 'pointer';\r\n            nextBtn.style.cursor = nextBtn.disabled ? 'not-allowed' : 'pointer';\r\n        }\r\n\r\n        function previousCustomersPage() {\r\n            if (currentCustomerPage > 1) {\r\n                currentCustomerPage--;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        function nextCustomersPage() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const totalPages = Math.ceil(dataToDisplay.length / customersPerPage);\r\n\r\n            if (currentCustomerPage < totalPages) {\r\n                currentCustomerPage++;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        // Import sales from CSV/Excel file\r\n        function importSales(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVSales(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelSales(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import sales from CSV\r\n        function importCSVSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase().replace(/\"/g, ''));\r\n                    const requiredHeaders = ['item_name', 'category', 'cost_price', 'selling_price', 'sale_date', 'customer_name'];\r\n\r\n                    // Check for alternative header names\r\n                    const headerMapping = {\r\n                        'item_name': ['item_name', 'item name', 'itemname', 'product_name', 'product name', 'name'],\r\n                        'category': ['category', 'item_category', 'product_category', 'type'],\r\n                        'cost_price': ['cost_price', 'cost price', 'costprice', 'cost', 'purchase_price', 'cp'],\r\n                        'selling_price': ['selling_price', 'selling price', 'sellingprice', 'price', 'sale_price', 'sp'],\r\n                        'sale_date': ['sale_date', 'sale date', 'saledate', 'date', 'purchase_date'],\r\n                        'customer_name': ['customer_name', 'customer name', 'customername', 'customer', 'buyer']\r\n                    };\r\n\r\n                    // Find column indices\r\n                    const columnIndices = {};\r\n                    let missingColumns = [];\r\n\r\n                    for (const [key, alternatives] of Object.entries(headerMapping)) {\r\n                        const foundIndex = headers.findIndex(h => alternatives.includes(h));\r\n                        if (foundIndex >= 0) {\r\n                            columnIndices[key] = foundIndex;\r\n                        } else {\r\n                            missingColumns.push(key);\r\n                        }\r\n                    }\r\n\r\n                    if (missingColumns.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingColumns.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Optional columns\r\n                    const phoneIndex = headers.findIndex(h => ['customer_phone', 'customer phone', 'phone', 'mobile'].includes(h));\r\n                    const addressIndex = headers.findIndex(h => ['customer_address', 'customer address', 'address'].includes(h));\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        try {\r\n                            const itemName = values[columnIndices.item_name]?.trim();\r\n                            const category = values[columnIndices.category]?.trim();\r\n                            const costPrice = parseFloat(values[columnIndices.cost_price]) || 0;\r\n                            const sellingPrice = parseFloat(values[columnIndices.selling_price]) || 0;\r\n                            const saleDate = values[columnIndices.sale_date]?.trim();\r\n                            const customerName = values[columnIndices.customer_name]?.trim();\r\n                            const customerPhone = phoneIndex >= 0 ? values[phoneIndex]?.trim() || '' : '';\r\n                            const customerAddress = addressIndex >= 0 ? values[addressIndex]?.trim() || '' : '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${i + 1}: Missing required fields`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${i + 1}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate date format\r\n                            const dateObj = new Date(saleDate);\r\n                            if (isNaN(dateObj.getTime())) {\r\n                                errors.push(`Row ${i + 1}: Invalid date format \"${saleDate}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: saleDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${i + 1}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import sales from Excel\r\n        function importExcelSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    jsonData.forEach((row, index) => {\r\n                        try {\r\n                            // Try different column name variations\r\n                            const itemName = row['Item Name'] || row['Item_Name'] || row['itemname'] || row['Product Name'] || row['Name'];\r\n                            const category = row['Category'] || row['Item Category'] || row['Type'];\r\n                            const costPrice = parseFloat(row['Cost Price'] || row['Cost_Price'] || row['costprice'] || row['Cost'] || row['CP']) || 0;\r\n                            const sellingPrice = parseFloat(row['Selling Price'] || row['Selling_Price'] || row['sellingprice'] || row['Price'] || row['SP']) || 0;\r\n                            const saleDate = row['Sale Date'] || row['Sale_Date'] || row['saledate'] || row['Date'];\r\n                            const customerName = row['Customer Name'] || row['Customer_Name'] || row['customername'] || row['Customer'];\r\n                            const customerPhone = row['Customer Phone'] || row['Customer_Phone'] || row['Phone'] || row['Mobile'] || '';\r\n                            const customerAddress = row['Customer Address'] || row['Customer_Address'] || row['Address'] || '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${index + 2}: Missing required fields`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${index + 2}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate and format date\r\n                            let formattedDate = saleDate;\r\n                            if (saleDate instanceof Date) {\r\n                                formattedDate = saleDate.toISOString().split('T')[0];\r\n                            } else if (typeof saleDate === 'string') {\r\n                                const dateObj = new Date(saleDate);\r\n                                if (isNaN(dateObj.getTime())) {\r\n                                    errors.push(`Row ${index + 2}: Invalid date format \"${saleDate}\"`);\r\n                                    skippedCount++;\r\n                                    return;\r\n                                }\r\n                                formattedDate = dateObj.toISOString().split('T')[0];\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: formattedDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${index + 2}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download sales import template\r\n        function downloadSalesTemplate() {\r\n            const csvContent = [\r\n                'item_name,category,cost_price,selling_price,sale_date,customer_name,customer_phone,customer_address',\r\n                'Gold Plated Necklace,Necklaces,500,800,2024-01-15,John Doe,+91-9876543210,123 Main Street Mumbai',\r\n                'Diamond Earrings,Earrings,1000,1500,2024-01-16,Jane Smith,+91-8765432109,456 Oak Avenue Delhi',\r\n                'Silver Bracelet,Bracelets,300,450,2024-01-17,Mike Johnson,+91-7654321098,789 Pine Road Bangalore'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'sales_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Sales import template downloaded! Use this format for importing sales data.');\r\n        }\r\n\r\n        // Sales search and filter functionality\r\n        let filteredSalesData = [];\r\n        let isSearchActive = false;\r\n\r\n        function filterSales() {\r\n            const searchTerm = document.getElementById('sales-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                // Clear filter\r\n                isSearchActive = false;\r\n                filteredSalesData = [];\r\n                resetSalesDisplay();\r\n                loadSalesRecords();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return; // Wait for at least 2 characters\r\n            }\r\n\r\n            // Filter sales data\r\n            filteredSalesData = salesData.filter(sale =>\r\n                sale.itemName.toLowerCase().includes(searchTerm) ||\r\n                sale.customerName.toLowerCase().includes(searchTerm) ||\r\n                sale.category.toLowerCase().includes(searchTerm) ||\r\n                (sale.customerPhone && sale.customerPhone.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isSearchActive = true;\r\n            displayFilteredSales();\r\n        }\r\n\r\n        function displayFilteredSales() {\r\n            const salesRecordsDiv = document.getElementById('sales-records');\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n            const noSalesMessage = document.getElementById('no-sales-message');\r\n\r\n            if (filteredSalesData.length === 0) {\r\n                salesRecordsDiv.innerHTML = '';\r\n                loadMoreContainer.style.display = 'none';\r\n                noSalesMessage.style.display = 'block';\r\n                noSalesMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Sales Found</h3>\r\n                    <p>No sales records match your search criteria.</p>\r\n                `;\r\n                document.getElementById('sales-count').textContent = '0';\r\n                return;\r\n            }\r\n\r\n            // Display all filtered results\r\n            salesRecordsDiv.innerHTML = filteredSalesData.map(sale => createSaleItemHTML(sale)).join('');\r\n            loadMoreContainer.style.display = 'none';\r\n            noSalesMessage.style.display = 'none';\r\n            document.getElementById('sales-count').textContent = filteredSalesData.length;\r\n\r\n            // Update summary for filtered data\r\n            updateSalesSummary(filteredSalesData);\r\n        }\r\n\r\n        function clearSalesFilter() {\r\n            document.getElementById('sales-search').value = '';\r\n            isSearchActive = false;\r\n            filteredSalesData = [];\r\n            resetSalesDisplay();\r\n            loadSalesRecords();\r\n        }\r\n\r\n        function updateSalesSummary(dataToSummarize = null) {\r\n            const dataToUse = dataToSummarize || salesData;\r\n\r\n            const totalSales = dataToUse.length;\r\n            const totalCost = dataToUse.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = dataToUse.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = totalSelling - totalCost;\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n        }\r\n\r\n        function createSaleItemHTML(sale) {\r\n            const saleDate = new Date(sale.saleDate);\r\n            const formattedDate = saleDate.toLocaleDateString('en-IN', {\r\n                day: '2-digit',\r\n                month: 'short',\r\n                year: 'numeric'\r\n            });\r\n\r\n            const profitColor = sale.profit > 0 ? '#4ecdc4' : sale.profit < 0 ? '#ff6b6b' : '#666';\r\n\r\n            return `\r\n                <div class=\"sales-item\" style=\"position: relative; margin-bottom: 15px; padding: 15px; background: white; border-radius: 8px; border-left: 4px solid ${profitColor}; box-shadow: 0 2px 5px rgba(0,0,0,0.1);\">\r\n                    <div class=\"action-buttons\" style=\"position: absolute; top: 10px; right: 10px; display: flex; gap: 5px;\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale('${sale.id}')\" style=\"background: #007bff; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            ✏️ Edit\r\n                        </button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale('${sale.id}')\" style=\"background: #ff6b6b; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            🗑️ Delete\r\n                        </button>\r\n                    </div>\r\n\r\n                    <h4 style=\"margin: 0 0 8px 0; color: #333; font-size: 16px; padding-right: 120px;\">${sale.itemName}</h4>\r\n\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 14px; color: #666;\">\r\n                        <p style=\"margin: 0;\"><strong>📂 Category:</strong> ${sale.category}</p>\r\n                        <p style=\"margin: 0;\"><strong>📅 Date:</strong> ${formattedDate}</p>\r\n                        <p style=\"margin: 0;\"><strong>💰 Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>💵 Selling:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>📈 Profit:</strong> <span style=\"color: ${profitColor}; font-weight: bold;\">₹${sale.profit.toFixed(2)}</span></p>\r\n                        <p style=\"margin: 0;\"><strong>👤 Customer:</strong> ${sale.customerName}</p>\r\n                    </div>\r\n\r\n                    ${sale.customerPhone ? `<p style=\"margin: 8px 0 0 0; font-size: 13px; color: #888;\"><strong>📞 Phone:</strong> ${sale.customerPhone}</p>` : ''}\r\n                    ${sale.customerAddress ? `<p style=\"margin: 4px 0 0 0; font-size: 13px; color: #888;\"><strong>📍 Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Customer search functionality\r\n        function searchCustomers() {\r\n            const searchTerm = document.getElementById('customerSearch').value.trim().toLowerCase();\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            selectedSearchIndex = -1; // Reset selection\r\n\r\n            if (searchTerm.length < 2) {\r\n                resultsContainer.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Get unique customers from both database and sales data\r\n            const allUniqueCustomers = getUniqueCustomers();\r\n            \r\n            // Update total customer count\r\n            document.getElementById('total-customers').textContent = allUniqueCustomers.length;\r\n\r\n            // Filter customers based on search term\r\n            const matchingCustomers = allUniqueCustomers.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                customer.phone.toLowerCase().includes(searchTerm) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            if (matchingCustomers.length === 0) {\r\n                resultsContainer.innerHTML = '<div style=\"padding: 10px; color: #666; font-style: italic;\">No customers found. You can enter new customer details below.</div>';\r\n                resultsContainer.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            // Display matching customers\r\n            resultsContainer.innerHTML = matchingCustomers.map(customer => {\r\n                const lastPurchaseText = customer.lastPurchase \r\n                    ? `Last purchase: ${new Date(customer.lastPurchase).toLocaleDateString()}`\r\n                    : 'No purchases yet';\r\n                \r\n                const sourceIcon = customer.source === 'database' ? '📁' : '💳';\r\n                const sourceText = customer.source === 'database' ? 'In Customer DB' : 'From Sales Only';\r\n                \r\n                return `\r\n                <div style=\"padding: 12px; cursor: pointer; border-bottom: 1px solid #eee; transition: all 0.2s; border-left: 3px solid transparent;\"\r\n                     onclick=\"selectCustomer('${escapeQuotes(customer.name)}', '${escapeQuotes(customer.phone)}', '${escapeQuotes(customer.address)}', '${escapeQuotes(customer.email)}')\"\r\n                     onmouseover=\"this.style.backgroundColor='#f8f9fa'; this.style.borderLeftColor='#4ecdc4';\"\r\n                     onmouseout=\"this.style.backgroundColor='white'; this.style.borderLeftColor='transparent';\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 4px;\">\r\n                            <div style=\"font-weight: bold; color: #333; font-size: 15px;\">${customer.name}</div>\r\n                    <div style=\"font-size: 10px; color: #999; padding: 2px 6px; background: #f0f0f0; border-radius: 10px;\">\r\n                            ${sourceIcon} ${sourceText}\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 6px;\">\r\n                        ${customer.phone !== 'Not provided' ? \r\n                                `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📞 ${customer.phone}</div>` : ''}\r\n                        ${customer.email && customer.email !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📧 ${customer.email}</div>` : ''}\r\n                    ${customer.address && customer.address !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #888; margin-bottom: 6px; line-height: 1.3;\">📍 ${customer.address}</div>` : ''}\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 8px;\">\r\n                        </div>\r\n                    <div style=\"font-size: 11px; color: #4ecdc4; font-weight: 600;\">\r\n                            ${customer.totalPurchases > 0 ?\r\n                                `${customer.totalPurchases} purchase${customer.totalPurchases > 1 ? 's' : ''} • ₹${customer.totalSpent.toFixed(2)} total` :\r\n                                'New customer'\r\n                            }\r\n                        </div>\r\n                        <div style=\"font-size: 10px; color: #999; font-style: italic;\">\r\n                            ${lastPurchaseText}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            }).join('');\r\n\r\n            resultsContainer.style.display = 'block';\r\n        }\r\n\r\n        // Get customers from customer database and sales data with purchase stats\r\n        function getUniqueCustomers() {\r\n            const allCustomers = new Map();\r\n\r\n            // Add customers from customer database\r\n            customersData.forEach(customer => {\r\n                const customerSales = salesData.filter(sale =>\r\n                    sale.customerName.toLowerCase() === customer.name.toLowerCase() ||\r\n                    sale.customerPhone === customer.phone\r\n                );\r\n\r\n                const totalPurchases = customerSales.length;\r\n                const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                const lastPurchase = customerSales.length > 0 \r\n                    ? Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime()))\r\n                    : null;\r\n\r\n                const customerKey = customer.name.toLowerCase() + '|' + (customer.phone || '');\r\n                allCustomers.set(customerKey, {\r\n                    name: customer.name,\r\n                    phone: customer.phone || 'Not provided',\r\n                    address: customer.address || 'Not provided',\r\n                    email: customer.email || 'Not provided',\r\n                    totalPurchases: totalPurchases,\r\n                    totalSpent: totalSpent,\r\n                    lastPurchase: lastPurchase,\r\n                    source: 'database'\r\n                });\r\n            });\r\n\r\n            // Add customers from sales data who are not in customer database\r\n            salesData.forEach(sale => {\r\n                const customerKey = sale.customerName.toLowerCase() + '|' + (sale.customerPhone || '');\r\n                \r\n                if (!allCustomers.has(customerKey)) {\r\n                    const customerSales = salesData.filter(s =>\r\n                        s.customerName.toLowerCase() === sale.customerName.toLowerCase() ||\r\n                        (s.customerPhone && sale.customerPhone && s.customerPhone === sale.customerPhone)\r\n                    );\r\n\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, s) => sum + s.sellingPrice, 0);\r\n                    const lastPurchase = Math.max(...customerSales.map(s => new Date(s.saleDate).getTime()));\r\n\r\n                    allCustomers.set(customerKey, {\r\n                        name: sale.customerName,\r\n                        phone: sale.customerPhone || 'Not provided',\r\n                        address: sale.customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        totalPurchases: totalPurchases,\r\n                        totalSpent: totalSpent,\r\n                        lastPurchase: lastPurchase,\r\n                        source: 'sales'\r\n                    });\r\n                }\r\n            });\r\n\r\n            // Convert to array and sort by total spent (descending), then by last purchase date (descending)\r\n            return Array.from(allCustomers.values()).sort((a, b) => {\r\n                if (b.totalSpent !== a.totalSpent) {\r\n                    return b.totalSpent - a.totalSpent;\r\n                }\r\n                if (a.lastPurchase && b.lastPurchase) {\r\n                    return b.lastPurchase - a.lastPurchase;\r\n                }\r\n                return a.lastPurchase ? -1 : (b.lastPurchase ? 1 : 0);\r\n            });\r\n        }\r\n\r\n        // Escape quotes for HTML attributes\r\n        function escapeQuotes(str) {\r\n            if (!str) return '';\r\n            return str.replace(/'/g, '&#39;').replace(/\"/g, '&quot;');\r\n        }\r\n\r\n        // Select customer from search results\r\n        function selectCustomer(name, phone, address, email) {\r\n            document.getElementById('customerName').value = name;\r\n            document.getElementById('customerPhone').value = phone !== 'Not provided' ? phone : '';\r\n            document.getElementById('customerAddress').value = address !== 'Not provided' ? address : '';\r\n\r\n            // Clear search\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n\r\n            // Show success message\r\n            showSuccess(`✅ Customer \"${name}\" selected! Details filled automatically.`);\r\n\r\n            // Focus on item name field\r\n            document.getElementById('itemName').focus();\r\n        }\r\n\r\n        // Clear customer search\r\n        function clearCustomerSearch() {\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n        }\r\n\r\n        // Handle keyboard navigation in search\r\n        let selectedSearchIndex = -1;\r\n        function handleSearchKeydown(event) {\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            const results = resultsContainer.querySelectorAll('[onclick*=\"selectCustomer\"]');\r\n\r\n            if (results.length === 0) return;\r\n\r\n            switch(event.key) {\r\n                case 'ArrowDown':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.min(selectedSearchIndex + 1, results.length - 1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'ArrowUp':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.max(selectedSearchIndex - 1, -1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'Enter':\r\n                    event.preventDefault();\r\n                    if (selectedSearchIndex >= 0 && selectedSearchIndex < results.length) {\r\n                        results[selectedSearchIndex].click();\r\n                    }\r\n                    break;\r\n                case 'Escape':\r\n                    clearCustomerSearch();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function highlightSearchResult(results) {\r\n            // Remove previous highlights\r\n            results.forEach((result, index) => {\r\n                if (index === selectedSearchIndex) {\r\n                    result.style.backgroundColor = '#4ecdc4';\r\n                    result.style.color = 'white';\r\n                } else {\r\n                    result.style.backgroundColor = 'white';\r\n                    result.style.color = 'inherit';\r\n                }\r\n            });\r\n        }\r\n\r\n        // Hide search results when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const searchContainer = document.getElementById('customerSearch').parentElement;\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n\r\n            if (!searchContainer.contains(event.target)) {\r\n                resultsContainer.style.display = 'none';\r\n            }\r\n        });\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            const profitField = document.getElementById('profit');\r\n            profitField.value = profit.toFixed(2);\r\n\r\n            // Change color based on profit\r\n            if (profit > 0) {\r\n                profitField.style.color = '#4ecdc4';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else if (profit < 0) {\r\n                profitField.style.color = '#ff6b6b';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else {\r\n                profitField.style.color = '#666';\r\n                profitField.style.fontWeight = 'normal';\r\n            }\r\n        }\r\n\r\n        // Add sale record function\r\n        function addSaleRecord() {\r\n            try {\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const category = document.getElementById('category').value;\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validate required fields\r\n                if (!itemName) {\r\n                    showError('Please enter item name');\r\n                    return;\r\n                }\r\n                if (!category) {\r\n                    showError('Please select a category');\r\n                    return;\r\n                }\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    showError('Please enter a valid cost price');\r\n                    return;\r\n                }\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    showError('Please enter a valid selling price');\r\n                    return;\r\n                }\r\n                if (!saleDate) {\r\n                    showError('Please select a sale date');\r\n                    return;\r\n                }\r\n                if (!customerName) {\r\n                    showError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Save customer to database automatically when adding sale\r\n                saveCustomerFromSale(customerName, customerPhone, customerAddress);\r\n\r\n                // Create sale record\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: category,\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                document.getElementById('customerSearch').value = '';\r\n                document.getElementById('customer-search-results').style.display = 'none';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Reset sales display to show latest sales\r\n                resetSalesDisplay();\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Show success message\r\n                showSuccess('✅ Sale record added successfully! Customer saved to database.');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                showError('Error adding sale record: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Save customer from sale entry automatically\r\n        function saveCustomerFromSale(customerName, customerPhone, customerAddress) {\r\n            try {\r\n                if (!customerName.trim()) return;\r\n\r\n                // Check if customer already exists by name or phone\r\n                const existingCustomerIndex = customersData.findIndex(customer => \r\n                    customer.name.toLowerCase() === customerName.toLowerCase() ||\r\n                    (customerPhone && customer.phone === customerPhone)\r\n                );\r\n\r\n                if (existingCustomerIndex !== -1) {\r\n                    // Update existing customer with any new information\r\n                    const existingCustomer = customersData[existingCustomerIndex];\r\n                    let updated = false;\r\n\r\n                    if (customerPhone && customerPhone !== existingCustomer.phone && existingCustomer.phone === 'Not provided') {\r\n                        existingCustomer.phone = customerPhone;\r\n                        updated = true;\r\n                    }\r\n\r\n                    if (customerAddress && customerAddress !== existingCustomer.address && existingCustomer.address === 'Not provided') {\r\n                        existingCustomer.address = customerAddress;\r\n                        updated = true;\r\n                    }\r\n\r\n                    // Update last purchase date\r\n                    existingCustomer.lastPurchase = new Date().toISOString();\r\n                    updated = true;\r\n\r\n                    if (updated) {\r\n                        customersData[existingCustomerIndex] = existingCustomer;\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                    }\r\n                } else {\r\n                    // Add new customer\r\n                    const newCustomer = {\r\n                        id: Date.now(),\r\n                        name: customerName,\r\n                        phone: customerPhone || 'Not provided',\r\n                        address: customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        status: 'active',\r\n                        notes: `Auto-added from sale entry on ${new Date().toLocaleDateString()}`,\r\n                        createdAt: new Date().toISOString(),\r\n                        lastPurchase: new Date().toISOString()\r\n                    };\r\n\r\n                    customersData.push(newCustomer);\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                }\r\n            } catch (error) {\r\n                console.error('Error saving customer from sale:', error);\r\n                // Don't throw error to not interrupt sale process\r\n            }\r\n        }\r\n\r\n        // Show success message\r\n        function showSuccess(message) {\r\n            const successDiv = document.getElementById('success-message');\r\n            const errorDiv = document.getElementById('error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show error message\r\n        function showError(message) {\r\n            const errorDiv = document.getElementById('error-message');\r\n            const successDiv = document.getElementById('success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n\r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n\r\n            countElement.textContent = salesData.length;\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n\r\n            // Show sales with pagination\r\n            const recentSales = salesData.slice().reverse(); // All sales in reverse order\r\n            const salesToShow = recentSales.slice(0, displayedSalesCount);\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n\r\n            container.innerHTML = salesToShow.map(sale => `\r\n                <div class=\"sales-item\" id=\"sale-item-${sale.id}\">\r\n                    <div class=\"action-buttons\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale(${sale.id})\" title=\"Edit Sale\">✏️</button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\" title=\"Delete Sale\">🗑️</button>\r\n                    </div>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n\r\n            // Show/hide Load More button\r\n            if (recentSales.length > displayedSalesCount) {\r\n                loadMoreContainer.style.display = 'block';\r\n                const remainingCount = recentSales.length - displayedSalesCount;\r\n                document.getElementById('load-more-btn').innerHTML = `📖 Load More Sales (${remainingCount} remaining)`;\r\n            } else {\r\n                loadMoreContainer.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n\r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Edit sale functionality\r\n        let currentEditingSaleId = null;\r\n\r\n        function editSale(id) {\r\n            // Check if another sale is being edited\r\n            if (currentEditingSaleId && currentEditingSaleId !== id) {\r\n                showError('Please finish editing the current sale before editing another one.');\r\n                return;\r\n            }\r\n\r\n            const sale = salesData.find(s => s.id === id);\r\n            if (!sale) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const saleItem = document.getElementById(`sale-item-${id}`);\r\n            if (!saleItem) {\r\n                showError('Sale item not found in DOM!');\r\n                return;\r\n            }\r\n\r\n            currentEditingSaleId = id;\r\n\r\n            // Create edit form\r\n            const editForm = `\r\n                <div class=\"edit-form\">\r\n                    <h4>✏️ Edit Sale Record</h4>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-itemName-${id}\">Item Name *</label>\r\n                            <input type=\"text\" id=\"edit-itemName-${id}\" value=\"${sale.itemName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-category-${id}\">Category *</label>\r\n                            <select id=\"edit-category-${id}\" required>\r\n                                <option value=\"Necklaces\" ${sale.category === 'Necklaces' ? 'selected' : ''}>Necklaces</option>\r\n                                <option value=\"Earrings\" ${sale.category === 'Earrings' ? 'selected' : ''}>Earrings</option>\r\n                                <option value=\"Bracelets\" ${sale.category === 'Bracelets' ? 'selected' : ''}>Bracelets</option>\r\n                                <option value=\"Rings\" ${sale.category === 'Rings' ? 'selected' : ''}>Rings</option>\r\n                                <option value=\"Anklets\" ${sale.category === 'Anklets' ? 'selected' : ''}>Anklets</option>\r\n                                <option value=\"Sets\" ${sale.category === 'Sets' ? 'selected' : ''}>Sets</option>\r\n                                <option value=\"Bangles\" ${sale.category === 'Bangles' ? 'selected' : ''}>Bangles</option>\r\n                                <option value=\"Chains\" ${sale.category === 'Chains' ? 'selected' : ''}>Chains</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-costPrice-${id}\">Cost Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-costPrice-${id}\" value=\"${sale.costPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-sellingPrice-${id}\">Selling Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-sellingPrice-${id}\" value=\"${sale.sellingPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-profit-${id}\">Profit (₹)</label>\r\n                            <input type=\"number\" id=\"edit-profit-${id}\" value=\"${sale.profit}\" readonly style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-saleDate-${id}\">Sale Date *</label>\r\n                            <input type=\"date\" id=\"edit-saleDate-${id}\" value=\"${sale.saleDate}\" required>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerName-${id}\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"edit-customerName-${id}\" value=\"${sale.customerName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerPhone-${id}\">Customer Phone</label>\r\n                            <input type=\"tel\" id=\"edit-customerPhone-${id}\" value=\"${sale.customerPhone}\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-group\">\r\n                        <label for=\"edit-customerAddress-${id}\">Customer Address</label>\r\n                        <textarea id=\"edit-customerAddress-${id}\" rows=\"2\">${sale.customerAddress || ''}</textarea>\r\n                    </div>\r\n                    <div class=\"edit-form-buttons\">\r\n                        <button class=\"save-edit-btn\" onclick=\"saveSaleEdit(${id})\">💾 Save Changes</button>\r\n                        <button class=\"cancel-edit-btn\" onclick=\"cancelSaleEdit(${id})\">❌ Cancel</button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            saleItem.innerHTML = editForm;\r\n\r\n            // Scroll the edited item into view\r\n            saleItem.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n\r\n        function calculateEditProfit(id) {\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            document.getElementById(`edit-profit-${id}`).value = profit.toFixed(2);\r\n        }\r\n\r\n        function saveSaleEdit(id) {\r\n            const itemName = document.getElementById(`edit-itemName-${id}`).value.trim();\r\n            const category = document.getElementById(`edit-category-${id}`).value;\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value);\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value);\r\n            const saleDate = document.getElementById(`edit-saleDate-${id}`).value;\r\n            const customerName = document.getElementById(`edit-customerName-${id}`).value.trim();\r\n            const customerPhone = document.getElementById(`edit-customerPhone-${id}`).value.trim();\r\n            const customerAddress = document.getElementById(`edit-customerAddress-${id}`).value.trim();\r\n\r\n            // Validation\r\n            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                showError('Please fill in all required fields marked with *');\r\n                return;\r\n            }\r\n\r\n            if (costPrice < 0 || sellingPrice < 0) {\r\n                showError('Cost price and selling price must be positive numbers');\r\n                return;\r\n            }\r\n\r\n            // Find and update the sale\r\n            const saleIndex = salesData.findIndex(s => s.id === id);\r\n            if (saleIndex === -1) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            // Update the sale data\r\n            salesData[saleIndex] = {\r\n                ...salesData[saleIndex],\r\n                itemName,\r\n                category,\r\n                costPrice,\r\n                sellingPrice,\r\n                profit,\r\n                saleDate,\r\n                customerName,\r\n                customerPhone: customerPhone || 'Not provided',\r\n                customerAddress: customerAddress || 'Not provided'\r\n            };\r\n\r\n            // Save to localStorage\r\n            localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n            // Reset editing state\r\n            currentEditingSaleId = null;\r\n\r\n            // Refresh displays\r\n            loadSalesRecords();\r\n            updateDashboard();\r\n            loadCustomers();\r\n\r\n            showSuccess('Sale record updated successfully!');\r\n        }\r\n\r\n        function cancelSaleEdit(id) {\r\n            currentEditingSaleId = null;\r\n            loadSalesRecords();\r\n        }\r\n\r\n        // Load more sales functionality\r\n        function loadMoreSales() {\r\n            displayedSalesCount += 20; // Load 20 more sales\r\n            loadSalesRecords();\r\n\r\n            // Smooth scroll to maintain position\r\n            const loadMoreBtn = document.getElementById('load-more-btn');\r\n            setTimeout(() => {\r\n                loadMoreBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }, 100);\r\n        }\r\n\r\n        // Reset displayed sales count when needed\r\n        function resetSalesDisplay() {\r\n            displayedSalesCount = 20;\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n\r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n\r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n\r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n\r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n\r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n\r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n\r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n\r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n\r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer =>\r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers with enhanced display\r\n        function loadCustomers() {\r\n            const countElement = document.getElementById('customers-count');\r\n            countElement.textContent = customersData.length;\r\n\r\n            // Reset pagination and filters when loading fresh data\r\n            currentCustomerPage = 1;\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n\r\n            // Clear search and sort inputs\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            currentCustomerSort = 'name-asc';\r\n\r\n            // Display the enhanced customer database\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        // Download customers Excel report\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const customersWithStats = customersData.map(customer => {\r\n                    const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                    const lastPurchase = customerSales.length > 0 ?\r\n                        new Date(Math.max(...customerSales.map(sale => new Date(sale.saleDate)))).toLocaleDateString() : 'Never';\r\n\r\n                    return {\r\n                        'Customer Name': customer.name,\r\n                        'Phone': customer.phone || 'Not provided',\r\n                        'Email': customer.email || 'Not provided',\r\n                        'Address': customer.address || 'Not provided',\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Average Order Value (₹)': totalPurchases > 0 ? (totalSpent / totalPurchases).toFixed(2) : 0,\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Customer Status': totalPurchases > 0 ? 'Active' : 'Inactive',\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Database');\r\n\r\n                const fileName = `Customer_Database_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Customer database exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting customers:', error);\r\n                showError('Error exporting customer data: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nThis will NOT affect sales records, but customer search functionality will be limited.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL CUSTOMERS\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL CUSTOMERS') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        updateCustomerCount();\r\n                        showSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL CUSTOMERS\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n\r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n\r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n\r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n\r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n\r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n\r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n\r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n\r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n\r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n\r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n\r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n\r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong>\r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' :\r\n                          month.profitMargin > 10 ? '📊 Good Performance' :\r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n\r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n\r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n\r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                    // Find top category\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n\r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' :\r\n                                         month.profitMargin > 10 ? 'Good' :\r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n\r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n\r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n\r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n\r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n\r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong>\r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' :\r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' :\r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n\r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong>\r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' :\r\n                          cat.salesPercentage > 20 ? '📈 High Demand' :\r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' :\r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n\r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n\r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n\r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n\r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n\r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' :\r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' :\r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n\r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Customer Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n\r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' :\r\n                                   cat.salesPercentage > 20 ? 'High Demand' :\r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' :\r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n\r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Category Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n\r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n\r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n\r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n\r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Sales Trends exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n</html>\r\n"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry-sales-tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry-sales-tracker.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_tracker.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_working.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_simple.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_simple.html",
                        "sources": []
                    },
                    {
                        "path": "manifest.json",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\manifest.json",
                        "sources": []
                    },
                    {
                        "path": "README-APP.md",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\README-APP.md",
                        "sources": []
                    },
                    {
                        "path": "css\\style.css",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\css\\style.css",
                        "sources": []
                    },
                    {
                        "path": "LICENSE.txt",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\LICENSE.txt",
                        "sources": []
                    },
                    {
                        "path": ".zencoder\\.gitignore",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\.zencoder\\.gitignore",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_fixed.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_fixed.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "jewelry_sales_final.html"
                    },
                    {
                        "path": "jewelry_sales_fixed.html",
                        "fsPath": "jewelry_sales_fixed.html"
                    },
                    {
                        "path": "jewelry_sales_simple.html",
                        "fsPath": "jewelry_sales_simple.html"
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "jewelry_sales_tracker.html"
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "jewelry_sales_working.html"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n\r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#007bff\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n\r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n\r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n\r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 10px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 800px;\r\n            margin: 0 auto;\r\n            background: white;\r\n            border-radius: 15px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            overflow: hidden;\r\n        }\r\n\r\n        .header {\r\n            background: linear-gradient(45deg, #ff6b6b, #ffd93d);\r\n            color: white;\r\n            text-align: center;\r\n            padding: 20px;\r\n            font-size: 1.8em;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .tabs {\r\n            display: flex;\r\n            background: #f8f9fa;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: 15px;\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: #f8f9fa;\r\n            border: none;\r\n            font-size: 16px; \r\n            font-weight: 600;\r\n            transition: all 0.3s ease;\r\n            color: #6c757d;\r\n        }\r\n\r\n        .tab.active {\r\n            background: #4ecdc4;\r\n            color: white;\r\n        }\r\n\r\n        .tab-content {\r\n            display: none;\r\n            padding: 20px;\r\n            min-height: 500px;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            font-weight: 600;\r\n            color: #333;\r\n        }\r\n\r\n        .form-group input,\r\n        .form-group select {\r\n            width: 100%;\r\n            padding: 12px;\r\n            border: 2px solid #e9ecef;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .form-group input:focus,\r\n        .form-group select:focus {\r\n            outline: none;\r\n            border-color: #4ecdc4;\r\n        }\r\n\r\n        .btn {\r\n            width: 100%;\r\n            padding: 15px;\r\n            border: none;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            margin-top: 10px;\r\n            color: white;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .btn-primary {\r\n            background: #4ecdc4;\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: #ff6b6b;\r\n        }\r\n\r\n        .btn:hover {\r\n            opacity: 0.9;\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .btn:active {\r\n            transform: translateY(0);\r\n        }\r\n\r\n        .sales-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #4ecdc4;\r\n            position: relative;\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: #333;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .sales-item p {\r\n            margin: 3px 0;\r\n            color: #666;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n            gap: 15px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(45deg, #667eea, #764ba2);\r\n            color: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            text-align: center;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 28px;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 14px;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            margin-bottom: 20px;\r\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n            height: 400px;\r\n        }\r\n\r\n        .customer-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #ff6b6b;\r\n        }\r\n\r\n        .no-data {\r\n            text-align: center;\r\n            color: #666;\r\n            font-style: italic;\r\n            padding: 40px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .delete-btn {\r\n            background: #ff6b6b;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 12px;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 12px;\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: #ff5252;\r\n        }\r\n\r\n        .edit-btn {\r\n            background: #007bff;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 12px;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 12px;\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 60px;\r\n        }\r\n\r\n        .edit-btn:hover {\r\n            background: #0056b3;\r\n        }\r\n\r\n        .action-buttons {\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n            display: flex;\r\n            gap: 5px;\r\n        }\r\n\r\n        .sales-records-container {\r\n            max-height: 600px;\r\n            overflow-y: auto;\r\n            padding-right: 10px;\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .sales-records-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .sales-records-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .sales-records-container::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .sales-records-container::-webkit-scrollbar-thumb:hover {\r\n            background: #45b7b8;\r\n        }\r\n\r\n        /* Enhanced sales container styles */\r\n        .enhanced-sales-container {\r\n            background: #fafafa;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 8px;\r\n            max-height: 600px;\r\n            overflow-y: auto;\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar {\r\n            width: 10px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb {\r\n            background: linear-gradient(45deg, #4ecdc4, #44a08d);\r\n            border-radius: 10px;\r\n            border: 2px solid #f1f1f1;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb:hover {\r\n            background: linear-gradient(45deg, #45b7b8, #3a8f7e);\r\n        }\r\n\r\n        /* Sales search and filter styles */\r\n        .sales-filter-section {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            border-radius: 8px;\r\n            margin-bottom: 20px;\r\n            border: 1px solid #e9ecef;\r\n        }\r\n\r\n        .sales-search-input {\r\n            width: 100%;\r\n            padding: 10px;\r\n            border: 2px solid #e9ecef;\r\n            border-radius: 6px;\r\n            font-size: 14px;\r\n            transition: border-color 0.3s ease;\r\n        }\r\n\r\n        .sales-search-input:focus {\r\n            outline: none;\r\n            border-color: #4ecdc4;\r\n            box-shadow: 0 0 0 3px rgba(78, 205, 196, 0.1);\r\n        }\r\n\r\n        /* Enhanced customer container styles */\r\n        .enhanced-customers-container {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .enhanced-customers-container::-webkit-scrollbar {\r\n            width: 12px;\r\n        }\r\n\r\n        .enhanced-customers-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .enhanced-customers-container::-webkit-scrollbar-thumb {\r\n            background: linear-gradient(45deg, #667eea, #764ba2);\r\n            border-radius: 10px;\r\n            border: 2px solid #f1f1f1;\r\n        }\r\n\r\n        .enhanced-customers-container::-webkit-scrollbar-thumb:hover {\r\n            background: linear-gradient(45deg, #5a67d8, #6b46c1);\r\n        }\r\n\r\n        /* Enhanced customer card styles */\r\n        .customer-card {\r\n            background: white;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 10px;\r\n            padding: 15px;\r\n            margin-bottom: 15px;\r\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n            transition: all 0.3s ease;\r\n            position: relative;\r\n        }\r\n\r\n        .customer-card:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 4px 15px rgba(0,0,0,0.15);\r\n            border-color: #4ecdc4;\r\n        }\r\n\r\n        .customer-card-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: start;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .customer-name {\r\n            font-size: 18px;\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin: 0;\r\n        }\r\n\r\n        .customer-status {\r\n            padding: 4px 8px;\r\n            border-radius: 12px;\r\n            font-size: 11px;\r\n            font-weight: bold;\r\n            text-transform: uppercase;\r\n        }\r\n\r\n        .customer-status.active {\r\n            background: #d4edda;\r\n            color: #155724;\r\n        }\r\n\r\n        .customer-status.inactive {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n        }\r\n\r\n        .customer-info-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n            gap: 10px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .customer-info-item {\r\n            font-size: 14px;\r\n            color: #666;\r\n        }\r\n\r\n        .customer-info-label {\r\n            font-weight: 600;\r\n            color: #333;\r\n        }\r\n\r\n        .customer-purchase-stats {\r\n            background: #f8f9fa;\r\n            padding: 10px;\r\n            border-radius: 6px;\r\n            margin-top: 10px;\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\r\n            gap: 10px;\r\n            text-align: center;\r\n        }\r\n\r\n        .customer-stat-item {\r\n            padding: 5px;\r\n        }\r\n\r\n        .customer-stat-value {\r\n            font-size: 16px;\r\n            font-weight: bold;\r\n            color: #4ecdc4;\r\n        }\r\n\r\n        .customer-stat-label {\r\n            font-size: 11px;\r\n            color: #666;\r\n            text-transform: uppercase;\r\n        }\r\n\r\n        .edit-form {\r\n            background: #fff;\r\n            border: 2px solid #4ecdc4;\r\n            border-radius: 8px;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            position: relative;\r\n        }\r\n\r\n        .edit-form h4 {\r\n            color: #4ecdc4;\r\n            margin-bottom: 15px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .edit-form-row {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            gap: 10px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group label {\r\n            display: block;\r\n            margin-bottom: 3px;\r\n            font-weight: 600;\r\n            color: #333;\r\n            font-size: 12px;\r\n        }\r\n\r\n        .edit-form-group input,\r\n        .edit-form-group select,\r\n        .edit-form-group textarea {\r\n            width: 100%;\r\n            padding: 8px;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 4px;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .edit-form-buttons {\r\n            display: flex;\r\n            gap: 10px;\r\n            margin-top: 15px;\r\n        }\r\n\r\n        .edit-form-buttons button {\r\n            flex: 1;\r\n            padding: 10px;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .save-edit-btn {\r\n            background: #28a745;\r\n            color: white;\r\n        }\r\n\r\n        .save-edit-btn:hover {\r\n            background: #218838;\r\n        }\r\n\r\n        .cancel-edit-btn {\r\n            background: #6c757d;\r\n            color: white;\r\n        }\r\n\r\n        .cancel-edit-btn:hover {\r\n            background: #5a6268;\r\n        }\r\n\r\n        /* Customer search styles */\r\n        .customer-search-result {\r\n            padding: 12px;\r\n            cursor: pointer;\r\n            border-bottom: 1px solid #eee;\r\n            border-left: 3px solid transparent;\r\n            transition: all 0.2s ease;\r\n        }\r\n\r\n        .customer-search-result:hover {\r\n            background-color: #f8f9fa;\r\n            border-left-color: #4ecdc4;\r\n            transform: translateX(2px);\r\n        }\r\n\r\n        .customer-search-result:last-child {\r\n            border-bottom: none;\r\n        }\r\n\r\n        .customer-name {\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin-bottom: 4px;\r\n            font-size: 15px;\r\n        }\r\n\r\n        .customer-details {\r\n            font-size: 12px;\r\n            color: #666;\r\n            margin-bottom: 2px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n        }\r\n\r\n        .customer-stats {\r\n            font-size: 11px;\r\n            color: #4ecdc4;\r\n            margin-top: 8px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .customer-source-badge {\r\n            font-size: 10px;\r\n            color: #999;\r\n            padding: 2px 6px;\r\n            background: #f0f0f0;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .customer-last-purchase {\r\n            font-size: 10px;\r\n            color: #999;\r\n            font-style: italic;\r\n        }\r\n\r\n        /* Enhanced search results container */\r\n        #customer-search-results {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            border-radius: 8px;\r\n            border: 1px solid #ddd;\r\n            background: white;\r\n            max-height: 300px;\r\n            overflow-y: auto;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb:hover {\r\n            background: #45b7b8;\r\n        }\r\n\r\n        /* Section headers */\r\n        .section-header {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-bottom: 15px;\r\n            padding-bottom: 8px;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .section-icon {\r\n            margin-right: 8px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: 15px;\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 24px;\r\n            }\r\n\r\n            .header {\r\n                font-size: 1.4em;\r\n                padding: 15px;\r\n            }\r\n\r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                gap: 5px;\r\n            }\r\n\r\n            .tab {\r\n                flex: 1;\r\n                min-width: 100px;\r\n                font-size: 12px;\r\n                padding: 10px 5px;\r\n            }\r\n\r\n            .form-group {\r\n                margin-bottom: 15px;\r\n            }\r\n\r\n            .form-group input,\r\n            .form-group select,\r\n            .form-group textarea {\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n\r\n            .customer-item,\r\n            .sale-item {\r\n                padding: 15px;\r\n                margin-bottom: 15px;\r\n            }\r\n\r\n            .btn {\r\n                padding: 12px 16px;\r\n                font-size: 14px;\r\n                margin: 5px 2px;\r\n            }\r\n\r\n            /* Import section responsive */\r\n            .import-section {\r\n                flex-direction: column !important;\r\n                gap: 10px !important;\r\n            }\r\n\r\n            .import-section button {\r\n                width: 100% !important;\r\n                margin-bottom: 5px;\r\n            }\r\n        }\r\n\r\n        @media (max-width: 480px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n            }\r\n\r\n            .header {\r\n                font-size: 1.2em;\r\n                padding: 10px;\r\n                text-align: center;\r\n            }\r\n\r\n            .tabs {\r\n                justify-content: center;\r\n            }\r\n\r\n            .tab {\r\n                font-size: 11px;\r\n                padding: 8px 4px;\r\n            }\r\n\r\n            /* Customer database responsive design */\r\n            .customer-info-grid {\r\n                grid-template-columns: 1fr !important;\r\n                gap: 8px !important;\r\n            }\r\n\r\n            .customer-purchase-stats {\r\n                grid-template-columns: repeat(2, 1fr) !important;\r\n                gap: 8px !important;\r\n            }\r\n\r\n            .customer-card {\r\n                padding: 12px !important;\r\n                margin-bottom: 10px !important;\r\n            }\r\n\r\n            .enhanced-customers-container {\r\n                max-height: 400px !important;\r\n            }\r\n        }\r\n\r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n\r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n\r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n\r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"header\">\r\n            💎 Theia Jewelz\r\n        </div>\r\n\r\n        <div class=\"tabs\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\">📝 Sales Entry</button>\r\n            <button class=\"tab\" onclick=\"showTab('recent-sales')\">📋 Recent Sales</button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\">📊 Dashboard</button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\">👥 Customers</button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\">📈 Analytics</button>\r\n        </div>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\">\r\n            <h2>Add New Sale</h2>\r\n\r\n            <div id=\"success-message\" class=\"success-message\"></div>\r\n            <div id=\"error-message\" class=\"error-message\"></div>\r\n\r\n            <form id=\"sales-form\">\r\n                <!-- Customer Search Section -->\r\n                <div class=\"form-group\">\r\n                    <label for=\"customerSearch\">🔍 Search Existing Customer</label>\r\n                    <div style=\"position: relative;\">\r\n                        <input type=\"text\" id=\"customerSearch\" placeholder=\"Type customer name or phone to search...\"\r\n                               oninput=\"searchCustomers()\" onkeydown=\"handleSearchKeydown(event)\" autocomplete=\"off\"\r\n                               style=\"padding-right: 40px;\">\r\n                        <button type=\"button\" onclick=\"clearCustomerSearch()\"\r\n                                style=\"position: absolute; right: 10px; top: 50%; transform: translateY(-50%);\r\n                                       background: none; border: none; cursor: pointer; font-size: 16px;\"\r\n                                title=\"Clear search\">❌</button>\r\n                        <div id=\"customer-search-results\" style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                             background: white; border: 1px solid #ddd; border-top: none; border-radius: 0 0 8px 8px;\r\n                             max-height: 200px; overflow-y: auto; z-index: 1000; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\">\r\n                        </div>\r\n                    </div>\r\n                    <small style=\"color: #666; font-size: 12px;\">💡 Search from All Customers (<span id=\"total-customers\">0</span> customers) - includes database & sales records. Supports name, phone & email search</small>\r\n                </div>\r\n\r\n                <!-- Customer Details Section -->\r\n                <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; color: #4ecdc4; font-size: 16px;\">👤 Customer Information</h4>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n                        <label for=\"customerName\">Customer Name *</label>\r\n                        <input type=\"text\" id=\"customerName\" required placeholder=\"Enter customer name\"\r\n                               style=\"background: white;\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 15px;\">\r\n                        <label for=\"customerPhone\">Customer Phone</label>\r\n                        <input type=\"tel\" id=\"customerPhone\" placeholder=\"Enter phone number\"\r\n                               style=\"background: white;\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\r\n                        <label for=\"customerAddress\">Customer Address</label>\r\n                        <textarea id=\"customerAddress\" rows=\"2\" placeholder=\"Enter customer address (optional)\"\r\n                                  style=\"background: white; width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Item Details Section -->\r\n                <div style=\"background: #fff; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; color: #ff6b6b; font-size: 16px;\">💎 Item Information</h4>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"itemName\">Item Name *</label>\r\n                        <input type=\"text\" id=\"itemName\" required placeholder=\"e.g., Gold Plated Necklace\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"category\">Category *</label>\r\n                        <select id=\"category\" required>\r\n                            <option value=\"\">Select Category</option>\r\n                            <option value=\"Necklaces\">Necklaces</option>\r\n                            <option value=\"Earrings\">Earrings</option>\r\n                            <option value=\"Bracelets\">Bracelets</option>\r\n                            <option value=\"Rings\">Rings</option>\r\n                            <option value=\"Anklets\">Anklets</option>\r\n                            <option value=\"Sets\">Sets</option>\r\n                            <option value=\"Bangles\">Bangles</option>\r\n                            <option value=\"Chains\">Chains</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\r\n                        <label for=\"saleDate\">Sale Date *</label>\r\n                        <input type=\"date\" id=\"saleDate\" required>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Pricing Section -->\r\n                <div style=\"background: #fff; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; color: #28a745; font-size: 16px;\">💰 Pricing Information</h4>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"costPrice\">Cost Price (₹) *</label>\r\n                        <input type=\"number\" id=\"costPrice\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label for=\"sellingPrice\">Selling Price (₹) *</label>\r\n                        <input type=\"number\" id=\"sellingPrice\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                    </div>\r\n\r\n                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\r\n                        <label for=\"profit\">Profit (₹)</label>\r\n                        <input type=\"number\" id=\"profit\" readonly placeholder=\"Auto-calculated\" style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"addSaleRecord()\">💾 Add Sale Record</button>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n        <!-- Recent Sales Tab -->\r\n        <div id=\"recent-sales\" class=\"tab-content\">\r\n            <h2>📋 Recent Sales & Import</h2>\r\n\r\n            <!-- Sales Import Section -->\r\n            <div style=\"margin-bottom: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px; border: 2px solid #e9ecef;\">\r\n                <h3 style=\"margin: 0 0 15px 0; color: #4ecdc4;\">📤 Bulk Import Sales</h3>\r\n                <p style=\"margin: 0 0 15px 0; color: #666; font-size: 14px;\">Import multiple sales records from CSV or Excel file</p>\r\n\r\n                <div style=\"display: flex; gap: 10px; align-items: center; flex-wrap: wrap;\" class=\"import-section\">\r\n                    <input type=\"file\" id=\"sales-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importSales(event)\">\r\n                    <button class=\"btn btn-primary\" onclick=\"document.getElementById('sales-import-file').click()\" style=\"width: auto; padding: 10px 16px; font-size: 14px;\" title=\"Import sales from CSV or Excel file\">\r\n                        📤 Import Sales Data\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"downloadSalesTemplate()\" style=\"width: auto; padding: 10px 16px; font-size: 14px; background-color: #6c757d; color: white;\" title=\"Download sample CSV template\">\r\n                        📋 Download Template\r\n                    </button>\r\n                    <small style=\"color: #666; font-size: 12px;\">Supports CSV and Excel files with required columns: Item Name, Category, Cost Price, Selling Price, Sale Date, Customer Name</small>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Recent Sales Section -->\r\n            <div style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">📋 Sales Records (<span id=\"sales-count\">0</span>)</h3>\r\n                            <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; font-size: 18px; cursor: pointer; padding: 8px 12px; border-radius: 6px; transition: all 0.3s ease;\" title=\"Expand/Collapse Sales Summary\">\r\n                                ▼\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                            <button class=\"btn\" onclick=\"downloadExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                📥 Export All\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"sales-content-container\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                        <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; display: none; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                            <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Sales Summary</h4>\r\n                            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Sales</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Cost</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-selling\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Profit</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Search and Filter Section -->\r\n                        <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                            <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                <div>\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Sales</label>\r\n                                    <input type=\"text\" id=\"sales-search\" placeholder=\"Search by item name, customer name, or category...\"\r\n                                           oninput=\"filterSales()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                </div>\r\n                                <div style=\"display: flex; gap: 10px;\">\r\n                                    <button onclick=\"clearSalesFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        🔄 Clear\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Sales Records Container with Enhanced Scrolling -->\r\n                        <div class=\"enhanced-sales-container\" style=\"max-height: 600px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; background: #fafafa;\">\r\n                            <div id=\"sales-records\" style=\"padding: 10px;\"></div>\r\n                            <div id=\"load-more-container\" style=\"text-align: center; padding: 20px; display: none;\">\r\n                                <button id=\"load-more-btn\" class=\"btn btn-primary\" onclick=\"loadMoreSales()\" style=\"width: auto; padding: 12px 24px; font-size: 14px; border-radius: 20px;\">\r\n                                    📖 Load More Sales\r\n                                </button>\r\n                            </div>\r\n                            <div id=\"no-sales-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                <h3 style=\"color: #999;\">📭 No Sales Records Found</h3>\r\n                                <p>Add your first sale in the Sales Entry tab or import existing data!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n\r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n\r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n\r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n\r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n\r\n            <!-- Enhanced Customer Database Section -->\r\n            <div style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <!-- Header Section -->\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">👥 Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                            <button id=\"customer-stats-toggle\" onclick=\"toggleCustomerStats()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; font-size: 16px; cursor: pointer; padding: 8px 12px; border-radius: 6px; transition: all 0.3s ease;\" title=\"Show/Hide Customer Statistics\">\r\n                                📊 Stats\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                            <input type=\"file\" id=\"customer-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importCustomers(event)\">\r\n                            <button class=\"btn\" onclick=\"document.getElementById('customer-import-file').click()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\" title=\"Import customers from CSV or Excel file\">\r\n                                📤 Import\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomerTemplate()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📋 Template\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomersExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📥 Export\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customer Statistics Panel -->\r\n                <div id=\"customer-stats-panel\" style=\"display: none; background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Customer Statistics</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;\">\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Customers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-active-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Active Buyers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-avg-orders\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Orders</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-clv\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total CLV</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Search and Filter Section -->\r\n                <div style=\"padding: 20px; background: #f8f9fa; border-bottom: 1px solid #e9ecef;\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr auto auto; gap: 15px; align-items: end;\">\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Customers</label>\r\n                            <input type=\"text\" id=\"customer-database-search\" placeholder=\"Search by name, phone, email, or address...\"\r\n                                   oninput=\"filterCustomerDatabase()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                        </div>\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">📋 Sort By</label>\r\n                            <select id=\"customer-sort-select\" onchange=\"sortCustomerDatabase()\" style=\"padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                <option value=\"name-asc\">Name (A-Z)</option>\r\n                                <option value=\"name-desc\">Name (Z-A)</option>\r\n                                <option value=\"purchases-desc\">Most Purchases</option>\r\n                                <option value=\"purchases-asc\">Least Purchases</option>\r\n                                <option value=\"spending-desc\">Highest Spending</option>\r\n                                <option value=\"spending-asc\">Lowest Spending</option>\r\n                                <option value=\"recent-desc\">Recently Added</option>\r\n                                <option value=\"recent-asc\">Oldest Added</option>\r\n                            </select>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"clearCustomerDatabaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                🔄 Clear\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customers List Container with Enhanced UI -->\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"customer-view-mode\" style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <div style=\"font-size: 14px; color: #666;\">\r\n                            Showing <span id=\"customers-showing\">0</span> of <span id=\"customers-total\">0</span> customers\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; align-items: center;\">\r\n                            <label style=\"font-size: 14px; color: #666;\">View:</label>\r\n                            <select id=\"customers-per-page\" onchange=\"changeCustomersPerPage()\" style=\"padding: 5px 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px;\">\r\n                                <option value=\"10\">10 per page</option>\r\n                                <option value=\"25\" selected>25 per page</option>\r\n                                <option value=\"50\">50 per page</option>\r\n                                <option value=\"100\">100 per page</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Enhanced Customer Cards Container -->\r\n                    <div class=\"enhanced-customers-container\" style=\"max-height: 500px; overflow-y: auto; background: #fafafa; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;\">\r\n                        <div id=\"customers-list-container\"></div>\r\n\r\n                        <!-- Pagination Controls -->\r\n                        <div id=\"customer-pagination\" style=\"display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 20px; padding: 15px;\">\r\n                            <button id=\"prev-customers-btn\" onclick=\"previousCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                ◀ Previous\r\n                            </button>\r\n                            <span id=\"customer-page-info\" style=\"font-size: 14px; color: #666; margin: 0 15px;\">Page 1 of 1</span>\r\n                            <button id=\"next-customers-btn\" onclick=\"nextCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                Next ▶\r\n                            </button>\r\n                        </div>\r\n\r\n                        <!-- No Customers Message -->\r\n                        <div id=\"no-customers-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                            <h3 style=\"color: #999;\">👥 No Customers Found</h3>\r\n                            <p>Add your first customer above or import existing customer data!</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n\r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n        let displayedSalesCount = 20; // Initial number of sales to show\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n\r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n\r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n\r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Initialize Sales Section\r\n        function initializeSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            // Set expanded state by default\r\n            container.style.maxHeight = '1000px';\r\n            container.style.marginTop = '10px';\r\n            container.style.opacity = '1';\r\n            toggleBtn.innerHTML = '▼';\r\n            toggleBtn.title = 'Collapse Recent Sales';\r\n            toggleBtn.style.transform = 'rotate(0deg)';\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (container.style.maxHeight && container.style.maxHeight !== '0px') {\r\n                // Collapse\r\n                container.style.maxHeight = '0px';\r\n                container.style.marginTop = '0px';\r\n                container.style.opacity = '0';\r\n                toggleBtn.innerHTML = '▶';\r\n                toggleBtn.title = 'Expand Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(-90deg)';\r\n            } else {\r\n                // Expand\r\n                container.style.maxHeight = '1000px';\r\n                container.style.marginTop = '10px';\r\n                container.style.opacity = '1';\r\n                toggleBtn.innerHTML = '▼';\r\n                toggleBtn.title = 'Collapse Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(0deg)';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n\r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n\r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n\r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n\r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n\r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n\r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n\r\n            document.body.appendChild(updateDiv);\r\n\r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n\r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Initialize sales section as expanded\r\n                initializeSalesSection();\r\n\r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n\r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n\r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n\r\n            const cleanedData = [];\r\n\r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n\r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n\r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n\r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n\r\n                    cleanedData.push(cleanedSale);\r\n\r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n\r\n            return cleanedData;\r\n        }\r\n\r\n\r\n\r\n        // Update customer count in search hint to include all unique customers\r\n        function updateCustomerCount() {\r\n            try {\r\n                const countElement = document.getElementById('total-customers');\r\n                if (countElement) {\r\n                    const allUniqueCustomers = getUniqueCustomers();\r\n                    countElement.textContent = allUniqueCustomers.length;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating customer count:', error);\r\n            }\r\n        }\r\n\r\n        // Import customers from CSV/Excel file\r\n        function importCustomers(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVCustomers(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelCustomers(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import customers from CSV\r\n        function importCSVCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\r\n                    const requiredHeaders = ['name', 'phone'];\r\n                    const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\r\n\r\n                    if (missingHeaders.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingHeaders.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Find column indices\r\n                    const nameIndex = headers.indexOf('name');\r\n                    const phoneIndex = headers.indexOf('phone');\r\n                    const addressIndex = headers.indexOf('address');\r\n                    const emailIndex = headers.indexOf('email');\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        const customerName = values[nameIndex];\r\n                        const customerPhone = values[phoneIndex] || '';\r\n                        const customerAddress = addressIndex >= 0 ? values[addressIndex] || '' : '';\r\n                        const customerEmail = emailIndex >= 0 ? values[emailIndex] || '' : '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import customers from Excel\r\n        function importExcelCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    jsonData.forEach(row => {\r\n                        const customerName = row.Name || row.name || row.customer_name || row['Customer Name'];\r\n                        const customerPhone = row.Phone || row.phone || row.mobile || row.Mobile || '';\r\n                        const customerAddress = row.Address || row.address || '';\r\n                        const customerEmail = row.Email || row.email || '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download customer import template\r\n        function downloadCustomerTemplate() {\r\n            const csvContent = [\r\n                'name,phone,address,email',\r\n                'John Doe,+91-9876543210,123 Main Street Mumbai,john@example.com',\r\n                'Jane Smith,+91-8765432109,456 Oak Avenue Delhi,jane@example.com',\r\n                'Mike Johnson,+91-7654321098,789 Pine Road Bangalore,mike@example.com'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'customer_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Customer import template downloaded! Use this format for importing customers.');\r\n        }\r\n\r\n        // Enhanced Customer Database Functionality\r\n        let currentCustomerPage = 1;\r\n        let customersPerPage = 25;\r\n        let filteredCustomers = [];\r\n        let isCustomerSearchActive = false;\r\n        let currentCustomerSort = 'name-asc';\r\n\r\n        function toggleCustomerStats() {\r\n            const panel = document.getElementById('customer-stats-panel');\r\n            const button = document.getElementById('customer-stats-toggle');\r\n\r\n            if (panel.style.display === 'none') {\r\n                panel.style.display = 'block';\r\n                button.textContent = '📊 Hide Stats';\r\n                updateCustomerStatistics();\r\n            } else {\r\n                panel.style.display = 'none';\r\n                button.textContent = '📊 Stats';\r\n            }\r\n        }\r\n\r\n        function updateCustomerStatistics() {\r\n            const totalCustomers = customersData.length;\r\n            const activeCustomers = customersData.filter(customer => {\r\n                const purchases = salesData.filter(sale => sale.customerName === customer.name);\r\n                return purchases.length > 0;\r\n            }).length;\r\n\r\n            const totalOrders = salesData.length;\r\n            const avgOrdersPerCustomer = activeCustomers > 0 ? (totalOrders / activeCustomers).toFixed(1) : 0;\r\n\r\n            const totalCLV = customersData.reduce((sum, customer) => {\r\n                const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                const customerSpending = customerSales.reduce((total, sale) => total + sale.sellingPrice, 0);\r\n                return sum + customerSpending;\r\n            }, 0);\r\n\r\n            document.getElementById('stat-total-customers').textContent = totalCustomers;\r\n            document.getElementById('stat-active-customers').textContent = activeCustomers;\r\n            document.getElementById('stat-avg-orders').textContent = avgOrdersPerCustomer;\r\n            document.getElementById('stat-total-clv').textContent = `₹${totalCLV.toFixed(2)}`;\r\n        }\r\n\r\n        function filterCustomerDatabase() {\r\n            const searchTerm = document.getElementById('customer-database-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                isCustomerSearchActive = false;\r\n                filteredCustomers = [];\r\n                currentCustomerPage = 1;\r\n                displayCustomerDatabase();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return;\r\n            }\r\n\r\n            filteredCustomers = customersData.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                (customer.phone && customer.phone.toLowerCase().includes(searchTerm)) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm)) ||\r\n                (customer.address && customer.address.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isCustomerSearchActive = true;\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function sortCustomerDatabase() {\r\n            currentCustomerSort = document.getElementById('customer-sort-select').value;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function clearCustomerDatabaseFilter() {\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n            currentCustomerSort = 'name-asc';\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function changeCustomersPerPage() {\r\n            customersPerPage = parseInt(document.getElementById('customers-per-page').value);\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function displayCustomerDatabase() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const sortedData = sortCustomersData(dataToDisplay);\r\n\r\n            const totalCustomers = sortedData.length;\r\n            const startIndex = (currentCustomerPage - 1) * customersPerPage;\r\n            const endIndex = Math.min(startIndex + customersPerPage, totalCustomers);\r\n            const currentPageData = sortedData.slice(startIndex, endIndex);\r\n\r\n            const container = document.getElementById('customers-list-container');\r\n            const noCustomersMessage = document.getElementById('no-customers-message');\r\n\r\n            if (totalCustomers === 0) {\r\n                container.innerHTML = '';\r\n                noCustomersMessage.style.display = 'block';\r\n                updateCustomerPagination(0, 0, 0);\r\n                return;\r\n            }\r\n\r\n            noCustomersMessage.style.display = 'none';\r\n\r\n            container.innerHTML = currentPageData.map(customer => createCustomerCardHTML(customer)).join('');\r\n\r\n            // Update pagination\r\n            updateCustomerPagination(currentCustomerPage, Math.ceil(totalCustomers / customersPerPage), totalCustomers);\r\n\r\n            // Update showing info\r\n            document.getElementById('customers-showing').textContent = `${startIndex + 1}-${endIndex}`;\r\n            document.getElementById('customers-total').textContent = totalCustomers;\r\n        }\r\n\r\n        function sortCustomersData(data) {\r\n            const sortedData = [...data];\r\n\r\n            switch (currentCustomerSort) {\r\n                case 'name-asc':\r\n                    return sortedData.sort((a, b) => a.name.localeCompare(b.name));\r\n                case 'name-desc':\r\n                    return sortedData.sort((a, b) => b.name.localeCompare(a.name));\r\n                case 'purchases-desc':\r\n                case 'purchases-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aPurchases = salesData.filter(sale => sale.customerName === a.name).length;\r\n                        const bPurchases = salesData.filter(sale => sale.customerName === b.name).length;\r\n                        return currentCustomerSort === 'purchases-desc' ? bPurchases - aPurchases : aPurchases - bPurchases;\r\n                    });\r\n                case 'spending-desc':\r\n                case 'spending-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aSpending = salesData.filter(sale => sale.customerName === a.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        const bSpending = salesData.filter(sale => sale.customerName === b.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        return currentCustomerSort === 'spending-desc' ? bSpending - aSpending : aSpending - bSpending;\r\n                    });\r\n                case 'recent-desc':\r\n                    return sortedData.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n                case 'recent-asc':\r\n                    return sortedData.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\r\n                default:\r\n                    return sortedData;\r\n            }\r\n        }\r\n\r\n        function createCustomerCardHTML(customer) {\r\n            const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n            const totalPurchases = customerSales.length;\r\n            const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const avgOrderValue = totalPurchases > 0 ? (totalSpent / totalPurchases) : 0;\r\n            const lastPurchase = customerSales.length > 0 ?\r\n                Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime())) : null;\r\n\r\n            const isActive = totalPurchases > 0;\r\n            const statusClass = isActive ? 'active' : 'inactive';\r\n            const statusText = isActive ? 'Active' : 'Inactive';\r\n\r\n            return `\r\n                <div class=\"customer-card\">\r\n                    <div class=\"customer-card-header\">\r\n                        <h4 class=\"customer-name\">👤 ${customer.name}</h4>\r\n                        <span class=\"customer-status ${statusClass}\">${statusText}</span>\r\n                    </div>\r\n\r\n                    <div class=\"customer-info-grid\">\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📞 Phone:</span>\r\n                            ${customer.phone || 'Not provided'}\r\n                        </div>\r\n                        ${customer.email ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📧 Email:</span>\r\n                                ${customer.email}\r\n                            </div>\r\n                        ` : ''}\r\n                        ${customer.address ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📍 Address:</span>\r\n                                ${customer.address}\r\n                            </div>\r\n                        ` : ''}\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📅 Added:</span>\r\n                            ${new Date(customer.createdAt).toLocaleDateString()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"customer-purchase-stats\">\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">${totalPurchases}</div>\r\n                            <div class=\"customer-stat-label\">Total Orders</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${totalSpent.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Total Spent</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${avgOrderValue.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Avg Order</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">\r\n                                ${lastPurchase ? new Date(lastPurchase).toLocaleDateString() : 'Never'}\r\n                            </div>\r\n                            <div class=\"customer-stat-label\">Last Purchase</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        function updateCustomerPagination(currentPage, totalPages, totalCustomers) {\r\n            const prevBtn = document.getElementById('prev-customers-btn');\r\n            const nextBtn = document.getElementById('next-customers-btn');\r\n            const pageInfo = document.getElementById('customer-page-info');\r\n\r\n            prevBtn.disabled = currentPage <= 1;\r\n            nextBtn.disabled = currentPage >= totalPages;\r\n\r\n            pageInfo.textContent = totalPages > 0 ? `Page ${currentPage} of ${totalPages}` : 'No pages';\r\n\r\n            // Update button styles based on disabled state\r\n            prevBtn.style.opacity = prevBtn.disabled ? '0.5' : '1';\r\n            nextBtn.style.opacity = nextBtn.disabled ? '0.5' : '1';\r\n            prevBtn.style.cursor = prevBtn.disabled ? 'not-allowed' : 'pointer';\r\n            nextBtn.style.cursor = nextBtn.disabled ? 'not-allowed' : 'pointer';\r\n        }\r\n\r\n        function previousCustomersPage() {\r\n            if (currentCustomerPage > 1) {\r\n                currentCustomerPage--;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        function nextCustomersPage() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const totalPages = Math.ceil(dataToDisplay.length / customersPerPage);\r\n\r\n            if (currentCustomerPage < totalPages) {\r\n                currentCustomerPage++;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        // Import sales from CSV/Excel file\r\n        function importSales(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVSales(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelSales(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import sales from CSV\r\n        function importCSVSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase().replace(/\"/g, ''));\r\n                    const requiredHeaders = ['item_name', 'category', 'cost_price', 'selling_price', 'sale_date', 'customer_name'];\r\n\r\n                    // Check for alternative header names\r\n                    const headerMapping = {\r\n                        'item_name': ['item_name', 'item name', 'itemname', 'product_name', 'product name', 'name'],\r\n                        'category': ['category', 'item_category', 'product_category', 'type'],\r\n                        'cost_price': ['cost_price', 'cost price', 'costprice', 'cost', 'purchase_price', 'cp'],\r\n                        'selling_price': ['selling_price', 'selling price', 'sellingprice', 'price', 'sale_price', 'sp'],\r\n                        'sale_date': ['sale_date', 'sale date', 'saledate', 'date', 'purchase_date'],\r\n                        'customer_name': ['customer_name', 'customer name', 'customername', 'customer', 'buyer']\r\n                    };\r\n\r\n                    // Find column indices\r\n                    const columnIndices = {};\r\n                    let missingColumns = [];\r\n\r\n                    for (const [key, alternatives] of Object.entries(headerMapping)) {\r\n                        const foundIndex = headers.findIndex(h => alternatives.includes(h));\r\n                        if (foundIndex >= 0) {\r\n                            columnIndices[key] = foundIndex;\r\n                        } else {\r\n                            missingColumns.push(key);\r\n                        }\r\n                    }\r\n\r\n                    if (missingColumns.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingColumns.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Optional columns\r\n                    const phoneIndex = headers.findIndex(h => ['customer_phone', 'customer phone', 'phone', 'mobile'].includes(h));\r\n                    const addressIndex = headers.findIndex(h => ['customer_address', 'customer address', 'address'].includes(h));\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        try {\r\n                            const itemName = values[columnIndices.item_name]?.trim();\r\n                            const category = values[columnIndices.category]?.trim();\r\n                            const costPrice = parseFloat(values[columnIndices.cost_price]) || 0;\r\n                            const sellingPrice = parseFloat(values[columnIndices.selling_price]) || 0;\r\n                            const saleDate = values[columnIndices.sale_date]?.trim();\r\n                            const customerName = values[columnIndices.customer_name]?.trim();\r\n                            const customerPhone = phoneIndex >= 0 ? values[phoneIndex]?.trim() || '' : '';\r\n                            const customerAddress = addressIndex >= 0 ? values[addressIndex]?.trim() || '' : '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${i + 1}: Missing required fields`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${i + 1}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate date format\r\n                            const dateObj = new Date(saleDate);\r\n                            if (isNaN(dateObj.getTime())) {\r\n                                errors.push(`Row ${i + 1}: Invalid date format \"${saleDate}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: saleDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${i + 1}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import sales from Excel\r\n        function importExcelSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    jsonData.forEach((row, index) => {\r\n                        try {\r\n                            // Try different column name variations\r\n                            const itemName = row['Item Name'] || row['Item_Name'] || row['itemname'] || row['Product Name'] || row['Name'];\r\n                            const category = row['Category'] || row['Item Category'] || row['Type'];\r\n                            const costPrice = parseFloat(row['Cost Price'] || row['Cost_Price'] || row['costprice'] || row['Cost'] || row['CP']) || 0;\r\n                            const sellingPrice = parseFloat(row['Selling Price'] || row['Selling_Price'] || row['sellingprice'] || row['Price'] || row['SP']) || 0;\r\n                            const saleDate = row['Sale Date'] || row['Sale_Date'] || row['saledate'] || row['Date'];\r\n                            const customerName = row['Customer Name'] || row['Customer_Name'] || row['customername'] || row['Customer'];\r\n                            const customerPhone = row['Customer Phone'] || row['Customer_Phone'] || row['Phone'] || row['Mobile'] || '';\r\n                            const customerAddress = row['Customer Address'] || row['Customer_Address'] || row['Address'] || '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${index + 2}: Missing required fields`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${index + 2}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate and format date\r\n                            let formattedDate = saleDate;\r\n                            if (saleDate instanceof Date) {\r\n                                formattedDate = saleDate.toISOString().split('T')[0];\r\n                            } else if (typeof saleDate === 'string') {\r\n                                const dateObj = new Date(saleDate);\r\n                                if (isNaN(dateObj.getTime())) {\r\n                                    errors.push(`Row ${index + 2}: Invalid date format \"${saleDate}\"`);\r\n                                    skippedCount++;\r\n                                    return;\r\n                                }\r\n                                formattedDate = dateObj.toISOString().split('T')[0];\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: formattedDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${index + 2}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download sales import template\r\n        function downloadSalesTemplate() {\r\n            const csvContent = [\r\n                'item_name,category,cost_price,selling_price,sale_date,customer_name,customer_phone,customer_address',\r\n                'Gold Plated Necklace,Necklaces,500,800,2024-01-15,John Doe,+91-9876543210,123 Main Street Mumbai',\r\n                'Diamond Earrings,Earrings,1000,1500,2024-01-16,Jane Smith,+91-8765432109,456 Oak Avenue Delhi',\r\n                'Silver Bracelet,Bracelets,300,450,2024-01-17,Mike Johnson,+91-7654321098,789 Pine Road Bangalore'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'sales_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Sales import template downloaded! Use this format for importing sales data.');\r\n        }\r\n\r\n        // Sales search and filter functionality\r\n        let filteredSalesData = [];\r\n        let isSearchActive = false;\r\n\r\n        function filterSales() {\r\n            const searchTerm = document.getElementById('sales-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                // Clear filter\r\n                isSearchActive = false;\r\n                filteredSalesData = [];\r\n                resetSalesDisplay();\r\n                loadSalesRecords();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return; // Wait for at least 2 characters\r\n            }\r\n\r\n            // Filter sales data\r\n            filteredSalesData = salesData.filter(sale =>\r\n                sale.itemName.toLowerCase().includes(searchTerm) ||\r\n                sale.customerName.toLowerCase().includes(searchTerm) ||\r\n                sale.category.toLowerCase().includes(searchTerm) ||\r\n                (sale.customerPhone && sale.customerPhone.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isSearchActive = true;\r\n            displayFilteredSales();\r\n        }\r\n\r\n        function displayFilteredSales() {\r\n            const salesRecordsDiv = document.getElementById('sales-records');\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n            const noSalesMessage = document.getElementById('no-sales-message');\r\n\r\n            if (filteredSalesData.length === 0) {\r\n                salesRecordsDiv.innerHTML = '';\r\n                loadMoreContainer.style.display = 'none';\r\n                noSalesMessage.style.display = 'block';\r\n                noSalesMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Sales Found</h3>\r\n                    <p>No sales records match your search criteria.</p>\r\n                `;\r\n                document.getElementById('sales-count').textContent = '0';\r\n                return;\r\n            }\r\n\r\n            // Display all filtered results\r\n            salesRecordsDiv.innerHTML = filteredSalesData.map(sale => createSaleItemHTML(sale)).join('');\r\n            loadMoreContainer.style.display = 'none';\r\n            noSalesMessage.style.display = 'none';\r\n            document.getElementById('sales-count').textContent = filteredSalesData.length;\r\n\r\n            // Update summary for filtered data\r\n            updateSalesSummary(filteredSalesData);\r\n        }\r\n\r\n        function clearSalesFilter() {\r\n            document.getElementById('sales-search').value = '';\r\n            isSearchActive = false;\r\n            filteredSalesData = [];\r\n            resetSalesDisplay();\r\n            loadSalesRecords();\r\n        }\r\n\r\n        function updateSalesSummary(dataToSummarize = null) {\r\n            const dataToUse = dataToSummarize || salesData;\r\n\r\n            const totalSales = dataToUse.length;\r\n            const totalCost = dataToUse.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = dataToUse.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = totalSelling - totalCost;\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n        }\r\n\r\n        function createSaleItemHTML(sale) {\r\n            const saleDate = new Date(sale.saleDate);\r\n            const formattedDate = saleDate.toLocaleDateString('en-IN', {\r\n                day: '2-digit',\r\n                month: 'short',\r\n                year: 'numeric'\r\n            });\r\n\r\n            const profitColor = sale.profit > 0 ? '#4ecdc4' : sale.profit < 0 ? '#ff6b6b' : '#666';\r\n\r\n            return `\r\n                <div class=\"sales-item\" style=\"position: relative; margin-bottom: 15px; padding: 15px; background: white; border-radius: 8px; border-left: 4px solid ${profitColor}; box-shadow: 0 2px 5px rgba(0,0,0,0.1);\">\r\n                    <div class=\"action-buttons\" style=\"position: absolute; top: 10px; right: 10px; display: flex; gap: 5px;\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale('${sale.id}')\" style=\"background: #007bff; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            ✏️ Edit\r\n                        </button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale('${sale.id}')\" style=\"background: #ff6b6b; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            🗑️ Delete\r\n                        </button>\r\n                    </div>\r\n\r\n                    <h4 style=\"margin: 0 0 8px 0; color: #333; font-size: 16px; padding-right: 120px;\">${sale.itemName}</h4>\r\n\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 14px; color: #666;\">\r\n                        <p style=\"margin: 0;\"><strong>📂 Category:</strong> ${sale.category}</p>\r\n                        <p style=\"margin: 0;\"><strong>📅 Date:</strong> ${formattedDate}</p>\r\n                        <p style=\"margin: 0;\"><strong>💰 Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>💵 Selling:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>📈 Profit:</strong> <span style=\"color: ${profitColor}; font-weight: bold;\">₹${sale.profit.toFixed(2)}</span></p>\r\n                        <p style=\"margin: 0;\"><strong>👤 Customer:</strong> ${sale.customerName}</p>\r\n                    </div>\r\n\r\n                    ${sale.customerPhone ? `<p style=\"margin: 8px 0 0 0; font-size: 13px; color: #888;\"><strong>📞 Phone:</strong> ${sale.customerPhone}</p>` : ''}\r\n                    ${sale.customerAddress ? `<p style=\"margin: 4px 0 0 0; font-size: 13px; color: #888;\"><strong>📍 Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Customer search functionality\r\n        function searchCustomers() {\r\n            const searchTerm = document.getElementById('customerSearch').value.trim().toLowerCase();\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            selectedSearchIndex = -1; // Reset selection\r\n\r\n            if (searchTerm.length < 2) {\r\n                resultsContainer.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Get unique customers from both database and sales data\r\n            const allUniqueCustomers = getUniqueCustomers();\r\n            \r\n            // Update total customer count\r\n            document.getElementById('total-customers').textContent = allUniqueCustomers.length;\r\n\r\n            // Filter customers based on search term\r\n            const matchingCustomers = allUniqueCustomers.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                customer.phone.toLowerCase().includes(searchTerm) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            if (matchingCustomers.length === 0) {\r\n                resultsContainer.innerHTML = '<div style=\"padding: 10px; color: #666; font-style: italic;\">No customers found. You can enter new customer details below.</div>';\r\n                resultsContainer.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            // Display matching customers\r\n            resultsContainer.innerHTML = matchingCustomers.map(customer => {\r\n                const lastPurchaseText = customer.lastPurchase \r\n                    ? `Last purchase: ${new Date(customer.lastPurchase).toLocaleDateString()}`\r\n                    : 'No purchases yet';\r\n                \r\n                const sourceIcon = customer.source === 'database' ? '📁' : '💳';\r\n                const sourceText = customer.source === 'database' ? 'In Customer DB' : 'From Sales Only';\r\n                \r\n                return `\r\n                <div style=\"padding: 12px; cursor: pointer; border-bottom: 1px solid #eee; transition: all 0.2s; border-left: 3px solid transparent;\"\r\n                     onclick=\"selectCustomer('${escapeQuotes(customer.name)}', '${escapeQuotes(customer.phone)}', '${escapeQuotes(customer.address)}', '${escapeQuotes(customer.email)}')\"\r\n                     onmouseover=\"this.style.backgroundColor='#f8f9fa'; this.style.borderLeftColor='#4ecdc4';\"\r\n                     onmouseout=\"this.style.backgroundColor='white'; this.style.borderLeftColor='transparent';\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 4px;\">\r\n                            <div style=\"font-weight: bold; color: #333; font-size: 15px;\">${customer.name}</div>\r\n                    <div style=\"font-size: 10px; color: #999; padding: 2px 6px; background: #f0f0f0; border-radius: 10px;\">\r\n                            ${sourceIcon} ${sourceText}\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 6px;\">\r\n                        ${customer.phone !== 'Not provided' ? \r\n                                `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📞 ${customer.phone}</div>` : ''}\r\n                        ${customer.email && customer.email !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📧 ${customer.email}</div>` : ''}\r\n                    ${customer.address && customer.address !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #888; margin-bottom: 6px; line-height: 1.3;\">📍 ${customer.address}</div>` : ''}\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 8px;\">\r\n                        </div>\r\n                    <div style=\"font-size: 11px; color: #4ecdc4; font-weight: 600;\">\r\n                            ${customer.totalPurchases > 0 ?\r\n                                `${customer.totalPurchases} purchase${customer.totalPurchases > 1 ? 's' : ''} • ₹${customer.totalSpent.toFixed(2)} total` :\r\n                                'New customer'\r\n                            }\r\n                        </div>\r\n                        <div style=\"font-size: 10px; color: #999; font-style: italic;\">\r\n                            ${lastPurchaseText}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            }).join('');\r\n\r\n            resultsContainer.style.display = 'block';\r\n        }\r\n\r\n        // Get customers from customer database and sales data with purchase stats\r\n        function getUniqueCustomers() {\r\n            const allCustomers = new Map();\r\n\r\n            // Add customers from customer database\r\n            customersData.forEach(customer => {\r\n                const customerSales = salesData.filter(sale =>\r\n                    sale.customerName.toLowerCase() === customer.name.toLowerCase() ||\r\n                    sale.customerPhone === customer.phone\r\n                );\r\n\r\n                const totalPurchases = customerSales.length;\r\n                const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                const lastPurchase = customerSales.length > 0 \r\n                    ? Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime()))\r\n                    : null;\r\n\r\n                const customerKey = customer.name.toLowerCase() + '|' + (customer.phone || '');\r\n                allCustomers.set(customerKey, {\r\n                    name: customer.name,\r\n                    phone: customer.phone || 'Not provided',\r\n                    address: customer.address || 'Not provided',\r\n                    email: customer.email || 'Not provided',\r\n                    totalPurchases: totalPurchases,\r\n                    totalSpent: totalSpent,\r\n                    lastPurchase: lastPurchase,\r\n                    source: 'database'\r\n                });\r\n            });\r\n\r\n            // Add customers from sales data who are not in customer database\r\n            salesData.forEach(sale => {\r\n                const customerKey = sale.customerName.toLowerCase() + '|' + (sale.customerPhone || '');\r\n                \r\n                if (!allCustomers.has(customerKey)) {\r\n                    const customerSales = salesData.filter(s =>\r\n                        s.customerName.toLowerCase() === sale.customerName.toLowerCase() ||\r\n                        (s.customerPhone && sale.customerPhone && s.customerPhone === sale.customerPhone)\r\n                    );\r\n\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, s) => sum + s.sellingPrice, 0);\r\n                    const lastPurchase = Math.max(...customerSales.map(s => new Date(s.saleDate).getTime()));\r\n\r\n                    allCustomers.set(customerKey, {\r\n                        name: sale.customerName,\r\n                        phone: sale.customerPhone || 'Not provided',\r\n                        address: sale.customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        totalPurchases: totalPurchases,\r\n                        totalSpent: totalSpent,\r\n                        lastPurchase: lastPurchase,\r\n                        source: 'sales'\r\n                    });\r\n                }\r\n            });\r\n\r\n            // Convert to array and sort by total spent (descending), then by last purchase date (descending)\r\n            return Array.from(allCustomers.values()).sort((a, b) => {\r\n                if (b.totalSpent !== a.totalSpent) {\r\n                    return b.totalSpent - a.totalSpent;\r\n                }\r\n                if (a.lastPurchase && b.lastPurchase) {\r\n                    return b.lastPurchase - a.lastPurchase;\r\n                }\r\n                return a.lastPurchase ? -1 : (b.lastPurchase ? 1 : 0);\r\n            });\r\n        }\r\n\r\n        // Escape quotes for HTML attributes\r\n        function escapeQuotes(str) {\r\n            if (!str) return '';\r\n            return str.replace(/'/g, '&#39;').replace(/\"/g, '&quot;');\r\n        }\r\n\r\n        // Select customer from search results\r\n        function selectCustomer(name, phone, address, email) {\r\n            document.getElementById('customerName').value = name;\r\n            document.getElementById('customerPhone').value = phone !== 'Not provided' ? phone : '';\r\n            document.getElementById('customerAddress').value = address !== 'Not provided' ? address : '';\r\n\r\n            // Clear search\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n\r\n            // Show success message\r\n            showSuccess(`✅ Customer \"${name}\" selected! Details filled automatically.`);\r\n\r\n            // Focus on item name field\r\n            document.getElementById('itemName').focus();\r\n        }\r\n\r\n        // Clear customer search\r\n        function clearCustomerSearch() {\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n        }\r\n\r\n        // Handle keyboard navigation in search\r\n        let selectedSearchIndex = -1;\r\n        function handleSearchKeydown(event) {\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            const results = resultsContainer.querySelectorAll('[onclick*=\"selectCustomer\"]');\r\n\r\n            if (results.length === 0) return;\r\n\r\n            switch(event.key) {\r\n                case 'ArrowDown':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.min(selectedSearchIndex + 1, results.length - 1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'ArrowUp':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.max(selectedSearchIndex - 1, -1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'Enter':\r\n                    event.preventDefault();\r\n                    if (selectedSearchIndex >= 0 && selectedSearchIndex < results.length) {\r\n                        results[selectedSearchIndex].click();\r\n                    }\r\n                    break;\r\n                case 'Escape':\r\n                    clearCustomerSearch();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function highlightSearchResult(results) {\r\n            // Remove previous highlights\r\n            results.forEach((result, index) => {\r\n                if (index === selectedSearchIndex) {\r\n                    result.style.backgroundColor = '#4ecdc4';\r\n                    result.style.color = 'white';\r\n                } else {\r\n                    result.style.backgroundColor = 'white';\r\n                    result.style.color = 'inherit';\r\n                }\r\n            });\r\n        }\r\n\r\n        // Hide search results when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const searchContainer = document.getElementById('customerSearch').parentElement;\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n\r\n            if (!searchContainer.contains(event.target)) {\r\n                resultsContainer.style.display = 'none';\r\n            }\r\n        });\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            const profitField = document.getElementById('profit');\r\n            profitField.value = profit.toFixed(2);\r\n\r\n            // Change color based on profit\r\n            if (profit > 0) {\r\n                profitField.style.color = '#4ecdc4';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else if (profit < 0) {\r\n                profitField.style.color = '#ff6b6b';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else {\r\n                profitField.style.color = '#666';\r\n                profitField.style.fontWeight = 'normal';\r\n            }\r\n        }\r\n\r\n        // Add sale record function\r\n        function addSaleRecord() {\r\n            try {\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const category = document.getElementById('category').value;\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validate required fields\r\n                if (!itemName) {\r\n                    showError('Please enter item name');\r\n                    return;\r\n                }\r\n                if (!category) {\r\n                    showError('Please select a category');\r\n                    return;\r\n                }\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    showError('Please enter a valid cost price');\r\n                    return;\r\n                }\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    showError('Please enter a valid selling price');\r\n                    return;\r\n                }\r\n                if (!saleDate) {\r\n                    showError('Please select a sale date');\r\n                    return;\r\n                }\r\n                if (!customerName) {\r\n                    showError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Save customer to database automatically when adding sale\r\n                saveCustomerFromSale(customerName, customerPhone, customerAddress);\r\n\r\n                // Create sale record\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: category,\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                document.getElementById('customerSearch').value = '';\r\n                document.getElementById('customer-search-results').style.display = 'none';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Reset sales display to show latest sales\r\n                resetSalesDisplay();\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Show success message\r\n                showSuccess('✅ Sale record added successfully! Customer saved to database.');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                showError('Error adding sale record: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Save customer from sale entry automatically\r\n        function saveCustomerFromSale(customerName, customerPhone, customerAddress) {\r\n            try {\r\n                if (!customerName.trim()) return;\r\n\r\n                // Check if customer already exists by name or phone\r\n                const existingCustomerIndex = customersData.findIndex(customer => \r\n                    customer.name.toLowerCase() === customerName.toLowerCase() ||\r\n                    (customerPhone && customer.phone === customerPhone)\r\n                );\r\n\r\n                if (existingCustomerIndex !== -1) {\r\n                    // Update existing customer with any new information\r\n                    const existingCustomer = customersData[existingCustomerIndex];\r\n                    let updated = false;\r\n\r\n                    if (customerPhone && customerPhone !== existingCustomer.phone && existingCustomer.phone === 'Not provided') {\r\n                        existingCustomer.phone = customerPhone;\r\n                        updated = true;\r\n                    }\r\n\r\n                    if (customerAddress && customerAddress !== existingCustomer.address && existingCustomer.address === 'Not provided') {\r\n                        existingCustomer.address = customerAddress;\r\n                        updated = true;\r\n                    }\r\n\r\n                    // Update last purchase date\r\n                    existingCustomer.lastPurchase = new Date().toISOString();\r\n                    updated = true;\r\n\r\n                    if (updated) {\r\n                        customersData[existingCustomerIndex] = existingCustomer;\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                    }\r\n                } else {\r\n                    // Add new customer\r\n                    const newCustomer = {\r\n                        id: Date.now(),\r\n                        name: customerName,\r\n                        phone: customerPhone || 'Not provided',\r\n                        address: customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        status: 'active',\r\n                        notes: `Auto-added from sale entry on ${new Date().toLocaleDateString()}`,\r\n                        createdAt: new Date().toISOString(),\r\n                        lastPurchase: new Date().toISOString()\r\n                    };\r\n\r\n                    customersData.push(newCustomer);\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                }\r\n            } catch (error) {\r\n                console.error('Error saving customer from sale:', error);\r\n                // Don't throw error to not interrupt sale process\r\n            }\r\n        }\r\n\r\n        // Show success message\r\n        function showSuccess(message) {\r\n            const successDiv = document.getElementById('success-message');\r\n            const errorDiv = document.getElementById('error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show error message\r\n        function showError(message) {\r\n            const errorDiv = document.getElementById('error-message');\r\n            const successDiv = document.getElementById('success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n\r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n\r\n            countElement.textContent = salesData.length;\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n\r\n            // Show sales with pagination\r\n            const recentSales = salesData.slice().reverse(); // All sales in reverse order\r\n            const salesToShow = recentSales.slice(0, displayedSalesCount);\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n\r\n            container.innerHTML = salesToShow.map(sale => `\r\n                <div class=\"sales-item\" id=\"sale-item-${sale.id}\">\r\n                    <div class=\"action-buttons\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale(${sale.id})\" title=\"Edit Sale\">✏️</button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\" title=\"Delete Sale\">🗑️</button>\r\n                    </div>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n\r\n            // Show/hide Load More button\r\n            if (recentSales.length > displayedSalesCount) {\r\n                loadMoreContainer.style.display = 'block';\r\n                const remainingCount = recentSales.length - displayedSalesCount;\r\n                document.getElementById('load-more-btn').innerHTML = `📖 Load More Sales (${remainingCount} remaining)`;\r\n            } else {\r\n                loadMoreContainer.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n\r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Edit sale functionality\r\n        let currentEditingSaleId = null;\r\n\r\n        function editSale(id) {\r\n            // Check if another sale is being edited\r\n            if (currentEditingSaleId && currentEditingSaleId !== id) {\r\n                showError('Please finish editing the current sale before editing another one.');\r\n                return;\r\n            }\r\n\r\n            const sale = salesData.find(s => s.id === id);\r\n            if (!sale) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const saleItem = document.getElementById(`sale-item-${id}`);\r\n            if (!saleItem) {\r\n                showError('Sale item not found in DOM!');\r\n                return;\r\n            }\r\n\r\n            currentEditingSaleId = id;\r\n\r\n            // Create edit form\r\n            const editForm = `\r\n                <div class=\"edit-form\">\r\n                    <h4>✏️ Edit Sale Record</h4>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-itemName-${id}\">Item Name *</label>\r\n                            <input type=\"text\" id=\"edit-itemName-${id}\" value=\"${sale.itemName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-category-${id}\">Category *</label>\r\n                            <select id=\"edit-category-${id}\" required>\r\n                                <option value=\"Necklaces\" ${sale.category === 'Necklaces' ? 'selected' : ''}>Necklaces</option>\r\n                                <option value=\"Earrings\" ${sale.category === 'Earrings' ? 'selected' : ''}>Earrings</option>\r\n                                <option value=\"Bracelets\" ${sale.category === 'Bracelets' ? 'selected' : ''}>Bracelets</option>\r\n                                <option value=\"Rings\" ${sale.category === 'Rings' ? 'selected' : ''}>Rings</option>\r\n                                <option value=\"Anklets\" ${sale.category === 'Anklets' ? 'selected' : ''}>Anklets</option>\r\n                                <option value=\"Sets\" ${sale.category === 'Sets' ? 'selected' : ''}>Sets</option>\r\n                                <option value=\"Bangles\" ${sale.category === 'Bangles' ? 'selected' : ''}>Bangles</option>\r\n                                <option value=\"Chains\" ${sale.category === 'Chains' ? 'selected' : ''}>Chains</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-costPrice-${id}\">Cost Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-costPrice-${id}\" value=\"${sale.costPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-sellingPrice-${id}\">Selling Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-sellingPrice-${id}\" value=\"${sale.sellingPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-profit-${id}\">Profit (₹)</label>\r\n                            <input type=\"number\" id=\"edit-profit-${id}\" value=\"${sale.profit}\" readonly style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-saleDate-${id}\">Sale Date *</label>\r\n                            <input type=\"date\" id=\"edit-saleDate-${id}\" value=\"${sale.saleDate}\" required>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerName-${id}\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"edit-customerName-${id}\" value=\"${sale.customerName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerPhone-${id}\">Customer Phone</label>\r\n                            <input type=\"tel\" id=\"edit-customerPhone-${id}\" value=\"${sale.customerPhone}\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-group\">\r\n                        <label for=\"edit-customerAddress-${id}\">Customer Address</label>\r\n                        <textarea id=\"edit-customerAddress-${id}\" rows=\"2\">${sale.customerAddress || ''}</textarea>\r\n                    </div>\r\n                    <div class=\"edit-form-buttons\">\r\n                        <button class=\"save-edit-btn\" onclick=\"saveSaleEdit(${id})\">💾 Save Changes</button>\r\n                        <button class=\"cancel-edit-btn\" onclick=\"cancelSaleEdit(${id})\">❌ Cancel</button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            saleItem.innerHTML = editForm;\r\n\r\n            // Scroll the edited item into view\r\n            saleItem.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n\r\n        function calculateEditProfit(id) {\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            document.getElementById(`edit-profit-${id}`).value = profit.toFixed(2);\r\n        }\r\n\r\n        function saveSaleEdit(id) {\r\n            const itemName = document.getElementById(`edit-itemName-${id}`).value.trim();\r\n            const category = document.getElementById(`edit-category-${id}`).value;\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value);\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value);\r\n            const saleDate = document.getElementById(`edit-saleDate-${id}`).value;\r\n            const customerName = document.getElementById(`edit-customerName-${id}`).value.trim();\r\n            const customerPhone = document.getElementById(`edit-customerPhone-${id}`).value.trim();\r\n            const customerAddress = document.getElementById(`edit-customerAddress-${id}`).value.trim();\r\n\r\n            // Validation\r\n            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                showError('Please fill in all required fields marked with *');\r\n                return;\r\n            }\r\n\r\n            if (costPrice < 0 || sellingPrice < 0) {\r\n                showError('Cost price and selling price must be positive numbers');\r\n                return;\r\n            }\r\n\r\n            // Find and update the sale\r\n            const saleIndex = salesData.findIndex(s => s.id === id);\r\n            if (saleIndex === -1) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            // Update the sale data\r\n            salesData[saleIndex] = {\r\n                ...salesData[saleIndex],\r\n                itemName,\r\n                category,\r\n                costPrice,\r\n                sellingPrice,\r\n                profit,\r\n                saleDate,\r\n                customerName,\r\n                customerPhone: customerPhone || 'Not provided',\r\n                customerAddress: customerAddress || 'Not provided'\r\n            };\r\n\r\n            // Save to localStorage\r\n            localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n            // Reset editing state\r\n            currentEditingSaleId = null;\r\n\r\n            // Refresh displays\r\n            loadSalesRecords();\r\n            updateDashboard();\r\n            loadCustomers();\r\n\r\n            showSuccess('Sale record updated successfully!');\r\n        }\r\n\r\n        function cancelSaleEdit(id) {\r\n            currentEditingSaleId = null;\r\n            loadSalesRecords();\r\n        }\r\n\r\n        // Load more sales functionality\r\n        function loadMoreSales() {\r\n            displayedSalesCount += 20; // Load 20 more sales\r\n            loadSalesRecords();\r\n\r\n            // Smooth scroll to maintain position\r\n            const loadMoreBtn = document.getElementById('load-more-btn');\r\n            setTimeout(() => {\r\n                loadMoreBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }, 100);\r\n        }\r\n\r\n        // Reset displayed sales count when needed\r\n        function resetSalesDisplay() {\r\n            displayedSalesCount = 20;\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n\r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n\r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n\r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n\r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n\r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n\r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n\r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n\r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n\r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer =>\r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers with enhanced display\r\n        function loadCustomers() {\r\n            const countElement = document.getElementById('customers-count');\r\n            countElement.textContent = customersData.length;\r\n\r\n            // Reset pagination and filters when loading fresh data\r\n            currentCustomerPage = 1;\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n\r\n            // Clear search and sort inputs\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            currentCustomerSort = 'name-asc';\r\n\r\n            // Display the enhanced customer database\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        // Download customers Excel report\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const customersWithStats = customersData.map(customer => {\r\n                    const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                    const lastPurchase = customerSales.length > 0 ?\r\n                        new Date(Math.max(...customerSales.map(sale => new Date(sale.saleDate)))).toLocaleDateString() : 'Never';\r\n\r\n                    return {\r\n                        'Customer Name': customer.name,\r\n                        'Phone': customer.phone || 'Not provided',\r\n                        'Email': customer.email || 'Not provided',\r\n                        'Address': customer.address || 'Not provided',\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Average Order Value (₹)': totalPurchases > 0 ? (totalSpent / totalPurchases).toFixed(2) : 0,\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Customer Status': totalPurchases > 0 ? 'Active' : 'Inactive',\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Database');\r\n\r\n                const fileName = `Customer_Database_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Customer database exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting customers:', error);\r\n                showError('Error exporting customer data: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nThis will NOT affect sales records, but customer search functionality will be limited.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL CUSTOMERS\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL CUSTOMERS') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        updateCustomerCount();\r\n                        showSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL CUSTOMERS\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n\r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n\r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n\r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n\r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n\r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n\r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n\r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n\r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n\r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n\r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n\r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n\r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong>\r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' :\r\n                          month.profitMargin > 10 ? '📊 Good Performance' :\r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n\r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n\r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n\r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                    // Find top category\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n\r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' :\r\n                                         month.profitMargin > 10 ? 'Good' :\r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n\r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n\r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n\r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n\r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n\r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong>\r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' :\r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' :\r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n\r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong>\r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' :\r\n                          cat.salesPercentage > 20 ? '📈 High Demand' :\r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' :\r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n\r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n\r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n\r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n\r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n\r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' :\r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' :\r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n\r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Customer Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n\r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' :\r\n                                   cat.salesPercentage > 20 ? 'High Demand' :\r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' :\r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n\r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Category Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n\r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n\r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n\r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n\r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Sales Trends exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n</html>\r\n"
                    },
                    {
                        "path": "jewelry_sales_fixed.html",
                        "fsPath": "jewelry_sales_fixed.html"
                    },
                    {
                        "path": "jewelry_sales_simple.html",
                        "fsPath": "jewelry_sales_simple.html"
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "jewelry_sales_tracker.html"
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "jewelry_sales_working.html"
                    }
                ]
            },
            "createdAt": 1751270396145,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "redesign using below point"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "1. Design a modern, intuitive user interface that prioritizes:"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Easy navigation and clear menu structure"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Consistent visual elements and color scheme"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Responsive layout that works across all devices"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Accessible design features for all users"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "2. Enhance interactivity by incorporating:"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Smooth animations and transitions"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Clear feedback for user actions"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Interactive elements (buttons, forms, menus)"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Loading states and progress indicators"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "3. Implement these specific UI/UX elements:"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Clear call-to-action buttons"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Intuitive form layouts"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Readable typography with proper hierarchy"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Adequate white space and padding"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Error handling with user-friendly messages"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "4. Focus on these visual aspects:"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Color palette (provide specific hex codes)"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Typography choices (specify fonts)"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Icon style and placement"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Image guidelines and dimensions"
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "- Component spacing and alignment"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "4bf751be-9384-4322-b5a2-416bf8a5f5a8",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I'll help you redesign the jewelry sales management system with a modern, intuitive UI that addresses all your requirements. Let me create a completely redesigned version that incorporates the latest UI/UX best practices."
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01AfDGTx75Cn1uxGjRws87qb",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -6,7 +6,7 @@\n     <title>Theia Jewelz - Sales Management System</title>\n \n     <!-- PWA Meta Tags -->\n-    <meta name=\"theme-color\" content=\"#007bff\">\n+    <meta name=\"theme-color\" content=\"#6366F1\">\n     <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n     <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\n     <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\n@@ -22,6 +22,14 @@\n \n     <!-- Manifest -->\n     <link rel=\"manifest\" href=\"./manifest.json\">\n+\n+    <!-- Modern Typography -->\n+    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n+    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n+    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@300;400;500;600;700;800&display=swap\" rel=\"stylesheet\">\n+    \n+    <!-- Icons -->\n+    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n \n     <!-- External Libraries -->\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
                    "refToolCallId": "toolu_01AfDGTx75Cn1uxGjRws87qb"
                },
                {
                    "type": "text",
                    "text": "Now, let me redesign the entire CSS with a modern color palette, improved typography, and enhanced interactivity:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01GicrJ9LswaeMe7BvN9Wuii",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me replace the entire CSS section with a modern, comprehensive design:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01KEFXGori4bjCfyTBUcwjeE",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -35,18 +35,131 @@\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\n     <style>\n+        /* ======== DESIGN SYSTEM ======== */\n+        :root {\n+            /* Modern Color Palette */\n+            --primary-600: #6366F1;\n+            --primary-500: #8B5CF6;\n+            --primary-400: #A78BFA;\n+            --primary-300: #C4B5FD;\n+            --primary-100: #EDE9FE;\n+            --primary-50: #F5F3FF;\n+            \n+            --secondary-600: #DB2777;\n+            --secondary-500: #EC4899;\n+            --secondary-400: #F472B6;\n+            --secondary-300: #F9A8D4;\n+            --secondary-100: #FCE7F3;\n+            \n+            --accent-600: #059669;\n+            --accent-500: #10B981;\n+            --accent-400: #34D399;\n+            --accent-300: #6EE7B7;\n+            --accent-100: #D1FAE5;\n+            \n+            --neutral-900: #111827;\n+            --neutral-800: #1F2937;\n+            --neutral-700: #374151;\n+            --neutral-600: #4B5563;\n+            --neutral-500: #6B7280;\n+            --neutral-400: #9CA3AF;\n+            --neutral-300: #D1D5DB;\n+            --neutral-200: #E5E7EB;\n+            --neutral-100: #F3F4F6;\n+            --neutral-50: #F9FAFB;\n+            \n+            --error-600: #DC2626;\n+            --error-500: #EF4444;\n+            --error-100: #FEE2E2;\n+            \n+            --warning-600: #D97706;\n+            --warning-500: #F59E0B;\n+            --warning-100: #FEF3C7;\n+            \n+            --success-600: #059669;\n+            --success-500: #10B981;\n+            --success-100: #D1FAE5;\n+            \n+            /* Typography */\n+            --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n+            --font-secondary: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n+            \n+            /* Spacing */\n+            --space-1: 0.25rem;\n+            --space-2: 0.5rem;\n+            --space-3: 0.75rem;\n+            --space-4: 1rem;\n+            --space-5: 1.25rem;\n+            --space-6: 1.5rem;\n+            --space-8: 2rem;\n+            --space-10: 2.5rem;\n+            --space-12: 3rem;\n+            --space-16: 4rem;\n+            --space-20: 5rem;\n+            \n+            /* Border Radius */\n+            --radius-sm: 0.375rem;\n+            --radius-md: 0.5rem;\n+            --radius-lg: 0.75rem;\n+            --radius-xl: 1rem;\n+            --radius-2xl: 1.5rem;\n+            \n+            /* Shadows */\n+            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n+            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n+            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n+            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n+            --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n+            \n+            /* Transitions */\n+            --transition-fast: 150ms ease-in-out;\n+            --transition-normal: 300ms ease-in-out;\n+            --transition-slow: 500ms ease-in-out;\n+        }\n+\n+        /* ======== RESET & BASE STYLES ======== */\n         * {\n             margin: 0;\n             padding: 0;\n             box-sizing: border-box;\n         }\n \n+        *:focus {\n+            outline: 2px solid var(--primary-600);\n+            outline-offset: 2px;\n+        }\n+\n+        html {\n+            scroll-behavior: smooth;\n+        }\n+\n         body {\n-            font-family: Arial, sans-serif;\n-            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n+            font-family: var(--font-primary);\n+            font-size: 16px;\n+            line-height: 1.6;\n+            color: var(--neutral-800);\n+            background: linear-gradient(135deg, var(--primary-600) 0%, var(--secondary-600) 100%);\n             min-height: 100vh;\n-            padding: 10px;\n-        }\n+            padding: var(--space-4);\n+            overflow-x: hidden;\n+        }\n+\n+        /* ======== LOADING SPINNER ======== */\n+        .loading-spinner {\n+            display: inline-block;\n+            width: 20px;\n+            height: 20px;\n+            border: 2px solid var(--neutral-300);\n+            border-radius: 50%;\n+            border-top-color: var(--primary-600);\n+            animation: spin 1s ease-in-out infinite;\n+        }\n+\n+        @keyframes spin {\n+            to { transform: rotate(360deg); }\n+        }\n+\n+        /* ======== MAIN CONTAINER ======== */\n \n         .container {\n             max-width: 800px;",
                    "refToolCallId": "toolu_01KEFXGori4bjCfyTBUcwjeE"
                },
                {
                    "type": "text",
                    "text": "Now let me continue with the container and layout styles:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01MnVLfchFjTAcTRNCcaBeap",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me replace the old container and navigation styles with the modern design:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Bnb688HZyPHG7HJEeYvva5",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -160,57 +160,145 @@\n         }\n \n         /* ======== MAIN CONTAINER ======== */\n-\n         .container {\n-            max-width: 800px;\n+            max-width: 1200px;\n             margin: 0 auto;\n             background: white;\n-            border-radius: 15px;\n-            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n+            border-radius: var(--radius-2xl);\n+            box-shadow: var(--shadow-2xl);\n             overflow: hidden;\n-        }\n-\n+            backdrop-filter: blur(10px);\n+            animation: slideInUp 0.6s ease-out;\n+        }\n+\n+        @keyframes slideInUp {\n+            from {\n+                opacity: 0;\n+                transform: translate3d(0, 30px, 0);\n+            }\n+            to {\n+                opacity: 1;\n+                transform: translate3d(0, 0, 0);\n+            }\n+        }\n+\n+        /* ======== HEADER ======== */\n         .header {\n-            background: linear-gradient(45deg, #ff6b6b, #ffd93d);\n+            background: linear-gradient(135deg, var(--primary-600) 0%, var(--secondary-600) 100%);\n             color: white;\n             text-align: center;\n-            padding: 20px;\n-            font-size: 1.8em;\n-            font-weight: bold;\n-        }\n-\n+            padding: var(--space-8) var(--space-6);\n+            position: relative;\n+            overflow: hidden;\n+        }\n+\n+        .header::before {\n+            content: '';\n+            position: absolute;\n+            top: 0;\n+            left: 0;\n+            right: 0;\n+            bottom: 0;\n+            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grain\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"25\" cy=\"25\" r=\"1\" fill=\"white\" opacity=\"0.1\"/><circle cx=\"75\" cy=\"75\" r=\"1\" fill=\"white\" opacity=\"0.05\"/><circle cx=\"50\" cy=\"10\" r=\"0.5\" fill=\"white\" opacity=\"0.1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grain)\"/></svg>');\n+            pointer-events: none;\n+        }\n+\n+        .header h1 {\n+            font-family: var(--font-secondary);\n+            font-size: clamp(1.8rem, 4vw, 2.5rem);\n+            font-weight: 700;\n+            margin: 0;\n+            position: relative;\n+            z-index: 1;\n+            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n+        }\n+\n+        .header .subtitle {\n+            font-size: 1rem;\n+            opacity: 0.9;\n+            margin-top: var(--space-2);\n+            position: relative;\n+            z-index: 1;\n+        }\n+\n+        /* ======== NAVIGATION TABS ======== */\n         .tabs {\n             display: flex;\n-            background: #f8f9fa;\n-            border-bottom: 2px solid #e9ecef;\n+            background: var(--neutral-50);\n+            border-bottom: 1px solid var(--neutral-200);\n+            position: sticky;\n+            top: 0;\n+            z-index: 10;\n+            backdrop-filter: blur(10px);\n         }\n \n         .tab {\n             flex: 1;\n-            padding: 15px;\n+            padding: var(--space-4) var(--space-3);\n             text-align: center;\n             cursor: pointer;\n-            background: #f8f9fa;\n+            background: transparent;\n             border: none;\n-            font-size: 16px; \n+            font-family: var(--font-primary);\n+            font-size: 0.95rem;\n+            font-weight: 500;\n+            color: var(--neutral-600);\n+            transition: var(--transition-normal);\n+            position: relative;\n+            display: flex;\n+            align-items: center;\n+            justify-content: center;\n+            gap: var(--space-2);\n+            min-height: 60px;\n+        }\n+\n+        .tab:hover {\n+            background: var(--primary-50);\n+            color: var(--primary-700);\n+            transform: translateY(-1px);\n+        }\n+\n+        .tab.active {\n+            background: var(--primary-600);\n+            color: white;\n             font-weight: 600;\n-            transition: all 0.3s ease;\n-            color: #6c757d;\n-        }\n-\n-        .tab.active {\n-            background: #4ecdc4;\n-            color: white;\n-        }\n-\n+        }\n+\n+        .tab.active::after {\n+            content: '';\n+            position: absolute;\n+            bottom: 0;\n+            left: 0;\n+            right: 0;\n+            height: 3px;\n+            background: var(--accent-500);\n+        }\n+\n+        .tab i {\n+            font-size: 1.1rem;\n+        }\n+\n+        /* ======== TAB CONTENT ======== */\n         .tab-content {\n             display: none;\n-            padding: 20px;\n-            min-height: 500px;\n+            padding: var(--space-8) var(--space-6);\n+            min-height: 600px;\n+            animation: fadeIn 0.4s ease-in-out;\n         }\n \n         .tab-content.active {\n             display: block;\n+        }\n+\n+        @keyframes fadeIn {\n+            from {\n+                opacity: 0;\n+                transform: translateY(10px);\n+            }\n+            to {\n+                opacity: 1;\n+                transform: translateY(0);\n+            }\n         }\n \n         .form-group {",
                    "refToolCallId": "toolu_01Bnb688HZyPHG7HJEeYvva5"
                },
                {
                    "type": "text",
                    "text": "Now let me continue with the form styles and components:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01CxK6qwyu4eC8o5dyw61BBT",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me replace the old form styles with modern ones:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_015syPgi1b1C3bg3AqusqyAZ",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -301,30 +301,115 @@\n             }\n         }\n \n+        /* ======== FORM COMPONENTS ======== */\n+        .form-section {\n+            background: var(--neutral-50);\n+            border-radius: var(--radius-lg);\n+            padding: var(--space-6);\n+            margin-bottom: var(--space-6);\n+            border: 1px solid var(--neutral-200);\n+        }\n+\n+        .form-section h3 {\n+            font-family: var(--font-secondary);\n+            font-size: 1.25rem;\n+            font-weight: 600;\n+            color: var(--neutral-800);\n+            margin-bottom: var(--space-4);\n+            display: flex;\n+            align-items: center;\n+            gap: var(--space-2);\n+        }\n+\n+        .form-section h3 i {\n+            color: var(--primary-600);\n+        }\n+\n+        .form-grid {\n+            display: grid;\n+            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n+            gap: var(--space-4);\n+        }\n+\n         .form-group {\n-            margin-bottom: 15px;\n+            margin-bottom: var(--space-5);\n         }\n \n         .form-group label {\n             display: block;\n-            margin-bottom: 5px;\n-            font-weight: 600;\n-            color: #333;\n-        }\n-\n-        .form-group input,\n-        .form-group select {\n+            margin-bottom: var(--space-2);\n+            font-weight: 500;\n+            color: var(--neutral-700);\n+            font-size: 0.9rem;\n+            text-transform: uppercase;\n+            letter-spacing: 0.5px;\n+        }\n+\n+        .form-group label.required::after {\n+            content: '*';\n+            color: var(--error-500);\n+            margin-left: var(--space-1);\n+        }\n+\n+        .form-control {\n             width: 100%;\n-            padding: 12px;\n-            border: 2px solid #e9ecef;\n-            border-radius: 8px;\n-            font-size: 16px;\n-        }\n-\n-        .form-group input:focus,\n-        .form-group select:focus {\n+            padding: var(--space-3) var(--space-4);\n+            border: 2px solid var(--neutral-300);\n+            border-radius: var(--radius-md);\n+            font-size: 1rem;\n+            font-family: var(--font-primary);\n+            transition: var(--transition-normal);\n+            background: white;\n+            color: var(--neutral-800);\n+        }\n+\n+        .form-control:focus {\n             outline: none;\n-            border-color: #4ecdc4;\n+            border-color: var(--primary-600);\n+            box-shadow: 0 0 0 3px var(--primary-100);\n+            transform: translateY(-1px);\n+        }\n+\n+        .form-control:invalid {\n+            border-color: var(--error-500);\n+        }\n+\n+        .form-control:disabled {\n+            background: var(--neutral-100);\n+            color: var(--neutral-500);\n+            cursor: not-allowed;\n+        }\n+\n+        .form-control::placeholder {\n+            color: var(--neutral-400);\n+        }\n+\n+        .form-error {\n+            display: none;\n+            color: var(--error-600);\n+            font-size: 0.875rem;\n+            margin-top: var(--space-1);\n+            display: flex;\n+            align-items: center;\n+            gap: var(--space-1);\n+        }\n+\n+        .form-error i {\n+            font-size: 0.8rem;\n+        }\n+\n+        .form-success {\n+            display: none;\n+            color: var(--success-600);\n+            font-size: 0.875rem;\n+            margin-top: var(--space-1);\n+            display: flex;\n+            align-items: center;\n+            gap: var(--space-1);\n+        }\n+\n+        .form-success i {\n+            font-size: 0.8rem;\n         }\n \n         .btn {",
                    "refToolCallId": "toolu_015syPgi1b1C3bg3AqusqyAZ"
                },
                {
                    "type": "text",
                    "text": "Now let me add the button styles and interactive components:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01EzSa65m47Fb2Fj5vodbZ8P",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me replace the button styles with modern ones:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Cn3NYcLpVojvd8xVn73vTM",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -412,34 +412,156 @@\n             font-size: 0.8rem;\n         }\n \n+        /* ======== BUTTON COMPONENTS ======== */\n         .btn {\n+            display: inline-flex;\n+            align-items: center;\n+            justify-content: center;\n+            gap: var(--space-2);\n+            padding: var(--space-3) var(--space-6);\n+            border: none;\n+            border-radius: var(--radius-md);\n+            font-family: var(--font-primary);\n+            font-size: 0.95rem;\n+            font-weight: 500;\n+            text-decoration: none;\n+            cursor: pointer;\n+            transition: var(--transition-normal);\n+            position: relative;\n+            overflow: hidden;\n+            white-space: nowrap;\n+            user-select: none;\n+            min-height: 44px;\n+        }\n+\n+        .btn:disabled {\n+            opacity: 0.6;\n+            cursor: not-allowed;\n+            transform: none !important;\n+        }\n+\n+        .btn.loading {\n+            color: transparent;\n+        }\n+\n+        .btn.loading::after {\n+            content: '';\n+            position: absolute;\n+            width: 16px;\n+            height: 16px;\n+            top: 50%;\n+            left: 50%;\n+            margin-left: -8px;\n+            margin-top: -8px;\n+            border: 2px solid transparent;\n+            border-top-color: currentColor;\n+            border-radius: 50%;\n+            animation: spin 1s linear infinite;\n+        }\n+\n+        /* Button Variants */\n+        .btn-primary {\n+            background: linear-gradient(135deg, var(--primary-600), var(--primary-500));\n+            color: white;\n+            box-shadow: var(--shadow-md);\n+        }\n+\n+        .btn-primary:hover:not(:disabled) {\n+            background: linear-gradient(135deg, var(--primary-700), var(--primary-600));\n+            transform: translateY(-2px);\n+            box-shadow: var(--shadow-lg);\n+        }\n+\n+        .btn-primary:active {\n+            transform: translateY(0);\n+            box-shadow: var(--shadow-md);\n+        }\n+\n+        .btn-secondary {\n+            background: linear-gradient(135deg, var(--secondary-600), var(--secondary-500));\n+            color: white;\n+            box-shadow: var(--shadow-md);\n+        }\n+\n+        .btn-secondary:hover:not(:disabled) {\n+            background: linear-gradient(135deg, var(--secondary-700), var(--secondary-600));\n+            transform: translateY(-2px);\n+            box-shadow: var(--shadow-lg);\n+        }\n+\n+        .btn-accent {\n+            background: linear-gradient(135deg, var(--accent-600), var(--accent-500));\n+            color: white;\n+            box-shadow: var(--shadow-md);\n+        }\n+\n+        .btn-accent:hover:not(:disabled) {\n+            background: linear-gradient(135deg, var(--accent-700), var(--accent-600));\n+            transform: translateY(-2px);\n+            box-shadow: var(--shadow-lg);\n+        }\n+\n+        .btn-outline {\n+            background: transparent;\n+            border: 2px solid var(--primary-600);\n+            color: var(--primary-600);\n+        }\n+\n+        .btn-outline:hover:not(:disabled) {\n+            background: var(--primary-600);\n+            color: white;\n+            transform: translateY(-1px);\n+        }\n+\n+        .btn-ghost {\n+            background: transparent;\n+            color: var(--neutral-600);\n+            box-shadow: none;\n+        }\n+\n+        .btn-ghost:hover:not(:disabled) {\n+            background: var(--neutral-100);\n+            color: var(--neutral-800);\n+        }\n+\n+        .btn-danger {\n+            background: linear-gradient(135deg, var(--error-600), var(--error-500));\n+            color: white;\n+            box-shadow: var(--shadow-md);\n+        }\n+\n+        .btn-danger:hover:not(:disabled) {\n+            background: linear-gradient(135deg, var(--error-700), var(--error-600));\n+            transform: translateY(-2px);\n+            box-shadow: var(--shadow-lg);\n+        }\n+\n+        /* Button Sizes */\n+        .btn-sm {\n+            padding: var(--space-2) var(--space-4);\n+            font-size: 0.875rem;\n+            min-height: 36px;\n+        }\n+\n+        .btn-lg {\n+            padding: var(--space-4) var(--space-8);\n+            font-size: 1.1rem;\n+            min-height: 52px;\n+        }\n+\n+        .btn-full {\n             width: 100%;\n-            padding: 15px;\n-            border: none;\n-            border-radius: 8px;\n-            font-size: 16px;\n-            font-weight: 600;\n-            cursor: pointer;\n-            margin-top: 10px;\n-            color: white;\n-            transition: all 0.3s ease;\n-        }\n-\n-        .btn-primary {\n-            background: #4ecdc4;\n-        }\n-\n-        .btn-secondary {\n-            background: #ff6b6b;\n-        }\n-\n-        .btn:hover {\n-            opacity: 0.9;\n-            transform: translateY(-2px);\n-        }\n-\n-        .btn:active {\n-            transform: translateY(0);\n+        }\n+\n+        /* Button Groups */\n+        .btn-group {\n+            display: flex;\n+            gap: var(--space-2);\n+            margin-top: var(--space-4);\n+        }\n+\n+        .btn-group .btn {\n+            flex: 1;\n         }\n \n         .sales-item {",
                    "refToolCallId": "toolu_01Cn3NYcLpVojvd8xVn73vTM"
                },
                {
                    "type": "text",
                    "text": "Now let me add the card components and layout styles:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01JX7PxxrjPasYCAGSnpnKbR",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me replace the card and dashboard styles with modern ones:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01GvCWXpyxKxm9dpMXB43h9P",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -564,39 +564,149 @@\n             flex: 1;\n         }\n \n+        /* ======== CARD COMPONENTS ======== */\n+        .card {\n+            background: white;\n+            border-radius: var(--radius-lg);\n+            box-shadow: var(--shadow-md);\n+            border: 1px solid var(--neutral-200);\n+            overflow: hidden;\n+            transition: var(--transition-normal);\n+        }\n+\n+        .card:hover {\n+            box-shadow: var(--shadow-lg);\n+            transform: translateY(-2px);\n+        }\n+\n+        .card-header {\n+            padding: var(--space-4) var(--space-5);\n+            border-bottom: 1px solid var(--neutral-200);\n+            background: var(--neutral-50);\n+        }\n+\n+        .card-header h3 {\n+            margin: 0;\n+            font-size: 1.1rem;\n+            font-weight: 600;\n+            color: var(--neutral-800);\n+        }\n+\n+        .card-body {\n+            padding: var(--space-5);\n+        }\n+\n+        .card-footer {\n+            padding: var(--space-4) var(--space-5);\n+            background: var(--neutral-50);\n+            border-top: 1px solid var(--neutral-200);\n+        }\n+\n+        /* Sales Item Cards */\n         .sales-item {\n-            background: #f8f9fa;\n-            padding: 15px;\n-            margin-bottom: 10px;\n-            border-radius: 8px;\n-            border-left: 4px solid #4ecdc4;\n+            background: white;\n+            border: 1px solid var(--neutral-200);\n+            border-left: 4px solid var(--primary-600);\n+            border-radius: var(--radius-lg);\n+            padding: var(--space-5);\n+            margin-bottom: var(--space-4);\n             position: relative;\n+            transition: var(--transition-normal);\n+            box-shadow: var(--shadow-sm);\n+        }\n+\n+        .sales-item:hover {\n+            border-left-color: var(--accent-500);\n+            box-shadow: var(--shadow-md);\n+            transform: translateX(4px);\n+        }\n+\n+        .sales-item-header {\n+            display: flex;\n+            justify-content: space-between;\n+            align-items: start;\n+            margin-bottom: var(--space-3);\n         }\n \n         .sales-item h4 {\n-            color: #333;\n-            margin-bottom: 5px;\n-        }\n-\n-        .sales-item p {\n-            margin: 3px 0;\n-            color: #666;\n-            font-size: 14px;\n-        }\n-\n+            color: var(--neutral-800);\n+            font-size: 1.1rem;\n+            font-weight: 600;\n+            margin: 0;\n+        }\n+\n+        .sales-item-info {\n+            display: grid;\n+            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n+            gap: var(--space-3);\n+            margin-bottom: var(--space-3);\n+        }\n+\n+        .sales-item-info-item {\n+            display: flex;\n+            flex-direction: column;\n+        }\n+\n+        .sales-item-info-label {\n+            font-size: 0.8rem;\n+            font-weight: 500;\n+            color: var(--neutral-500);\n+            text-transform: uppercase;\n+            letter-spacing: 0.5px;\n+            margin-bottom: var(--space-1);\n+        }\n+\n+        .sales-item-info-value {\n+            font-size: 0.95rem;\n+            color: var(--neutral-700);\n+            font-weight: 500;\n+        }\n+\n+        .sales-item-amount {\n+            font-size: 1.2rem;\n+            font-weight: 700;\n+            color: var(--accent-600);\n+        }\n+\n+        /* Dashboard Stats */\n         .dashboard-stats {\n             display: grid;\n-            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n-            gap: 15px;\n-            margin-bottom: 20px;\n+            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n+            gap: var(--space-5);\n+            margin-bottom: var(--space-8);\n         }\n \n         .stat-card {\n-            background: linear-gradient(45deg, #667eea, #764ba2);\n+            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\n             color: white;\n-            padding: 20px;\n-            border-radius: 10px;\n+            padding: var(--space-6);\n+            border-radius: var(--radius-xl);\n             text-align: center;\n+            position: relative;\n+            overflow: hidden;\n+            box-shadow: var(--shadow-lg);\n+            transition: var(--transition-normal);\n+        }\n+\n+        .stat-card::before {\n+            content: '';\n+            position: absolute;\n+            top: -50%;\n+            right: -50%;\n+            width: 100%;\n+            height: 100%;\n+            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);\n+        }\n+\n+        .stat-card:hover {\n+            transform: translateY(-4px);\n+            box-shadow: var(--shadow-xl);\n+        }\n+\n+        .stat-card-icon {\n+            font-size: 2.5rem;\n+            margin-bottom: var(--space-3);\n+            opacity: 0.9;\n         }\n \n         .stat-card h3 {",
                    "refToolCallId": "toolu_01GvCWXpyxKxm9dpMXB43h9P"
                },
                {
                    "type": "text",
                    "text": "Now let me continue and complete the remaining styles, then update the HTML structure:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01HuhyrNxPNouFBv9UqZ3h1L",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me replace the remaining old styles with modern ones:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01ULGPfHUs6RQQSo2axuDWnB",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -710,79 +710,126 @@\n         }\n \n         .stat-card h3 {\n-            font-size: 28px;\n-            margin-bottom: 5px;\n+            font-size: 2.5rem;\n+            font-weight: 700;\n+            margin-bottom: var(--space-2);\n+            position: relative;\n+            z-index: 1;\n         }\n \n         .stat-card p {\n-            font-size: 14px;\n-        }\n-\n+            font-size: 0.95rem;\n+            opacity: 0.9;\n+            position: relative;\n+            z-index: 1;\n+        }\n+\n+        /* Chart Container */\n         .chart-container {\n             background: white;\n-            padding: 20px;\n-            border-radius: 10px;\n-            margin-bottom: 20px;\n-            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n-            height: 400px;\n-        }\n-\n+            border-radius: var(--radius-lg);\n+            box-shadow: var(--shadow-md);\n+            border: 1px solid var(--neutral-200);\n+            padding: var(--space-6);\n+            margin-bottom: var(--space-6);\n+            height: 450px;\n+            position: relative;\n+        }\n+\n+        .chart-header {\n+            display: flex;\n+            justify-content: space-between;\n+            align-items: center;\n+            margin-bottom: var(--space-4);\n+            padding-bottom: var(--space-3);\n+            border-bottom: 1px solid var(--neutral-200);\n+        }\n+\n+        .chart-title {\n+            font-size: 1.2rem;\n+            font-weight: 600;\n+            color: var(--neutral-800);\n+        }\n+\n+        /* Customer Item Cards */\n         .customer-item {\n-            background: #f8f9fa;\n-            padding: 15px;\n-            margin-bottom: 10px;\n-            border-radius: 8px;\n-            border-left: 4px solid #ff6b6b;\n-        }\n-\n+            background: white;\n+            border: 1px solid var(--neutral-200);\n+            border-left: 4px solid var(--secondary-600);\n+            border-radius: var(--radius-lg);\n+            padding: var(--space-5);\n+            margin-bottom: var(--space-4);\n+            position: relative;\n+            transition: var(--transition-normal);\n+            box-shadow: var(--shadow-sm);\n+        }\n+\n+        .customer-item:hover {\n+            border-left-color: var(--accent-500);\n+            box-shadow: var(--shadow-md);\n+            transform: translateX(4px);\n+        }\n+\n+        /* Empty State */\n         .no-data {\n             text-align: center;\n-            color: #666;\n+            color: var(--neutral-500);\n             font-style: italic;\n-            padding: 40px;\n-            font-size: 18px;\n-        }\n-\n-        .delete-btn {\n-            background: #ff6b6b;\n-            color: white;\n-            border: none;\n-            padding: 8px 12px;\n-            border-radius: 5px;\n-            cursor: pointer;\n-            font-size: 12px;\n-            position: absolute;\n-            top: 10px;\n-            right: 10px;\n-        }\n-\n-        .delete-btn:hover {\n-            background: #ff5252;\n-        }\n-\n-        .edit-btn {\n-            background: #007bff;\n-            color: white;\n-            border: none;\n-            padding: 8px 12px;\n-            border-radius: 5px;\n-            cursor: pointer;\n-            font-size: 12px;\n-            position: absolute;\n-            top: 10px;\n-            right: 60px;\n-        }\n-\n-        .edit-btn:hover {\n-            background: #0056b3;\n-        }\n-\n+            padding: var(--space-16);\n+            font-size: 1.1rem;\n+            background: var(--neutral-50);\n+            border-radius: var(--radius-lg);\n+            border: 2px dashed var(--neutral-300);\n+        }\n+\n+        .no-data i {\n+            font-size: 3rem;\n+            color: var(--neutral-400);\n+            margin-bottom: var(--space-4);\n+            display: block;\n+        }\n+\n+        /* Action Buttons */\n         .action-buttons {\n             position: absolute;\n-            top: 10px;\n-            right: 10px;\n+            top: var(--space-4);\n+            right: var(--space-4);\n             display: flex;\n-            gap: 5px;\n+            gap: var(--space-2);\n+            z-index: 2;\n+        }\n+\n+        .edit-btn, .delete-btn {\n+            padding: var(--space-2) var(--space-3);\n+            border: none;\n+            border-radius: var(--radius-md);\n+            cursor: pointer;\n+            font-size: 0.8rem;\n+            font-weight: 500;\n+            transition: var(--transition-fast);\n+            display: flex;\n+            align-items: center;\n+            gap: var(--space-1);\n+        }\n+\n+        .edit-btn {\n+            background: var(--primary-600);\n+            color: white;\n+        }\n+\n+        .edit-btn:hover {\n+            background: var(--primary-700);\n+            transform: translateY(-1px);\n+        }\n+\n+        .delete-btn {\n+            background: var(--error-600);\n+            color: white;\n+        }\n+\n+        .delete-btn:hover {\n+            background: var(--error-700);\n+            transform: translateY(-1px);\n         }\n \n         .sales-records-container {",
                    "refToolCallId": "toolu_01ULGPfHUs6RQQSo2axuDWnB"
                },
                {
                    "type": "text",
                    "text": "Now let me add the remaining utility styles and complete the CSS:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_0133Hdxdc1eSKYXXVodmKzUn",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me replace the remaining scrollbar and utility styles with modern ones:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_012nM7mVkaL4MxNYHi7kmAqB",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -832,29 +832,31 @@\n             transform: translateY(-1px);\n         }\n \n-        .sales-records-container {\n-            max-height: 600px;\n+        /* ======== SCROLLABLE CONTAINERS ======== */\n+        .scrollable-container {\n+            max-height: 650px;\n             overflow-y: auto;\n-            padding-right: 10px;\n+            padding-right: var(--space-2);\n             scroll-behavior: smooth;\n         }\n \n-        .sales-records-container::-webkit-scrollbar {\n+        .scrollable-container::-webkit-scrollbar {\n             width: 8px;\n         }\n \n-        .sales-records-container::-webkit-scrollbar-track {\n-            background: #f1f1f1;\n-            border-radius: 10px;\n-        }\n-\n-        .sales-records-container::-webkit-scrollbar-thumb {\n-            background: #4ecdc4;\n-            border-radius: 10px;\n-        }\n-\n-        .sales-records-container::-webkit-scrollbar-thumb:hover {\n-            background: #45b7b8;\n+        .scrollable-container::-webkit-scrollbar-track {\n+            background: var(--neutral-200);\n+            border-radius: var(--radius-lg);\n+        }\n+\n+        .scrollable-container::-webkit-scrollbar-thumb {\n+            background: linear-gradient(135deg, var(--primary-500), var(--primary-600));\n+            border-radius: var(--radius-lg);\n+            border: 2px solid var(--neutral-200);\n+        }\n+\n+        .scrollable-container::-webkit-scrollbar-thumb:hover {\n+            background: linear-gradient(135deg, var(--primary-600), var(--primary-700));\n         }\n \n         /* Enhanced sales container styles */",
                    "refToolCallId": "toolu_012nM7mVkaL4MxNYHi7kmAqB"
                },
                {
                    "type": "text",
                    "text": "Now let me complete the CSS by replacing all the remaining old styles:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01TibMMEBR7cFcpMfo4Wybm5",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me replace all these old styles and complete the CSS with modern responsive utilities:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_011JtLg2JacRq85aPhXQLmms",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -859,81 +859,94 @@\n             background: linear-gradient(135deg, var(--primary-600), var(--primary-700));\n         }\n \n-        /* Enhanced sales container styles */\n-        .enhanced-sales-container {\n-            background: #fafafa;\n-            border: 1px solid #e9ecef;\n-            border-radius: 8px;\n-            max-height: 600px;\n-            overflow-y: auto;\n-            scroll-behavior: smooth;\n-        }\n-\n-        .enhanced-sales-container::-webkit-scrollbar {\n-            width: 10px;\n-        }\n-\n-        .enhanced-sales-container::-webkit-scrollbar-track {\n-            background: #f1f1f1;\n-            border-radius: 10px;\n-        }\n-\n-        .enhanced-sales-container::-webkit-scrollbar-thumb {\n-            background: linear-gradient(45deg, #4ecdc4, #44a08d);\n-            border-radius: 10px;\n-            border: 2px solid #f1f1f1;\n-        }\n-\n-        .enhanced-sales-container::-webkit-scrollbar-thumb:hover {\n-            background: linear-gradient(45deg, #45b7b8, #3a8f7e);\n-        }\n-\n-        /* Sales search and filter styles */\n-        .sales-filter-section {\n-            background: #f8f9fa;\n-            padding: 15px;\n-            border-radius: 8px;\n-            margin-bottom: 20px;\n-            border: 1px solid #e9ecef;\n-        }\n-\n-        .sales-search-input {\n+        /* ======== SEARCH AND FILTER ======== */\n+        .filter-section {\n+            background: var(--neutral-50);\n+            border: 1px solid var(--neutral-200);\n+            border-radius: var(--radius-lg);\n+            padding: var(--space-5);\n+            margin-bottom: var(--space-6);\n+        }\n+\n+        .filter-header {\n+            display: flex;\n+            align-items: center;\n+            gap: var(--space-2);\n+            margin-bottom: var(--space-4);\n+        }\n+\n+        .filter-header h3 {\n+            font-size: 1.1rem;\n+            font-weight: 600;\n+            color: var(--neutral-800);\n+            margin: 0;\n+        }\n+\n+        .search-input {\n+            position: relative;\n+        }\n+\n+        .search-input input {\n             width: 100%;\n-            padding: 10px;\n-            border: 2px solid #e9ecef;\n-            border-radius: 6px;\n-            font-size: 14px;\n-            transition: border-color 0.3s ease;\n-        }\n-\n-        .sales-search-input:focus {\n+            padding: var(--space-3) var(--space-4) var(--space-3) var(--space-12);\n+            border: 2px solid var(--neutral-300);\n+            border-radius: var(--radius-md);\n+            font-size: 1rem;\n+            transition: var(--transition-normal);\n+            background: white;\n+        }\n+\n+        .search-input input:focus {\n             outline: none;\n-            border-color: #4ecdc4;\n-            box-shadow: 0 0 0 3px rgba(78, 205, 196, 0.1);\n-        }\n-\n-        /* Enhanced customer container styles */\n-        .enhanced-customers-container {\n-            scroll-behavior: smooth;\n-        }\n-\n-        .enhanced-customers-container::-webkit-scrollbar {\n-            width: 12px;\n-        }\n-\n-        .enhanced-customers-container::-webkit-scrollbar-track {\n-            background: #f1f1f1;\n-            border-radius: 10px;\n-        }\n-\n-        .enhanced-customers-container::-webkit-scrollbar-thumb {\n-            background: linear-gradient(45deg, #667eea, #764ba2);\n-            border-radius: 10px;\n-            border: 2px solid #f1f1f1;\n-        }\n-\n-        .enhanced-customers-container::-webkit-scrollbar-thumb:hover {\n-            background: linear-gradient(45deg, #5a67d8, #6b46c1);\n+            border-color: var(--primary-600);\n+            box-shadow: 0 0 0 3px var(--primary-100);\n+        }\n+\n+        .search-input i {\n+            position: absolute;\n+            left: var(--space-4);\n+            top: 50%;\n+            transform: translateY(-50%);\n+            color: var(--neutral-400);\n+            font-size: 1.1rem;\n+        }\n+\n+        /* ======== NOTIFICATIONS & TOASTS ======== */\n+        .toast {\n+            position: fixed;\n+            top: var(--space-4);\n+            right: var(--space-4);\n+            background: white;\n+            border-radius: var(--radius-lg);\n+            box-shadow: var(--shadow-lg);\n+            border: 1px solid var(--neutral-200);\n+            padding: var(--space-4);\n+            max-width: 400px;\n+            z-index: 1000;\n+            transform: translateX(100%);\n+            opacity: 0;\n+            transition: var(--transition-normal);\n+        }\n+\n+        .toast.show {\n+            transform: translateX(0);\n+            opacity: 1;\n+        }\n+\n+        .toast-success {\n+            border-left: 4px solid var(--success-500);\n+        }\n+\n+        .toast-error {\n+            border-left: 4px solid var(--error-500);\n+        }\n+\n+        .toast-warning {\n+            border-left: 4px solid var(--warning-500);\n+        }\n+\n+        .toast-info {\n+            border-left: 4px solid var(--primary-500);\n         }\n \n         /* Enhanced customer card styles */",
                    "refToolCallId": "toolu_011JtLg2JacRq85aPhXQLmms"
                },
                {
                    "type": "text",
                    "text": "Now let me complete the CSS by adding responsive design and the closing styles:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Dso1PG7XWUPWZeVrq9FcmQ",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me replace the remaining old customer card styles with modern ones and complete the responsive design:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01GzvetVNMTef7x9xoV119MT",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -949,99 +949,130 @@\n             border-left: 4px solid var(--primary-500);\n         }\n \n-        /* Enhanced customer card styles */\n-        .customer-card {\n-            background: white;\n-            border: 1px solid #e9ecef;\n-            border-radius: 10px;\n-            padding: 15px;\n-            margin-bottom: 15px;\n-            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n-            transition: all 0.3s ease;\n-            position: relative;\n-        }\n-\n-        .customer-card:hover {\n-            transform: translateY(-2px);\n-            box-shadow: 0 4px 15px rgba(0,0,0,0.15);\n-            border-color: #4ecdc4;\n-        }\n-\n-        .customer-card-header {\n-            display: flex;\n-            justify-content: space-between;\n-            align-items: start;\n-            margin-bottom: 10px;\n-        }\n-\n-        .customer-name {\n-            font-size: 18px;\n-            font-weight: bold;\n-            color: #333;\n-            margin: 0;\n-        }\n-\n-        .customer-status {\n-            padding: 4px 8px;\n-            border-radius: 12px;\n-            font-size: 11px;\n-            font-weight: bold;\n-            text-transform: uppercase;\n-        }\n-\n-        .customer-status.active {\n-            background: #d4edda;\n-            color: #155724;\n-        }\n-\n-        .customer-status.inactive {\n-            background: #f8d7da;\n-            color: #721c24;\n-        }\n-\n-        .customer-info-grid {\n-            display: grid;\n-            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n-            gap: 10px;\n-            margin-bottom: 10px;\n-        }\n-\n-        .customer-info-item {\n-            font-size: 14px;\n-            color: #666;\n-        }\n-\n-        .customer-info-label {\n-            font-weight: 600;\n-            color: #333;\n-        }\n-\n-        .customer-purchase-stats {\n-            background: #f8f9fa;\n-            padding: 10px;\n-            border-radius: 6px;\n-            margin-top: 10px;\n-            display: grid;\n-            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n-            gap: 10px;\n-            text-align: center;\n-        }\n-\n-        .customer-stat-item {\n-            padding: 5px;\n-        }\n-\n-        .customer-stat-value {\n-            font-size: 16px;\n-            font-weight: bold;\n-            color: #4ecdc4;\n-        }\n-\n-        .customer-stat-label {\n-            font-size: 11px;\n-            color: #666;\n-            text-transform: uppercase;\n-        }\n+        /* ======== RESPONSIVE DESIGN ======== */\n+        @media (max-width: 768px) {\n+            .container {\n+                margin: var(--space-2);\n+                border-radius: var(--radius-lg);\n+            }\n+\n+            .header {\n+                padding: var(--space-6) var(--space-4);\n+            }\n+\n+            .header h1 {\n+                font-size: 1.8rem;\n+            }\n+\n+            .tabs {\n+                flex-wrap: wrap;\n+            }\n+\n+            .tab {\n+                flex: 1;\n+                min-width: 120px;\n+                font-size: 0.85rem;\n+                padding: var(--space-3);\n+            }\n+\n+            .tab i {\n+                display: none;\n+            }\n+\n+            .tab-content {\n+                padding: var(--space-6) var(--space-4);\n+            }\n+\n+            .form-grid {\n+                grid-template-columns: 1fr;\n+            }\n+\n+            .dashboard-stats {\n+                grid-template-columns: repeat(2, 1fr);\n+                gap: var(--space-3);\n+            }\n+\n+            .btn-group {\n+                flex-direction: column;\n+            }\n+\n+            .sales-item-info {\n+                grid-template-columns: 1fr;\n+            }\n+        }\n+\n+        @media (max-width: 480px) {\n+            body {\n+                padding: var(--space-2);\n+            }\n+\n+            .header h1 {\n+                font-size: 1.5rem;\n+            }\n+\n+            .tabs {\n+                overflow-x: auto;\n+                flex-wrap: nowrap;\n+            }\n+\n+            .tab {\n+                min-width: 100px;\n+                font-size: 0.8rem;\n+            }\n+\n+            .dashboard-stats {\n+                grid-template-columns: 1fr;\n+            }\n+\n+            .form-section {\n+                padding: var(--space-4);\n+            }\n+        }\n+\n+        /* ======== UTILITY CLASSES ======== */\n+        .sr-only {\n+            position: absolute;\n+            width: 1px;\n+            height: 1px;\n+            padding: 0;\n+            margin: -1px;\n+            overflow: hidden;\n+            clip: rect(0, 0, 0, 0);\n+            white-space: nowrap;\n+            border: 0;\n+        }\n+\n+        .text-center { text-align: center; }\n+        .text-right { text-align: right; }\n+        .text-left { text-align: left; }\n+\n+        .fw-bold { font-weight: 700; }\n+        .fw-semibold { font-weight: 600; }\n+        .fw-medium { font-weight: 500; }\n+        .fw-normal { font-weight: 400; }\n+\n+        .text-primary { color: var(--primary-600); }\n+        .text-secondary { color: var(--secondary-600); }\n+        .text-success { color: var(--success-600); }\n+        .text-error { color: var(--error-600); }\n+        .text-warning { color: var(--warning-600); }\n+        .text-muted { color: var(--neutral-500); }\n+\n+        .bg-primary { background-color: var(--primary-600); }\n+        .bg-secondary { background-color: var(--secondary-600); }\n+        .bg-success { background-color: var(--success-600); }\n+        .bg-error { background-color: var(--error-600); }\n+        .bg-warning { background-color: var(--warning-600); }\n+\n+        .mb-2 { margin-bottom: var(--space-2); }\n+        .mb-3 { margin-bottom: var(--space-3); }\n+        .mb-4 { margin-bottom: var(--space-4); }\n+        .mb-6 { margin-bottom: var(--space-6); }\n+\n+        .mt-2 { margin-top: var(--space-2); }\n+        .mt-3 { margin-top: var(--space-3); }\n+        .mt-4 { margin-top: var(--space-4); }\n+        .mt-6 { margin-top: var(--space-6); }\n \n         .edit-form {\n             background: #fff;",
                    "refToolCallId": "toolu_01GzvetVNMTef7x9xoV119MT"
                },
                {
                    "type": "text",
                    "text": "Now let me update the HTML structure to match our modern design. Let me first see the current HTML structure:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01DdwmqHR54G4ocJkHt1BF2M",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me find where the HTML content starts and update the header and navigation:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01BL25PjzKLPT1d6kZ8CWpeh",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now let me update the header and navigation structure with modern HTML:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01H5yXhHdTvh8rGmhaDZpHpk",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -1421,17 +1421,33 @@\n </head>\n <body>\n     <div class=\"container\">\n-        <div class=\"header\">\n-            💎 Theia Jewelz\n-        </div>\n-\n-        <div class=\"tabs\">\n-            <button class=\"tab active\" onclick=\"showTab('sales')\">📝 Sales Entry</button>\n-            <button class=\"tab\" onclick=\"showTab('recent-sales')\">📋 Recent Sales</button>\n-            <button class=\"tab\" onclick=\"showTab('dashboard')\">📊 Dashboard</button>\n-            <button class=\"tab\" onclick=\"showTab('customers')\">👥 Customers</button>\n-            <button class=\"tab\" onclick=\"showTab('analytics')\">📈 Analytics</button>\n-        </div>\n+        <header class=\"header\">\n+            <h1>💎 Theia Jewelz</h1>\n+            <p class=\"subtitle\">Modern Sales Management System</p>\n+        </header>\n+\n+        <nav class=\"tabs\" role=\"tablist\" aria-label=\"Main navigation\">\n+            <button class=\"tab active\" onclick=\"showTab('sales')\" role=\"tab\" aria-selected=\"true\" aria-controls=\"sales\">\n+                <i class=\"fas fa-plus-circle\"></i>\n+                <span>Sales Entry</span>\n+            </button>\n+            <button class=\"tab\" onclick=\"showTab('recent-sales')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"recent-sales\">\n+                <i class=\"fas fa-list\"></i>\n+                <span>Recent Sales</span>\n+            </button>\n+            <button class=\"tab\" onclick=\"showTab('dashboard')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"dashboard\">\n+                <i class=\"fas fa-chart-pie\"></i>\n+                <span>Dashboard</span>\n+            </button>\n+            <button class=\"tab\" onclick=\"showTab('customers')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"customers\">\n+                <i class=\"fas fa-users\"></i>\n+                <span>Customers</span>\n+            </button>\n+            <button class=\"tab\" onclick=\"showTab('analytics')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"analytics\">\n+                <i class=\"fas fa-chart-line\"></i>\n+                <span>Analytics</span>\n+            </button>\n+        </nav>\n \n         <!-- Sales Entry Tab -->\n         <div id=\"sales\" class=\"tab-content active\">",
                    "refToolCallId": "toolu_01H5yXhHdTvh8rGmhaDZpHpk"
                },
                {
                    "type": "text",
                    "text": "Now let me update the form structure for the sales entry section:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01KQdtWjDd5yu9uVp2eeGeYh",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me update this section with the new modern form structure:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_015n4eKru3tRFL7V3KH194V7",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -1450,52 +1450,68 @@\n         </nav>\n \n         <!-- Sales Entry Tab -->\n-        <div id=\"sales\" class=\"tab-content active\">\n-            <h2>Add New Sale</h2>\n-\n-            <div id=\"success-message\" class=\"success-message\"></div>\n-            <div id=\"error-message\" class=\"error-message\"></div>\n+        <div id=\"sales\" class=\"tab-content active\" role=\"tabpanel\" aria-labelledby=\"sales-tab\">\n+            <div class=\"filter-section\">\n+                <div class=\"filter-header\">\n+                    <i class=\"fas fa-search\"></i>\n+                    <h3>Search Existing Customer</h3>\n+                </div>\n+                <div class=\"search-input\">\n+                    <i class=\"fas fa-search\"></i>\n+                    <input type=\"text\" id=\"customerSearch\" placeholder=\"Type customer name, phone, or email to search...\"\n+                           oninput=\"searchCustomers()\" onkeydown=\"handleSearchKeydown(event)\" autocomplete=\"off\"\n+                           class=\"form-control\">\n+                    <div id=\"customer-search-results\" style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\n+                         background: white; border: 1px solid var(--neutral-300); border-top: none; border-radius: 0 0 var(--radius-md) var(--radius-md);\n+                         max-height: 250px; overflow-y: auto; z-index: 1000; box-shadow: var(--shadow-lg);\">\n+                    </div>\n+                </div>\n+                <p class=\"text-muted\" style=\"font-size: 0.875rem; margin-top: var(--space-2);\">\n+                    <i class=\"fas fa-info-circle\"></i>\n+                    Search from <span id=\"total-customers\" class=\"fw-semibold\">0</span> customers - includes database & sales records\n+                </p>\n+            </div>\n+\n+            <!-- Success/Error Messages -->\n+            <div id=\"success-toast\" class=\"toast toast-success\" style=\"display: none;\">\n+                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\n+                    <i class=\"fas fa-check-circle\"></i>\n+                    <span id=\"success-message\"></span>\n+                </div>\n+            </div>\n+            <div id=\"error-toast\" class=\"toast toast-error\" style=\"display: none;\">\n+                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\n+                    <i class=\"fas fa-exclamation-circle\"></i>\n+                    <span id=\"error-message\"></span>\n+                </div>\n+            </div>\n \n             <form id=\"sales-form\">\n-                <!-- Customer Search Section -->\n-                <div class=\"form-group\">\n-                    <label for=\"customerSearch\">🔍 Search Existing Customer</label>\n-                    <div style=\"position: relative;\">\n-                        <input type=\"text\" id=\"customerSearch\" placeholder=\"Type customer name or phone to search...\"\n-                               oninput=\"searchCustomers()\" onkeydown=\"handleSearchKeydown(event)\" autocomplete=\"off\"\n-                               style=\"padding-right: 40px;\">\n-                        <button type=\"button\" onclick=\"clearCustomerSearch()\"\n-                                style=\"position: absolute; right: 10px; top: 50%; transform: translateY(-50%);\n-                                       background: none; border: none; cursor: pointer; font-size: 16px;\"\n-                                title=\"Clear search\">❌</button>\n-                        <div id=\"customer-search-results\" style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\n-                             background: white; border: 1px solid #ddd; border-top: none; border-radius: 0 0 8px 8px;\n-                             max-height: 200px; overflow-y: auto; z-index: 1000; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\">\n+                <!-- Customer Information Section -->\n+                <div class=\"form-section\">\n+                    <h3><i class=\"fas fa-user\"></i> Customer Information</h3>\n+                    <div class=\"form-grid\">\n+                        <div class=\"form-group\">\n+                            <label for=\"customerName\" class=\"required\">Customer Name</label>\n+                            <input type=\"text\" id=\"customerName\" class=\"form-control\" required \n+                                   placeholder=\"Enter customer name\">\n+                            <div class=\"form-error\" style=\"display: none;\">\n+                                <i class=\"fas fa-exclamation-triangle\"></i>\n+                                <span>Customer name is required</span>\n+                            </div>\n                         </div>\n-                    </div>\n-                    <small style=\"color: #666; font-size: 12px;\">💡 Search from All Customers (<span id=\"total-customers\">0</span> customers) - includes database & sales records. Supports name, phone & email search</small>\n-                </div>\n-\n-                <!-- Customer Details Section -->\n-                <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;\">\n-                    <h4 style=\"margin: 0 0 15px 0; color: #4ecdc4; font-size: 16px;\">👤 Customer Information</h4>\n-\n-                    <div class=\"form-group\" style=\"margin-bottom: 15px;\">\n-                        <label for=\"customerName\">Customer Name *</label>\n-                        <input type=\"text\" id=\"customerName\" required placeholder=\"Enter customer name\"\n-                               style=\"background: white;\">\n-                    </div>\n-\n-                    <div class=\"form-group\" style=\"margin-bottom: 15px;\">\n-                        <label for=\"customerPhone\">Customer Phone</label>\n-                        <input type=\"tel\" id=\"customerPhone\" placeholder=\"Enter phone number\"\n-                               style=\"background: white;\">\n-                    </div>\n-\n-                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\n-                        <label for=\"customerAddress\">Customer Address</label>\n-                        <textarea id=\"customerAddress\" rows=\"2\" placeholder=\"Enter customer address (optional)\"\n-                                  style=\"background: white; width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\n+\n+                        <div class=\"form-group\">\n+                            <label for=\"customerPhone\">Phone Number</label>\n+                            <input type=\"tel\" id=\"customerPhone\" class=\"form-control\" \n+                                   placeholder=\"Enter phone number\">\n+                        </div>\n+\n+                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\n+                            <label for=\"customerAddress\">Address</label>\n+                            <textarea id=\"customerAddress\" class=\"form-control\" rows=\"2\" \n+                                      placeholder=\"Enter customer address (optional)\"></textarea>\n+                        </div>\n                     </div>\n                 </div>\n ",
                    "refToolCallId": "toolu_015n4eKru3tRFL7V3KH194V7"
                },
                {
                    "type": "text",
                    "text": "Now let me continue updating the item information section:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01M5guRnqsEUdp9qGaT6sNvN",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me update the item information and pricing sections:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Y4DLEpjVDXMWzJXLu5mHeh",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -1515,39 +1515,55 @@\n                     </div>\n                 </div>\n \n-                <!-- Item Details Section -->\n-                <div style=\"background: #fff; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;\">\n-                    <h4 style=\"margin: 0 0 15px 0; color: #ff6b6b; font-size: 16px;\">💎 Item Information</h4>\n-\n-                    <div class=\"form-group\">\n-                        <label for=\"itemName\">Item Name *</label>\n-                        <input type=\"text\" id=\"itemName\" required placeholder=\"e.g., Gold Plated Necklace\">\n-                    </div>\n-\n-                    <div class=\"form-group\">\n-                        <label for=\"category\">Category *</label>\n-                        <select id=\"category\" required>\n-                            <option value=\"\">Select Category</option>\n-                            <option value=\"Necklaces\">Necklaces</option>\n-                            <option value=\"Earrings\">Earrings</option>\n-                            <option value=\"Bracelets\">Bracelets</option>\n-                            <option value=\"Rings\">Rings</option>\n-                            <option value=\"Anklets\">Anklets</option>\n-                            <option value=\"Sets\">Sets</option>\n-                            <option value=\"Bangles\">Bangles</option>\n-                            <option value=\"Chains\">Chains</option>\n-                        </select>\n-                    </div>\n-\n-                    <div class=\"form-group\" style=\"margin-bottom: 0;\">\n-                        <label for=\"saleDate\">Sale Date *</label>\n-                        <input type=\"date\" id=\"saleDate\" required>\n+                <!-- Item Information Section -->\n+                <div class=\"form-section\">\n+                    <h3><i class=\"fas fa-gem\"></i> Item Information</h3>\n+                    <div class=\"form-grid\">\n+                        <div class=\"form-group\">\n+                            <label for=\"itemName\" class=\"required\">Item Name</label>\n+                            <input type=\"text\" id=\"itemName\" class=\"form-control\" required \n+                                   placeholder=\"e.g., Gold Plated Necklace\">\n+                            <div class=\"form-error\" style=\"display: none;\">\n+                                <i class=\"fas fa-exclamation-triangle\"></i>\n+                                <span>Item name is required</span>\n+                            </div>\n+                        </div>\n+\n+                        <div class=\"form-group\">\n+                            <label for=\"category\" class=\"required\">Category</label>\n+                            <select id=\"category\" class=\"form-control\" required>\n+                                <option value=\"\">Select Category</option>\n+                                <option value=\"Necklaces\">✨ Necklaces</option>\n+                                <option value=\"Earrings\">👂 Earrings</option>\n+                                <option value=\"Bracelets\">🔗 Bracelets</option>\n+                                <option value=\"Rings\">💍 Rings</option>\n+                                <option value=\"Anklets\">🦶 Anklets</option>\n+                                <option value=\"Sets\">💎 Sets</option>\n+                                <option value=\"Bangles\">⚪ Bangles</option>\n+                                <option value=\"Chains\">🔗 Chains</option>\n+                                <option value=\"Pendants\">🏷️ Pendants</option>\n+                                <option value=\"Brooches\">📎 Brooches</option>\n+                            </select>\n+                            <div class=\"form-error\" style=\"display: none;\">\n+                                <i class=\"fas fa-exclamation-triangle\"></i>\n+                                <span>Please select a category</span>\n+                            </div>\n+                        </div>\n+\n+                        <div class=\"form-group\">\n+                            <label for=\"saleDate\" class=\"required\">Sale Date</label>\n+                            <input type=\"date\" id=\"saleDate\" class=\"form-control\" required>\n+                            <div class=\"form-error\" style=\"display: none;\">\n+                                <i class=\"fas fa-exclamation-triangle\"></i>\n+                                <span>Sale date is required</span>\n+                            </div>\n+                        </div>\n                     </div>\n                 </div>\n \n-                <!-- Pricing Section -->\n-                <div style=\"background: #fff; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;\">\n-                    <h4 style=\"margin: 0 0 15px 0; color: #28a745; font-size: 16px;\">💰 Pricing Information</h4>\n+                <!-- Pricing Information Section -->\n+                <div class=\"form-section\">\n+                    <h3><i class=\"fas fa-money-bill-wave\"></i> Pricing Information</h3>\n \n                     <div class=\"form-group\">\n                         <label for=\"costPrice\">Cost Price (₹) *</label>",
                    "refToolCallId": "toolu_01Y4DLEpjVDXMWzJXLu5mHeh"
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "jewelry_sales_final.html",
                            "patch": "@@ -268,22 +268,22 @@\n ntent=%22#\n-007bff\n+6366F1\n %22%3E%0D%0A    \n@@ -1124,11182 +1124,31575 @@\n !-- \n-External Libraries --%3E%0D%0A    %3Cscript src=%22https://cdn.jsdelivr.net/npm/chart.js%22%3E%3C/script%3E%0D%0A    %3Cscript src=%22https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js%22%3E%3C/script%3E%0D%0A    %3Cstyle%3E%0D%0A        * %7B%0D%0A            margin: 0;%0D%0A            padding: 0;%0D%0A            box-sizing: border-box;%0D%0A        %7D%0D%0A%0D%0A        body %7B%0D%0A            font-family: Arial, sans-serif;%0D%0A            background: linear-gradient(135deg, #667eea 0%25, #764ba2 100%25);%0D%0A            min-height: 100vh;%0D%0A            padding: 10px;%0D%0A        %7D%0D%0A%0D%0A        .container %7B%0D%0A            max-width: 800px;%0D%0A            margin: 0 auto;%0D%0A            background: white;%0D%0A            border-radius: 15px;%0D%0A            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);%0D%0A            overflow: hidden;%0D%0A        %7D%0D%0A%0D%0A        .header %7B%0D%0A            background: linear-gradient(45deg, #ff6b6b, #ffd93d);%0D%0A            color: white;%0D%0A            text-align: center;%0D%0A            padding: 20px;%0D%0A            font-size: 1.8em;%0D%0A            font-weight: bold;%0D%0A        %7D%0D%0A%0D%0A        .tabs %7B%0D%0A            display: flex;%0D%0A            background: #f8f9fa;%0D%0A            border-bottom: 2px solid #e9ecef;%0D%0A        %7D%0D%0A%0D%0A        .tab %7B%0D%0A            flex: 1;%0D%0A            padding: 15px;%0D%0A            text-align: center;%0D%0A            cursor: pointer;%0D%0A            background: #f8f9fa;%0D%0A            border: none;%0D%0A            font-size: 16px; %0D%0A            font-weight: 600;%0D%0A            transition: all 0.3s ease;%0D%0A            color: #6c757d;%0D%0A        %7D%0D%0A%0D%0A        .tab.active %7B%0D%0A            background: #4ecdc4;%0D%0A            color: white;%0D%0A        %7D%0D%0A%0D%0A        .tab-content %7B%0D%0A            display: none;%0D%0A            padding: 20px;%0D%0A            min-height: 500px;%0D%0A        %7D%0D%0A%0D%0A        .tab-content.active %7B%0D%0A            display: block;%0D%0A        %7D%0D%0A%0D%0A        .form-group %7B%0D%0A            margin-bottom: 15px;%0D%0A        %7D%0D%0A%0D%0A        .form-group label %7B%0D%0A            display: block;%0D%0A            margin-bottom: 5px;%0D%0A            font-weight: 600;%0D%0A            color: #333;%0D%0A        %7D%0D%0A%0D%0A        .form-group input,%0D%0A        .form-group select %7B%0D%0A            width: 100%25;%0D%0A            padding: 12px;%0D%0A            border: 2px solid #e9ecef;%0D%0A            border-radius: 8px;%0D%0A            font-size: 16px;%0D%0A        %7D%0D%0A%0D%0A        .form-group input:focus,%0D%0A        .form-group select:focus %7B%0D%0A            outline: none;%0D%0A            border-color: #4ecdc4;%0D%0A        %7D%0D%0A%0D%0A        .btn %7B%0D%0A            width: 100%25;%0D%0A            padding: 15px;%0D%0A            border: none;%0D%0A            border-radius: 8px;%0D%0A            font-size: 16px;%0D%0A            font-weight: 600;%0D%0A            cursor: pointer;%0D%0A            margin-top: 10px;%0D%0A            color: white;%0D%0A            transition: all 0.3s ease;%0D%0A        %7D%0D%0A%0D%0A        .btn-primary %7B%0D%0A            background: #4ecdc4;%0D%0A        %7D%0D%0A%0D%0A        .btn-secondary %7B%0D%0A            background: #ff6b6b;%0D%0A        %7D%0D%0A%0D%0A        .btn:hover %7B%0D%0A            opacity: 0.9;%0D%0A            transform: translateY(-2px);%0D%0A        %7D%0D%0A%0D%0A        .btn:active %7B%0D%0A            transform: translateY(0);%0D%0A        %7D%0D%0A%0D%0A        .sales-item %7B%0D%0A            background: #f8f9fa;%0D%0A            padding: 15px;%0D%0A            margin-bottom: 10px;%0D%0A            border-radius: 8px;%0D%0A            border-left: 4px solid #4ecdc4;%0D%0A            position: relative;%0D%0A        %7D%0D%0A%0D%0A        .sales-item h4 %7B%0D%0A            color: #333;%0D%0A            margin-bottom: 5px;%0D%0A        %7D%0D%0A%0D%0A        .sales-item p %7B%0D%0A            margin: 3px 0;%0D%0A            color: #666;%0D%0A            font-size: 14px;%0D%0A        %7D%0D%0A%0D%0A        .dashboard-stats %7B%0D%0A            display: grid;%0D%0A            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));%0D%0A            gap: 15px;%0D%0A            margin-bottom: 20px;%0D%0A        %7D%0D%0A%0D%0A        .stat-card %7B%0D%0A            background: linear-gradient(45deg, #667eea, #764ba2);%0D%0A            color: white;%0D%0A            padding: 20px;%0D%0A            border-radius: 10px;%0D%0A            text-align: center;%0D%0A        %7D%0D%0A%0D%0A        .stat-card h3 %7B%0D%0A            font-size: 28px;%0D%0A            margin-bottom: 5px;%0D%0A        %7D%0D%0A%0D%0A        .stat-card p %7B%0D%0A            font-size: 14px;%0D%0A        %7D%0D%0A%0D%0A        .chart-container %7B%0D%0A            background: white;%0D%0A            padding: 20px;%0D%0A            border-radius: 10px;%0D%0A            margin-bottom: 20px;%0D%0A            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);%0D%0A            height: 400px;%0D%0A        %7D%0D%0A%0D%0A        .customer-item %7B%0D%0A            background: #f8f9fa;%0D%0A            padding: 15px;%0D%0A            margin-bottom: 10px;%0D%0A            border-radius: 8px;%0D%0A            border-left: 4px solid #ff6b6b;%0D%0A        %7D%0D%0A%0D%0A        .no-data %7B%0D%0A            text-align: center;%0D%0A            color: #666;%0D%0A            font-style: italic;%0D%0A            padding: 40px;%0D%0A            font-size: 18px;%0D%0A        %7D%0D%0A%0D%0A        .delete-btn %7B%0D%0A            background: #ff6b6b;%0D%0A            color: white;%0D%0A            border: none;%0D%0A            padding: 8px 12px;%0D%0A            border-radius: 5px;%0D%0A            cursor: pointer;%0D%0A            font-size: 12px;%0D%0A            position: absolute;%0D%0A            top: 10px;%0D%0A            right: 10px;%0D%0A        %7D%0D%0A%0D%0A        .delete-btn:hover %7B%0D%0A            background: #ff5252;%0D%0A        %7D%0D%0A%0D%0A        .edit-btn %7B%0D%0A            background: #007bff;%0D%0A            color: white;%0D%0A            border: none;%0D%0A            padding: 8px 12px;%0D%0A            border-radius: 5px;%0D%0A            cursor: pointer;%0D%0A            font-size: 12px;%0D%0A            position: absolute;%0D%0A            top: 10px;%0D%0A            right: 60px;%0D%0A        %7D%0D%0A%0D%0A        .edit-btn:hover %7B%0D%0A            background: #0056b3;%0D%0A        %7D%0D%0A%0D%0A        .action-buttons %7B%0D%0A            position: absolute;%0D%0A            top: 10px;%0D%0A            right: 10px;%0D%0A            display: flex;%0D%0A            gap: 5px;%0D%0A        %7D%0D%0A%0D%0A        .sales-records-container %7B%0D%0A            max-height: 600px;%0D%0A            overflow-y: auto;%0D%0A            padding-right: 10px;%0D%0A            scroll-behavior: smooth;%0D%0A        %7D%0D%0A%0D%0A        .sales-records-container::-webkit-scrollbar %7B%0D%0A            width: 8px;%0D%0A        %7D%0D%0A%0D%0A        .sales-records-container::-webkit-scrollbar-track %7B%0D%0A            background: #f1f1f1;%0D%0A            border-radius: 10px;%0D%0A        %7D%0D%0A%0D%0A        .sales-records-container::-webkit-scrollbar-thumb %7B%0D%0A            background: #4ecdc4;%0D%0A            border-radius: 10px;%0D%0A        %7D%0D%0A%0D%0A        .sales-records-container::-webkit-scrollbar-thumb:hover %7B%0D%0A            background: #45b7b8;%0D%0A        %7D%0D%0A%0D%0A        /* Enhanced sales container styles */%0D%0A        .enhanced-sales-container %7B%0D%0A            background: #fafafa;%0D%0A            border: 1px solid #e9ecef;%0D%0A            border-radius: 8px;%0D%0A            max-height: 600px;%0D%0A            overflow-y: auto;%0D%0A            scroll-behavior: smooth;%0D%0A        %7D%0D%0A%0D%0A        .enhanced-sales-container::-webkit-scrollbar %7B%0D%0A            width: 10px;%0D%0A        %7D%0D%0A%0D%0A        .enhanced-sales-container::-webkit-scrollbar-track %7B%0D%0A            background: #f1f1f1;%0D%0A            border-radius: 10px;%0D%0A        %7D%0D%0A%0D%0A        .enhanced-sales-container::-webkit-scrollbar-thumb %7B%0D%0A            background: linear-gradient(45deg, #4ecdc4, #44a08d);%0D%0A            border-radius: 10px;%0D%0A            border: 2px solid #f1f1f1;%0D%0A        %7D%0D%0A%0D%0A        .enhanced-sales-container::-webkit-scrollbar-thumb:hover %7B%0D%0A            background: linear-gradient(45deg, #45b7b8, #3a8f7e);%0D%0A        %7D%0D%0A%0D%0A        /* Sales search and filter styles */%0D%0A        .sales-filter-section %7B%0D%0A            background: #f8f9fa;%0D%0A            padding: 15px;%0D%0A            border-radius: 8px;%0D%0A            margin-bottom: 20px;%0D%0A            border: 1px solid #e9ecef;%0D%0A        %7D%0D%0A%0D%0A        .sales-search-input %7B%0D%0A            width: 100%25;%0D%0A            padding: 10px;%0D%0A            border: 2px solid #e9ecef;%0D%0A            border-radius: 6px;%0D%0A            font-size: 14px;%0D%0A            transition: border-color 0.3s ease;%0D%0A        %7D%0D%0A%0D%0A        .sales-search-input:focus %7B%0D%0A            outline: none;%0D%0A            border-color: #4ecdc4;%0D%0A            box-shadow: 0 0 0 3px rgba(78, 205, 196, 0.1);%0D%0A        %7D%0D%0A%0D%0A        /* Enhanced customer container styles */%0D%0A        .enhanced-customers-container %7B%0D%0A            scroll-behavior: smooth;%0D%0A        %7D%0D%0A%0D%0A        .enhanced-customers-container::-webkit-scrollbar %7B%0D%0A            width: 12px;%0D%0A        %7D%0D%0A%0D%0A        .enhanced-customers-container::-webkit-scrollbar-track %7B%0D%0A            background: #f1f1f1;%0D%0A            border-radius: 10px;%0D%0A        %7D%0D%0A%0D%0A        .enhanced-customers-container::-webkit-scrollbar-thumb %7B%0D%0A            background: linear-gradient(45deg, #667eea, #764ba2);%0D%0A            border-radius: 10px;%0D%0A            border: 2px solid #f1f1f1;%0D%0A        %7D%0D%0A%0D%0A        .enhanced-customers-container::-webkit-scrollbar-thumb:hover %7B%0D%0A            background: linear-gradient(45deg, #5a67d8, #6b46c1);%0D%0A        %7D%0D%0A%0D%0A        /* Enhanced customer card styles */%0D%0A        .customer-card %7B%0D%0A            background: white;%0D%0A            border: 1px solid #e9ecef;%0D%0A            border-radius: 10px;%0D%0A            padding: 15px;%0D%0A            margin-bottom: 15px;%0D%0A            box-shadow: 0 2px 5px rgba(0,0,0,0.1);%0D%0A            transition: all 0.3s ease;%0D%0A            position: relative;%0D%0A        %7D%0D%0A%0D%0A        .customer-card:hover %7B%0D%0A            transform: translateY(-2px);%0D%0A            box-shadow: 0 4px 15px rgba(0,0,0,0.15);%0D%0A            border-color: #4ecdc4;%0D%0A        %7D%0D%0A%0D%0A        .customer-card-header %7B%0D%0A            display: flex;%0D%0A            justify-content: space-between;%0D%0A            align-items: start;%0D%0A            margin-bottom: 10px;%0D%0A        %7D%0D%0A%0D%0A        .customer-name %7B%0D%0A            font-size: 18px;%0D%0A            font-weight: bold;%0D%0A            color: #333;%0D%0A            margin: 0;%0D%0A        %7D%0D%0A%0D%0A        .customer-status %7B%0D%0A            padding: 4px 8px;%0D%0A            border-radius: 12px;%0D%0A            font-size: 11px;%0D%0A            font-weight: bold;%0D%0A            text-transform: uppercase;%0D%0A        %7D%0D%0A%0D%0A        .customer-status.active %7B%0D%0A            background: #d4edda;%0D%0A            color: #155724;%0D%0A        %7D%0D%0A%0D%0A        .customer-status.inactive %7B%0D%0A            background: #f8d7da;%0D%0A            color: #721c24;%0D%0A        %7D%0D%0A%0D%0A        .customer-info-grid %7B%0D%0A            display: grid;%0D%0A            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));%0D%0A            gap: 10px;%0D%0A            margin-bottom: 10px;%0D%0A        %7D%0D%0A%0D%0A        .customer-info-item %7B%0D%0A            font-size: 14px;%0D%0A            color: #666;%0D%0A        %7D%0D%0A%0D%0A        .customer-info-label %7B%0D%0A            font-weight: 600;%0D%0A            color: #333;%0D%0A        %7D%0D%0A%0D%0A        .customer-purchase-stats %7B%0D%0A            background: #f8f9fa;%0D%0A            padding: 10px;%0D%0A            border-radius: 6px;%0D%0A            margin-top: 10px;%0D%0A            display: grid;%0D%0A            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));%0D%0A            gap: 10px;%0D%0A            text-align: center;%0D%0A        %7D%0D%0A%0D%0A        .customer-stat-item %7B%0D%0A            padding: 5px;%0D%0A        %7D%0D%0A%0D%0A        .customer-stat-value %7B%0D%0A            font-size: 16px;%0D%0A            font-weight: bold;%0D%0A            color: #4ecdc4;%0D%0A        %7D%0D%0A%0D%0A        .customer-stat-label %7B%0D%0A            font-size: 11px;%0D%0A            color: #666;%0D%0A            text-transform: uppercase;%0D%0A       \n+Modern Typography --%3E%0D%0A    %3Clink rel=%22preconnect%22 href=%22https://fonts.googleapis.com%22%3E%0D%0A    %3Clink rel=%22preconnect%22 href=%22https://fonts.gstatic.com%22 crossorigin%3E%0D%0A    %3Clink href=%22https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@300;400;500;600;700;800&display=swap%22 rel=%22stylesheet%22%3E%0D%0A    %0D%0A    %3C!-- Icons --%3E%0D%0A    %3Clink rel=%22stylesheet%22 href=%22https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css%22%3E%0D%0A%0D%0A    %3C!-- External Libraries --%3E%0D%0A    %3Cscript src=%22https://cdn.jsdelivr.net/npm/chart.js%22%3E%3C/script%3E%0D%0A    %3Cscript src=%22https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js%22%3E%3C/script%3E%0D%0A    %3Cstyle%3E%0D%0A        /* ======== DESIGN SYSTEM ======== */%0D%0A        :root %7B%0D%0A            /* Modern Color Palette */%0D%0A            --primary-600: #6366F1;%0D%0A            --primary-500: #8B5CF6;%0D%0A            --primary-400: #A78BFA;%0D%0A            --primary-300: #C4B5FD;%0D%0A            --primary-100: #EDE9FE;%0D%0A            --primary-50: #F5F3FF;%0D%0A            %0D%0A            --secondary-600: #DB2777;%0D%0A            --secondary-500: #EC4899;%0D%0A            --secondary-400: #F472B6;%0D%0A            --secondary-300: #F9A8D4;%0D%0A            --secondary-100: #FCE7F3;%0D%0A            %0D%0A            --accent-600: #059669;%0D%0A            --accent-500: #10B981;%0D%0A            --accent-400: #34D399;%0D%0A            --accent-300: #6EE7B7;%0D%0A            --accent-100: #D1FAE5;%0D%0A            %0D%0A            --neutral-900: #111827;%0D%0A            --neutral-800: #1F2937;%0D%0A            --neutral-700: #374151;%0D%0A            --neutral-600: #4B5563;%0D%0A            --neutral-500: #6B7280;%0D%0A            --neutral-400: #9CA3AF;%0D%0A            --neutral-300: #D1D5DB;%0D%0A            --neutral-200: #E5E7EB;%0D%0A            --neutral-100: #F3F4F6;%0D%0A            --neutral-50: #F9FAFB;%0D%0A            %0D%0A            --error-600: #DC2626;%0D%0A            --error-500: #EF4444;%0D%0A            --error-100: #FEE2E2;%0D%0A            %0D%0A            --warning-600: #D97706;%0D%0A            --warning-500: #F59E0B;%0D%0A            --warning-100: #FEF3C7;%0D%0A            %0D%0A            --success-600: #059669;%0D%0A            --success-500: #10B981;%0D%0A            --success-100: #D1FAE5;%0D%0A            %0D%0A            /* Typography */%0D%0A            --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;%0D%0A            --font-secondary: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;%0D%0A            %0D%0A            /* Spacing */%0D%0A            --space-1: 0.25rem;%0D%0A            --space-2: 0.5rem;%0D%0A            --space-3: 0.75rem;%0D%0A            --space-4: 1rem;%0D%0A            --space-5: 1.25rem;%0D%0A            --space-6: 1.5rem;%0D%0A            --space-8: 2rem;%0D%0A            --space-10: 2.5rem;%0D%0A            --space-12: 3rem;%0D%0A            --space-16: 4rem;%0D%0A            --space-20: 5rem;%0D%0A            %0D%0A            /* Border Radius */%0D%0A            --radius-sm: 0.375rem;%0D%0A            --radius-md: 0.5rem;%0D%0A            --radius-lg: 0.75rem;%0D%0A            --radius-xl: 1rem;%0D%0A            --radius-2xl: 1.5rem;%0D%0A            %0D%0A            /* Shadows */%0D%0A            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);%0D%0A            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);%0D%0A            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);%0D%0A            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);%0D%0A            --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);%0D%0A            %0D%0A            /* Transitions */%0D%0A            --transition-fast: 150ms ease-in-out;%0D%0A            --transition-normal: 300ms ease-in-out;%0D%0A            --transition-slow: 500ms ease-in-out;%0D%0A        %7D%0D%0A%0D%0A        /* ======== RESET & BASE STYLES ======== */%0D%0A        * %7B%0D%0A            margin: 0;%0D%0A            padding: 0;%0D%0A            box-sizing: border-box;%0D%0A        %7D%0D%0A%0D%0A        *:focus %7B%0D%0A            outline: 2px solid var(--primary-600);%0D%0A            outline-offset: 2px;%0D%0A        %7D%0D%0A%0D%0A        html %7B%0D%0A            scroll-behavior: smooth;%0D%0A        %7D%0D%0A%0D%0A        body %7B%0D%0A            font-family: var(--font-primary);%0D%0A            font-size: 16px;%0D%0A            line-height: 1.6;%0D%0A            color: var(--neutral-800);%0D%0A            background: linear-gradient(135deg, var(--primary-600) 0%25, var(--secondary-600) 100%25);%0D%0A            min-height: 100vh;%0D%0A            padding: var(--space-4);%0D%0A            overflow-x: hidden;%0D%0A        %7D%0D%0A%0D%0A        /* ======== LOADING SPINNER ======== */%0D%0A        .loading-spinner %7B%0D%0A            display: inline-block;%0D%0A            width: 20px;%0D%0A            height: 20px;%0D%0A            border: 2px solid var(--neutral-300);%0D%0A            border-radius: 50%25;%0D%0A            border-top-color: var(--primary-600);%0D%0A            animation: spin 1s ease-in-out infinite;%0D%0A        %7D%0D%0A%0D%0A        @keyframes spin %7B%0D%0A            to %7B transform: rotate(360deg); %7D%0D%0A        %7D%0D%0A%0D%0A        /* ======== MAIN CONTAINER ======== */%0D%0A        .container %7B%0D%0A            max-width: 1200px;%0D%0A            margin: 0 auto;%0D%0A            background: white;%0D%0A            border-radius: var(--radius-2xl);%0D%0A            box-shadow: var(--shadow-2xl);%0D%0A            overflow: hidden;%0D%0A            backdrop-filter: blur(10px);%0D%0A            animation: slideInUp 0.6s ease-out;%0D%0A        %7D%0D%0A%0D%0A        @keyframes slideInUp %7B%0D%0A            from %7B%0D%0A                opacity: 0;%0D%0A                transform: translate3d(0, 30px, 0);%0D%0A            %7D%0D%0A            to %7B%0D%0A                opacity: 1;%0D%0A                transform: translate3d(0, 0, 0);%0D%0A            %7D%0D%0A        %7D%0D%0A%0D%0A        /* ======== HEADER ======== */%0D%0A        .header %7B%0D%0A            background: linear-gradient(135deg, var(--primary-600) 0%25, var(--secondary-600) 100%25);%0D%0A            color: white;%0D%0A            text-align: center;%0D%0A            padding: var(--space-8) var(--space-6);%0D%0A            position: relative;%0D%0A            overflow: hidden;%0D%0A        %7D%0D%0A%0D%0A        .header::before %7B%0D%0A            content: '';%0D%0A            position: absolute;%0D%0A            top: 0;%0D%0A            left: 0;%0D%0A            right: 0;%0D%0A            bottom: 0;%0D%0A            background: url('data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22%3E%3Cdefs%3E%3Cpattern id=%22grain%22 width=%22100%22 height=%22100%22 patternUnits=%22userSpaceOnUse%22%3E%3Ccircle cx=%2225%22 cy=%2225%22 r=%221%22 fill=%22white%22 opacity=%220.1%22/%3E%3Ccircle cx=%2275%22 cy=%2275%22 r=%221%22 fill=%22white%22 opacity=%220.05%22/%3E%3Ccircle cx=%2250%22 cy=%2210%22 r=%220.5%22 fill=%22white%22 opacity=%220.1%22/%3E%3C/pattern%3E%3C/defs%3E%3Crect width=%22100%22 height=%22100%22 fill=%22url(%2523grain)%22/%3E%3C/svg%3E');%0D%0A            pointer-events: none;%0D%0A        %7D%0D%0A%0D%0A        .header h1 %7B%0D%0A            font-family: var(--font-secondary);%0D%0A            font-size: clamp(1.8rem, 4vw, 2.5rem);%0D%0A            font-weight: 700;%0D%0A            margin: 0;%0D%0A            position: relative;%0D%0A            z-index: 1;%0D%0A            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);%0D%0A        %7D%0D%0A%0D%0A        .header .subtitle %7B%0D%0A            font-size: 1rem;%0D%0A            opacity: 0.9;%0D%0A            margin-top: var(--space-2);%0D%0A            position: relative;%0D%0A            z-index: 1;%0D%0A        %7D%0D%0A%0D%0A        /* ======== NAVIGATION TABS ======== */%0D%0A        .tabs %7B%0D%0A            display: flex;%0D%0A            background: var(--neutral-50);%0D%0A            border-bottom: 1px solid var(--neutral-200);%0D%0A            position: sticky;%0D%0A            top: 0;%0D%0A            z-index: 10;%0D%0A            backdrop-filter: blur(10px);%0D%0A        %7D%0D%0A%0D%0A        .tab %7B%0D%0A            flex: 1;%0D%0A            padding: var(--space-4) var(--space-3);%0D%0A            text-align: center;%0D%0A            cursor: pointer;%0D%0A            background: transparent;%0D%0A            border: none;%0D%0A            font-family: var(--font-primary);%0D%0A            font-size: 0.95rem;%0D%0A            font-weight: 500;%0D%0A            color: var(--neutral-600);%0D%0A            transition: var(--transition-normal);%0D%0A            position: relative;%0D%0A            display: flex;%0D%0A            align-items: center;%0D%0A            justify-content: center;%0D%0A            gap: var(--space-2);%0D%0A            min-height: 60px;%0D%0A        %7D%0D%0A%0D%0A        .tab:hover %7B%0D%0A            background: var(--primary-50);%0D%0A            color: var(--primary-700);%0D%0A            transform: translateY(-1px);%0D%0A        %7D%0D%0A%0D%0A        .tab.active %7B%0D%0A            background: var(--primary-600);%0D%0A            color: white;%0D%0A            font-weight: 600;%0D%0A        %7D%0D%0A%0D%0A        .tab.active::after %7B%0D%0A            content: '';%0D%0A            position: absolute;%0D%0A            bottom: 0;%0D%0A            left: 0;%0D%0A            right: 0;%0D%0A            height: 3px;%0D%0A            background: var(--accent-500);%0D%0A        %7D%0D%0A%0D%0A        .tab i %7B%0D%0A            font-size: 1.1rem;%0D%0A        %7D%0D%0A%0D%0A        /* ======== TAB CONTENT ======== */%0D%0A        .tab-content %7B%0D%0A            display: none;%0D%0A            padding: var(--space-8) var(--space-6);%0D%0A            min-height: 600px;%0D%0A            animation: fadeIn 0.4s ease-in-out;%0D%0A        %7D%0D%0A%0D%0A        .tab-content.active %7B%0D%0A            display: block;%0D%0A        %7D%0D%0A%0D%0A        @keyframes fadeIn %7B%0D%0A            from %7B%0D%0A                opacity: 0;%0D%0A                transform: translateY(10px);%0D%0A            %7D%0D%0A            to %7B%0D%0A                opacity: 1;%0D%0A                transform: translateY(0);%0D%0A            %7D%0D%0A        %7D%0D%0A%0D%0A        /* ======== FORM COMPONENTS ======== */%0D%0A        .form-section %7B%0D%0A            background: var(--neutral-50);%0D%0A            border-radius: var(--radius-lg);%0D%0A            padding: var(--space-6);%0D%0A            margin-bottom: var(--space-6);%0D%0A            border: 1px solid var(--neutral-200);%0D%0A        %7D%0D%0A%0D%0A        .form-section h3 %7B%0D%0A            font-family: var(--font-secondary);%0D%0A            font-size: 1.25rem;%0D%0A            font-weight: 600;%0D%0A            color: var(--neutral-800);%0D%0A            margin-bottom: var(--space-4);%0D%0A            display: flex;%0D%0A            align-items: center;%0D%0A            gap: var(--space-2);%0D%0A        %7D%0D%0A%0D%0A        .form-section h3 i %7B%0D%0A            color: var(--primary-600);%0D%0A        %7D%0D%0A%0D%0A        .form-grid %7B%0D%0A            display: grid;%0D%0A            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));%0D%0A            gap: var(--space-4);%0D%0A        %7D%0D%0A%0D%0A        .form-group %7B%0D%0A            margin-bottom: var(--space-5);%0D%0A        %7D%0D%0A%0D%0A        .form-group label %7B%0D%0A            display: block;%0D%0A            margin-bottom: var(--space-2);%0D%0A            font-weight: 500;%0D%0A            color: var(--neutral-700);%0D%0A            font-size: 0.9rem;%0D%0A            text-transform: uppercase;%0D%0A            letter-spacing: 0.5px;%0D%0A        %7D%0D%0A%0D%0A        .form-group label.required::after %7B%0D%0A            content: '*';%0D%0A            color: var(--error-500);%0D%0A            margin-left: var(--space-1);%0D%0A        %7D%0D%0A%0D%0A        .form-control %7B%0D%0A            width: 100%25;%0D%0A            padding: var(--space-3) var(--space-4);%0D%0A            border: 2px solid var(--neutral-300);%0D%0A            border-radius: var(--radius-md);%0D%0A            font-size: 1rem;%0D%0A            font-family: var(--font-primary);%0D%0A            transition: var(--transition-normal);%0D%0A            background: white;%0D%0A            color: var(--neutral-800);%0D%0A        %7D%0D%0A%0D%0A        .form-control:focus %7B%0D%0A            outline: none;%0D%0A            border-color: var(--primary-600);%0D%0A            box-shadow: 0 0 0 3px var(--primary-100);%0D%0A            transform: translateY(-1px);%0D%0A        %7D%0D%0A%0D%0A        .form-control:invalid %7B%0D%0A            border-color: var(--error-500);%0D%0A        %7D%0D%0A%0D%0A        .form-control:disabled %7B%0D%0A            background: var(--neutral-100);%0D%0A            color: var(--neutral-500);%0D%0A            cursor: not-allowed;%0D%0A        %7D%0D%0A%0D%0A        .form-control::placeholder %7B%0D%0A            color: var(--neutral-400);%0D%0A        %7D%0D%0A%0D%0A        .form-error %7B%0D%0A            display: none;%0D%0A            color: var(--error-600);%0D%0A            font-size: 0.875rem;%0D%0A            margin-top: var(--space-1);%0D%0A            display: flex;%0D%0A            align-items: center;%0D%0A            gap: var(--space-1);%0D%0A        %7D%0D%0A%0D%0A        .form-error i %7B%0D%0A            font-size: 0.8rem;%0D%0A        %7D%0D%0A%0D%0A        .form-success %7B%0D%0A            display: none;%0D%0A            color: var(--success-600);%0D%0A            font-size: 0.875rem;%0D%0A            margin-top: var(--space-1);%0D%0A            display: flex;%0D%0A            align-items: center;%0D%0A            gap: var(--space-1);%0D%0A        %7D%0D%0A%0D%0A        .form-success i %7B%0D%0A            font-size: 0.8rem;%0D%0A        %7D%0D%0A%0D%0A        /* ======== BUTTON COMPONENTS ======== */%0D%0A        .btn %7B%0D%0A            display: inline-flex;%0D%0A            align-items: center;%0D%0A            justify-content: center;%0D%0A            gap: var(--space-2);%0D%0A            padding: var(--space-3) var(--space-6);%0D%0A            border: none;%0D%0A            border-radius: var(--radius-md);%0D%0A            font-family: var(--font-primary);%0D%0A            font-size: 0.95rem;%0D%0A            font-weight: 500;%0D%0A            text-decoration: none;%0D%0A            cursor: pointer;%0D%0A            transition: var(--transition-normal);%0D%0A            position: relative;%0D%0A            overflow: hidden;%0D%0A            white-space: nowrap;%0D%0A            user-select: none;%0D%0A            min-height: 44px;%0D%0A        %7D%0D%0A%0D%0A        .btn:disabled %7B%0D%0A            opacity: 0.6;%0D%0A            cursor: not-allowed;%0D%0A            transform: none !important;%0D%0A        %7D%0D%0A%0D%0A        .btn.loading %7B%0D%0A            color: transparent;%0D%0A        %7D%0D%0A%0D%0A        .btn.loading::after %7B%0D%0A            content: '';%0D%0A            position: absolute;%0D%0A            width: 16px;%0D%0A            height: 16px;%0D%0A            top: 50%25;%0D%0A            left: 50%25;%0D%0A            margin-left: -8px;%0D%0A            margin-top: -8px;%0D%0A            border: 2px solid transparent;%0D%0A            border-top-color: currentColor;%0D%0A            border-radius: 50%25;%0D%0A            animation: spin 1s linear infinite;%0D%0A        %7D%0D%0A%0D%0A        /* Button Variants */%0D%0A        .btn-primary %7B%0D%0A            background: linear-gradient(135deg, var(--primary-600), var(--primary-500));%0D%0A            color: white;%0D%0A            box-shadow: var(--shadow-md);%0D%0A        %7D%0D%0A%0D%0A        .btn-primary:hover:not(:disabled) %7B%0D%0A            background: linear-gradient(135deg, var(--primary-700), var(--primary-600));%0D%0A            transform: translateY(-2px);%0D%0A            box-shadow: var(--shadow-lg);%0D%0A        %7D%0D%0A%0D%0A        .btn-primary:active %7B%0D%0A            transform: translateY(0);%0D%0A            box-shadow: var(--shadow-md);%0D%0A        %7D%0D%0A%0D%0A        .btn-secondary %7B%0D%0A            background: linear-gradient(135deg, var(--secondary-600), var(--secondary-500));%0D%0A            color: white;%0D%0A            box-shadow: var(--shadow-md);%0D%0A        %7D%0D%0A%0D%0A        .btn-secondary:hover:not(:disabled) %7B%0D%0A            background: linear-gradient(135deg, var(--secondary-700), var(--secondary-600));%0D%0A            transform: translateY(-2px);%0D%0A            box-shadow: var(--shadow-lg);%0D%0A        %7D%0D%0A%0D%0A        .btn-accent %7B%0D%0A            background: linear-gradient(135deg, var(--accent-600), var(--accent-500));%0D%0A            color: white;%0D%0A            box-shadow: var(--shadow-md);%0D%0A        %7D%0D%0A%0D%0A        .btn-accent:hover:not(:disabled) %7B%0D%0A            background: linear-gradient(135deg, var(--accent-700), var(--accent-600));%0D%0A            transform: translateY(-2px);%0D%0A            box-shadow: var(--shadow-lg);%0D%0A        %7D%0D%0A%0D%0A        .btn-outline %7B%0D%0A            background: transparent;%0D%0A            border: 2px solid var(--primary-600);%0D%0A            color: var(--primary-600);%0D%0A        %7D%0D%0A%0D%0A        .btn-outline:hover:not(:disabled) %7B%0D%0A            background: var(--primary-600);%0D%0A            color: white;%0D%0A            transform: translateY(-1px);%0D%0A        %7D%0D%0A%0D%0A        .btn-ghost %7B%0D%0A            background: transparent;%0D%0A            color: var(--neutral-600);%0D%0A            box-shadow: none;%0D%0A        %7D%0D%0A%0D%0A        .btn-ghost:hover:not(:disabled) %7B%0D%0A            background: var(--neutral-100);%0D%0A            color: var(--neutral-800);%0D%0A        %7D%0D%0A%0D%0A        .btn-danger %7B%0D%0A            background: linear-gradient(135deg, var(--error-600), var(--error-500));%0D%0A            color: white;%0D%0A            box-shadow: var(--shadow-md);%0D%0A        %7D%0D%0A%0D%0A        .btn-danger:hover:not(:disabled) %7B%0D%0A            background: linear-gradient(135deg, var(--error-700), var(--error-600));%0D%0A            transform: translateY(-2px);%0D%0A            box-shadow: var(--shadow-lg);%0D%0A        %7D%0D%0A%0D%0A        /* Button Sizes */%0D%0A        .btn-sm %7B%0D%0A            padding: var(--space-2) var(--space-4);%0D%0A            font-size: 0.875rem;%0D%0A            min-height: 36px;%0D%0A        %7D%0D%0A%0D%0A        .btn-lg %7B%0D%0A            padding: var(--space-4) var(--space-8);%0D%0A            font-size: 1.1rem;%0D%0A            min-height: 52px;%0D%0A        %7D%0D%0A%0D%0A        .btn-full %7B%0D%0A            width: 100%25;%0D%0A        %7D%0D%0A%0D%0A        /* Button Groups */%0D%0A        .btn-group %7B%0D%0A            display: flex;%0D%0A            gap: var(--space-2);%0D%0A            margin-top: var(--space-4);%0D%0A        %7D%0D%0A%0D%0A        .btn-group .btn %7B%0D%0A            flex: 1;%0D%0A        %7D%0D%0A%0D%0A        /* ======== CARD COMPONENTS ======== */%0D%0A        .card %7B%0D%0A            background: white;%0D%0A            border-radius: var(--radius-lg);%0D%0A            box-shadow: var(--shadow-md);%0D%0A            border: 1px solid var(--neutral-200);%0D%0A            overflow: hidden;%0D%0A            transition: var(--transition-normal);%0D%0A        %7D%0D%0A%0D%0A        .card:hover %7B%0D%0A            box-shadow: var(--shadow-lg);%0D%0A            transform: translateY(-2px);%0D%0A        %7D%0D%0A%0D%0A        .card-header %7B%0D%0A            padding: var(--space-4) var(--space-5);%0D%0A            border-bottom: 1px solid var(--neutral-200);%0D%0A            background: var(--neutral-50);%0D%0A        %7D%0D%0A%0D%0A        .card-header h3 %7B%0D%0A            margin: 0;%0D%0A            font-size: 1.1rem;%0D%0A            font-weight: 600;%0D%0A            color: var(--neutral-800);%0D%0A        %7D%0D%0A%0D%0A        .card-body %7B%0D%0A            padding: var(--space-5);%0D%0A        %7D%0D%0A%0D%0A        .card-footer %7B%0D%0A            padding: var(--space-4) var(--space-5);%0D%0A            background: var(--neutral-50);%0D%0A            border-top: 1px solid var(--neutral-200);%0D%0A        %7D%0D%0A%0D%0A        /* Sales Item Cards */%0D%0A        .sales-item %7B%0D%0A            background: white;%0D%0A            border: 1px solid var(--neutral-200);%0D%0A            border-left: 4px solid var(--primary-600);%0D%0A            border-radius: var(--radius-lg);%0D%0A            padding: var(--space-5);%0D%0A            margin-bottom: var(--space-4);%0D%0A            position: relative;%0D%0A            transition: var(--transition-normal);%0D%0A            box-shadow: var(--shadow-sm);%0D%0A        %7D%0D%0A%0D%0A        .sales-item:hover %7B%0D%0A            border-left-color: var(--accent-500);%0D%0A            box-shadow: var(--shadow-md);%0D%0A            transform: translateX(4px);%0D%0A        %7D%0D%0A%0D%0A        .sales-item-header %7B%0D%0A            display: flex;%0D%0A            justify-content: space-between;%0D%0A            align-items: start;%0D%0A            margin-bottom: var(--space-3);%0D%0A        %7D%0D%0A%0D%0A        .sales-item h4 %7B%0D%0A            color: var(--neutral-800);%0D%0A            font-size: 1.1rem;%0D%0A            font-weight: 600;%0D%0A            margin: 0;%0D%0A        %7D%0D%0A%0D%0A        .sales-item-info %7B%0D%0A            display: grid;%0D%0A            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));%0D%0A            gap: var(--space-3);%0D%0A            margin-bottom: var(--space-3);%0D%0A        %7D%0D%0A%0D%0A        .sales-item-info-item %7B%0D%0A            display: flex;%0D%0A            flex-direction: column;%0D%0A        %7D%0D%0A%0D%0A        .sales-item-info-label %7B%0D%0A            font-size: 0.8rem;%0D%0A            font-weight: 500;%0D%0A            color: var(--neutral-500);%0D%0A            text-transform: uppercase;%0D%0A            letter-spacing: 0.5px;%0D%0A            margin-bottom: var(--space-1);%0D%0A        %7D%0D%0A%0D%0A        .sales-item-info-value %7B%0D%0A            font-size: 0.95rem;%0D%0A            color: var(--neutral-700);%0D%0A            font-weight: 500;%0D%0A        %7D%0D%0A%0D%0A        .sales-item-amount %7B%0D%0A            font-size: 1.2rem;%0D%0A            font-weight: 700;%0D%0A            color: var(--accent-600);%0D%0A        %7D%0D%0A%0D%0A        /* Dashboard Stats */%0D%0A        .dashboard-stats %7B%0D%0A            display: grid;%0D%0A            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));%0D%0A            gap: var(--space-5);%0D%0A            margin-bottom: var(--space-8);%0D%0A        %7D%0D%0A%0D%0A        .stat-card %7B%0D%0A            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));%0D%0A            color: white;%0D%0A            padding: var(--space-6);%0D%0A            border-radius: var(--radius-xl);%0D%0A            text-align: center;%0D%0A            position: relative;%0D%0A            overflow: hidden;%0D%0A            box-shadow: var(--shadow-lg);%0D%0A            transition: var(--transition-normal);%0D%0A        %7D%0D%0A%0D%0A        .stat-card::before %7B%0D%0A            content: '';%0D%0A            position: absolute;%0D%0A            top: -50%25;%0D%0A            right: -50%25;%0D%0A            width: 100%25;%0D%0A            height: 100%25;%0D%0A            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%25, transparent 70%25);%0D%0A        %7D%0D%0A%0D%0A        .stat-card:hover %7B%0D%0A            transform: translateY(-4px);%0D%0A            box-shadow: var(--shadow-xl);%0D%0A        %7D%0D%0A%0D%0A        .stat-card-icon %7B%0D%0A            font-size: 2.5rem;%0D%0A            margin-bottom: var(--space-3);%0D%0A            opacity: 0.9;%0D%0A        %7D%0D%0A%0D%0A        .stat-card h3 %7B%0D%0A            font-size: 2.5rem;%0D%0A            font-weight: 700;%0D%0A            margin-bottom: var(--space-2);%0D%0A            position: relative;%0D%0A            z-index: 1;%0D%0A        %7D%0D%0A%0D%0A        .stat-card p %7B%0D%0A            font-size: 0.95rem;%0D%0A            opacity: 0.9;%0D%0A            position: relative;%0D%0A            z-index: 1;%0D%0A        %7D%0D%0A%0D%0A        /* Chart Container */%0D%0A        .chart-container %7B%0D%0A            background: white;%0D%0A            border-radius: var(--radius-lg);%0D%0A            box-shadow: var(--shadow-md);%0D%0A            border: 1px solid var(--neutral-200);%0D%0A            padding: var(--space-6);%0D%0A            margin-bottom: var(--space-6);%0D%0A            height: 450px;%0D%0A            position: relative;%0D%0A        %7D%0D%0A%0D%0A        .chart-header %7B%0D%0A            display: flex;%0D%0A            justify-content: space-between;%0D%0A            align-items: center;%0D%0A            margin-bottom: var(--space-4);%0D%0A            padding-bottom: var(--space-3);%0D%0A            border-bottom: 1px solid var(--neutral-200);%0D%0A        %7D%0D%0A%0D%0A        .chart-title %7B%0D%0A            font-size: 1.2rem;%0D%0A            font-weight: 600;%0D%0A            color: var(--neutral-800);%0D%0A        %7D%0D%0A%0D%0A        /* Customer Item Cards */%0D%0A        .customer-item %7B%0D%0A            background: white;%0D%0A            border: 1px solid var(--neutral-200);%0D%0A            border-left: 4px solid var(--secondary-600);%0D%0A            border-radius: var(--radius-lg);%0D%0A            padding: var(--space-5);%0D%0A            margin-bottom: var(--space-4);%0D%0A            position: relative;%0D%0A            transition: var(--transition-normal);%0D%0A            box-shadow: var(--shadow-sm);%0D%0A        %7D%0D%0A%0D%0A        .customer-item:hover %7B%0D%0A            border-left-color: var(--accent-500);%0D%0A            box-shadow: var(--shadow-md);%0D%0A            transform: translateX(4px);%0D%0A        %7D%0D%0A%0D%0A        /* Empty State */%0D%0A        .no-data %7B%0D%0A            text-align: center;%0D%0A            color: var(--neutral-500);%0D%0A            font-style: italic;%0D%0A            padding: var(--space-16);%0D%0A            font-size: 1.1rem;%0D%0A            background: var(--neutral-50);%0D%0A            border-radius: var(--radius-lg);%0D%0A            border: 2px dashed var(--neutral-300);%0D%0A        %7D%0D%0A%0D%0A        .no-data i %7B%0D%0A            font-size: 3rem;%0D%0A            color: var(--neutral-400);%0D%0A            margin-bottom: var(--space-4);%0D%0A            display: block;%0D%0A        %7D%0D%0A%0D%0A        /* Action Buttons */%0D%0A        .action-buttons %7B%0D%0A            position: absolute;%0D%0A            top: var(--space-4);%0D%0A            right: var(--space-4);%0D%0A            display: flex;%0D%0A            gap: var(--space-2);%0D%0A            z-index: 2;%0D%0A        %7D%0D%0A%0D%0A        .edit-btn, .delete-btn %7B%0D%0A            padding: var(--space-2) var(--space-3);%0D%0A            border: none;%0D%0A            border-radius: var(--radius-md);%0D%0A            cursor: pointer;%0D%0A            font-size: 0.8rem;%0D%0A            font-weight: 500;%0D%0A            transition: var(--transition-fast);%0D%0A            display: flex;%0D%0A            align-items: center;%0D%0A            gap: var(--space-1);%0D%0A        %7D%0D%0A%0D%0A        .edit-btn %7B%0D%0A            background: var(--primary-600);%0D%0A            color: white;%0D%0A        %7D%0D%0A%0D%0A        .edit-btn:hover %7B%0D%0A            background: var(--primary-700);%0D%0A            transform: translateY(-1px);%0D%0A        %7D%0D%0A%0D%0A        .delete-btn %7B%0D%0A            background: var(--error-600);%0D%0A            color: white;%0D%0A        %7D%0D%0A%0D%0A        .delete-btn:hover %7B%0D%0A            background: var(--error-700);%0D%0A            transform: translateY(-1px);%0D%0A        %7D%0D%0A%0D%0A        /* ======== SCROLLABLE CONTAINERS ======== */%0D%0A        .scrollable-container %7B%0D%0A            max-height: 650px;%0D%0A            overflow-y: auto;%0D%0A            padding-right: var(--space-2);%0D%0A            scroll-behavior: smooth;%0D%0A        %7D%0D%0A%0D%0A        .scrollable-container::-webkit-scrollbar %7B%0D%0A            width: 8px;%0D%0A        %7D%0D%0A%0D%0A        .scrollable-container::-webkit-scrollbar-track %7B%0D%0A            background: var(--neutral-200);%0D%0A            border-radius: var(--radius-lg);%0D%0A        %7D%0D%0A%0D%0A        .scrollable-container::-webkit-scrollbar-thumb %7B%0D%0A            background: linear-gradient(135deg, var(--primary-500), var(--primary-600));%0D%0A            border-radius: var(--radius-lg);%0D%0A            border: 2px solid var(--neutral-200);%0D%0A        %7D%0D%0A%0D%0A        .scrollable-container::-webkit-scrollbar-thumb:hover %7B%0D%0A            background: linear-gradient(135deg, var(--primary-600), var(--primary-700));%0D%0A        %7D%0D%0A%0D%0A        /* ======== SEARCH AND FILTER ======== */%0D%0A        .filter-section %7B%0D%0A            background: var(--neutral-50);%0D%0A            border: 1px solid var(--neutral-200);%0D%0A            border-radius: var(--radius-lg);%0D%0A            padding: var(--space-5);%0D%0A            margin-bottom: var(--space-6);%0D%0A        %7D%0D%0A%0D%0A        .filter-header %7B%0D%0A            display: flex;%0D%0A            align-items: center;%0D%0A            gap: var(--space-2);%0D%0A            margin-bottom: var(--space-4);%0D%0A        %7D%0D%0A%0D%0A        .filter-header h3 %7B%0D%0A            font-size: 1.1rem;%0D%0A            font-weight: 600;%0D%0A            color: var(--neutral-800);%0D%0A            margin: 0;%0D%0A        %7D%0D%0A%0D%0A        .search-input %7B%0D%0A            position: relative;%0D%0A        %7D%0D%0A%0D%0A        .search-input input %7B%0D%0A            width: 100%25;%0D%0A            padding: var(--space-3) var(--space-4) var(--space-3) var(--space-12);%0D%0A            border: 2px solid var(--neutral-300);%0D%0A            border-radius: var(--radius-md);%0D%0A            font-size: 1rem;%0D%0A            transition: var(--transition-normal);%0D%0A            background: white;%0D%0A        %7D%0D%0A%0D%0A        .search-input input:focus %7B%0D%0A            outline: none;%0D%0A            border-color: var(--primary-600);%0D%0A            box-shadow: 0 0 0 3px var(--primary-100);%0D%0A        %7D%0D%0A%0D%0A        .search-input i %7B%0D%0A            position: absolute;%0D%0A            left: var(--space-4);%0D%0A            top: 50%25;%0D%0A            transform: translateY(-50%25);%0D%0A            color: var(--neutral-400);%0D%0A            font-size: 1.1rem;%0D%0A        %7D%0D%0A%0D%0A        /* ======== NOTIFICATIONS & TOASTS ======== */%0D%0A        .toast %7B%0D%0A            position: fixed;%0D%0A            top: var(--space-4);%0D%0A            right: var(--space-4);%0D%0A            background: white;%0D%0A            border-radius: var(--radius-lg);%0D%0A            box-shadow: var(--shadow-lg);%0D%0A            border: 1px solid var(--neutral-200);%0D%0A            padding: var(--space-4);%0D%0A            max-width: 400px;%0D%0A            z-index: 1000;%0D%0A            transform: translateX(100%25);%0D%0A            opacity: 0;%0D%0A            transition: var(--transition-normal);%0D%0A        %7D%0D%0A%0D%0A        .toast.show %7B%0D%0A            transform: translateX(0);%0D%0A            opacity: 1;%0D%0A        %7D%0D%0A%0D%0A        .toast-success %7B%0D%0A            border-left: 4px solid var(--success-500);%0D%0A        %7D%0D%0A%0D%0A        .toast-error %7B%0D%0A            border-left: 4px solid var(--error-500);%0D%0A        %7D%0D%0A%0D%0A        .toast-warning %7B%0D%0A            border-left: 4px solid var(--warning-500);%0D%0A        %7D%0D%0A%0D%0A        .toast-info %7B%0D%0A            border-left: 4px solid var(--primary-500);%0D%0A        %7D%0D%0A%0D%0A        /* ======== RESPONSIVE DESIGN ======== */%0D%0A        @media (max-width: 768px) %7B%0D%0A            .container %7B%0D%0A                margin: var(--space-2);%0D%0A                border-radius: var(--radius-lg);%0D%0A            %7D%0D%0A%0D%0A            .header %7B%0D%0A                padding: var(--space-6) var(--space-4);%0D%0A            %7D%0D%0A%0D%0A            .header h1 %7B%0D%0A                font-size: 1.8rem;%0D%0A            %7D%0D%0A%0D%0A            .tabs %7B%0D%0A                flex-wrap: wrap;%0D%0A            %7D%0D%0A%0D%0A            .tab %7B%0D%0A                flex: 1;%0D%0A                min-width: 120px;%0D%0A                font-size: 0.85rem;%0D%0A                padding: var(--space-3);%0D%0A            %7D%0D%0A%0D%0A            .tab i %7B%0D%0A                display: none;%0D%0A            %7D%0D%0A%0D%0A            .tab-content %7B%0D%0A                padding: var(--space-6) var(--space-4);%0D%0A            %7D%0D%0A%0D%0A            .form-grid %7B%0D%0A                grid-template-columns: 1fr;%0D%0A            %7D%0D%0A%0D%0A            .dashboard-stats %7B%0D%0A                grid-template-columns: repeat(2, 1fr);%0D%0A                gap: var(--space-3);%0D%0A            %7D%0D%0A%0D%0A            .btn-group %7B%0D%0A                flex-direction: column;%0D%0A            %7D%0D%0A%0D%0A            .sales-item-info %7B%0D%0A                grid-template-columns: 1fr;%0D%0A            %7D%0D%0A        %7D%0D%0A%0D%0A        @media (max-width: 480px) %7B%0D%0A            body %7B%0D%0A                padding: var(--space-2);%0D%0A            %7D%0D%0A%0D%0A            .header h1 %7B%0D%0A                font-size: 1.5rem;%0D%0A            %7D%0D%0A%0D%0A            .tabs %7B%0D%0A                overflow-x: auto;%0D%0A                flex-wrap: nowrap;%0D%0A            %7D%0D%0A%0D%0A            .tab %7B%0D%0A                min-width: 100px;%0D%0A                font-size: 0.8rem;%0D%0A            %7D%0D%0A%0D%0A            .dashboard-stats %7B%0D%0A                grid-template-columns: 1fr;%0D%0A            %7D%0D%0A%0D%0A            .form-section %7B%0D%0A                padding: var(--space-4);%0D%0A            %7D%0D%0A        %7D%0D%0A%0D%0A        /* ======== UTILITY CLASSES ======== */%0D%0A        .sr-only %7B%0D%0A            position: absolute;%0D%0A            width: 1px;%0D%0A            height: 1px;%0D%0A            padding: 0;%0D%0A            margin: -1px;%0D%0A            overflow: hidden;%0D%0A            clip: rect(0, 0, 0, 0);%0D%0A            white-space: nowrap;%0D%0A            border: 0;%0D%0A        %7D%0D%0A%0D%0A        .text-center %7B text-align: center; %7D%0D%0A        .text-right %7B text-align: right; %7D%0D%0A        .text-left %7B text-align: left; %7D%0D%0A%0D%0A        .fw-bold %7B font-weight: 700; %7D%0D%0A        .fw-semibold %7B font-weight: 600; %7D%0D%0A        .fw-medium %7B font-weight: 500; %7D%0D%0A        .fw-normal %7B font-weight: 400; %7D%0D%0A%0D%0A        .text-primary %7B color: var(--primary-600); %7D%0D%0A        .text-secondary %7B color: var(--secondary-600); %7D%0D%0A        .text-success %7B color: var(--success-600); %7D%0D%0A        .text-error %7B color: var(--error-600); %7D%0D%0A        .text-warning %7B color: var(--warning-600); %7D%0D%0A        .text-muted %7B color: var(--neutral-500); %7D%0D%0A%0D%0A        .bg-primary %7B background-color: var(--primary-600); %7D%0D%0A        .bg-secondary %7B background-color: var(--secondary-600); %7D%0D%0A        .bg-success %7B background-color: var(--success-600); %7D%0D%0A        .bg-error %7B background-color: var(--error-600); %7D%0D%0A        .bg-warning %7B background-color: var(--warning-600); %7D%0D%0A%0D%0A        .mb-2 %7B margin-bottom: var(--space-2); %7D%0D%0A        .mb-3 %7B margin-bottom: var(--space-3); %7D%0D%0A        .mb-4 %7B margin-bottom: var(--space-4); %7D%0D%0A        .mb-6 %7B margin-bottom: var(--space-6); %7D%0D%0A%0D%0A        .mt-2 %7B margin-top: var(--space-2); %7D%0D%0A        .mt-3 %7B margin-top: var(--space-3); %7D%0D%0A        .mt-4 %7B margin-top: var(--space-4); %7D%0D%0A        .mt-6 %7B margin-top: var(--space-6);\n  %7D%0D%0A\n@@ -41502,5865 +41502,8231 @@\n    %3C\n-div class=%22header%22%3E%0D%0A            %F0%9F%92%8E Theia Jewelz%0D%0A        %3C/div%3E%0D%0A%0D%0A        %3Cdiv class=%22tabs%22%3E%0D%0A            %3Cbutton class=%22tab active%22 onclick=%22showTab('sales')%22%3E%F0%9F%93%9D Sales Entry%3C/button%3E%0D%0A            %3Cbutton class=%22tab%22 onclick=%22showTab('recent-sales')%22%3E%F0%9F%93%8B Recent Sales%3C/button%3E%0D%0A            %3Cbutton class=%22tab%22 onclick=%22showTab('dashboard')%22%3E%F0%9F%93%8A Dashboard%3C/button%3E%0D%0A            %3Cbutton class=%22tab%22 onclick=%22showTab('customers')%22%3E%F0%9F%91%A5 Customers%3C/button%3E%0D%0A            %3Cbutton class=%22tab%22 onclick=%22showTab('analytics')%22%3E%F0%9F%93%88 Analytics%3C/button%3E%0D%0A        %3C/div%3E%0D%0A%0D%0A        %3C!-- Sales Entry Tab --%3E%0D%0A        %3Cdiv id=%22sales%22 class=%22tab-content active%22%3E%0D%0A            %3Ch2%3EAdd New Sale%3C/h2%3E%0D%0A%0D%0A            %3Cdiv id=%22success-message%22 class=%22success-message%22%3E%3C/div%3E%0D%0A            %3Cdiv id=%22error-message%22 class=%22error-message%22%3E%3C/div%3E%0D%0A%0D%0A            %3Cform id=%22sales-form%22%3E%0D%0A                %3C!-- Customer Search Section --%3E%0D%0A                %3Cdiv class=%22form-group%22%3E%0D%0A                    %3Clabel for=%22customerSearch%22%3E%F0%9F%94%8D Search Existing Customer%3C/label%3E%0D%0A                    %3Cdiv style=%22position: relative;%22%3E%0D%0A                        %3Cinput type=%22text%22 id=%22customerSearch%22 placeholder=%22Type customer name or phone to search...%22%0D%0A                               oninput=%22searchCustomers()%22 onkeydown=%22handleSearchKeydown(event)%22 autocomplete=%22off%22%0D%0A                               style=%22padding-right: 40px;%22%3E%0D%0A                        %3Cbutton type=%22button%22 onclick=%22clearCustomerSearch()%22%0D%0A                                style=%22position: absolute; right: 10px; top: 50%25; transform: translateY(-50%25);%0D%0A                                       background: none; border: none; cursor: pointer; font-size: 16px;%22%0D%0A                                title=%22Clear search%22%3E%E2%9D%8C%3C/button%3E%0D%0A                        %3Cdiv id=%22customer-search-results%22 style=%22display: none; position: absolute; top: 100%25; left: 0; right: 0;%0D%0A                             background: white; border: 1px solid #ddd; border-top: none; border-radius: 0 0 8px 8px;%0D%0A                             max-height: 200px; overflow-y: auto; z-index: 1000; box-shadow: 0 2px 8px rgba(0,0,0,0.1);%22%3E%0D%0A                        %3C/div%3E%0D%0A                    %3C/div%3E%0D%0A                    %3Csmall style=%22color: #666; font-size: 12px;%22%3E%F0%9F%92%A1 Search from All Customers (%3Cspan id=%22total-customers%22%3E0%3C/span%3E customers) - includes database & sales records. Supports name, phone & email search%3C/small%3E%0D%0A                %3C/div%3E%0D%0A%0D%0A                %3C!-- Customer Details Section --%3E%0D%0A                %3Cdiv style=%22background: #f8f9fa; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;%22%3E%0D%0A                    %3Ch4 style=%22margin: 0 0 15px 0; color: #4ecdc4; font-size: 16px;%22%3E%F0%9F%91%A4 Customer Information%3C/h4%3E%0D%0A%0D%0A                    %3Cdiv class=%22form-group%22 style=%22margin-bottom: 15px;%22%3E%0D%0A                        %3Clabel for=%22customerName%22%3ECustomer Name *%3C/label%3E%0D%0A                        %3Cinput type=%22text%22 id=%22customerName%22 required placeholder=%22Enter customer name%22%0D%0A                               style=%22background: white;%22%3E%0D%0A                    %3C/div%3E%0D%0A%0D%0A                    %3Cdiv class=%22form-group%22 style=%22margin-bottom: 15px;%22%3E%0D%0A                        %3Clabel for=%22customerPhone%22%3ECustomer Phone%3C/label%3E%0D%0A                        %3Cinput type=%22tel%22 id=%22customerPhone%22 placeholder=%22Enter phone number%22%0D%0A                               style=%22background: white;%22%3E%0D%0A                    %3C/div%3E%0D%0A%0D%0A                    %3Cdiv class=%22form-group%22 style=%22margin-bottom: 0;%22%3E%0D%0A                        %3Clabel for=%22customerAddress%22%3ECustomer Address%3C/label%3E%0D%0A                        %3Ctextarea id=%22customerAddress%22 rows=%222%22 placeholder=%22Enter customer address (optional)%22%0D%0A                                  style=%22background: white; width: 100%25; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;%22%3E%3C/textarea%3E%0D%0A                    %3C/div%3E%0D%0A                %3C/div%3E%0D%0A%0D%0A                %3C!-- Item Details Section --%3E%0D%0A                %3Cdiv style=%22background: #fff; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;%22%3E%0D%0A                    %3Ch4 style=%22margin: 0 0 15px 0; color: #ff6b6b; font-size: 16px;%22%3E%F0%9F%92%8E Item Information%3C/h4%3E%0D%0A%0D%0A                    %3Cdiv class=%22form-group%22%3E%0D%0A                        %3Clabel for=%22itemName%22%3EItem Name *%3C/label%3E%0D%0A                        %3Cinput type=%22text%22 id=%22itemName%22 required placeholder=%22e.g., Gold Plated Necklace%22%3E%0D%0A                    %3C/div%3E%0D%0A%0D%0A                    %3Cdiv class=%22form-group%22%3E%0D%0A                        %3Clabel for=%22category%22%3ECategory *%3C/label%3E%0D%0A                        %3Cselect id=%22category%22 required%3E%0D%0A                            %3Coption value=%22%22%3ESelect Category%3C/option%3E%0D%0A                            %3Coption value=%22Necklaces%22%3ENecklaces%3C/option%3E%0D%0A                            %3Coption value=%22Earrings%22%3EEarrings%3C/option%3E%0D%0A                            %3Coption value=%22Bracelets%22%3EBracelets%3C/option%3E%0D%0A                            %3Coption value=%22Rings%22%3ERings%3C/option%3E%0D%0A                            %3Coption value=%22Anklets%22%3EAnklets%3C/option%3E%0D%0A                            %3Coption value=%22Sets%22%3ESets%3C/option%3E%0D%0A                            %3Coption value=%22Bangles%22%3EBangles%3C/option%3E%0D%0A                            %3Coption value=%22Chains%22%3EChains%3C/option%3E%0D%0A                        %3C/select%3E%0D%0A                    %3C/div%3E%0D%0A%0D%0A                    %3Cdiv class=%22form-group%22 style=%22margin-bottom: 0;%22%3E%0D%0A                        %3Clabel for=%22saleDate%22%3ESale Date *%3C/label%3E%0D%0A                        %3Cinput type=%22date%22 id=%22saleDate%22 required%3E%0D%0A                    %3C/div%3E%0D%0A                %3C/div%3E%0D%0A%0D%0A                %3C!-- Pricing Section --%3E%0D%0A                %3Cdiv style=%22background: #fff; padding: 15px; border-radius: 8px; border: 2px solid #e9ecef; margin-bottom: 20px;%22%3E%0D%0A                    %3Ch4 style=%22margin: 0 0 15px 0; color: #28a745; font-size: 16px;%22%3E%F0%9F%92%B0 Pricing Information%3C/h4\n+header class=%22header%22%3E%0D%0A            %3Ch1%3E%F0%9F%92%8E Theia Jewelz%3C/h1%3E%0D%0A            %3Cp class=%22subtitle%22%3EModern Sales Management System%3C/p%3E%0D%0A        %3C/header%3E%0D%0A%0D%0A        %3Cnav class=%22tabs%22 role=%22tablist%22 aria-label=%22Main navigation%22%3E%0D%0A            %3Cbutton class=%22tab active%22 onclick=%22showTab('sales')%22 role=%22tab%22 aria-selected=%22true%22 aria-controls=%22sales%22%3E%0D%0A                %3Ci class=%22fas fa-plus-circle%22%3E%3C/i%3E%0D%0A                %3Cspan%3ESales Entry%3C/span%3E%0D%0A            %3C/button%3E%0D%0A            %3Cbutton class=%22tab%22 onclick=%22showTab('recent-sales')%22 role=%22tab%22 aria-selected=%22false%22 aria-controls=%22recent-sales%22%3E%0D%0A                %3Ci class=%22fas fa-list%22%3E%3C/i%3E%0D%0A                %3Cspan%3ERecent Sales%3C/span%3E%0D%0A            %3C/button%3E%0D%0A            %3Cbutton class=%22tab%22 onclick=%22showTab('dashboard')%22 role=%22tab%22 aria-selected=%22false%22 aria-controls=%22dashboard%22%3E%0D%0A                %3Ci class=%22fas fa-chart-pie%22%3E%3C/i%3E%0D%0A                %3Cspan%3EDashboard%3C/span%3E%0D%0A            %3C/button%3E%0D%0A            %3Cbutton class=%22tab%22 onclick=%22showTab('customers')%22 role=%22tab%22 aria-selected=%22false%22 aria-controls=%22customers%22%3E%0D%0A                %3Ci class=%22fas fa-users%22%3E%3C/i%3E%0D%0A                %3Cspan%3ECustomers%3C/span%3E%0D%0A            %3C/button%3E%0D%0A            %3Cbutton class=%22tab%22 onclick=%22showTab('analytics')%22 role=%22tab%22 aria-selected=%22false%22 aria-controls=%22analytics%22%3E%0D%0A                %3Ci class=%22fas fa-chart-line%22%3E%3C/i%3E%0D%0A                %3Cspan%3EAnalytics%3C/span%3E%0D%0A            %3C/button%3E%0D%0A        %3C/nav%3E%0D%0A%0D%0A        %3C!-- Sales Entry Tab --%3E%0D%0A        %3Cdiv id=%22sales%22 class=%22tab-content active%22 role=%22tabpanel%22 aria-labelledby=%22sales-tab%22%3E%0D%0A            %3Cdiv class=%22filter-section%22%3E%0D%0A                %3Cdiv class=%22filter-header%22%3E%0D%0A                    %3Ci class=%22fas fa-search%22%3E%3C/i%3E%0D%0A                    %3Ch3%3ESearch Existing Customer%3C/h3%3E%0D%0A                %3C/div%3E%0D%0A                %3Cdiv class=%22search-input%22%3E%0D%0A                    %3Ci class=%22fas fa-search%22%3E%3C/i%3E%0D%0A                    %3Cinput type=%22text%22 id=%22customerSearch%22 placeholder=%22Type customer name, phone, or email to search...%22%0D%0A                           oninput=%22searchCustomers()%22 onkeydown=%22handleSearchKeydown(event)%22 autocomplete=%22off%22%0D%0A                           class=%22form-control%22%3E%0D%0A                    %3Cdiv id=%22customer-search-results%22 style=%22display: none; position: absolute; top: 100%25; left: 0; right: 0;%0D%0A                         background: white; border: 1px solid var(--neutral-300); border-top: none; border-radius: 0 0 var(--radius-md) var(--radius-md);%0D%0A                         max-height: 250px; overflow-y: auto; z-index: 1000; box-shadow: var(--shadow-lg);%22%3E%0D%0A                    %3C/div%3E%0D%0A                %3C/div%3E%0D%0A                %3Cp class=%22text-muted%22 style=%22font-size: 0.875rem; margin-top: var(--space-2);%22%3E%0D%0A                    %3Ci class=%22fas fa-info-circle%22%3E%3C/i%3E%0D%0A                    Search from %3Cspan id=%22total-customers%22 class=%22fw-semibold%22%3E0%3C/span%3E customers - includes database & sales records%0D%0A                %3C/p%3E%0D%0A            %3C/div%3E%0D%0A%0D%0A            %3C!-- Success/Error Messages --%3E%0D%0A            %3Cdiv id=%22success-toast%22 class=%22toast toast-success%22 style=%22display: none;%22%3E%0D%0A                %3Cdiv style=%22display: flex; align-items: center; gap: var(--space-2);%22%3E%0D%0A                    %3Ci class=%22fas fa-check-circle%22%3E%3C/i%3E%0D%0A                    %3Cspan id=%22success-message%22%3E%3C/span%3E%0D%0A                %3C/div%3E%0D%0A            %3C/div%3E%0D%0A            %3Cdiv id=%22error-toast%22 class=%22toast toast-error%22 style=%22display: none;%22%3E%0D%0A                %3Cdiv style=%22display: flex; align-items: center; gap: var(--space-2);%22%3E%0D%0A                    %3Ci class=%22fas fa-exclamation-circle%22%3E%3C/i%3E%0D%0A                    %3Cspan id=%22error-message%22%3E%3C/span%3E%0D%0A                %3C/div%3E%0D%0A            %3C/div%3E%0D%0A%0D%0A            %3Cform id=%22sales-form%22%3E%0D%0A                %3C!-- Customer Information Section --%3E%0D%0A                %3Cdiv class=%22form-section%22%3E%0D%0A                    %3Ch3%3E%3Ci class=%22fas fa-user%22%3E%3C/i%3E Customer Information%3C/h3%3E%0D%0A                    %3Cdiv class=%22form-grid%22%3E%0D%0A                        %3Cdiv class=%22form-group%22%3E%0D%0A                            %3Clabel for=%22customerName%22 class=%22required%22%3ECustomer Name%3C/label%3E%0D%0A                            %3Cinput type=%22text%22 id=%22customerName%22 class=%22form-control%22 required %0D%0A                                   placeholder=%22Enter customer name%22%3E%0D%0A                            %3Cdiv class=%22form-error%22 style=%22display: none;%22%3E%0D%0A                                %3Ci class=%22fas fa-exclamation-triangle%22%3E%3C/i%3E%0D%0A                                %3Cspan%3ECustomer name is required%3C/span%3E%0D%0A                            %3C/div%3E%0D%0A                        %3C/div%3E%0D%0A%0D%0A                        %3Cdiv class=%22form-group%22%3E%0D%0A                            %3Clabel for=%22customerPhone%22%3EPhone Number%3C/label%3E%0D%0A                            %3Cinput type=%22tel%22 id=%22customerPhone%22 class=%22form-control%22 %0D%0A                                   placeholder=%22Enter phone number%22%3E%0D%0A                        %3C/div%3E%0D%0A%0D%0A                        %3Cdiv class=%22form-group%22 style=%22grid-column: 1 / -1;%22%3E%0D%0A                            %3Clabel for=%22customerAddress%22%3EAddress%3C/label%3E%0D%0A                            %3Ctextarea id=%22customerAddress%22 class=%22form-control%22 rows=%222%22 %0D%0A                                      placeholder=%22Enter customer address (optional)%22%3E%3C/textarea%3E%0D%0A                        %3C/div%3E%0D%0A                    %3C/div%3E%0D%0A                %3C/div%3E%0D%0A%0D%0A                %3C!-- Item Information Section --%3E%0D%0A                %3Cdiv class=%22form-section%22%3E%0D%0A                    %3Ch3%3E%3Ci class=%22fas fa-gem%22%3E%3C/i%3E Item Information%3C/h3%3E%0D%0A                    %3Cdiv class=%22form-grid%22%3E%0D%0A                        %3Cdiv class=%22form-group%22%3E%0D%0A                            %3Clabel for=%22itemName%22 class=%22required%22%3EItem Name%3C/label%3E%0D%0A                            %3Cinput type=%22text%22 id=%22itemName%22 class=%22form-control%22 required %0D%0A                                   placeholder=%22e.g., Gold Plated Necklace%22%3E%0D%0A                            %3Cdiv class=%22form-error%22 style=%22display: none;%22%3E%0D%0A                                %3Ci class=%22fas fa-exclamation-triangle%22%3E%3C/i%3E%0D%0A                                %3Cspan%3EItem name is required%3C/span%3E%0D%0A                            %3C/div%3E%0D%0A                        %3C/div%3E%0D%0A%0D%0A                        %3Cdiv class=%22form-group%22%3E%0D%0A                            %3Clabel for=%22category%22 class=%22required%22%3ECategory%3C/label%3E%0D%0A                            %3Cselect id=%22category%22 class=%22form-control%22 required%3E%0D%0A                                %3Coption value=%22%22%3ESelect Category%3C/option%3E%0D%0A                                %3Coption value=%22Necklaces%22%3E%E2%9C%A8 Necklaces%3C/option%3E%0D%0A                                %3Coption value=%22Earrings%22%3E%F0%9F%91%82 Earrings%3C/option%3E%0D%0A                                %3Coption value=%22Bracelets%22%3E%F0%9F%94%97 Bracelets%3C/option%3E%0D%0A                                %3Coption value=%22Rings%22%3E%F0%9F%92%8D Rings%3C/option%3E%0D%0A                                %3Coption value=%22Anklets%22%3E%F0%9F%A6%B6 Anklets%3C/option%3E%0D%0A                                %3Coption value=%22Sets%22%3E%F0%9F%92%8E Sets%3C/option%3E%0D%0A                                %3Coption value=%22Bangles%22%3E%E2%9A%AA Bangles%3C/option%3E%0D%0A                                %3Coption value=%22Chains%22%3E%F0%9F%94%97 Chains%3C/option%3E%0D%0A                                %3Coption value=%22Pendants%22%3E%F0%9F%8F%B7%EF%B8%8F Pendants%3C/option%3E%0D%0A                                %3Coption value=%22Brooches%22%3E%F0%9F%93%8E Brooches%3C/option%3E%0D%0A                            %3C/select%3E%0D%0A                            %3Cdiv class=%22form-error%22 style=%22display: none;%22%3E%0D%0A                                %3Ci class=%22fas fa-exclamation-triangle%22%3E%3C/i%3E%0D%0A                                %3Cspan%3EPlease select a category%3C/span%3E%0D%0A                            %3C/div%3E%0D%0A                        %3C/div%3E%0D%0A%0D%0A                        %3Cdiv class=%22form-group%22%3E%0D%0A                            %3Clabel for=%22saleDate%22 class=%22required%22%3ESale Date%3C/label%3E%0D%0A                            %3Cinput type=%22date%22 id=%22saleDate%22 class=%22form-control%22 required%3E%0D%0A                            %3Cdiv class=%22form-error%22 style=%22display: none;%22%3E%0D%0A                                %3Ci class=%22fas fa-exclamation-triangle%22%3E%3C/i%3E%0D%0A                                %3Cspan%3ESale date is required%3C/span%3E%0D%0A                            %3C/div%3E%0D%0A                        %3C/div%3E%0D%0A                    %3C/div%3E%0D%0A                %3C/div%3E%0D%0A%0D%0A                %3C!-- Pricing Information Section --%3E%0D%0A                %3Cdiv class=%22form-section%22%3E%0D%0A                    %3Ch3%3E%3Ci class=%22fas fa-money-bill-wave%22%3E%3C/i%3E Pricing Information%3C/h3\n %3E%0D%0A%0D\n",
                            "isNew": false,
                            "isApplied": true
                        }
                    ]
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "96573364-3c8d-4047-af74-236fe5a5420c"
            },
            "createdAt": 1751270401002,
            "isInternal": false
        },
        {
            "id": "703814da-3fc1-4041-9305-ee0fb3db876b",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "make it compatable to mobile ui"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "jewelry_sales_final.html",
                    "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n\r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#6366F1\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n\r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n\r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n\r\n    <!-- Modern Typography -->\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@300;400;500;600;700;800&display=swap\" rel=\"stylesheet\">\r\n\r\n    <!-- Icons -->\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\r\n\r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    <style>\r\n        /* ======== DESIGN SYSTEM ======== */\r\n        :root {\r\n            /* Modern Color Palette */\r\n            --primary-600: #6366F1;\r\n            --primary-500: #8B5CF6;\r\n            --primary-400: #A78BFA;\r\n            --primary-300: #C4B5FD;\r\n            --primary-100: #EDE9FE;\r\n            --primary-50: #F5F3FF;\r\n\r\n            --secondary-600: #DB2777;\r\n            --secondary-500: #EC4899;\r\n            --secondary-400: #F472B6;\r\n            --secondary-300: #F9A8D4;\r\n            --secondary-100: #FCE7F3;\r\n\r\n            --accent-600: #059669;\r\n            --accent-500: #10B981;\r\n            --accent-400: #34D399;\r\n            --accent-300: #6EE7B7;\r\n            --accent-100: #D1FAE5;\r\n\r\n            --neutral-900: #111827;\r\n            --neutral-800: #1F2937;\r\n            --neutral-700: #374151;\r\n            --neutral-600: #4B5563;\r\n            --neutral-500: #6B7280;\r\n            --neutral-400: #9CA3AF;\r\n            --neutral-300: #D1D5DB;\r\n            --neutral-200: #E5E7EB;\r\n            --neutral-100: #F3F4F6;\r\n            --neutral-50: #F9FAFB;\r\n\r\n            --error-600: #DC2626;\r\n            --error-500: #EF4444;\r\n            --error-100: #FEE2E2;\r\n\r\n            --warning-600: #D97706;\r\n            --warning-500: #F59E0B;\r\n            --warning-100: #FEF3C7;\r\n\r\n            --success-600: #059669;\r\n            --success-500: #10B981;\r\n            --success-100: #D1FAE5;\r\n\r\n            /* Typography */\r\n            --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n            --font-secondary: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n\r\n            /* Spacing */\r\n            --space-1: 0.25rem;\r\n            --space-2: 0.5rem;\r\n            --space-3: 0.75rem;\r\n            --space-4: 1rem;\r\n            --space-5: 1.25rem;\r\n            --space-6: 1.5rem;\r\n            --space-8: 2rem;\r\n            --space-10: 2.5rem;\r\n            --space-12: 3rem;\r\n            --space-16: 4rem;\r\n            --space-20: 5rem;\r\n\r\n            /* Border Radius */\r\n            --radius-sm: 0.375rem;\r\n            --radius-md: 0.5rem;\r\n            --radius-lg: 0.75rem;\r\n            --radius-xl: 1rem;\r\n            --radius-2xl: 1.5rem;\r\n\r\n            /* Shadows */\r\n            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\r\n            --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\r\n\r\n            /* Transitions */\r\n            --transition-fast: 150ms ease-in-out;\r\n            --transition-normal: 300ms ease-in-out;\r\n            --transition-slow: 500ms ease-in-out;\r\n        }\r\n\r\n        /* ======== RESET & BASE STYLES ======== */\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        *:focus {\r\n            outline: 2px solid var(--primary-600);\r\n            outline-offset: 2px;\r\n        }\r\n\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        body {\r\n            font-family: var(--font-primary);\r\n            font-size: 16px;\r\n            line-height: 1.6;\r\n            color: var(--neutral-800);\r\n            background: linear-gradient(135deg, var(--primary-600) 0%, var(--secondary-600) 100%);\r\n            min-height: 100vh;\r\n            padding: var(--space-4);\r\n            overflow-x: hidden;\r\n        }\r\n\r\n        /* ======== LOADING SPINNER ======== */\r\n        .loading-spinner {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: 50%;\r\n            border-top-color: var(--primary-600);\r\n            animation: spin 1s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            to { transform: rotate(360deg); }\r\n        }\r\n\r\n        /* ======== MAIN CONTAINER ======== */\r\n        .container {\r\n            max-width: 1200px;\r\n            margin: 0 auto;\r\n            background: white;\r\n            border-radius: var(--radius-2xl);\r\n            box-shadow: var(--shadow-2xl);\r\n            overflow: hidden;\r\n            backdrop-filter: blur(10px);\r\n            animation: slideInUp 0.6s ease-out;\r\n        }\r\n\r\n        @keyframes slideInUp {\r\n            from {\r\n                opacity: 0;\r\n                transform: translate3d(0, 30px, 0);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translate3d(0, 0, 0);\r\n            }\r\n        }\r\n\r\n        /* ======== HEADER ======== */\r\n        .header {\r\n            background: linear-gradient(135deg, var(--primary-600) 0%, var(--secondary-600) 100%);\r\n            color: white;\r\n            text-align: center;\r\n            padding: var(--space-8) var(--space-6);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .header::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grain\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"25\" cy=\"25\" r=\"1\" fill=\"white\" opacity=\"0.1\"/><circle cx=\"75\" cy=\"75\" r=\"1\" fill=\"white\" opacity=\"0.05\"/><circle cx=\"50\" cy=\"10\" r=\"0.5\" fill=\"white\" opacity=\"0.1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grain)\"/></svg>');\r\n            pointer-events: none;\r\n        }\r\n\r\n        .header h1 {\r\n            font-family: var(--font-secondary);\r\n            font-size: clamp(1.8rem, 4vw, 2.5rem);\r\n            font-weight: 700;\r\n            margin: 0;\r\n            position: relative;\r\n            z-index: 1;\r\n            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        .header .subtitle {\r\n            font-size: 1rem;\r\n            opacity: 0.9;\r\n            margin-top: var(--space-2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        /* ======== NAVIGATION TABS ======== */\r\n        .tabs {\r\n            display: flex;\r\n            background: var(--neutral-50);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n            position: sticky;\r\n            top: 0;\r\n            z-index: 10;\r\n            backdrop-filter: blur(10px);\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: var(--space-4) var(--space-3);\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: transparent;\r\n            border: none;\r\n            font-family: var(--font-primary);\r\n            font-size: 0.95rem;\r\n            font-weight: 500;\r\n            color: var(--neutral-600);\r\n            transition: var(--transition-normal);\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: var(--space-2);\r\n            min-height: 60px;\r\n        }\r\n\r\n        .tab:hover {\r\n            background: var(--primary-50);\r\n            color: var(--primary-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .tab.active {\r\n            background: var(--primary-600);\r\n            color: white;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .tab.active::after {\r\n            content: '';\r\n            position: absolute;\r\n            bottom: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 3px;\r\n            background: var(--accent-500);\r\n        }\r\n\r\n        .tab i {\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        /* ======== TAB CONTENT ======== */\r\n        .tab-content {\r\n            display: none;\r\n            padding: var(--space-8) var(--space-6);\r\n            min-height: 600px;\r\n            animation: fadeIn 0.4s ease-in-out;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        @keyframes fadeIn {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(10px);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        /* ======== FORM COMPONENTS ======== */\r\n        .form-section {\r\n            background: var(--neutral-50);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            border: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        .form-section h3 {\r\n            font-family: var(--font-secondary);\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin-bottom: var(--space-4);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n        }\r\n\r\n        .form-section h3 i {\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .form-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n            gap: var(--space-4);\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: var(--space-5);\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: var(--space-2);\r\n            font-weight: 500;\r\n            color: var(--neutral-700);\r\n            font-size: 0.9rem;\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.5px;\r\n        }\r\n\r\n        .form-group label.required::after {\r\n            content: '*';\r\n            color: var(--error-500);\r\n            margin-left: var(--space-1);\r\n        }\r\n\r\n        .form-control {\r\n            width: 100%;\r\n            padding: var(--space-3) var(--space-4);\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            font-family: var(--font-primary);\r\n            transition: var(--transition-normal);\r\n            background: white;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .form-control:focus {\r\n            outline: none;\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .form-control:invalid {\r\n            border-color: var(--error-500);\r\n        }\r\n\r\n        .form-control:disabled {\r\n            background: var(--neutral-100);\r\n            color: var(--neutral-500);\r\n            cursor: not-allowed;\r\n        }\r\n\r\n        .form-control::placeholder {\r\n            color: var(--neutral-400);\r\n        }\r\n\r\n        .form-error {\r\n            display: none;\r\n            color: var(--error-600);\r\n            font-size: 0.875rem;\r\n            margin-top: var(--space-1);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .form-error i {\r\n            font-size: 0.8rem;\r\n        }\r\n\r\n        .form-success {\r\n            display: none;\r\n            color: var(--success-600);\r\n            font-size: 0.875rem;\r\n            margin-top: var(--space-1);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .form-success i {\r\n            font-size: 0.8rem;\r\n        }\r\n\r\n        /* ======== BUTTON COMPONENTS ======== */\r\n        .btn {\r\n            display: inline-flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: var(--space-2);\r\n            padding: var(--space-3) var(--space-6);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            font-family: var(--font-primary);\r\n            font-size: 0.95rem;\r\n            font-weight: 500;\r\n            text-decoration: none;\r\n            cursor: pointer;\r\n            transition: var(--transition-normal);\r\n            position: relative;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            user-select: none;\r\n            min-height: 44px;\r\n        }\r\n\r\n        .btn:disabled {\r\n            opacity: 0.6;\r\n            cursor: not-allowed;\r\n            transform: none !important;\r\n        }\r\n\r\n        .btn.loading {\r\n            color: transparent;\r\n        }\r\n\r\n        .btn.loading::after {\r\n            content: '';\r\n            position: absolute;\r\n            width: 16px;\r\n            height: 16px;\r\n            top: 50%;\r\n            left: 50%;\r\n            margin-left: -8px;\r\n            margin-top: -8px;\r\n            border: 2px solid transparent;\r\n            border-top-color: currentColor;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        /* Button Variants */\r\n        .btn-primary {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-primary:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--primary-700), var(--primary-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-primary:active {\r\n            transform: translateY(0);\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: linear-gradient(135deg, var(--secondary-600), var(--secondary-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-secondary:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--secondary-700), var(--secondary-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-accent {\r\n            background: linear-gradient(135deg, var(--accent-600), var(--accent-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-accent:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--accent-700), var(--accent-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-outline {\r\n            background: transparent;\r\n            border: 2px solid var(--primary-600);\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .btn-outline:hover:not(:disabled) {\r\n            background: var(--primary-600);\r\n            color: white;\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .btn-ghost {\r\n            background: transparent;\r\n            color: var(--neutral-600);\r\n            box-shadow: none;\r\n        }\r\n\r\n        .btn-ghost:hover:not(:disabled) {\r\n            background: var(--neutral-100);\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .btn-danger {\r\n            background: linear-gradient(135deg, var(--error-600), var(--error-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-danger:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--error-700), var(--error-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        /* Button Sizes */\r\n        .btn-sm {\r\n            padding: var(--space-2) var(--space-4);\r\n            font-size: 0.875rem;\r\n            min-height: 36px;\r\n        }\r\n\r\n        .btn-lg {\r\n            padding: var(--space-4) var(--space-8);\r\n            font-size: 1.1rem;\r\n            min-height: 52px;\r\n        }\r\n\r\n        .btn-full {\r\n            width: 100%;\r\n        }\r\n\r\n        /* Button Groups */\r\n        .btn-group {\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            margin-top: var(--space-4);\r\n        }\r\n\r\n        .btn-group .btn {\r\n            flex: 1;\r\n        }\r\n\r\n        /* ======== CARD COMPONENTS ======== */\r\n        .card {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-md);\r\n            border: 1px solid var(--neutral-200);\r\n            overflow: hidden;\r\n            transition: var(--transition-normal);\r\n        }\r\n\r\n        .card:hover {\r\n            box-shadow: var(--shadow-lg);\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .card-header {\r\n            padding: var(--space-4) var(--space-5);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n            background: var(--neutral-50);\r\n        }\r\n\r\n        .card-header h3 {\r\n            margin: 0;\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .card-body {\r\n            padding: var(--space-5);\r\n        }\r\n\r\n        .card-footer {\r\n            padding: var(--space-4) var(--space-5);\r\n            background: var(--neutral-50);\r\n            border-top: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        /* Sales Item Cards */\r\n        .sales-item {\r\n            background: white;\r\n            border: 1px solid var(--neutral-200);\r\n            border-left: 4px solid var(--primary-600);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-4);\r\n            position: relative;\r\n            transition: var(--transition-normal);\r\n            box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        .sales-item:hover {\r\n            border-left-color: var(--accent-500);\r\n            box-shadow: var(--shadow-md);\r\n            transform: translateX(4px);\r\n        }\r\n\r\n        .sales-item-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: start;\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: var(--neutral-800);\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            margin: 0;\r\n        }\r\n\r\n        .sales-item-info {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n            gap: var(--space-3);\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .sales-item-info-item {\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        .sales-item-info-label {\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n            color: var(--neutral-500);\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.5px;\r\n            margin-bottom: var(--space-1);\r\n        }\r\n\r\n        .sales-item-info-value {\r\n            font-size: 0.95rem;\r\n            color: var(--neutral-700);\r\n            font-weight: 500;\r\n        }\r\n\r\n        .sales-item-amount {\r\n            font-size: 1.2rem;\r\n            font-weight: 700;\r\n            color: var(--accent-600);\r\n        }\r\n\r\n        /* Dashboard Stats */\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n            gap: var(--space-5);\r\n            margin-bottom: var(--space-8);\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\r\n            color: white;\r\n            padding: var(--space-6);\r\n            border-radius: var(--radius-xl);\r\n            text-align: center;\r\n            position: relative;\r\n            overflow: hidden;\r\n            box-shadow: var(--shadow-lg);\r\n            transition: var(--transition-normal);\r\n        }\r\n\r\n        .stat-card::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: -50%;\r\n            right: -50%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);\r\n        }\r\n\r\n        .stat-card:hover {\r\n            transform: translateY(-4px);\r\n            box-shadow: var(--shadow-xl);\r\n        }\r\n\r\n        .stat-card-icon {\r\n            font-size: 2.5rem;\r\n            margin-bottom: var(--space-3);\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 2.5rem;\r\n            font-weight: 700;\r\n            margin-bottom: var(--space-2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 0.95rem;\r\n            opacity: 0.9;\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        /* Chart Container */\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-md);\r\n            border: 1px solid var(--neutral-200);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            height: 450px;\r\n            position: relative;\r\n        }\r\n\r\n        .chart-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: var(--space-4);\r\n            padding-bottom: var(--space-3);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        .chart-title {\r\n            font-size: 1.2rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        /* Customer Item Cards */\r\n        .customer-item {\r\n            background: white;\r\n            border: 1px solid var(--neutral-200);\r\n            border-left: 4px solid var(--secondary-600);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-4);\r\n            position: relative;\r\n            transition: var(--transition-normal);\r\n            box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        .customer-item:hover {\r\n            border-left-color: var(--accent-500);\r\n            box-shadow: var(--shadow-md);\r\n            transform: translateX(4px);\r\n        }\r\n\r\n        /* Empty State */\r\n        .no-data {\r\n            text-align: center;\r\n            color: var(--neutral-500);\r\n            font-style: italic;\r\n            padding: var(--space-16);\r\n            font-size: 1.1rem;\r\n            background: var(--neutral-50);\r\n            border-radius: var(--radius-lg);\r\n            border: 2px dashed var(--neutral-300);\r\n        }\r\n\r\n        .no-data i {\r\n            font-size: 3rem;\r\n            color: var(--neutral-400);\r\n            margin-bottom: var(--space-4);\r\n            display: block;\r\n        }\r\n\r\n        /* Action Buttons */\r\n        .action-buttons {\r\n            position: absolute;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            z-index: 2;\r\n        }\r\n\r\n        .edit-btn, .delete-btn {\r\n            padding: var(--space-2) var(--space-3);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            cursor: pointer;\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n            transition: var(--transition-fast);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .edit-btn {\r\n            background: var(--primary-600);\r\n            color: white;\r\n        }\r\n\r\n        .edit-btn:hover {\r\n            background: var(--primary-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .delete-btn {\r\n            background: var(--error-600);\r\n            color: white;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: var(--error-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        /* ======== SCROLLABLE CONTAINERS ======== */\r\n        .scrollable-container {\r\n            max-height: 650px;\r\n            overflow-y: auto;\r\n            padding-right: var(--space-2);\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-track {\r\n            background: var(--neutral-200);\r\n            border-radius: var(--radius-lg);\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-thumb {\r\n            background: linear-gradient(135deg, var(--primary-500), var(--primary-600));\r\n            border-radius: var(--radius-lg);\r\n            border: 2px solid var(--neutral-200);\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-thumb:hover {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-700));\r\n        }\r\n\r\n        /* ======== SEARCH AND FILTER ======== */\r\n        .filter-section {\r\n            background: var(--neutral-50);\r\n            border: 1px solid var(--neutral-200);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-6);\r\n        }\r\n\r\n        .filter-header {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n            margin-bottom: var(--space-4);\r\n        }\r\n\r\n        .filter-header h3 {\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin: 0;\r\n        }\r\n\r\n        .search-input {\r\n            position: relative;\r\n        }\r\n\r\n        .search-input input {\r\n            width: 100%;\r\n            padding: var(--space-3) var(--space-4) var(--space-3) var(--space-12);\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            transition: var(--transition-normal);\r\n            background: white;\r\n        }\r\n\r\n        .search-input input:focus {\r\n            outline: none;\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .search-input i {\r\n            position: absolute;\r\n            left: var(--space-4);\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            color: var(--neutral-400);\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        /* ======== NOTIFICATIONS & TOASTS ======== */\r\n        .toast {\r\n            position: fixed;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-lg);\r\n            border: 1px solid var(--neutral-200);\r\n            padding: var(--space-4);\r\n            max-width: 400px;\r\n            z-index: 1000;\r\n            transform: translateX(100%);\r\n            opacity: 0;\r\n            transition: var(--transition-normal);\r\n        }\r\n\r\n        .toast.show {\r\n            transform: translateX(0);\r\n            opacity: 1;\r\n        }\r\n\r\n        .toast-success {\r\n            border-left: 4px solid var(--success-500);\r\n        }\r\n\r\n        .toast-error {\r\n            border-left: 4px solid var(--error-500);\r\n        }\r\n\r\n        .toast-warning {\r\n            border-left: 4px solid var(--warning-500);\r\n        }\r\n\r\n        .toast-info {\r\n            border-left: 4px solid var(--primary-500);\r\n        }\r\n\r\n        /* ======== RESPONSIVE DESIGN ======== */\r\n        @media (max-width: 768px) {\r\n            .container {\r\n                margin: var(--space-2);\r\n                border-radius: var(--radius-lg);\r\n            }\r\n\r\n            .header {\r\n                padding: var(--space-6) var(--space-4);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.8rem;\r\n            }\r\n\r\n            .tabs {\r\n                flex-wrap: wrap;\r\n            }\r\n\r\n            .tab {\r\n                flex: 1;\r\n                min-width: 120px;\r\n                font-size: 0.85rem;\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            .tab i {\r\n                display: none;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-6) var(--space-4);\r\n            }\r\n\r\n            .form-grid {\r\n                grid-template-columns: 1fr;\r\n            }\r\n\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .btn-group {\r\n                flex-direction: column;\r\n            }\r\n\r\n            .sales-item-info {\r\n                grid-template-columns: 1fr;\r\n            }\r\n        }\r\n\r\n        @media (max-width: 480px) {\r\n            body {\r\n                padding: var(--space-2);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.5rem;\r\n            }\r\n\r\n            .tabs {\r\n                overflow-x: auto;\r\n                flex-wrap: nowrap;\r\n            }\r\n\r\n            .tab {\r\n                min-width: 100px;\r\n                font-size: 0.8rem;\r\n            }\r\n\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-4);\r\n            }\r\n        }\r\n\r\n        /* ======== UTILITY CLASSES ======== */\r\n        .sr-only {\r\n            position: absolute;\r\n            width: 1px;\r\n            height: 1px;\r\n            padding: 0;\r\n            margin: -1px;\r\n            overflow: hidden;\r\n            clip: rect(0, 0, 0, 0);\r\n            white-space: nowrap;\r\n            border: 0;\r\n        }\r\n\r\n        .text-center { text-align: center; }\r\n        .text-right { text-align: right; }\r\n        .text-left { text-align: left; }\r\n\r\n        .fw-bold { font-weight: 700; }\r\n        .fw-semibold { font-weight: 600; }\r\n        .fw-medium { font-weight: 500; }\r\n        .fw-normal { font-weight: 400; }\r\n\r\n        .text-primary { color: var(--primary-600); }\r\n        .text-secondary { color: var(--secondary-600); }\r\n        .text-success { color: var(--success-600); }\r\n        .text-error { color: var(--error-600); }\r\n        .text-warning { color: var(--warning-600); }\r\n        .text-muted { color: var(--neutral-500); }\r\n\r\n        .bg-primary { background-color: var(--primary-600); }\r\n        .bg-secondary { background-color: var(--secondary-600); }\r\n        .bg-success { background-color: var(--success-600); }\r\n        .bg-error { background-color: var(--error-600); }\r\n        .bg-warning { background-color: var(--warning-600); }\r\n\r\n        .mb-2 { margin-bottom: var(--space-2); }\r\n        .mb-3 { margin-bottom: var(--space-3); }\r\n        .mb-4 { margin-bottom: var(--space-4); }\r\n        .mb-6 { margin-bottom: var(--space-6); }\r\n\r\n        .mt-2 { margin-top: var(--space-2); }\r\n        .mt-3 { margin-top: var(--space-3); }\r\n        .mt-4 { margin-top: var(--space-4); }\r\n        .mt-6 { margin-top: var(--space-6); }\r\n\r\n        /* ======== POPUP ALERT ANIMATIONS ======== */\r\n        @keyframes fadeIn {\r\n            from { opacity: 0; }\r\n            to { opacity: 1; }\r\n        }\r\n\r\n        @keyframes fadeOut {\r\n            from { opacity: 1; }\r\n            to { opacity: 0; }\r\n        }\r\n\r\n        @keyframes slideInUp {\r\n            from {\r\n                opacity: 0;\r\n                transform: translate(-50%, -40%) scale(0.9);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translate(-50%, -50%) scale(1);\r\n            }\r\n        }\r\n\r\n        .alert-modal {\r\n            animation: fadeIn 0.3s ease-out;\r\n        }\r\n\r\n        .alert-box {\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            animation: slideInUp 0.3s ease-out;\r\n        }\r\n\r\n        /* ======== ENHANCED FORM FIELD VALIDATION ======== */\r\n        .form-control.error {\r\n            border-color: var(--error-500) !important;\r\n            box-shadow: 0 0 0 3px var(--error-100) !important;\r\n        }\r\n\r\n        .form-control.success {\r\n            border-color: var(--success-500) !important;\r\n            box-shadow: 0 0 0 3px var(--success-100) !important;\r\n        }\r\n\r\n        .form-control:focus.error {\r\n            border-color: var(--error-500) !important;\r\n            box-shadow: 0 0 0 3px var(--error-100) !important;\r\n        }\r\n\r\n        .form-control:focus.success {\r\n            border-color: var(--success-500) !important;\r\n            box-shadow: 0 0 0 3px var(--success-100) !important;\r\n        }\r\n\r\n        .edit-form {\r\n            background: #fff;\r\n            border: 2px solid #4ecdc4;\r\n            border-radius: 8px;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            position: relative;\r\n        }\r\n\r\n        .edit-form h4 {\r\n            color: #4ecdc4;\r\n            margin-bottom: 15px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .edit-form-row {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            gap: 10px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group label {\r\n            display: block;\r\n            margin-bottom: 3px;\r\n            font-weight: 600;\r\n            color: #333;\r\n            font-size: 12px;\r\n        }\r\n\r\n        .edit-form-group input,\r\n        .edit-form-group select,\r\n        .edit-form-group textarea {\r\n            width: 100%;\r\n            padding: 8px;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 4px;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .edit-form-buttons {\r\n            display: flex;\r\n            gap: 10px;\r\n            margin-top: 15px;\r\n        }\r\n\r\n        .edit-form-buttons button {\r\n            flex: 1;\r\n            padding: 10px;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .save-edit-btn {\r\n            background: #28a745;\r\n            color: white;\r\n        }\r\n\r\n        .save-edit-btn:hover {\r\n            background: #218838;\r\n        }\r\n\r\n        .cancel-edit-btn {\r\n            background: #6c757d;\r\n            color: white;\r\n        }\r\n\r\n        .cancel-edit-btn:hover {\r\n            background: #5a6268;\r\n        }\r\n\r\n        /* Customer search styles */\r\n        .customer-search-result {\r\n            padding: 12px;\r\n            cursor: pointer;\r\n            border-bottom: 1px solid #eee;\r\n            border-left: 3px solid transparent;\r\n            transition: all 0.2s ease;\r\n        }\r\n\r\n        .customer-search-result:hover {\r\n            background-color: #f8f9fa;\r\n            border-left-color: #4ecdc4;\r\n            transform: translateX(2px);\r\n        }\r\n\r\n        .customer-search-result:last-child {\r\n            border-bottom: none;\r\n        }\r\n\r\n        .customer-name {\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin-bottom: 4px;\r\n            font-size: 15px;\r\n        }\r\n\r\n        .customer-details {\r\n            font-size: 12px;\r\n            color: #666;\r\n            margin-bottom: 2px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n        }\r\n\r\n        .customer-stats {\r\n            font-size: 11px;\r\n            color: #4ecdc4;\r\n            margin-top: 8px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .customer-source-badge {\r\n            font-size: 10px;\r\n            color: #999;\r\n            padding: 2px 6px;\r\n            background: #f0f0f0;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .customer-last-purchase {\r\n            font-size: 10px;\r\n            color: #999;\r\n            font-style: italic;\r\n        }\r\n\r\n        /* Enhanced search results container */\r\n        #customer-search-results {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            border-radius: 8px;\r\n            border: 1px solid #ddd;\r\n            background: white;\r\n            max-height: 300px;\r\n            overflow-y: auto;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb:hover {\r\n            background: #45b7b8;\r\n        }\r\n\r\n        /* Section headers */\r\n        .section-header {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-bottom: 15px;\r\n            padding-bottom: 8px;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .section-icon {\r\n            margin-right: 8px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: 15px;\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 24px;\r\n            }\r\n\r\n            .header {\r\n                font-size: 1.4em;\r\n                padding: 15px;\r\n            }\r\n\r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                gap: 5px;\r\n            }\r\n\r\n            .tab {\r\n                flex: 1;\r\n                min-width: 100px;\r\n                font-size: 12px;\r\n                padding: 10px 5px;\r\n            }\r\n\r\n            .form-group {\r\n                margin-bottom: 15px;\r\n            }\r\n\r\n            .form-group input,\r\n            .form-group select,\r\n            .form-group textarea {\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n\r\n            .customer-item,\r\n            .sale-item {\r\n                padding: 15px;\r\n                margin-bottom: 15px;\r\n            }\r\n\r\n            .btn {\r\n                padding: 12px 16px;\r\n                font-size: 14px;\r\n                margin: 5px 2px;\r\n            }\r\n\r\n            /* Import section responsive */\r\n            .import-section {\r\n                flex-direction: column !important;\r\n                gap: 10px !important;\r\n            }\r\n\r\n            .import-section button {\r\n                width: 100% !important;\r\n                margin-bottom: 5px;\r\n            }\r\n        }\r\n\r\n        @media (max-width: 480px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n            }\r\n\r\n            .header {\r\n                font-size: 1.2em;\r\n                padding: 10px;\r\n                text-align: center;\r\n            }\r\n\r\n            .tabs {\r\n                justify-content: center;\r\n            }\r\n\r\n            .tab {\r\n                font-size: 11px;\r\n                padding: 8px 4px;\r\n            }\r\n\r\n            /* Customer database responsive design */\r\n            .customer-info-grid {\r\n                grid-template-columns: 1fr !important;\r\n                gap: 8px !important;\r\n            }\r\n\r\n            .customer-purchase-stats {\r\n                grid-template-columns: repeat(2, 1fr) !important;\r\n                gap: 8px !important;\r\n            }\r\n\r\n            .customer-card {\r\n                padding: 12px !important;\r\n                margin-bottom: 10px !important;\r\n            }\r\n\r\n            .enhanced-customers-container {\r\n                max-height: 400px !important;\r\n            }\r\n        }\r\n\r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n\r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n\r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n\r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <header class=\"header\">\r\n            <h1>💎 Theia Jewelz</h1>\r\n            <p class=\"subtitle\">Modern Sales Management System</p>\r\n        </header>\r\n\r\n        <nav class=\"tabs\" role=\"tablist\" aria-label=\"Main navigation\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\" role=\"tab\" aria-selected=\"true\" aria-controls=\"sales\">\r\n                <i class=\"fas fa-plus-circle\"></i>\r\n                <span>Sales Entry</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('recent-sales')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"recent-sales\">\r\n                <i class=\"fas fa-list\"></i>\r\n                <span>Recent Sales</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"dashboard\">\r\n                <i class=\"fas fa-chart-pie\"></i>\r\n                <span>Dashboard</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"customers\">\r\n                <i class=\"fas fa-users\"></i>\r\n                <span>Customers</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"analytics\">\r\n                <i class=\"fas fa-chart-line\"></i>\r\n                <span>Analytics</span>\r\n            </button>\r\n        </nav>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\" role=\"tabpanel\" aria-labelledby=\"sales-tab\">\r\n            <div class=\"filter-section\">\r\n                <div class=\"filter-header\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <h3>Search Existing Customer</h3>\r\n                </div>\r\n                <div class=\"search-input\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <input type=\"text\" id=\"customerSearch\" placeholder=\"Type customer name, phone, or email to search...\"\r\n                           oninput=\"searchCustomers()\" onkeydown=\"handleSearchKeydown(event)\" autocomplete=\"off\"\r\n                           class=\"form-control\">\r\n                    <div id=\"customer-search-results\" style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                         background: white; border: 1px solid var(--neutral-300); border-top: none; border-radius: 0 0 var(--radius-md) var(--radius-md);\r\n                         max-height: 250px; overflow-y: auto; z-index: 1000; box-shadow: var(--shadow-lg);\">\r\n                    </div>\r\n                </div>\r\n                <p class=\"text-muted\" style=\"font-size: 0.875rem; margin-top: var(--space-2);\">\r\n                    <i class=\"fas fa-info-circle\"></i>\r\n                    Search from <span id=\"total-customers\" class=\"fw-semibold\">0</span> customers - includes database & sales records\r\n                </p>\r\n            </div>\r\n\r\n            <!-- Success/Error Messages -->\r\n            <div id=\"success-toast\" class=\"toast toast-success\" style=\"display: none;\">\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"fas fa-check-circle\"></i>\r\n                    <span id=\"success-message\"></span>\r\n                </div>\r\n            </div>\r\n            <div id=\"error-toast\" class=\"toast toast-error\" style=\"display: none;\">\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"fas fa-exclamation-circle\"></i>\r\n                    <span id=\"error-message\"></span>\r\n                </div>\r\n            </div>\r\n\r\n            <form id=\"sales-form\">\r\n                <!-- Customer Information Section -->\r\n                <div class=\"form-section\">\r\n                    <h3><i class=\"fas fa-user\"></i> Customer Information</h3>\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"customerName\" class=\"required\">Customer Name</label>\r\n                            <input type=\"text\" id=\"customerName\" class=\"form-control\" required\r\n                                   placeholder=\"Enter customer name\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Customer name is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"customerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"customerPhone\" class=\"form-control\"\r\n                                   placeholder=\"Enter phone number\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"customerAddress\">Address</label>\r\n                            <textarea id=\"customerAddress\" class=\"form-control\" rows=\"2\"\r\n                                      placeholder=\"Enter customer address (optional)\"></textarea>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Item Information Section -->\r\n                <div class=\"form-section\">\r\n                    <h3><i class=\"fas fa-gem\"></i> Item Information</h3>\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"itemName\" class=\"required\">Item Name</label>\r\n                            <input type=\"text\" id=\"itemName\" class=\"form-control\" required\r\n                                   placeholder=\"e.g., Gold Plated Necklace\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Item name is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"category\" class=\"required\">Category</label>\r\n                            <select id=\"category\" class=\"form-control\" required>\r\n                                <option value=\"\">Select Category</option>\r\n                                <option value=\"Necklaces\">✨ Necklaces</option>\r\n                                <option value=\"Earrings\">👂 Earrings</option>\r\n                                <option value=\"Bracelets\">🔗 Bracelets</option>\r\n                                <option value=\"Rings\">💍 Rings</option>\r\n                                <option value=\"Anklets\">🦶 Anklets</option>\r\n                                <option value=\"Sets\">💎 Sets</option>\r\n                                <option value=\"Bangles\">⚪ Bangles</option>\r\n                                <option value=\"Chains\">🔗 Chains</option>\r\n                                <option value=\"Pendants\">🏷️ Pendants</option>\r\n                                <option value=\"Brooches\">📎 Brooches</option>\r\n                            </select>\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Please select a category</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"saleDate\" class=\"required\">Sale Date</label>\r\n                            <input type=\"date\" id=\"saleDate\" class=\"form-control\" required>\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Sale date is required</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Pricing Information Section -->\r\n                <div class=\"form-section\">\r\n                    <h3><i class=\"fas fa-money-bill-wave\"></i> Pricing Information</h3>\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"costPrice\" class=\"required\">Cost Price (₹)</label>\r\n                            <input type=\"number\" id=\"costPrice\" class=\"form-control\" required\r\n                                   placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Please enter a valid cost price</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"sellingPrice\" class=\"required\">Selling Price (₹)</label>\r\n                            <input type=\"number\" id=\"sellingPrice\" class=\"form-control\" required\r\n                                   placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Please enter a valid selling price</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"profit\">Profit (₹)</label>\r\n                            <input type=\"number\" id=\"profit\" class=\"form-control\" readonly\r\n                                   placeholder=\"Auto-calculated\" style=\"background-color: var(--neutral-100); cursor: not-allowed;\">\r\n                            <div class=\"form-success\" style=\"display: none;\">\r\n                                <i class=\"fas fa-check-circle\"></i>\r\n                                <span id=\"profit-status\">Profit calculated automatically</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"btn-group\">\r\n                    <button type=\"button\" class=\"btn btn-primary btn-lg btn-full\" onclick=\"addSaleRecord()\">\r\n                        <i class=\"fas fa-save\"></i>\r\n                        <span>Add Sale Record</span>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n        <!-- Recent Sales Tab -->\r\n        <div id=\"recent-sales\" class=\"tab-content\">\r\n            <h2>📋 Recent Sales & Import</h2>\r\n\r\n            <!-- Sales Import Section -->\r\n            <div style=\"margin-bottom: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px; border: 2px solid #e9ecef;\">\r\n                <h3 style=\"margin: 0 0 15px 0; color: #4ecdc4;\">📤 Bulk Import Sales</h3>\r\n                <p style=\"margin: 0 0 15px 0; color: #666; font-size: 14px;\">Import multiple sales records from CSV or Excel file</p>\r\n\r\n                <div style=\"display: flex; gap: 10px; align-items: center; flex-wrap: wrap;\" class=\"import-section\">\r\n                    <input type=\"file\" id=\"sales-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importSales(event)\">\r\n                    <button class=\"btn btn-primary\" onclick=\"document.getElementById('sales-import-file').click()\" style=\"width: auto; padding: 10px 16px; font-size: 14px;\" title=\"Import sales from CSV or Excel file\">\r\n                        📤 Import Sales Data\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"downloadSalesTemplate()\" style=\"width: auto; padding: 10px 16px; font-size: 14px; background-color: #6c757d; color: white;\" title=\"Download sample CSV template\">\r\n                        📋 Download Template\r\n                    </button>\r\n                    <small style=\"color: #666; font-size: 12px;\">Supports CSV and Excel files with required columns: Item Name, Category, Cost Price, Selling Price, Sale Date, Customer Name</small>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Recent Sales Section -->\r\n            <div style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">📋 Sales Records (<span id=\"sales-count\">0</span>)</h3>\r\n                            <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; font-size: 18px; cursor: pointer; padding: 8px 12px; border-radius: 6px; transition: all 0.3s ease;\" title=\"Expand/Collapse Sales Summary\">\r\n                                ▼\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                            <button class=\"btn\" onclick=\"downloadExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                📥 Export All\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"sales-content-container\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                        <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; display: none; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                            <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Sales Summary</h4>\r\n                            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Sales</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Cost</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-selling\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Profit</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Search and Filter Section -->\r\n                        <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                            <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                <div>\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Sales</label>\r\n                                    <input type=\"text\" id=\"sales-search\" placeholder=\"Search by item name, customer name, or category...\"\r\n                                           oninput=\"filterSales()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                </div>\r\n                                <div style=\"display: flex; gap: 10px;\">\r\n                                    <button onclick=\"clearSalesFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        🔄 Clear\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Sales Records Container with Enhanced Scrolling -->\r\n                        <div class=\"enhanced-sales-container\" style=\"max-height: 600px; overflow-y: auto; border: 1px solid #e9ecef; border-radius: 8px; background: #fafafa;\">\r\n                            <div id=\"sales-records\" style=\"padding: 10px;\"></div>\r\n                            <div id=\"load-more-container\" style=\"text-align: center; padding: 20px; display: none;\">\r\n                                <button id=\"load-more-btn\" class=\"btn btn-primary\" onclick=\"loadMoreSales()\" style=\"width: auto; padding: 12px 24px; font-size: 14px; border-radius: 20px;\">\r\n                                    📖 Load More Sales\r\n                                </button>\r\n                            </div>\r\n                            <div id=\"no-sales-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                <h3 style=\"color: #999;\">📭 No Sales Records Found</h3>\r\n                                <p>Add your first sale in the Sales Entry tab or import existing data!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n\r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n\r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n\r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n\r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n\r\n            <!-- Enhanced Customer Database Section -->\r\n            <div style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <!-- Header Section -->\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">👥 Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                            <button id=\"customer-stats-toggle\" onclick=\"toggleCustomerStats()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; font-size: 16px; cursor: pointer; padding: 8px 12px; border-radius: 6px; transition: all 0.3s ease;\" title=\"Show/Hide Customer Statistics\">\r\n                                📊 Stats\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                            <input type=\"file\" id=\"customer-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importCustomers(event)\">\r\n                            <button class=\"btn\" onclick=\"document.getElementById('customer-import-file').click()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\" title=\"Import customers from CSV or Excel file\">\r\n                                📤 Import\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomerTemplate()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📋 Template\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomersExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📥 Export\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customer Statistics Panel -->\r\n                <div id=\"customer-stats-panel\" style=\"display: none; background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Customer Statistics</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;\">\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Customers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-active-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Active Buyers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-avg-orders\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Orders</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-clv\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total CLV</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Search and Filter Section -->\r\n                <div style=\"padding: 20px; background: #f8f9fa; border-bottom: 1px solid #e9ecef;\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr auto auto; gap: 15px; align-items: end;\">\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Customers</label>\r\n                            <input type=\"text\" id=\"customer-database-search\" placeholder=\"Search by name, phone, email, or address...\"\r\n                                   oninput=\"filterCustomerDatabase()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                        </div>\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">📋 Sort By</label>\r\n                            <select id=\"customer-sort-select\" onchange=\"sortCustomerDatabase()\" style=\"padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                <option value=\"name-asc\">Name (A-Z)</option>\r\n                                <option value=\"name-desc\">Name (Z-A)</option>\r\n                                <option value=\"purchases-desc\">Most Purchases</option>\r\n                                <option value=\"purchases-asc\">Least Purchases</option>\r\n                                <option value=\"spending-desc\">Highest Spending</option>\r\n                                <option value=\"spending-asc\">Lowest Spending</option>\r\n                                <option value=\"recent-desc\">Recently Added</option>\r\n                                <option value=\"recent-asc\">Oldest Added</option>\r\n                            </select>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"clearCustomerDatabaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                🔄 Clear\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customers List Container with Enhanced UI -->\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"customer-view-mode\" style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <div style=\"font-size: 14px; color: #666;\">\r\n                            Showing <span id=\"customers-showing\">0</span> of <span id=\"customers-total\">0</span> customers\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; align-items: center;\">\r\n                            <label style=\"font-size: 14px; color: #666;\">View:</label>\r\n                            <select id=\"customers-per-page\" onchange=\"changeCustomersPerPage()\" style=\"padding: 5px 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px;\">\r\n                                <option value=\"10\">10 per page</option>\r\n                                <option value=\"25\" selected>25 per page</option>\r\n                                <option value=\"50\">50 per page</option>\r\n                                <option value=\"100\">100 per page</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Enhanced Customer Cards Container -->\r\n                    <div class=\"enhanced-customers-container\" style=\"max-height: 500px; overflow-y: auto; background: #fafafa; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;\">\r\n                        <div id=\"customers-list-container\"></div>\r\n\r\n                        <!-- Pagination Controls -->\r\n                        <div id=\"customer-pagination\" style=\"display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 20px; padding: 15px;\">\r\n                            <button id=\"prev-customers-btn\" onclick=\"previousCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                ◀ Previous\r\n                            </button>\r\n                            <span id=\"customer-page-info\" style=\"font-size: 14px; color: #666; margin: 0 15px;\">Page 1 of 1</span>\r\n                            <button id=\"next-customers-btn\" onclick=\"nextCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                Next ▶\r\n                            </button>\r\n                        </div>\r\n\r\n                        <!-- No Customers Message -->\r\n                        <div id=\"no-customers-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                            <h3 style=\"color: #999;\">👥 No Customers Found</h3>\r\n                            <p>Add your first customer above or import existing customer data!</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n\r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n        let displayedSalesCount = 20; // Initial number of sales to show\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n\r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n\r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n\r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Initialize Sales Section\r\n        function initializeSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            // Set expanded state by default\r\n            container.style.maxHeight = '1000px';\r\n            container.style.marginTop = '10px';\r\n            container.style.opacity = '1';\r\n            toggleBtn.innerHTML = '▼';\r\n            toggleBtn.title = 'Collapse Recent Sales';\r\n            toggleBtn.style.transform = 'rotate(0deg)';\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (container.style.maxHeight && container.style.maxHeight !== '0px') {\r\n                // Collapse\r\n                container.style.maxHeight = '0px';\r\n                container.style.marginTop = '0px';\r\n                container.style.opacity = '0';\r\n                toggleBtn.innerHTML = '▶';\r\n                toggleBtn.title = 'Expand Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(-90deg)';\r\n            } else {\r\n                // Expand\r\n                container.style.maxHeight = '1000px';\r\n                container.style.marginTop = '10px';\r\n                container.style.opacity = '1';\r\n                toggleBtn.innerHTML = '▼';\r\n                toggleBtn.title = 'Collapse Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(0deg)';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n\r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n\r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n\r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n\r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n\r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n\r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n\r\n            document.body.appendChild(updateDiv);\r\n\r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n\r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Initialize sales section as expanded\r\n                initializeSalesSection();\r\n\r\n                // Setup field validation\r\n                setupFieldValidation();\r\n\r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n\r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n\r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n\r\n            const cleanedData = [];\r\n\r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n\r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n\r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n\r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n\r\n                    cleanedData.push(cleanedSale);\r\n\r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n\r\n            return cleanedData;\r\n        }\r\n\r\n\r\n\r\n        // Update customer count in search hint to include all unique customers\r\n        function updateCustomerCount() {\r\n            try {\r\n                const countElement = document.getElementById('total-customers');\r\n                if (countElement) {\r\n                    const allUniqueCustomers = getUniqueCustomers();\r\n                    countElement.textContent = allUniqueCustomers.length;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating customer count:', error);\r\n            }\r\n        }\r\n\r\n        // Import customers from CSV/Excel file\r\n        function importCustomers(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVCustomers(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelCustomers(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import customers from CSV\r\n        function importCSVCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\r\n                    const requiredHeaders = ['name', 'phone'];\r\n                    const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\r\n\r\n                    if (missingHeaders.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingHeaders.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Find column indices\r\n                    const nameIndex = headers.indexOf('name');\r\n                    const phoneIndex = headers.indexOf('phone');\r\n                    const addressIndex = headers.indexOf('address');\r\n                    const emailIndex = headers.indexOf('email');\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        const customerName = values[nameIndex];\r\n                        const customerPhone = values[phoneIndex] || '';\r\n                        const customerAddress = addressIndex >= 0 ? values[addressIndex] || '' : '';\r\n                        const customerEmail = emailIndex >= 0 ? values[emailIndex] || '' : '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import customers from Excel\r\n        function importExcelCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    jsonData.forEach(row => {\r\n                        const customerName = row.Name || row.name || row.customer_name || row['Customer Name'];\r\n                        const customerPhone = row.Phone || row.phone || row.mobile || row.Mobile || '';\r\n                        const customerAddress = row.Address || row.address || '';\r\n                        const customerEmail = row.Email || row.email || '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download customer import template\r\n        function downloadCustomerTemplate() {\r\n            const csvContent = [\r\n                'name,phone,address,email',\r\n                'John Doe,+91-9876543210,123 Main Street Mumbai,john@example.com',\r\n                'Jane Smith,+91-8765432109,456 Oak Avenue Delhi,jane@example.com',\r\n                'Mike Johnson,+91-7654321098,789 Pine Road Bangalore,mike@example.com'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'customer_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Customer import template downloaded! Use this format for importing customers.');\r\n        }\r\n\r\n        // Enhanced Customer Database Functionality\r\n        let currentCustomerPage = 1;\r\n        let customersPerPage = 25;\r\n        let filteredCustomers = [];\r\n        let isCustomerSearchActive = false;\r\n        let currentCustomerSort = 'name-asc';\r\n\r\n        function toggleCustomerStats() {\r\n            const panel = document.getElementById('customer-stats-panel');\r\n            const button = document.getElementById('customer-stats-toggle');\r\n\r\n            if (panel.style.display === 'none') {\r\n                panel.style.display = 'block';\r\n                button.textContent = '📊 Hide Stats';\r\n                updateCustomerStatistics();\r\n            } else {\r\n                panel.style.display = 'none';\r\n                button.textContent = '📊 Stats';\r\n            }\r\n        }\r\n\r\n        function updateCustomerStatistics() {\r\n            const totalCustomers = customersData.length;\r\n            const activeCustomers = customersData.filter(customer => {\r\n                const purchases = salesData.filter(sale => sale.customerName === customer.name);\r\n                return purchases.length > 0;\r\n            }).length;\r\n\r\n            const totalOrders = salesData.length;\r\n            const avgOrdersPerCustomer = activeCustomers > 0 ? (totalOrders / activeCustomers).toFixed(1) : 0;\r\n\r\n            const totalCLV = customersData.reduce((sum, customer) => {\r\n                const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                const customerSpending = customerSales.reduce((total, sale) => total + sale.sellingPrice, 0);\r\n                return sum + customerSpending;\r\n            }, 0);\r\n\r\n            document.getElementById('stat-total-customers').textContent = totalCustomers;\r\n            document.getElementById('stat-active-customers').textContent = activeCustomers;\r\n            document.getElementById('stat-avg-orders').textContent = avgOrdersPerCustomer;\r\n            document.getElementById('stat-total-clv').textContent = `₹${totalCLV.toFixed(2)}`;\r\n        }\r\n\r\n        function filterCustomerDatabase() {\r\n            const searchTerm = document.getElementById('customer-database-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                isCustomerSearchActive = false;\r\n                filteredCustomers = [];\r\n                currentCustomerPage = 1;\r\n                displayCustomerDatabase();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return;\r\n            }\r\n\r\n            filteredCustomers = customersData.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                (customer.phone && customer.phone.toLowerCase().includes(searchTerm)) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm)) ||\r\n                (customer.address && customer.address.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isCustomerSearchActive = true;\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function sortCustomerDatabase() {\r\n            currentCustomerSort = document.getElementById('customer-sort-select').value;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function clearCustomerDatabaseFilter() {\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n            currentCustomerSort = 'name-asc';\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function changeCustomersPerPage() {\r\n            customersPerPage = parseInt(document.getElementById('customers-per-page').value);\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function displayCustomerDatabase() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const sortedData = sortCustomersData(dataToDisplay);\r\n\r\n            const totalCustomers = sortedData.length;\r\n            const startIndex = (currentCustomerPage - 1) * customersPerPage;\r\n            const endIndex = Math.min(startIndex + customersPerPage, totalCustomers);\r\n            const currentPageData = sortedData.slice(startIndex, endIndex);\r\n\r\n            const container = document.getElementById('customers-list-container');\r\n            const noCustomersMessage = document.getElementById('no-customers-message');\r\n\r\n            if (totalCustomers === 0) {\r\n                container.innerHTML = '';\r\n                noCustomersMessage.style.display = 'block';\r\n                updateCustomerPagination(0, 0, 0);\r\n                return;\r\n            }\r\n\r\n            noCustomersMessage.style.display = 'none';\r\n\r\n            container.innerHTML = currentPageData.map(customer => createCustomerCardHTML(customer)).join('');\r\n\r\n            // Update pagination\r\n            updateCustomerPagination(currentCustomerPage, Math.ceil(totalCustomers / customersPerPage), totalCustomers);\r\n\r\n            // Update showing info\r\n            document.getElementById('customers-showing').textContent = `${startIndex + 1}-${endIndex}`;\r\n            document.getElementById('customers-total').textContent = totalCustomers;\r\n        }\r\n\r\n        function sortCustomersData(data) {\r\n            const sortedData = [...data];\r\n\r\n            switch (currentCustomerSort) {\r\n                case 'name-asc':\r\n                    return sortedData.sort((a, b) => a.name.localeCompare(b.name));\r\n                case 'name-desc':\r\n                    return sortedData.sort((a, b) => b.name.localeCompare(a.name));\r\n                case 'purchases-desc':\r\n                case 'purchases-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aPurchases = salesData.filter(sale => sale.customerName === a.name).length;\r\n                        const bPurchases = salesData.filter(sale => sale.customerName === b.name).length;\r\n                        return currentCustomerSort === 'purchases-desc' ? bPurchases - aPurchases : aPurchases - bPurchases;\r\n                    });\r\n                case 'spending-desc':\r\n                case 'spending-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aSpending = salesData.filter(sale => sale.customerName === a.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        const bSpending = salesData.filter(sale => sale.customerName === b.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        return currentCustomerSort === 'spending-desc' ? bSpending - aSpending : aSpending - bSpending;\r\n                    });\r\n                case 'recent-desc':\r\n                    return sortedData.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n                case 'recent-asc':\r\n                    return sortedData.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\r\n                default:\r\n                    return sortedData;\r\n            }\r\n        }\r\n\r\n        function createCustomerCardHTML(customer) {\r\n            const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n            const totalPurchases = customerSales.length;\r\n            const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const avgOrderValue = totalPurchases > 0 ? (totalSpent / totalPurchases) : 0;\r\n            const lastPurchase = customerSales.length > 0 ?\r\n                Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime())) : null;\r\n\r\n            const isActive = totalPurchases > 0;\r\n            const statusClass = isActive ? 'active' : 'inactive';\r\n            const statusText = isActive ? 'Active' : 'Inactive';\r\n\r\n            return `\r\n                <div class=\"customer-card\">\r\n                    <div class=\"customer-card-header\">\r\n                        <h4 class=\"customer-name\">👤 ${customer.name}</h4>\r\n                        <span class=\"customer-status ${statusClass}\">${statusText}</span>\r\n                    </div>\r\n\r\n                    <div class=\"customer-info-grid\">\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📞 Phone:</span>\r\n                            ${customer.phone || 'Not provided'}\r\n                        </div>\r\n                        ${customer.email ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📧 Email:</span>\r\n                                ${customer.email}\r\n                            </div>\r\n                        ` : ''}\r\n                        ${customer.address ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📍 Address:</span>\r\n                                ${customer.address}\r\n                            </div>\r\n                        ` : ''}\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📅 Added:</span>\r\n                            ${new Date(customer.createdAt).toLocaleDateString()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"customer-purchase-stats\">\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">${totalPurchases}</div>\r\n                            <div class=\"customer-stat-label\">Total Orders</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${totalSpent.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Total Spent</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${avgOrderValue.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Avg Order</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">\r\n                                ${lastPurchase ? new Date(lastPurchase).toLocaleDateString() : 'Never'}\r\n                            </div>\r\n                            <div class=\"customer-stat-label\">Last Purchase</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        function updateCustomerPagination(currentPage, totalPages, totalCustomers) {\r\n            const prevBtn = document.getElementById('prev-customers-btn');\r\n            const nextBtn = document.getElementById('next-customers-btn');\r\n            const pageInfo = document.getElementById('customer-page-info');\r\n\r\n            prevBtn.disabled = currentPage <= 1;\r\n            nextBtn.disabled = currentPage >= totalPages;\r\n\r\n            pageInfo.textContent = totalPages > 0 ? `Page ${currentPage} of ${totalPages}` : 'No pages';\r\n\r\n            // Update button styles based on disabled state\r\n            prevBtn.style.opacity = prevBtn.disabled ? '0.5' : '1';\r\n            nextBtn.style.opacity = nextBtn.disabled ? '0.5' : '1';\r\n            prevBtn.style.cursor = prevBtn.disabled ? 'not-allowed' : 'pointer';\r\n            nextBtn.style.cursor = nextBtn.disabled ? 'not-allowed' : 'pointer';\r\n        }\r\n\r\n        function previousCustomersPage() {\r\n            if (currentCustomerPage > 1) {\r\n                currentCustomerPage--;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        function nextCustomersPage() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const totalPages = Math.ceil(dataToDisplay.length / customersPerPage);\r\n\r\n            if (currentCustomerPage < totalPages) {\r\n                currentCustomerPage++;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        // Import sales from CSV/Excel file\r\n        function importSales(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVSales(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelSales(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import sales from CSV\r\n        function importCSVSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase().replace(/\"/g, ''));\r\n                    const requiredHeaders = ['item_name', 'category', 'cost_price', 'selling_price', 'sale_date', 'customer_name'];\r\n\r\n                    // Check for alternative header names\r\n                    const headerMapping = {\r\n                        'item_name': ['item_name', 'item name', 'itemname', 'product_name', 'product name', 'name'],\r\n                        'category': ['category', 'item_category', 'product_category', 'type'],\r\n                        'cost_price': ['cost_price', 'cost price', 'costprice', 'cost', 'purchase_price', 'cp'],\r\n                        'selling_price': ['selling_price', 'selling price', 'sellingprice', 'price', 'sale_price', 'sp'],\r\n                        'sale_date': ['sale_date', 'sale date', 'saledate', 'date', 'purchase_date'],\r\n                        'customer_name': ['customer_name', 'customer name', 'customername', 'customer', 'buyer']\r\n                    };\r\n\r\n                    // Find column indices\r\n                    const columnIndices = {};\r\n                    let missingColumns = [];\r\n\r\n                    for (const [key, alternatives] of Object.entries(headerMapping)) {\r\n                        const foundIndex = headers.findIndex(h => alternatives.includes(h));\r\n                        if (foundIndex >= 0) {\r\n                            columnIndices[key] = foundIndex;\r\n                        } else {\r\n                            missingColumns.push(key);\r\n                        }\r\n                    }\r\n\r\n                    if (missingColumns.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingColumns.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Optional columns\r\n                    const phoneIndex = headers.findIndex(h => ['customer_phone', 'customer phone', 'phone', 'mobile'].includes(h));\r\n                    const addressIndex = headers.findIndex(h => ['customer_address', 'customer address', 'address'].includes(h));\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        try {\r\n                            const itemName = values[columnIndices.item_name]?.trim();\r\n                            const category = values[columnIndices.category]?.trim();\r\n                            const costPrice = parseFloat(values[columnIndices.cost_price]) || 0;\r\n                            const sellingPrice = parseFloat(values[columnIndices.selling_price]) || 0;\r\n                            const saleDate = values[columnIndices.sale_date]?.trim();\r\n                            const customerName = values[columnIndices.customer_name]?.trim();\r\n                            const customerPhone = phoneIndex >= 0 ? values[phoneIndex]?.trim() || '' : '';\r\n                            const customerAddress = addressIndex >= 0 ? values[addressIndex]?.trim() || '' : '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${i + 1}: Missing required fields`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${i + 1}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate date format\r\n                            const dateObj = new Date(saleDate);\r\n                            if (isNaN(dateObj.getTime())) {\r\n                                errors.push(`Row ${i + 1}: Invalid date format \"${saleDate}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: saleDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${i + 1}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import sales from Excel\r\n        function importExcelSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    jsonData.forEach((row, index) => {\r\n                        try {\r\n                            // Try different column name variations\r\n                            const itemName = row['Item Name'] || row['Item_Name'] || row['itemname'] || row['Product Name'] || row['Name'];\r\n                            const category = row['Category'] || row['Item Category'] || row['Type'];\r\n                            const costPrice = parseFloat(row['Cost Price'] || row['Cost_Price'] || row['costprice'] || row['Cost'] || row['CP']) || 0;\r\n                            const sellingPrice = parseFloat(row['Selling Price'] || row['Selling_Price'] || row['sellingprice'] || row['Price'] || row['SP']) || 0;\r\n                            const saleDate = row['Sale Date'] || row['Sale_Date'] || row['saledate'] || row['Date'];\r\n                            const customerName = row['Customer Name'] || row['Customer_Name'] || row['customername'] || row['Customer'];\r\n                            const customerPhone = row['Customer Phone'] || row['Customer_Phone'] || row['Phone'] || row['Mobile'] || '';\r\n                            const customerAddress = row['Customer Address'] || row['Customer_Address'] || row['Address'] || '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${index + 2}: Missing required fields`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${index + 2}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate and format date\r\n                            let formattedDate = saleDate;\r\n                            if (saleDate instanceof Date) {\r\n                                formattedDate = saleDate.toISOString().split('T')[0];\r\n                            } else if (typeof saleDate === 'string') {\r\n                                const dateObj = new Date(saleDate);\r\n                                if (isNaN(dateObj.getTime())) {\r\n                                    errors.push(`Row ${index + 2}: Invalid date format \"${saleDate}\"`);\r\n                                    skippedCount++;\r\n                                    return;\r\n                                }\r\n                                formattedDate = dateObj.toISOString().split('T')[0];\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: formattedDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${index + 2}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download sales import template\r\n        function downloadSalesTemplate() {\r\n            const csvContent = [\r\n                'item_name,category,cost_price,selling_price,sale_date,customer_name,customer_phone,customer_address',\r\n                'Gold Plated Necklace,Necklaces,500,800,2024-01-15,John Doe,+91-9876543210,123 Main Street Mumbai',\r\n                'Diamond Earrings,Earrings,1000,1500,2024-01-16,Jane Smith,+91-8765432109,456 Oak Avenue Delhi',\r\n                'Silver Bracelet,Bracelets,300,450,2024-01-17,Mike Johnson,+91-7654321098,789 Pine Road Bangalore'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'sales_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Sales import template downloaded! Use this format for importing sales data.');\r\n        }\r\n\r\n        // Sales search and filter functionality\r\n        let filteredSalesData = [];\r\n        let isSearchActive = false;\r\n\r\n        function filterSales() {\r\n            const searchTerm = document.getElementById('sales-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                // Clear filter\r\n                isSearchActive = false;\r\n                filteredSalesData = [];\r\n                resetSalesDisplay();\r\n                loadSalesRecords();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return; // Wait for at least 2 characters\r\n            }\r\n\r\n            // Filter sales data\r\n            filteredSalesData = salesData.filter(sale =>\r\n                sale.itemName.toLowerCase().includes(searchTerm) ||\r\n                sale.customerName.toLowerCase().includes(searchTerm) ||\r\n                sale.category.toLowerCase().includes(searchTerm) ||\r\n                (sale.customerPhone && sale.customerPhone.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isSearchActive = true;\r\n            displayFilteredSales();\r\n        }\r\n\r\n        function displayFilteredSales() {\r\n            const salesRecordsDiv = document.getElementById('sales-records');\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n            const noSalesMessage = document.getElementById('no-sales-message');\r\n\r\n            if (filteredSalesData.length === 0) {\r\n                salesRecordsDiv.innerHTML = '';\r\n                loadMoreContainer.style.display = 'none';\r\n                noSalesMessage.style.display = 'block';\r\n                noSalesMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Sales Found</h3>\r\n                    <p>No sales records match your search criteria.</p>\r\n                `;\r\n                document.getElementById('sales-count').textContent = '0';\r\n                return;\r\n            }\r\n\r\n            // Display all filtered results\r\n            salesRecordsDiv.innerHTML = filteredSalesData.map(sale => createSaleItemHTML(sale)).join('');\r\n            loadMoreContainer.style.display = 'none';\r\n            noSalesMessage.style.display = 'none';\r\n            document.getElementById('sales-count').textContent = filteredSalesData.length;\r\n\r\n            // Update summary for filtered data\r\n            updateSalesSummary(filteredSalesData);\r\n        }\r\n\r\n        function clearSalesFilter() {\r\n            document.getElementById('sales-search').value = '';\r\n            isSearchActive = false;\r\n            filteredSalesData = [];\r\n            resetSalesDisplay();\r\n            loadSalesRecords();\r\n        }\r\n\r\n        function updateSalesSummary(dataToSummarize = null) {\r\n            const dataToUse = dataToSummarize || salesData;\r\n\r\n            const totalSales = dataToUse.length;\r\n            const totalCost = dataToUse.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = dataToUse.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = totalSelling - totalCost;\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n        }\r\n\r\n        function createSaleItemHTML(sale) {\r\n            const saleDate = new Date(sale.saleDate);\r\n            const formattedDate = saleDate.toLocaleDateString('en-IN', {\r\n                day: '2-digit',\r\n                month: 'short',\r\n                year: 'numeric'\r\n            });\r\n\r\n            const profitColor = sale.profit > 0 ? '#4ecdc4' : sale.profit < 0 ? '#ff6b6b' : '#666';\r\n\r\n            return `\r\n                <div class=\"sales-item\" style=\"position: relative; margin-bottom: 15px; padding: 15px; background: white; border-radius: 8px; border-left: 4px solid ${profitColor}; box-shadow: 0 2px 5px rgba(0,0,0,0.1);\">\r\n                    <div class=\"action-buttons\" style=\"position: absolute; top: 10px; right: 10px; display: flex; gap: 5px;\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale('${sale.id}')\" style=\"background: #007bff; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            ✏️ Edit\r\n                        </button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale('${sale.id}')\" style=\"background: #ff6b6b; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            🗑️ Delete\r\n                        </button>\r\n                    </div>\r\n\r\n                    <h4 style=\"margin: 0 0 8px 0; color: #333; font-size: 16px; padding-right: 120px;\">${sale.itemName}</h4>\r\n\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 14px; color: #666;\">\r\n                        <p style=\"margin: 0;\"><strong>📂 Category:</strong> ${sale.category}</p>\r\n                        <p style=\"margin: 0;\"><strong>📅 Date:</strong> ${formattedDate}</p>\r\n                        <p style=\"margin: 0;\"><strong>💰 Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>💵 Selling:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>📈 Profit:</strong> <span style=\"color: ${profitColor}; font-weight: bold;\">₹${sale.profit.toFixed(2)}</span></p>\r\n                        <p style=\"margin: 0;\"><strong>👤 Customer:</strong> ${sale.customerName}</p>\r\n                    </div>\r\n\r\n                    ${sale.customerPhone ? `<p style=\"margin: 8px 0 0 0; font-size: 13px; color: #888;\"><strong>📞 Phone:</strong> ${sale.customerPhone}</p>` : ''}\r\n                    ${sale.customerAddress ? `<p style=\"margin: 4px 0 0 0; font-size: 13px; color: #888;\"><strong>📍 Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Customer search functionality\r\n        function searchCustomers() {\r\n            const searchTerm = document.getElementById('customerSearch').value.trim().toLowerCase();\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            selectedSearchIndex = -1; // Reset selection\r\n\r\n            if (searchTerm.length < 2) {\r\n                resultsContainer.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Get unique customers from both database and sales data\r\n            const allUniqueCustomers = getUniqueCustomers();\r\n\r\n            // Update total customer count\r\n            document.getElementById('total-customers').textContent = allUniqueCustomers.length;\r\n\r\n            // Filter customers based on search term\r\n            const matchingCustomers = allUniqueCustomers.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                customer.phone.toLowerCase().includes(searchTerm) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            if (matchingCustomers.length === 0) {\r\n                resultsContainer.innerHTML = '<div style=\"padding: 10px; color: #666; font-style: italic;\">No customers found. You can enter new customer details below.</div>';\r\n                resultsContainer.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            // Display matching customers\r\n            resultsContainer.innerHTML = matchingCustomers.map(customer => {\r\n                const lastPurchaseText = customer.lastPurchase\r\n                    ? `Last purchase: ${new Date(customer.lastPurchase).toLocaleDateString()}`\r\n                    : 'No purchases yet';\r\n\r\n                const sourceIcon = customer.source === 'database' ? '📁' : '💳';\r\n                const sourceText = customer.source === 'database' ? 'In Customer DB' : 'From Sales Only';\r\n\r\n                return `\r\n                <div style=\"padding: 12px; cursor: pointer; border-bottom: 1px solid #eee; transition: all 0.2s; border-left: 3px solid transparent;\"\r\n                     onclick=\"selectCustomer('${escapeQuotes(customer.name)}', '${escapeQuotes(customer.phone)}', '${escapeQuotes(customer.address)}', '${escapeQuotes(customer.email)}')\"\r\n                     onmouseover=\"this.style.backgroundColor='#f8f9fa'; this.style.borderLeftColor='#4ecdc4';\"\r\n                     onmouseout=\"this.style.backgroundColor='white'; this.style.borderLeftColor='transparent';\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 4px;\">\r\n                            <div style=\"font-weight: bold; color: #333; font-size: 15px;\">${customer.name}</div>\r\n                    <div style=\"font-size: 10px; color: #999; padding: 2px 6px; background: #f0f0f0; border-radius: 10px;\">\r\n                            ${sourceIcon} ${sourceText}\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 6px;\">\r\n                        ${customer.phone !== 'Not provided' ?\r\n                                `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📞 ${customer.phone}</div>` : ''}\r\n                        ${customer.email && customer.email !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📧 ${customer.email}</div>` : ''}\r\n                    ${customer.address && customer.address !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #888; margin-bottom: 6px; line-height: 1.3;\">📍 ${customer.address}</div>` : ''}\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 8px;\">\r\n                        </div>\r\n                    <div style=\"font-size: 11px; color: #4ecdc4; font-weight: 600;\">\r\n                            ${customer.totalPurchases > 0 ?\r\n                                `${customer.totalPurchases} purchase${customer.totalPurchases > 1 ? 's' : ''} • ₹${customer.totalSpent.toFixed(2)} total` :\r\n                                'New customer'\r\n                            }\r\n                        </div>\r\n                        <div style=\"font-size: 10px; color: #999; font-style: italic;\">\r\n                            ${lastPurchaseText}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            }).join('');\r\n\r\n            resultsContainer.style.display = 'block';\r\n        }\r\n\r\n        // Get customers from customer database and sales data with purchase stats\r\n        function getUniqueCustomers() {\r\n            const allCustomers = new Map();\r\n\r\n            // Add customers from customer database\r\n            customersData.forEach(customer => {\r\n                const customerSales = salesData.filter(sale =>\r\n                    sale.customerName.toLowerCase() === customer.name.toLowerCase() ||\r\n                    sale.customerPhone === customer.phone\r\n                );\r\n\r\n                const totalPurchases = customerSales.length;\r\n                const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                const lastPurchase = customerSales.length > 0\r\n                    ? Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime()))\r\n                    : null;\r\n\r\n                const customerKey = customer.name.toLowerCase() + '|' + (customer.phone || '');\r\n                allCustomers.set(customerKey, {\r\n                    name: customer.name,\r\n                    phone: customer.phone || 'Not provided',\r\n                    address: customer.address || 'Not provided',\r\n                    email: customer.email || 'Not provided',\r\n                    totalPurchases: totalPurchases,\r\n                    totalSpent: totalSpent,\r\n                    lastPurchase: lastPurchase,\r\n                    source: 'database'\r\n                });\r\n            });\r\n\r\n            // Add customers from sales data who are not in customer database\r\n            salesData.forEach(sale => {\r\n                const customerKey = sale.customerName.toLowerCase() + '|' + (sale.customerPhone || '');\r\n\r\n                if (!allCustomers.has(customerKey)) {\r\n                    const customerSales = salesData.filter(s =>\r\n                        s.customerName.toLowerCase() === sale.customerName.toLowerCase() ||\r\n                        (s.customerPhone && sale.customerPhone && s.customerPhone === sale.customerPhone)\r\n                    );\r\n\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, s) => sum + s.sellingPrice, 0);\r\n                    const lastPurchase = Math.max(...customerSales.map(s => new Date(s.saleDate).getTime()));\r\n\r\n                    allCustomers.set(customerKey, {\r\n                        name: sale.customerName,\r\n                        phone: sale.customerPhone || 'Not provided',\r\n                        address: sale.customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        totalPurchases: totalPurchases,\r\n                        totalSpent: totalSpent,\r\n                        lastPurchase: lastPurchase,\r\n                        source: 'sales'\r\n                    });\r\n                }\r\n            });\r\n\r\n            // Convert to array and sort by total spent (descending), then by last purchase date (descending)\r\n            return Array.from(allCustomers.values()).sort((a, b) => {\r\n                if (b.totalSpent !== a.totalSpent) {\r\n                    return b.totalSpent - a.totalSpent;\r\n                }\r\n                if (a.lastPurchase && b.lastPurchase) {\r\n                    return b.lastPurchase - a.lastPurchase;\r\n                }\r\n                return a.lastPurchase ? -1 : (b.lastPurchase ? 1 : 0);\r\n            });\r\n        }\r\n\r\n        // Escape quotes for HTML attributes\r\n        function escapeQuotes(str) {\r\n            if (!str) return '';\r\n            return str.replace(/'/g, '&#39;').replace(/\"/g, '&quot;');\r\n        }\r\n\r\n        // Select customer from search results\r\n        function selectCustomer(name, phone, address, email) {\r\n            document.getElementById('customerName').value = name;\r\n            document.getElementById('customerPhone').value = phone !== 'Not provided' ? phone : '';\r\n            document.getElementById('customerAddress').value = address !== 'Not provided' ? address : '';\r\n\r\n            // Clear search\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n\r\n            // Show success message\r\n            showSuccess(`✅ Customer \"${name}\" selected! Details filled automatically.`);\r\n\r\n            // Focus on item name field\r\n            document.getElementById('itemName').focus();\r\n        }\r\n\r\n        // Clear customer search\r\n        function clearCustomerSearch() {\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n        }\r\n\r\n        // Handle keyboard navigation in search\r\n        let selectedSearchIndex = -1;\r\n        function handleSearchKeydown(event) {\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            const results = resultsContainer.querySelectorAll('[onclick*=\"selectCustomer\"]');\r\n\r\n            if (results.length === 0) return;\r\n\r\n            switch(event.key) {\r\n                case 'ArrowDown':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.min(selectedSearchIndex + 1, results.length - 1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'ArrowUp':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.max(selectedSearchIndex - 1, -1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'Enter':\r\n                    event.preventDefault();\r\n                    if (selectedSearchIndex >= 0 && selectedSearchIndex < results.length) {\r\n                        results[selectedSearchIndex].click();\r\n                    }\r\n                    break;\r\n                case 'Escape':\r\n                    clearCustomerSearch();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function highlightSearchResult(results) {\r\n            // Remove previous highlights\r\n            results.forEach((result, index) => {\r\n                if (index === selectedSearchIndex) {\r\n                    result.style.backgroundColor = '#4ecdc4';\r\n                    result.style.color = 'white';\r\n                } else {\r\n                    result.style.backgroundColor = 'white';\r\n                    result.style.color = 'inherit';\r\n                }\r\n            });\r\n        }\r\n\r\n        // Hide search results when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const searchContainer = document.getElementById('customerSearch').parentElement;\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n\r\n            if (!searchContainer.contains(event.target)) {\r\n                resultsContainer.style.display = 'none';\r\n            }\r\n        });\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            const profitField = document.getElementById('profit');\r\n            profitField.value = profit.toFixed(2);\r\n\r\n            // Change color based on profit\r\n            if (profit > 0) {\r\n                profitField.style.color = '#4ecdc4';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else if (profit < 0) {\r\n                profitField.style.color = '#ff6b6b';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else {\r\n                profitField.style.color = '#666';\r\n                profitField.style.fontWeight = 'normal';\r\n            }\r\n        }\r\n\r\n        // Add sale record function with enhanced validation\r\n        function addSaleRecord() {\r\n            try {\r\n                // Clear previous error states\r\n                clearAllFieldErrors();\r\n\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const category = document.getElementById('category').value;\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validation array to collect all errors\r\n                const validationErrors = [];\r\n                const fieldErrors = {};\r\n\r\n                // Validate required fields with specific error messages\r\n                if (!itemName) {\r\n                    validationErrors.push('Item name is required');\r\n                    fieldErrors.itemName = 'Please enter the item name';\r\n                }\r\n\r\n                if (!category) {\r\n                    validationErrors.push('Category selection is required');\r\n                    fieldErrors.category = 'Please select a category';\r\n                }\r\n\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    validationErrors.push('Valid cost price is required');\r\n                    fieldErrors.costPrice = 'Please enter a valid cost price (must be ≥ 0)';\r\n                }\r\n\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    validationErrors.push('Valid selling price is required');\r\n                    fieldErrors.sellingPrice = 'Please enter a valid selling price (must be ≥ 0)';\r\n                }\r\n\r\n                if (!saleDate) {\r\n                    validationErrors.push('Sale date is required');\r\n                    fieldErrors.saleDate = 'Please select a sale date';\r\n                }\r\n\r\n                if (!customerName) {\r\n                    validationErrors.push('Customer name is required');\r\n                    fieldErrors.customerName = 'Please enter the customer name';\r\n                }\r\n\r\n                // Additional business logic validations\r\n                if (costPrice && sellingPrice && sellingPrice < costPrice) {\r\n                    validationErrors.push('Selling price cannot be less than cost price');\r\n                    fieldErrors.sellingPrice = 'Selling price must be greater than or equal to cost price';\r\n                }\r\n\r\n                const today = new Date();\r\n                const selectedDate = new Date(saleDate);\r\n                const futureLimit = new Date();\r\n                futureLimit.setDate(today.getDate() + 30); // Allow up to 30 days in future\r\n\r\n                if (selectedDate > futureLimit) {\r\n                    validationErrors.push('Sale date cannot be more than 30 days in the future');\r\n                    fieldErrors.saleDate = 'Sale date cannot be more than 30 days in the future';\r\n                }\r\n\r\n                // Show field-specific errors\r\n                for (const [fieldName, errorMessage] of Object.entries(fieldErrors)) {\r\n                    showFieldError(fieldName, errorMessage);\r\n                }\r\n\r\n                // If there are validation errors, show popup with all errors\r\n                if (validationErrors.length > 0) {\r\n                    const errorMessage = validationErrors.length === 1\r\n                        ? validationErrors[0]\r\n                        : `Please fix the following ${validationErrors.length} issues:\\n\\n• ${validationErrors.join('\\n• ')}`;\r\n\r\n                    showError(errorMessage);\r\n\r\n                    // Focus on the first field with error\r\n                    const firstErrorField = Object.keys(fieldErrors)[0];\r\n                    if (firstErrorField) {\r\n                        const fieldElement = document.getElementById(firstErrorField);\r\n                        if (fieldElement) {\r\n                            fieldElement.focus();\r\n                            fieldElement.style.borderColor = 'var(--error-500)';\r\n                            fieldElement.style.boxShadow = '0 0 0 3px var(--error-100)';\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                // Save customer to database automatically when adding sale\r\n                saveCustomerFromSale(customerName, customerPhone, customerAddress);\r\n\r\n                // Create sale record\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: category,\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                document.getElementById('customerSearch').value = '';\r\n                document.getElementById('customer-search-results').style.display = 'none';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Reset sales display to show latest sales\r\n                resetSalesDisplay();\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Show enhanced success message with details\r\n                const successMessage = `🎉 Sale Record Added Successfully!\\n\\n` +\r\n                    `Item: ${itemName}\\n` +\r\n                    `Customer: ${customerName}\\n` +\r\n                    `Amount: ₹${sellingPrice.toFixed(2)}\\n` +\r\n                    `Profit: ₹${(sellingPrice - costPrice).toFixed(2)}\\n\\n` +\r\n                    `Customer has been saved to database.`;\r\n\r\n                showSuccess(successMessage);\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                const errorMessage = `Failed to add sale record!\\n\\n` +\r\n                    `Error: ${error.message}\\n\\n` +\r\n                    `Please check your data and try again.`;\r\n                showError(errorMessage);\r\n            }\r\n        }\r\n\r\n        // Clear all field error states\r\n        function clearAllFieldErrors() {\r\n            const fields = ['itemName', 'category', 'costPrice', 'sellingPrice', 'saleDate', 'customerName'];\r\n            fields.forEach(fieldName => {\r\n                clearFieldError(fieldName);\r\n            });\r\n        }\r\n\r\n        // Show field-specific error\r\n        function showFieldError(fieldName, message) {\r\n            const field = document.getElementById(fieldName);\r\n            if (field) {\r\n                // Style the field with error state\r\n                field.style.borderColor = 'var(--error-500)';\r\n                field.style.boxShadow = '0 0 0 3px var(--error-100)';\r\n\r\n                // Find and show the error message\r\n                const errorDiv = field.parentElement.querySelector('.form-error');\r\n                if (errorDiv) {\r\n                    const errorText = errorDiv.querySelector('span');\r\n                    if (errorText) {\r\n                        errorText.textContent = message;\r\n                    }\r\n                    errorDiv.style.display = 'flex';\r\n                }\r\n            }\r\n        }\r\n\r\n        // Clear field-specific error\r\n        function clearFieldError(fieldName) {\r\n            const field = document.getElementById(fieldName);\r\n            if (field) {\r\n                // Reset field styling\r\n                field.style.borderColor = '';\r\n                field.style.boxShadow = '';\r\n\r\n                // Hide error message\r\n                const errorDiv = field.parentElement.querySelector('.form-error');\r\n                if (errorDiv) {\r\n                    errorDiv.style.display = 'none';\r\n                }\r\n            }\r\n        }\r\n\r\n        // Enhanced field validation on blur\r\n        function validateFieldOnBlur(fieldName) {\r\n            const field = document.getElementById(fieldName);\r\n            if (!field) return;\r\n\r\n            field.addEventListener('blur', function() {\r\n                const value = this.value.trim();\r\n                clearFieldError(fieldName);\r\n\r\n                switch (fieldName) {\r\n                    case 'itemName':\r\n                        if (!value) {\r\n                            showFieldError(fieldName, 'Item name is required');\r\n                        }\r\n                        break;\r\n                    case 'category':\r\n                        if (!value) {\r\n                            showFieldError(fieldName, 'Please select a category');\r\n                        }\r\n                        break;\r\n                    case 'costPrice':\r\n                        const costPrice = parseFloat(value);\r\n                        if (!value || isNaN(costPrice) || costPrice < 0) {\r\n                            showFieldError(fieldName, 'Please enter a valid cost price');\r\n                        }\r\n                        break;\r\n                    case 'sellingPrice':\r\n                        const sellingPrice = parseFloat(value);\r\n                        if (!value || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                            showFieldError(fieldName, 'Please enter a valid selling price');\r\n                        }\r\n                        break;\r\n                    case 'customerName':\r\n                        if (!value) {\r\n                            showFieldError(fieldName, 'Customer name is required');\r\n                        }\r\n                        break;\r\n                    case 'saleDate':\r\n                        if (!value) {\r\n                            showFieldError(fieldName, 'Sale date is required');\r\n                        }\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n\r\n        // Setup field validation for all form fields\r\n        function setupFieldValidation() {\r\n            const fieldsToValidate = ['itemName', 'category', 'costPrice', 'sellingPrice', 'saleDate', 'customerName'];\r\n\r\n            fieldsToValidate.forEach(fieldName => {\r\n                validateFieldOnBlur(fieldName);\r\n\r\n                // Add real-time validation for input fields\r\n                const field = document.getElementById(fieldName);\r\n                if (field) {\r\n                    field.addEventListener('input', function() {\r\n                        // Clear error state on input\r\n                        if (this.style.borderColor === 'var(--error-500)') {\r\n                            clearFieldError(fieldName);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            // Special handling for cost and selling price fields\r\n            const costPriceField = document.getElementById('costPrice');\r\n            const sellingPriceField = document.getElementById('sellingPrice');\r\n\r\n            if (costPriceField && sellingPriceField) {\r\n                [costPriceField, sellingPriceField].forEach(field => {\r\n                    field.addEventListener('input', function() {\r\n                        const costPrice = parseFloat(costPriceField.value) || 0;\r\n                        const sellingPrice = parseFloat(sellingPriceField.value) || 0;\r\n\r\n                        // Clear previous validation\r\n                        clearFieldError('costPrice');\r\n                        clearFieldError('sellingPrice');\r\n\r\n                        // Validate selling price vs cost price\r\n                        if (costPrice > 0 && sellingPrice > 0 && sellingPrice < costPrice) {\r\n                            showFieldError('sellingPrice', 'Selling price should be greater than cost price');\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Save customer from sale entry automatically\r\n        function saveCustomerFromSale(customerName, customerPhone, customerAddress) {\r\n            try {\r\n                if (!customerName.trim()) return;\r\n\r\n                // Check if customer already exists by name or phone\r\n                const existingCustomerIndex = customersData.findIndex(customer =>\r\n                    customer.name.toLowerCase() === customerName.toLowerCase() ||\r\n                    (customerPhone && customer.phone === customerPhone)\r\n                );\r\n\r\n                if (existingCustomerIndex !== -1) {\r\n                    // Update existing customer with any new information\r\n                    const existingCustomer = customersData[existingCustomerIndex];\r\n                    let updated = false;\r\n\r\n                    if (customerPhone && customerPhone !== existingCustomer.phone && existingCustomer.phone === 'Not provided') {\r\n                        existingCustomer.phone = customerPhone;\r\n                        updated = true;\r\n                    }\r\n\r\n                    if (customerAddress && customerAddress !== existingCustomer.address && existingCustomer.address === 'Not provided') {\r\n                        existingCustomer.address = customerAddress;\r\n                        updated = true;\r\n                    }\r\n\r\n                    // Update last purchase date\r\n                    existingCustomer.lastPurchase = new Date().toISOString();\r\n                    updated = true;\r\n\r\n                    if (updated) {\r\n                        customersData[existingCustomerIndex] = existingCustomer;\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                    }\r\n                } else {\r\n                    // Add new customer\r\n                    const newCustomer = {\r\n                        id: Date.now(),\r\n                        name: customerName,\r\n                        phone: customerPhone || 'Not provided',\r\n                        address: customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        status: 'active',\r\n                        notes: `Auto-added from sale entry on ${new Date().toLocaleDateString()}`,\r\n                        createdAt: new Date().toISOString(),\r\n                        lastPurchase: new Date().toISOString()\r\n                    };\r\n\r\n                    customersData.push(newCustomer);\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                }\r\n            } catch (error) {\r\n                console.error('Error saving customer from sale:', error);\r\n                // Don't throw error to not interrupt sale process\r\n            }\r\n        }\r\n\r\n        // Show success message with popup alert\r\n        function showSuccess(message) {\r\n            // Show toast notification\r\n            showToast(message, 'success');\r\n\r\n            // Show popup alert\r\n            showPopupAlert(message, 'success');\r\n        }\r\n\r\n        // Show error message with popup alert\r\n        function showError(message) {\r\n            // Show toast notification\r\n            showToast(message, 'error');\r\n\r\n            // Show popup alert\r\n            showPopupAlert(message, 'error');\r\n        }\r\n\r\n        // Enhanced toast notification system\r\n        function showToast(message, type = 'info') {\r\n            // Remove existing toasts\r\n            const existingToasts = document.querySelectorAll('.toast.show');\r\n            existingToasts.forEach(toast => {\r\n                toast.classList.remove('show');\r\n                setTimeout(() => toast.remove(), 300);\r\n            });\r\n\r\n            // Create new toast\r\n            const toast = document.createElement('div');\r\n            toast.className = `toast toast-${type}`;\r\n\r\n            const icon = getIconForType(type);\r\n            toast.innerHTML = `\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"${icon}\"></i>\r\n                    <span>${message}</span>\r\n                    <button onclick=\"this.parentElement.parentElement.classList.remove('show')\"\r\n                            style=\"margin-left: auto; background: none; border: none; color: inherit; cursor: pointer; font-size: 1.2rem;\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n            `;\r\n\r\n            document.body.appendChild(toast);\r\n\r\n            // Show toast with animation\r\n            requestAnimationFrame(() => {\r\n                toast.classList.add('show');\r\n            });\r\n\r\n            // Auto-hide after 5 seconds\r\n            setTimeout(() => {\r\n                if (toast.classList.contains('show')) {\r\n                    toast.classList.remove('show');\r\n                    setTimeout(() => toast.remove(), 300);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Modern popup alert system\r\n        function showPopupAlert(message, type = 'info') {\r\n            const alertModal = document.createElement('div');\r\n            alertModal.className = 'alert-modal';\r\n            alertModal.style.cssText = `\r\n                position: fixed;\r\n                top: 0;\r\n                left: 0;\r\n                width: 100%;\r\n                height: 100%;\r\n                background: rgba(0, 0, 0, 0.5);\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                z-index: 10000;\r\n                backdrop-filter: blur(5px);\r\n                animation: fadeIn 0.3s ease-out;\r\n            `;\r\n\r\n            const alertBox = document.createElement('div');\r\n            alertBox.className = 'alert-box';\r\n            alertBox.style.cssText = `\r\n                background: white;\r\n                border-radius: var(--radius-xl);\r\n                padding: var(--space-8);\r\n                max-width: 450px;\r\n                width: 90%;\r\n                text-align: center;\r\n                box-shadow: var(--shadow-2xl);\r\n                border: 1px solid var(--neutral-200);\r\n                animation: slideInUp 0.3s ease-out;\r\n                position: relative;\r\n            `;\r\n\r\n            const icon = getIconForType(type);\r\n            const color = getColorForType(type);\r\n\r\n            alertBox.innerHTML = `\r\n                <div style=\"font-size: 3rem; color: ${color}; margin-bottom: var(--space-4);\">\r\n                    <i class=\"${icon}\"></i>\r\n                </div>\r\n                <h3 style=\"font-size: 1.5rem; font-weight: 600; color: var(--neutral-800); margin-bottom: var(--space-3);\">\r\n                    ${type === 'success' ? 'Success!' : type === 'error' ? 'Error!' : 'Information'}\r\n                </h3>\r\n                <p style=\"font-size: 1rem; color: var(--neutral-600); margin-bottom: var(--space-6); line-height: 1.6;\">\r\n                    ${message}\r\n                </p>\r\n                <button onclick=\"closeAlert()\" class=\"btn btn-primary\" style=\"min-width: 120px;\">\r\n                    <i class=\"fas fa-check\"></i>\r\n                    <span>OK</span>\r\n                </button>\r\n            `;\r\n\r\n            alertModal.appendChild(alertBox);\r\n            document.body.appendChild(alertModal);\r\n\r\n            // Close on background click\r\n            alertModal.addEventListener('click', (e) => {\r\n                if (e.target === alertModal) {\r\n                    closeAlert();\r\n                }\r\n            });\r\n\r\n            // Close on Escape key\r\n            const escapeHandler = (e) => {\r\n                if (e.key === 'Escape') {\r\n                    closeAlert();\r\n                    document.removeEventListener('keydown', escapeHandler);\r\n                }\r\n            };\r\n            document.addEventListener('keydown', escapeHandler);\r\n\r\n            // Store reference for closing\r\n            window.currentAlert = alertModal;\r\n        }\r\n\r\n        // Close alert function\r\n        function closeAlert() {\r\n            const alertModal = window.currentAlert;\r\n            if (alertModal) {\r\n                alertModal.style.animation = 'fadeOut 0.3s ease-out';\r\n                setTimeout(() => {\r\n                    if (alertModal.parentNode) {\r\n                        alertModal.parentNode.removeChild(alertModal);\r\n                    }\r\n                    window.currentAlert = null;\r\n                }, 300);\r\n            }\r\n        }\r\n\r\n        // Helper function to get icon for alert type\r\n        function getIconForType(type) {\r\n            const icons = {\r\n                success: 'fas fa-check-circle',\r\n                error: 'fas fa-exclamation-circle',\r\n                warning: 'fas fa-exclamation-triangle',\r\n                info: 'fas fa-info-circle'\r\n            };\r\n            return icons[type] || icons.info;\r\n        }\r\n\r\n        // Helper function to get color for alert type\r\n        function getColorForType(type) {\r\n            const colors = {\r\n                success: 'var(--success-500)',\r\n                error: 'var(--error-500)',\r\n                warning: 'var(--warning-500)',\r\n                info: 'var(--primary-500)'\r\n            };\r\n            return colors[type] || colors.info;\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n\r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n\r\n            countElement.textContent = salesData.length;\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n\r\n            // Show sales with pagination\r\n            const recentSales = salesData.slice().reverse(); // All sales in reverse order\r\n            const salesToShow = recentSales.slice(0, displayedSalesCount);\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n\r\n            container.innerHTML = salesToShow.map(sale => `\r\n                <div class=\"sales-item\" id=\"sale-item-${sale.id}\">\r\n                    <div class=\"action-buttons\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale(${sale.id})\" title=\"Edit Sale\">✏️</button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\" title=\"Delete Sale\">🗑️</button>\r\n                    </div>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n\r\n            // Show/hide Load More button\r\n            if (recentSales.length > displayedSalesCount) {\r\n                loadMoreContainer.style.display = 'block';\r\n                const remainingCount = recentSales.length - displayedSalesCount;\r\n                document.getElementById('load-more-btn').innerHTML = `📖 Load More Sales (${remainingCount} remaining)`;\r\n            } else {\r\n                loadMoreContainer.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n\r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Edit sale functionality\r\n        let currentEditingSaleId = null;\r\n\r\n        function editSale(id) {\r\n            // Check if another sale is being edited\r\n            if (currentEditingSaleId && currentEditingSaleId !== id) {\r\n                showError('Please finish editing the current sale before editing another one.');\r\n                return;\r\n            }\r\n\r\n            const sale = salesData.find(s => s.id === id);\r\n            if (!sale) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const saleItem = document.getElementById(`sale-item-${id}`);\r\n            if (!saleItem) {\r\n                showError('Sale item not found in DOM!');\r\n                return;\r\n            }\r\n\r\n            currentEditingSaleId = id;\r\n\r\n            // Create edit form\r\n            const editForm = `\r\n                <div class=\"edit-form\">\r\n                    <h4>✏️ Edit Sale Record</h4>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-itemName-${id}\">Item Name *</label>\r\n                            <input type=\"text\" id=\"edit-itemName-${id}\" value=\"${sale.itemName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-category-${id}\">Category *</label>\r\n                            <select id=\"edit-category-${id}\" required>\r\n                                <option value=\"Necklaces\" ${sale.category === 'Necklaces' ? 'selected' : ''}>Necklaces</option>\r\n                                <option value=\"Earrings\" ${sale.category === 'Earrings' ? 'selected' : ''}>Earrings</option>\r\n                                <option value=\"Bracelets\" ${sale.category === 'Bracelets' ? 'selected' : ''}>Bracelets</option>\r\n                                <option value=\"Rings\" ${sale.category === 'Rings' ? 'selected' : ''}>Rings</option>\r\n                                <option value=\"Anklets\" ${sale.category === 'Anklets' ? 'selected' : ''}>Anklets</option>\r\n                                <option value=\"Sets\" ${sale.category === 'Sets' ? 'selected' : ''}>Sets</option>\r\n                                <option value=\"Bangles\" ${sale.category === 'Bangles' ? 'selected' : ''}>Bangles</option>\r\n                                <option value=\"Chains\" ${sale.category === 'Chains' ? 'selected' : ''}>Chains</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-costPrice-${id}\">Cost Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-costPrice-${id}\" value=\"${sale.costPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-sellingPrice-${id}\">Selling Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-sellingPrice-${id}\" value=\"${sale.sellingPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-profit-${id}\">Profit (₹)</label>\r\n                            <input type=\"number\" id=\"edit-profit-${id}\" value=\"${sale.profit}\" readonly style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-saleDate-${id}\">Sale Date *</label>\r\n                            <input type=\"date\" id=\"edit-saleDate-${id}\" value=\"${sale.saleDate}\" required>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerName-${id}\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"edit-customerName-${id}\" value=\"${sale.customerName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerPhone-${id}\">Customer Phone</label>\r\n                            <input type=\"tel\" id=\"edit-customerPhone-${id}\" value=\"${sale.customerPhone}\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-group\">\r\n                        <label for=\"edit-customerAddress-${id}\">Customer Address</label>\r\n                        <textarea id=\"edit-customerAddress-${id}\" rows=\"2\">${sale.customerAddress || ''}</textarea>\r\n                    </div>\r\n                    <div class=\"edit-form-buttons\">\r\n                        <button class=\"save-edit-btn\" onclick=\"saveSaleEdit(${id})\">💾 Save Changes</button>\r\n                        <button class=\"cancel-edit-btn\" onclick=\"cancelSaleEdit(${id})\">❌ Cancel</button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            saleItem.innerHTML = editForm;\r\n\r\n            // Scroll the edited item into view\r\n            saleItem.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n\r\n        function calculateEditProfit(id) {\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            document.getElementById(`edit-profit-${id}`).value = profit.toFixed(2);\r\n        }\r\n\r\n        function saveSaleEdit(id) {\r\n            const itemName = document.getElementById(`edit-itemName-${id}`).value.trim();\r\n            const category = document.getElementById(`edit-category-${id}`).value;\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value);\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value);\r\n            const saleDate = document.getElementById(`edit-saleDate-${id}`).value;\r\n            const customerName = document.getElementById(`edit-customerName-${id}`).value.trim();\r\n            const customerPhone = document.getElementById(`edit-customerPhone-${id}`).value.trim();\r\n            const customerAddress = document.getElementById(`edit-customerAddress-${id}`).value.trim();\r\n\r\n            // Validation\r\n            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                showError('Please fill in all required fields marked with *');\r\n                return;\r\n            }\r\n\r\n            if (costPrice < 0 || sellingPrice < 0) {\r\n                showError('Cost price and selling price must be positive numbers');\r\n                return;\r\n            }\r\n\r\n            // Find and update the sale\r\n            const saleIndex = salesData.findIndex(s => s.id === id);\r\n            if (saleIndex === -1) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            // Update the sale data\r\n            salesData[saleIndex] = {\r\n                ...salesData[saleIndex],\r\n                itemName,\r\n                category,\r\n                costPrice,\r\n                sellingPrice,\r\n                profit,\r\n                saleDate,\r\n                customerName,\r\n                customerPhone: customerPhone || 'Not provided',\r\n                customerAddress: customerAddress || 'Not provided'\r\n            };\r\n\r\n            // Save to localStorage\r\n            localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n            // Reset editing state\r\n            currentEditingSaleId = null;\r\n\r\n            // Refresh displays\r\n            loadSalesRecords();\r\n            updateDashboard();\r\n            loadCustomers();\r\n\r\n            showSuccess('Sale record updated successfully!');\r\n        }\r\n\r\n        function cancelSaleEdit(id) {\r\n            currentEditingSaleId = null;\r\n            loadSalesRecords();\r\n        }\r\n\r\n        // Load more sales functionality\r\n        function loadMoreSales() {\r\n            displayedSalesCount += 20; // Load 20 more sales\r\n            loadSalesRecords();\r\n\r\n            // Smooth scroll to maintain position\r\n            const loadMoreBtn = document.getElementById('load-more-btn');\r\n            setTimeout(() => {\r\n                loadMoreBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }, 100);\r\n        }\r\n\r\n        // Reset displayed sales count when needed\r\n        function resetSalesDisplay() {\r\n            displayedSalesCount = 20;\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n\r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n\r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n\r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n\r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n\r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n\r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n\r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n\r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n\r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer =>\r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers with enhanced display\r\n        function loadCustomers() {\r\n            const countElement = document.getElementById('customers-count');\r\n            countElement.textContent = customersData.length;\r\n\r\n            // Reset pagination and filters when loading fresh data\r\n            currentCustomerPage = 1;\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n\r\n            // Clear search and sort inputs\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            currentCustomerSort = 'name-asc';\r\n\r\n            // Display the enhanced customer database\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        // Download customers Excel report\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const customersWithStats = customersData.map(customer => {\r\n                    const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                    const lastPurchase = customerSales.length > 0 ?\r\n                        new Date(Math.max(...customerSales.map(sale => new Date(sale.saleDate)))).toLocaleDateString() : 'Never';\r\n\r\n                    return {\r\n                        'Customer Name': customer.name,\r\n                        'Phone': customer.phone || 'Not provided',\r\n                        'Email': customer.email || 'Not provided',\r\n                        'Address': customer.address || 'Not provided',\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Average Order Value (₹)': totalPurchases > 0 ? (totalSpent / totalPurchases).toFixed(2) : 0,\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Customer Status': totalPurchases > 0 ? 'Active' : 'Inactive',\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Database');\r\n\r\n                const fileName = `Customer_Database_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Customer database exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting customers:', error);\r\n                showError('Error exporting customer data: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nThis will NOT affect sales records, but customer search functionality will be limited.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL CUSTOMERS\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL CUSTOMERS') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        updateCustomerCount();\r\n                        showSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL CUSTOMERS\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n\r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n\r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n\r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n\r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n\r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n\r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n\r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n\r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n\r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n\r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n\r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n\r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong>\r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' :\r\n                          month.profitMargin > 10 ? '📊 Good Performance' :\r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n\r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n\r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n\r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                    // Find top category\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n\r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' :\r\n                                         month.profitMargin > 10 ? 'Good' :\r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n\r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n\r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n\r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n\r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n\r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong>\r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' :\r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' :\r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n\r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong>\r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' :\r\n                          cat.salesPercentage > 20 ? '📈 High Demand' :\r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' :\r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n\r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n\r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n\r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n\r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n\r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' :\r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' :\r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n\r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Customer Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n\r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' :\r\n                                   cat.salesPercentage > 20 ? 'High Demand' :\r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' :\r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n\r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Category Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n\r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n\r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n\r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n\r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Sales Trends exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n</html>\r\n"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1751272116041,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "make it compatable to mobile ui"
                            }
                        ]
                    }
                ]
            }
        }
    ],
    "isAgent": true,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false
}
}