{
    "checksum": "203610911193b6cb744011fe657ab10026cbb8153d4615c84a8f3647a511a94a",
    "data": {
    "id": "967d9617-a135-4a4d-a4e5-6593b4600853",
    "createdAt": 1752482682853,
    "updatedAt": 1752489948766,
    "title": "Firebase Data Update Issue",
    "messages": [
        {
            "id": "33404041-f382-407b-baea-fe7ec2ef7ab9",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "data is not getting updated in firebase when enter through github https://manish0306.github.io/TheiaJewelz_Latest/jewelry_sales_final.html"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "jewelry_sales_final.html",
                    "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n\r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#6366F1\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n\r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n\r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n\r\n    <!-- Modern Typography -->\r\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@300;400;500;600;700;800&display=swap\" rel=\"stylesheet\">\r\n\r\n    <!-- Icons -->\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\r\n\r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    \r\n    <!-- Firebase v8 SDK -->\r\n    <script src=\"https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js\"></script>\r\n    <script src=\"https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js\"></script>\r\n    <script src=\"https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js\"></script>\r\n    <style>\r\n        /* ======== MODERN DESIGN SYSTEM ======== */\r\n        :root {\r\n            /* Enhanced Color Palette */\r\n            --primary-600: #6366F1;\r\n            --primary-500: #8B5CF6;\r\n            --primary-400: #A78BFA;\r\n            --primary-300: #C4B5FD;\r\n            --primary-100: #EDE9FE;\r\n            --primary-50: #F5F3FF;\r\n\r\n            --secondary-600: #DB2777;\r\n            --secondary-500: #EC4899;\r\n            --secondary-400: #F472B6;\r\n            --secondary-300: #F9A8D4;\r\n            --secondary-100: #FCE7F3;\r\n\r\n            --accent-600: #059669;\r\n            --accent-500: #10B981;\r\n            --accent-400: #34D399;\r\n            --accent-300: #6EE7B7;\r\n            --accent-100: #D1FAE5;\r\n\r\n            --neutral-900: #111827;\r\n            --neutral-800: #1F2937;\r\n            --neutral-700: #374151;\r\n            --neutral-600: #4B5563;\r\n            --neutral-500: #6B7280;\r\n            --neutral-400: #9CA3AF;\r\n            --neutral-300: #D1D5DB;\r\n            --neutral-200: #E5E7EB;\r\n            --neutral-100: #F3F4F6;\r\n            --neutral-50: #F9FAFB;\r\n\r\n            --error-600: #DC2626;\r\n            --error-500: #EF4444;\r\n            --error-100: #FEE2E2;\r\n\r\n            --warning-600: #D97706;\r\n            --warning-500: #F59E0B;\r\n            --warning-100: #FEF3C7;\r\n\r\n            --success-600: #059669;\r\n            --success-500: #10B981;\r\n            --success-100: #D1FAE5;\r\n\r\n            /* Interactive Colors */\r\n            --interactive-hover: #4F46E5;\r\n            --interactive-active: #3730A3;\r\n            --interactive-focus: #6366F1;\r\n            --interactive-disabled: #9CA3AF;\r\n\r\n            /* Glass Effect */\r\n            --glass-bg: rgba(255, 255, 255, 0.95);\r\n            --glass-border: rgba(255, 255, 255, 0.2);\r\n            --glass-shadow: rgba(0, 0, 0, 0.1);\r\n\r\n            /* Animations */\r\n            --bounce-scale: 1.05;\r\n            --slide-distance: 10px;\r\n\r\n            /* Typography */\r\n            --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n            --font-secondary: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n\r\n            /* Spacing */\r\n            --space-1: 0.25rem;\r\n            --space-2: 0.5rem;\r\n            --space-3: 0.75rem;\r\n            --space-4: 1rem;\r\n            --space-5: 1.25rem;\r\n            --space-6: 1.5rem;\r\n            --space-8: 2rem;\r\n            --space-10: 2.5rem;\r\n            --space-12: 3rem;\r\n            --space-16: 4rem;\r\n            --space-20: 5rem;\r\n\r\n            /* Border Radius */\r\n            --radius-sm: 0.375rem;\r\n            --radius-md: 0.5rem;\r\n            --radius-lg: 0.75rem;\r\n            --radius-xl: 1rem;\r\n            --radius-2xl: 1.5rem;\r\n\r\n            /* Shadows */\r\n            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\r\n            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\r\n            --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\r\n\r\n            /* Transitions */\r\n            --transition-fast: 150ms ease-in-out;\r\n            --transition-normal: 300ms ease-in-out;\r\n            --transition-slow: 500ms ease-in-out;\r\n        }\r\n\r\n        /* ======== RESET & BASE STYLES ======== */\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        *:focus {\r\n            outline: 2px solid var(--primary-600);\r\n            outline-offset: 2px;\r\n        }\r\n\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        body {\r\n            font-family: var(--font-primary);\r\n            font-size: 16px;\r\n            line-height: 1.6;\r\n            color: var(--neutral-800);\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 35%, #f093fb 70%, #f5576c 100%);\r\n            background-size: 400% 400%;\r\n            animation: gradientShift 15s ease infinite;\r\n            min-height: 100vh;\r\n            padding: var(--space-4);\r\n            overflow-x: hidden;\r\n            position: relative;\r\n        }\r\n\r\n        @keyframes gradientShift {\r\n            0% { background-position: 0% 50%; }\r\n            50% { background-position: 100% 50%; }\r\n            100% { background-position: 0% 50%; }\r\n        }\r\n\r\n        body::before {\r\n            content: '';\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background:\r\n                radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),\r\n                radial-gradient(circle at 80% 80%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),\r\n                radial-gradient(circle at 40% 60%, rgba(255, 255, 255, 0.05) 0%, transparent 50%);\r\n            pointer-events: none;\r\n            z-index: 0;\r\n        }\r\n\r\n        body::after {\r\n            content: '';\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"dots\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\"><circle cx=\"10\" cy=\"10\" r=\"1\" fill=\"white\" opacity=\"0.05\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23dots)\"/></svg>');\r\n            pointer-events: none;\r\n            z-index: 0;\r\n        }\r\n\r\n        /* ======== LOADING SPINNER ======== */\r\n        .loading-spinner {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: 50%;\r\n            border-top-color: var(--primary-600);\r\n            animation: spin 1s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            to { transform: rotate(360deg); }\r\n        }\r\n\r\n        /* ======== STATUS DISPLAY ======== */\r\n        .database-status, .save-status {\r\n            padding: 4px 8px;\r\n            border-radius: var(--radius-sm);\r\n            font-weight: 500;\r\n            transition: all var(--transition-normal);\r\n        }\r\n\r\n        .database-status.success {\r\n            background: var(--success-100);\r\n            color: var(--success-600);\r\n        }\r\n\r\n        .database-status.warning {\r\n            background: var(--warning-100);\r\n            color: var(--warning-600);\r\n        }\r\n\r\n        .database-status.error {\r\n            background: var(--error-100);\r\n            color: var(--error-600);\r\n        }\r\n\r\n        .save-status.loading {\r\n            background: var(--primary-100);\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .save-status.success {\r\n            background: var(--success-100);\r\n            color: var(--success-600);\r\n        }\r\n\r\n        .save-status.error {\r\n            background: var(--error-100);\r\n            color: var(--error-600);\r\n        }\r\n\r\n        /* ======== MAIN CONTAINER ======== */\r\n        .container {\r\n            max-width: 1200px;\r\n            margin: 0 auto;\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-2xl);\r\n            box-shadow:\r\n                var(--shadow-2xl),\r\n                0 0 0 1px var(--glass-border),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.5);\r\n            overflow: hidden;\r\n            backdrop-filter: blur(20px);\r\n            animation: slideInUp 0.6s ease-out;\r\n            position: relative;\r\n            z-index: 1;\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .container::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 1px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);\r\n            z-index: 1;\r\n        }\r\n\r\n        @keyframes slideInUp {\r\n            from {\r\n                opacity: 0;\r\n                transform: translate3d(0, 30px, 0);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translate3d(0, 0, 0);\r\n            }\r\n        }\r\n\r\n        /* ======== HEADER ======== */\r\n        .header {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);\r\n            color: white;\r\n            text-align: center;\r\n            padding: var(--space-8) var(--space-6);\r\n            position: relative;\r\n            overflow: hidden;\r\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        }\r\n\r\n        .header-content {\r\n            flex: 1;\r\n            text-align: center;\r\n        }\r\n\r\n        .settings-btn {\r\n            position: absolute;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            background: rgba(255, 255, 255, 0.2);\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            color: white;\r\n            padding: var(--space-3);\r\n            border-radius: var(--radius-lg);\r\n            cursor: pointer;\r\n            transition: all var(--transition-normal);\r\n            backdrop-filter: blur(10px);\r\n            font-size: 1.2rem;\r\n            width: 48px;\r\n            height: 48px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            z-index: 10;\r\n        }\r\n\r\n        .settings-btn:hover {\r\n            background: rgba(255, 255, 255, 0.3);\r\n            transform: rotate(90deg) scale(1.05);\r\n            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);\r\n        }\r\n\r\n        .header::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"grain\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"><circle cx=\"25\" cy=\"25\" r=\"1\" fill=\"white\" opacity=\"0.1\"/><circle cx=\"75\" cy=\"75\" r=\"1\" fill=\"white\" opacity=\"0.05\"/><circle cx=\"50\" cy=\"10\" r=\"0.5\" fill=\"white\" opacity=\"0.1\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23grain)\"/></svg>');\r\n            pointer-events: none;\r\n        }\r\n\r\n        .header h1 {\r\n            font-family: var(--font-secondary);\r\n            font-size: clamp(1.8rem, 4vw, 2.8rem);\r\n            font-weight: 800;\r\n            margin: 0;\r\n            position: relative;\r\n            z-index: 1;\r\n            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n            letter-spacing: 1px;\r\n            animation: headerPulse 3s ease-in-out infinite;\r\n        }\r\n\r\n        .app-title {\r\n            cursor: pointer;\r\n            transition: all var(--transition-normal);\r\n        }\r\n\r\n        .app-title:hover {\r\n            transform: scale(1.02);\r\n            text-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);\r\n        }\r\n\r\n        @keyframes headerPulse {\r\n            0%, 100% {\r\n                transform: scale(1);\r\n                text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n            }\r\n            50% {\r\n                transform: scale(1.02);\r\n                text-shadow: 0 6px 12px rgba(0, 0, 0, 0.4), 0 0 20px rgba(255, 255, 255, 0.2);\r\n            }\r\n        }\r\n\r\n        .header .subtitle {\r\n            font-size: 1rem;\r\n            opacity: 0.9;\r\n            margin-top: var(--space-2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        /* ======== NAVIGATION TABS ======== */\r\n        .tabs {\r\n            display: flex;\r\n            background: var(--glass-bg);\r\n            border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n            position: sticky;\r\n            top: 0;\r\n            z-index: 10;\r\n            backdrop-filter: blur(20px);\r\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: var(--space-4) var(--space-3);\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: transparent;\r\n            border: none;\r\n            font-family: var(--font-primary);\r\n            font-size: 0.95rem;\r\n            font-weight: 500;\r\n            color: var(--neutral-600);\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: var(--space-2);\r\n            min-height: 60px;\r\n            overflow: hidden;\r\n            border-radius: var(--radius-md) var(--radius-md) 0 0;\r\n            margin: 0 2px;\r\n        }\r\n\r\n        .tab::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\r\n            opacity: 0;\r\n            transition: opacity var(--transition-normal);\r\n        }\r\n\r\n        .tab:hover {\r\n            color: var(--primary-700);\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .tab:hover::before {\r\n            opacity: 0.05;\r\n        }\r\n\r\n        .tab.active {\r\n            color: white;\r\n            font-weight: 600;\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .tab.active::before {\r\n            opacity: 1;\r\n        }\r\n\r\n        .tab.active::after {\r\n            content: '';\r\n            position: absolute;\r\n            bottom: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 3px;\r\n            background: var(--accent-500);\r\n            z-index: 1;\r\n            box-shadow: 0 0 10px var(--accent-500);\r\n        }\r\n\r\n        .tab span, .tab i {\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .tab i {\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        /* ======== SETTINGS MODAL ======== */\r\n        .settings-modal {\r\n            display: none;\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100vw;\r\n            height: 100vh;\r\n            background: rgba(0, 0, 0, 0.7);\r\n            z-index: 10000;\r\n            backdrop-filter: blur(10px);\r\n            animation: fadeIn 0.3s ease-out;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .settings-content {\r\n            position: fixed;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            background: white;\r\n            border-radius: var(--radius-xl);\r\n            width: 90vw;\r\n            max-width: 800px;\r\n            max-height: 90vh;\r\n            overflow: hidden;\r\n            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n            backdrop-filter: blur(20px);\r\n            z-index: 10001;\r\n        }\r\n\r\n        .settings-header {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\r\n            color: white;\r\n            padding: var(--space-6);\r\n            border-radius: var(--radius-xl) var(--radius-xl) 0 0;\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n        }\r\n\r\n        .settings-header h2 {\r\n            margin: 0;\r\n            font-size: 1.5rem;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .close-settings {\r\n            background: none;\r\n            border: none;\r\n            color: white;\r\n            font-size: 1.5rem;\r\n            cursor: pointer;\r\n            padding: var(--space-2);\r\n            border-radius: var(--radius-md);\r\n            transition: all var(--transition-fast);\r\n        }\r\n\r\n        .close-settings:hover {\r\n            background: rgba(255, 255, 255, 0.2);\r\n            transform: rotate(90deg);\r\n        }\r\n\r\n        .settings-body {\r\n            padding: var(--space-6);\r\n            max-height: calc(90vh - 120px);\r\n            overflow-y: auto;\r\n            overflow-x: hidden;\r\n        }\r\n\r\n        .settings-section {\r\n            margin-bottom: var(--space-8);\r\n            padding: var(--space-5);\r\n            background: rgba(255, 255, 255, 0.5);\r\n            border-radius: var(--radius-lg);\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n        }\r\n\r\n        .settings-section h3 {\r\n            margin: 0 0 var(--space-4) 0;\r\n            color: var(--primary-600);\r\n            font-weight: 600;\r\n            font-size: 1.2rem;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n        }\r\n\r\n        .settings-tabs {\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            margin-bottom: var(--space-4);\r\n            background: rgba(255, 255, 255, 0.3);\r\n            padding: var(--space-1);\r\n            border-radius: var(--radius-md);\r\n        }\r\n\r\n        .settings-tab {\r\n            flex: 1;\r\n            padding: var(--space-3);\r\n            background: transparent;\r\n            border: none;\r\n            border-radius: var(--radius-sm);\r\n            cursor: pointer;\r\n            transition: all var(--transition-fast);\r\n            font-weight: 500;\r\n            color: var(--neutral-600);\r\n        }\r\n\r\n        .settings-tab.active {\r\n            background: white;\r\n            color: var(--primary-600);\r\n            box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        .settings-tab:hover:not(.active) {\r\n            background: rgba(255, 255, 255, 0.5);\r\n        }\r\n\r\n        .custom-field {\r\n            display: flex;\r\n            gap: var(--space-3);\r\n            align-items: center;\r\n            padding: var(--space-3);\r\n            background: white;\r\n            border-radius: var(--radius-md);\r\n            margin-bottom: var(--space-3);\r\n            border: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        .custom-field input, .custom-field select {\r\n            flex: 1;\r\n            padding: var(--space-2);\r\n            border: 1px solid var(--neutral-300);\r\n            border-radius: var(--radius-sm);\r\n            font-size: 0.9rem;\r\n        }\r\n\r\n        .delete-field-btn {\r\n            background: var(--error-500);\r\n            color: white;\r\n            border: none;\r\n            padding: var(--space-2);\r\n            border-radius: var(--radius-sm);\r\n            cursor: pointer;\r\n            transition: all var(--transition-fast);\r\n        }\r\n\r\n        .delete-field-btn:hover {\r\n            background: var(--error-600);\r\n            transform: scale(1.05);\r\n        }\r\n\r\n        .add-field-btn {\r\n            background: var(--accent-500);\r\n            color: white;\r\n            border: none;\r\n            padding: var(--space-3) var(--space-4);\r\n            border-radius: var(--radius-md);\r\n            cursor: pointer;\r\n            transition: all var(--transition-fast);\r\n            font-weight: 500;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n        }\r\n\r\n        .add-field-btn:hover {\r\n            background: var(--accent-600);\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .settings-input {\r\n            width: 100%;\r\n            padding: var(--space-3);\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            transition: all var(--transition-fast);\r\n        }\r\n\r\n        .settings-input:focus {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .help-content {\r\n            background: var(--primary-50);\r\n            border: 1px solid var(--primary-200);\r\n            border-radius: var(--radius-md);\r\n            padding: var(--space-4);\r\n            margin-top: var(--space-3);\r\n        }\r\n\r\n        .help-content h4 {\r\n            color: var(--primary-600);\r\n            margin: 0 0 var(--space-2) 0;\r\n            font-size: 1rem;\r\n        }\r\n\r\n        .help-content p {\r\n            margin: 0 0 var(--space-2) 0;\r\n            color: var(--neutral-700);\r\n            font-size: 0.9rem;\r\n        }\r\n\r\n        .help-content ul {\r\n            margin: 0;\r\n            padding-left: var(--space-4);\r\n            color: var(--neutral-700);\r\n            font-size: 0.9rem;\r\n        }\r\n\r\n        .save-settings-btn {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--secondary-600));\r\n            color: white;\r\n            border: none;\r\n            padding: var(--space-4) var(--space-8);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: all var(--transition-normal);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n            margin: var(--space-6) auto 0;\r\n        }\r\n\r\n        .save-settings-btn:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .custom-fields-container {\r\n            margin-top: var(--space-4);\r\n            padding: var(--space-4);\r\n            background: rgba(255, 255, 255, 0.3);\r\n            border-radius: var(--radius-md);\r\n            border: 1px solid rgba(255, 255, 255, 0.4);\r\n        }\r\n\r\n        .custom-fields-container h4 {\r\n            margin: 0 0 var(--space-4) 0;\r\n            color: var(--primary-600);\r\n            font-weight: 600;\r\n        }\r\n\r\n        .field-placement-modal {\r\n            display: none;\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100vw;\r\n            height: 100vh;\r\n            background: rgba(0, 0, 0, 0.5);\r\n            z-index: 20000;\r\n            backdrop-filter: blur(5px);\r\n            overflow: hidden;\r\n        }\r\n\r\n        .field-placement-content {\r\n            position: fixed;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            background: white;\r\n            border-radius: var(--radius-xl);\r\n            padding: var(--space-6);\r\n            width: 90vw;\r\n            max-width: 500px;\r\n            max-height: 90vh;\r\n            overflow-y: auto;\r\n            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);\r\n            z-index: 20001;\r\n        }\r\n\r\n        .field-placement-header {\r\n            text-align: center;\r\n            margin-bottom: var(--space-6);\r\n        }\r\n\r\n        .field-placement-header h3 {\r\n            margin: 0 0 var(--space-2) 0;\r\n            color: var(--primary-600);\r\n            font-size: 1.4rem;\r\n        }\r\n\r\n        .field-placement-header p {\r\n            margin: 0;\r\n            color: var(--neutral-600);\r\n            font-size: 0.9rem;\r\n        }\r\n\r\n        .placement-options {\r\n            display: grid;\r\n            gap: var(--space-3);\r\n            margin-bottom: var(--space-6);\r\n        }\r\n\r\n        .placement-option {\r\n            display: flex;\r\n            align-items: center;\r\n            padding: var(--space-4);\r\n            border: 2px solid var(--neutral-200);\r\n            border-radius: var(--radius-md);\r\n            cursor: pointer;\r\n            transition: all var(--transition-fast);\r\n            background: var(--neutral-50);\r\n        }\r\n\r\n        .placement-option:hover {\r\n            border-color: var(--primary-400);\r\n            background: var(--primary-50);\r\n        }\r\n\r\n        .placement-option.selected {\r\n            border-color: var(--primary-600);\r\n            background: var(--primary-100);\r\n        }\r\n\r\n        .placement-option input[type=\"radio\"] {\r\n            margin-right: var(--space-3);\r\n            scale: 1.2;\r\n        }\r\n\r\n        .placement-option-content {\r\n            flex: 1;\r\n        }\r\n\r\n        .placement-option-title {\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin-bottom: var(--space-1);\r\n        }\r\n\r\n        .placement-option-desc {\r\n            font-size: 0.85rem;\r\n            color: var(--neutral-600);\r\n        }\r\n\r\n        .field-config-section {\r\n            margin-bottom: var(--space-6);\r\n            padding: var(--space-4);\r\n            background: var(--neutral-50);\r\n            border-radius: var(--radius-md);\r\n            border: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        .field-config-section h4 {\r\n            margin: 0 0 var(--space-3) 0;\r\n            color: var(--primary-600);\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        .field-config-row {\r\n            display: grid;\r\n            grid-template-columns: 1fr 120px 80px;\r\n            gap: var(--space-3);\r\n            align-items: center;\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .field-config-row:last-child {\r\n            margin-bottom: 0;\r\n        }\r\n\r\n        .placement-actions {\r\n            display: flex;\r\n            gap: var(--space-3);\r\n            justify-content: flex-end;\r\n        }\r\n\r\n        .placement-btn {\r\n            padding: var(--space-3) var(--space-5);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            font-weight: 500;\r\n            cursor: pointer;\r\n            transition: all var(--transition-fast);\r\n        }\r\n\r\n        .placement-btn.cancel {\r\n            background: var(--neutral-200);\r\n            color: var(--neutral-700);\r\n        }\r\n\r\n        .placement-btn.cancel:hover {\r\n            background: var(--neutral-300);\r\n        }\r\n\r\n        .placement-btn.confirm {\r\n            background: var(--primary-600);\r\n            color: white;\r\n        }\r\n\r\n        .placement-btn.confirm:hover {\r\n            background: var(--primary-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        @keyframes fadeIn {\r\n            from { opacity: 0; }\r\n            to { opacity: 1; }\r\n        }\r\n\r\n        /* Responsive adjustments for settings modal */\r\n        @media (max-width: 768px) {\r\n            .settings-content {\r\n                width: 95vw;\r\n                max-height: 95vh;\r\n                margin: 0;\r\n            }\r\n\r\n            .settings-body {\r\n                padding: var(--space-4);\r\n                max-height: calc(95vh - 100px);\r\n            }\r\n\r\n            .settings-header {\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .settings-header h2 {\r\n                font-size: 1.2rem;\r\n            }\r\n\r\n            .field-placement-content {\r\n                width: 95vw;\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .field-config-row {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .placement-actions {\r\n                flex-direction: column;\r\n            }\r\n\r\n            .placement-btn {\r\n                width: 100%;\r\n            }\r\n        }\r\n\r\n        @media (max-width: 480px) {\r\n            .settings-tabs {\r\n                flex-direction: column;\r\n            }\r\n\r\n            .settings-tab {\r\n                text-align: center;\r\n            }\r\n        }\r\n\r\n        /* ======== TAB CONTENT ======== */\r\n        .tab-content {\r\n            display: none;\r\n            padding: var(--space-8) var(--space-6);\r\n            min-height: 600px;\r\n            animation: fadeIn 0.4s ease-in-out;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        @keyframes fadeIn {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(10px);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        /* ======== FORM COMPONENTS ======== */\r\n        .form-section {\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n            box-shadow:\r\n                0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n                0 2px 4px -1px rgba(0, 0, 0, 0.06),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n            backdrop-filter: blur(10px);\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            overflow: visible;\r\n        }\r\n\r\n        .form-section::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 1px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.5), transparent);\r\n        }\r\n\r\n        .form-section:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow:\r\n                0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n                0 4px 6px -2px rgba(0, 0, 0, 0.05),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .form-section h3 {\r\n            font-family: var(--font-secondary);\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin-bottom: var(--space-4);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n        }\r\n\r\n        .form-section h3 i {\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .form-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n            gap: var(--space-4);\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: var(--space-5);\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: var(--space-2);\r\n            font-weight: 500;\r\n            color: var(--neutral-700);\r\n            font-size: 0.9rem;\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.5px;\r\n        }\r\n\r\n        .form-group label.required::after {\r\n            content: '*';\r\n            color: var(--error-500);\r\n            margin-left: var(--space-1);\r\n        }\r\n\r\n        .form-control {\r\n            width: 100%;\r\n            padding: var(--space-3) var(--space-4);\r\n            border: 2px solid rgba(255, 255, 255, 0.3);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            font-family: var(--font-primary);\r\n            transition: all var(--transition-normal);\r\n            background: linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.9));\r\n            color: var(--neutral-800);\r\n            backdrop-filter: blur(10px);\r\n            position: relative;\r\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n        }\r\n\r\n        .form-control:focus {\r\n            outline: none;\r\n            border-color: #667eea;\r\n            box-shadow:\r\n                0 0 0 4px rgba(102, 126, 234, 0.2),\r\n                0 8px 16px -4px rgba(0, 0, 0, 0.15),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.5);\r\n            transform: translateY(-3px) scale(1.01);\r\n            background: rgba(255, 255, 255, 0.98);\r\n            animation: inputFocus 0.3s ease;\r\n        }\r\n\r\n        @keyframes inputFocus {\r\n            0% {\r\n                transform: translateY(0) scale(1);\r\n                box-shadow: none;\r\n            }\r\n            50% {\r\n                transform: translateY(-1px) scale(1.005);\r\n            }\r\n            100% {\r\n                transform: translateY(-3px) scale(1.01);\r\n                box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.2), 0 8px 16px -4px rgba(0, 0, 0, 0.15);\r\n            }\r\n        }\r\n\r\n        .form-control:hover {\r\n            border-color: rgba(255, 255, 255, 0.5);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .form-control:invalid {\r\n            border-color: var(--error-500);\r\n        }\r\n\r\n        .form-control:disabled {\r\n            background: var(--neutral-100);\r\n            color: var(--neutral-500);\r\n            cursor: not-allowed;\r\n        }\r\n\r\n        .form-control::placeholder {\r\n            color: var(--neutral-400);\r\n        }\r\n\r\n        .form-error {\r\n            display: none;\r\n            color: var(--error-600);\r\n            font-size: 0.875rem;\r\n            margin-top: var(--space-1);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .form-error i {\r\n            font-size: 0.8rem;\r\n        }\r\n\r\n        .form-success {\r\n            display: none;\r\n            color: var(--success-600);\r\n            font-size: 0.875rem;\r\n            margin-top: var(--space-1);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .form-success i {\r\n            font-size: 0.8rem;\r\n        }\r\n\r\n        /* ======== PURCHASE FORM STYLES ======== */\r\n        #add-purchase-form input:focus,\r\n        #add-purchase-form textarea:focus {\r\n            border-color: var(--primary-600) !important;\r\n            box-shadow: 0 0 0 3px var(--primary-100) !important;\r\n            outline: none !important;\r\n        }\r\n\r\n        #add-purchase-form input:hover,\r\n        #add-purchase-form textarea:hover {\r\n            border-color: var(--neutral-400) !important;\r\n        }\r\n\r\n        #add-purchase-form .required-field {\r\n            position: relative;\r\n        }\r\n\r\n        #add-purchase-form .required-field::after {\r\n            content: '*';\r\n            color: var(--error-500);\r\n            position: absolute;\r\n            right: 12px;\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            font-weight: bold;\r\n        }\r\n\r\n        /* ======== BUTTON COMPONENTS ======== */\r\n        .btn {\r\n            display: inline-flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: var(--space-2);\r\n            padding: var(--space-3) var(--space-6);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            font-family: var(--font-primary);\r\n            font-size: 0.95rem;\r\n            font-weight: 500;\r\n            text-decoration: none;\r\n            cursor: pointer;\r\n            transition: all var(--transition-normal);\r\n            position: relative;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            user-select: none;\r\n            min-height: 44px;\r\n            background: var(--glass-bg);\r\n            backdrop-filter: blur(10px);\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            box-shadow:\r\n                0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n                0 2px 4px -1px rgba(0, 0, 0, 0.06),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .btn::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: -100%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\r\n            transition: left var(--transition-normal);\r\n        }\r\n\r\n        .btn:hover::before {\r\n            left: 100%;\r\n        }\r\n\r\n        .btn:hover {\r\n            transform: translateY(-2px) scale(var(--bounce-scale));\r\n            box-shadow:\r\n                0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n                0 4px 6px -2px rgba(0, 0, 0, 0.05),\r\n                inset 0 1px 0 0 rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .btn:active {\r\n            transform: translateY(0) scale(0.98);\r\n        }\r\n\r\n        .btn:disabled {\r\n            opacity: 0.6;\r\n            cursor: not-allowed;\r\n            transform: none !important;\r\n        }\r\n\r\n        .btn.loading {\r\n            color: transparent;\r\n        }\r\n\r\n        .btn.loading::after {\r\n            content: '';\r\n            position: absolute;\r\n            width: 16px;\r\n            height: 16px;\r\n            top: 50%;\r\n            left: 50%;\r\n            margin-left: -8px;\r\n            margin-top: -8px;\r\n            border: 2px solid transparent;\r\n            border-top-color: currentColor;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        /* Button Variants */\r\n        .btn-primary {\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            color: white;\r\n            box-shadow:\r\n                var(--shadow-md),\r\n                0 0 25px rgba(102, 126, 234, 0.4);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .btn-primary::after {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: -100%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n            transition: left 0.5s ease;\r\n        }\r\n\r\n        .btn-primary:hover::after {\r\n            left: 100%;\r\n        }\r\n\r\n        .btn-primary::before {\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n        }\r\n\r\n        .btn-primary:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--interactive-hover), var(--primary-600));\r\n            transform: translateY(-3px) scale(var(--bounce-scale));\r\n            box-shadow:\r\n                var(--shadow-xl),\r\n                0 0 30px rgba(99, 102, 241, 0.5);\r\n        }\r\n\r\n        /* Special styling for Add Sale Record button - no hover color change */\r\n        .btn-primary.add-sale-btn:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-500));\r\n            transform: none;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-primary:active {\r\n            transform: translateY(0);\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: linear-gradient(135deg, var(--secondary-600), var(--secondary-500));\r\n            color: white;\r\n            box-shadow:\r\n                var(--shadow-md),\r\n                0 0 20px rgba(219, 39, 119, 0.3);\r\n            border: 1px solid rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .btn-secondary::before {\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\r\n        }\r\n\r\n        .btn-secondary:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--secondary-700), var(--secondary-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-accent {\r\n            background: linear-gradient(135deg, var(--accent-600), var(--accent-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-accent:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--accent-700), var(--accent-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        .btn-outline {\r\n            background: transparent;\r\n            border: 2px solid var(--primary-600);\r\n            color: var(--primary-600);\r\n        }\r\n\r\n        .btn-outline:hover:not(:disabled) {\r\n            background: var(--primary-600);\r\n            color: white;\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .btn-ghost {\r\n            background: transparent;\r\n            color: var(--neutral-600);\r\n            box-shadow: none;\r\n        }\r\n\r\n        .btn-ghost:hover:not(:disabled) {\r\n            background: var(--neutral-100);\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .btn-danger {\r\n            background: linear-gradient(135deg, var(--error-600), var(--error-500));\r\n            color: white;\r\n            box-shadow: var(--shadow-md);\r\n        }\r\n\r\n        .btn-danger:hover:not(:disabled) {\r\n            background: linear-gradient(135deg, var(--error-700), var(--error-600));\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n        }\r\n\r\n        /* Button Sizes */\r\n        .btn-sm {\r\n            padding: var(--space-2) var(--space-4);\r\n            font-size: 0.875rem;\r\n            min-height: 36px;\r\n        }\r\n\r\n        .btn-lg {\r\n            padding: var(--space-4) var(--space-8);\r\n            font-size: 1.1rem;\r\n            min-height: 52px;\r\n        }\r\n\r\n        .btn-full {\r\n            width: 100%;\r\n        }\r\n\r\n        /* Button Groups */\r\n        .btn-group {\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            margin-top: var(--space-4);\r\n        }\r\n\r\n        .btn-group .btn {\r\n            flex: 1;\r\n        }\r\n\r\n        /* ======== CARD COMPONENTS ======== */\r\n        .card {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-md);\r\n            border: 1px solid var(--neutral-200);\r\n            overflow: hidden;\r\n            transition: var(--transition-normal);\r\n        }\r\n\r\n        .card:hover {\r\n            box-shadow: var(--shadow-lg);\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .card-header {\r\n            padding: var(--space-4) var(--space-5);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n            background: var(--neutral-50);\r\n        }\r\n\r\n        .card-header h3 {\r\n            margin: 0;\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .card-body {\r\n            padding: var(--space-5);\r\n        }\r\n\r\n        .card-footer {\r\n            padding: var(--space-4) var(--space-5);\r\n            background: var(--neutral-50);\r\n            border-top: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        /* Sales Item Cards */\r\n        .sales-item {\r\n            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);\r\n            border: 1px solid var(--neutral-200);\r\n            border-left: 6px solid #667eea;\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-4);\r\n            position: relative;\r\n            transition: all var(--transition-normal);\r\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\r\n            overflow: hidden;\r\n        }\r\n\r\n        .sales-item::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            right: 0;\r\n            width: 100px;\r\n            height: 100px;\r\n            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(240, 147, 251, 0.1));\r\n            border-radius: 50%;\r\n            transform: translate(50%, -50%);\r\n            transition: all var(--transition-normal);\r\n        }\r\n\r\n        .sales-item:hover {\r\n            border-left-color: #f093fb;\r\n            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);\r\n            transform: translateX(8px) translateY(-2px);\r\n        }\r\n\r\n        .sales-item:hover::before {\r\n            width: 120px;\r\n            height: 120px;\r\n            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(240, 147, 251, 0.2));\r\n        }\r\n\r\n        .sales-item-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: start;\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: var(--neutral-800);\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            margin: 0;\r\n        }\r\n\r\n        .sales-item-info {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n            gap: var(--space-3);\r\n            margin-bottom: var(--space-3);\r\n        }\r\n\r\n        .sales-item-info-item {\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        .sales-item-info-label {\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n            color: var(--neutral-500);\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.5px;\r\n            margin-bottom: var(--space-1);\r\n        }\r\n\r\n        .sales-item-info-value {\r\n            font-size: 0.95rem;\r\n            color: var(--neutral-700);\r\n            font-weight: 500;\r\n        }\r\n\r\n        .sales-item-amount {\r\n            font-size: 1.2rem;\r\n            font-weight: 700;\r\n            color: var(--accent-600);\r\n        }\r\n\r\n        /* Dashboard Stats */\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n            gap: var(--space-5);\r\n            margin-bottom: var(--space-8);\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);\r\n            color: white;\r\n            padding: var(--space-6);\r\n            border-radius: var(--radius-xl);\r\n            text-align: center;\r\n            position: relative;\r\n            overflow: hidden;\r\n            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);\r\n            transition: all var(--transition-normal);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n        }\r\n\r\n        .stat-card::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: -50%;\r\n            right: -50%;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);\r\n        }\r\n\r\n        .stat-card:hover {\r\n            transform: translateY(-8px) scale(1.02);\r\n            box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);\r\n            animation: statCardGlow 2s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes statCardGlow {\r\n            0%, 100% {\r\n                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.4);\r\n            }\r\n            50% {\r\n                box-shadow: 0 20px 40px rgba(102, 126, 234, 0.6), 0 0 30px rgba(240, 147, 251, 0.3);\r\n            }\r\n        }\r\n\r\n        .stat-card-icon {\r\n            font-size: 2.5rem;\r\n            margin-bottom: var(--space-3);\r\n            opacity: 0.9;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 2.5rem;\r\n            font-weight: 700;\r\n            margin-bottom: var(--space-2);\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 0.95rem;\r\n            opacity: 0.9;\r\n            position: relative;\r\n            z-index: 1;\r\n        }\r\n\r\n        /* Chart Container */\r\n        .chart-container {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            box-shadow: var(--shadow-md);\r\n            border: 1px solid var(--neutral-200);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            height: 450px;\r\n            position: relative;\r\n        }\r\n\r\n        .chart-header {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: var(--space-4);\r\n            padding-bottom: var(--space-3);\r\n            border-bottom: 1px solid var(--neutral-200);\r\n        }\r\n\r\n        .chart-title {\r\n            font-size: 1.2rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        /* Customer Item Cards */\r\n        .customer-item {\r\n            background: white;\r\n            border: 1px solid var(--neutral-200);\r\n            border-left: 4px solid var(--secondary-600);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-4);\r\n            position: relative;\r\n            transition: var(--transition-normal);\r\n            box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        .customer-item:hover {\r\n            border-left-color: var(--accent-500);\r\n            box-shadow: var(--shadow-md);\r\n            transform: translateX(4px);\r\n        }\r\n\r\n        /* Empty State */\r\n        .no-data {\r\n            text-align: center;\r\n            color: var(--neutral-500);\r\n            font-style: italic;\r\n            padding: var(--space-16);\r\n            font-size: 1.1rem;\r\n            background: var(--neutral-50);\r\n            border-radius: var(--radius-lg);\r\n            border: 2px dashed var(--neutral-300);\r\n        }\r\n\r\n        .no-data i {\r\n            font-size: 3rem;\r\n            color: var(--neutral-400);\r\n            margin-bottom: var(--space-4);\r\n            display: block;\r\n        }\r\n\r\n        /* Action Buttons */\r\n        .action-buttons {\r\n            position: absolute;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            display: flex;\r\n            gap: var(--space-2);\r\n            z-index: 2;\r\n        }\r\n\r\n        .edit-btn, .delete-btn {\r\n            padding: var(--space-2) var(--space-3);\r\n            border: none;\r\n            border-radius: var(--radius-md);\r\n            cursor: pointer;\r\n            font-size: 0.8rem;\r\n            font-weight: 500;\r\n            transition: var(--transition-fast);\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-1);\r\n        }\r\n\r\n        .edit-btn {\r\n            background: var(--primary-600);\r\n            color: white;\r\n        }\r\n\r\n        .edit-btn:hover {\r\n            background: var(--primary-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .delete-btn {\r\n            background: var(--error-600);\r\n            color: white;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: var(--error-700);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        /* ======== SCROLLABLE CONTAINERS ======== */\r\n        .scrollable-container {\r\n            max-height: 650px;\r\n            overflow-y: auto;\r\n            padding-right: var(--space-2);\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-track {\r\n            background: var(--neutral-200);\r\n            border-radius: var(--radius-lg);\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-thumb {\r\n            background: linear-gradient(135deg, var(--primary-500), var(--primary-600));\r\n            border-radius: var(--radius-lg);\r\n            border: 2px solid var(--neutral-200);\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar-thumb:hover {\r\n            background: linear-gradient(135deg, var(--primary-600), var(--primary-700));\r\n        }\r\n\r\n        /* ======== SEARCH AND FILTER ======== */\r\n        .filter-section {\r\n            background: var(--neutral-50);\r\n            border: 1px solid var(--neutral-200);\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-5);\r\n            margin-bottom: var(--space-6);\r\n        }\r\n\r\n        .filter-header {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: var(--space-2);\r\n            margin-bottom: var(--space-4);\r\n        }\r\n\r\n        .filter-header h3 {\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            color: var(--neutral-800);\r\n            margin: 0;\r\n        }\r\n\r\n        .search-input {\r\n            position: relative;\r\n        }\r\n\r\n        .search-input input {\r\n            width: 100%;\r\n            padding: var(--space-3) var(--space-4) var(--space-3) var(--space-12);\r\n            border: 2px solid var(--neutral-300);\r\n            border-radius: var(--radius-md);\r\n            font-size: 1rem;\r\n            transition: var(--transition-normal);\r\n            background: white;\r\n        }\r\n\r\n        .search-input input:focus {\r\n            outline: none;\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .search-input i {\r\n            position: absolute;\r\n            left: var(--space-4);\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            color: var(--neutral-400);\r\n            font-size: 1.1rem;\r\n        }\r\n\r\n        /* ======== NOTIFICATIONS & TOASTS ======== */\r\n        .toast {\r\n            position: fixed;\r\n            top: var(--space-4);\r\n            right: var(--space-4);\r\n            background: var(--glass-bg);\r\n            border-radius: var(--radius-lg);\r\n            box-shadow:\r\n                var(--shadow-xl),\r\n                0 0 30px rgba(0, 0, 0, 0.15);\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            padding: var(--space-4);\r\n            max-width: 400px;\r\n            z-index: 1000;\r\n            transform: translateX(calc(100% + var(--space-4)));\r\n            opacity: 0;\r\n            transition: all var(--transition-normal);\r\n            backdrop-filter: blur(20px);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .toast::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 2px;\r\n            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.8), transparent);\r\n        }\r\n\r\n        .toast.show {\r\n            transform: translateX(0);\r\n            opacity: 1;\r\n            animation: toastSlideIn 0.3s ease-out;\r\n        }\r\n\r\n        @keyframes toastSlideIn {\r\n            0% {\r\n                transform: translateX(calc(100% + var(--space-4))) scale(0.9);\r\n                opacity: 0;\r\n            }\r\n            50% {\r\n                transform: translateX(-10px) scale(1.02);\r\n            }\r\n            100% {\r\n                transform: translateX(0) scale(1);\r\n                opacity: 1;\r\n            }\r\n        }\r\n\r\n        .toast-success {\r\n            border-left: 4px solid var(--success-500);\r\n            background: linear-gradient(135deg,\r\n                rgba(16, 185, 129, 0.1) 0%,\r\n                rgba(255, 255, 255, 0.95) 100%);\r\n            border: 1px solid rgba(16, 185, 129, 0.2);\r\n        }\r\n\r\n        .toast-success::after {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 4px;\r\n            height: 100%;\r\n            background: linear-gradient(180deg, var(--success-400), var(--success-600));\r\n            box-shadow: 0 0 10px var(--success-500);\r\n        }\r\n\r\n        .toast-error {\r\n            border-left: 4px solid var(--error-500);\r\n        }\r\n\r\n        .toast-warning {\r\n            border-left: 4px solid var(--warning-500);\r\n        }\r\n\r\n        .toast-info {\r\n            border-left: 4px solid var(--primary-500);\r\n        }\r\n\r\n        /* ======== RESPONSIVE DESIGN ======== */\r\n        /* Tablet Styles */\r\n        @media (max-width: 768px) {\r\n            body {\r\n                padding: var(--space-2);\r\n                font-size: 15px;\r\n            }\r\n\r\n            .container {\r\n                margin: 0;\r\n                border-radius: var(--radius-lg);\r\n                box-shadow: var(--shadow-lg);\r\n            }\r\n\r\n            .header {\r\n                padding: var(--space-5) var(--space-4);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.8rem;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                position: relative;\r\n            }\r\n\r\n            .tab {\r\n                flex: 1;\r\n                min-width: 120px;\r\n                font-size: 0.85rem;\r\n                padding: var(--space-3) var(--space-2);\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-5) var(--space-4);\r\n                min-height: 500px;\r\n            }\r\n\r\n            .form-grid {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-5);\r\n                margin-bottom: var(--space-5);\r\n            }\r\n\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .btn-group {\r\n                flex-direction: column;\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .sales-item-info {\r\n                grid-template-columns: 1fr;\r\n            }\r\n\r\n            /* Make buttons more touch-friendly */\r\n            .btn {\r\n                min-height: 48px;\r\n                padding: var(--space-3) var(--space-4);\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Customer search results */\r\n            #customer-search-results {\r\n                max-height: 250px;\r\n            }\r\n\r\n            /* Toast notifications positioning */\r\n            .toast {\r\n                top: var(--space-2);\r\n                right: var(--space-2);\r\n                left: var(--space-2);\r\n                max-width: none;\r\n            }\r\n        }\r\n\r\n        /* Mobile Styles */\r\n        @media (max-width: 480px) {\r\n            body {\r\n                padding: var(--space-1);\r\n                font-size: 14px;\r\n            }\r\n\r\n            .container {\r\n                margin: 0;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .header {\r\n                padding: var(--space-4) var(--space-3);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.5rem;\r\n                line-height: 1.2;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.85rem;\r\n                margin-top: var(--space-1);\r\n            }\r\n\r\n            .tabs {\r\n                overflow-x: auto;\r\n                flex-wrap: nowrap;\r\n                scrollbar-width: none;\r\n                -ms-overflow-style: none;\r\n                padding-bottom: 2px;\r\n                background: var(--neutral-50);\r\n                border-bottom: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tabs::-webkit-scrollbar {\r\n                display: none;\r\n            }\r\n\r\n            .tab {\r\n                min-width: 100px;\r\n                font-size: 0.8rem;\r\n                padding: var(--space-3) var(--space-2);\r\n                white-space: nowrap;\r\n                flex-shrink: 0;\r\n                gap: var(--space-1);\r\n                min-height: 65px;\r\n                flex-direction: column;\r\n                line-height: 1.1;\r\n                text-align: center;\r\n            }\r\n\r\n            .tab span {\r\n                display: block;\r\n                margin-top: var(--space-1);\r\n                font-size: 0.75rem;\r\n                line-height: 1.1;\r\n                text-align: center;\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-4) var(--space-3);\r\n                min-height: 400px;\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .form-section h3 {\r\n                font-size: 1.1rem;\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .form-group {\r\n                margin-bottom: var(--space-4);\r\n            }\r\n\r\n            .form-control {\r\n                padding: var(--space-3);\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n                border-radius: var(--radius-md);\r\n                min-height: 44px; /* iOS touch target minimum */\r\n            }\r\n\r\n            .form-control:focus {\r\n                border-width: 2px;\r\n                transform: none; /* Removes transform to prevent layout issues */\r\n            }\r\n\r\n            /* Buttons optimized for mobile */\r\n            .btn {\r\n                min-height: 50px;\r\n                padding: var(--space-4);\r\n                font-size: 1rem;\r\n                font-weight: 600;\r\n                border-radius: var(--radius-md);\r\n                width: 100%;\r\n                margin-bottom: var(--space-2);\r\n            }\r\n\r\n            .btn-group {\r\n                flex-direction: column;\r\n                width: 100%;\r\n            }\r\n\r\n            .btn-group .btn {\r\n                margin-bottom: var(--space-2);\r\n            }\r\n\r\n            /* Dashboard stats */\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-3);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: var(--space-4);\r\n                text-align: center;\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 1.8rem;\r\n            }\r\n\r\n            .stat-card p {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            /* Search input mobile optimization */\r\n            .search-input input {\r\n                padding: var(--space-3) var(--space-4) var(--space-3) var(--space-10);\r\n                font-size: 16px;\r\n                min-height: 44px;\r\n            }\r\n\r\n            .search-input i {\r\n                left: var(--space-3);\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Customer search results */\r\n            #customer-search-results {\r\n                max-height: 200px;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .customer-search-result {\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .customer-name {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            .customer-details {\r\n                font-size: 0.85rem;\r\n            }\r\n\r\n            /* Filter section */\r\n            .filter-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .filter-header h3 {\r\n                font-size: 1rem;\r\n            }\r\n\r\n            /* Sales records table/list mobile view */\r\n            .sales-item {\r\n                flex-direction: column;\r\n                padding: var(--space-4);\r\n                border-radius: var(--radius-md);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .sales-item-info {\r\n                grid-template-columns: 1fr;\r\n                gap: var(--space-2);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n\r\n            .sales-item-actions {\r\n                justify-content: stretch;\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .edit-btn, .delete-btn {\r\n                flex: 1;\r\n                min-height: 40px;\r\n                font-size: 0.85rem;\r\n            }\r\n\r\n            /* Toast notifications for mobile */\r\n            .toast {\r\n                top: var(--space-2);\r\n                right: var(--space-2);\r\n                left: var(--space-2);\r\n                max-width: none;\r\n                padding: var(--space-3);\r\n                font-size: 0.9rem;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            /* Charts container */\r\n            .chart-container {\r\n                margin: var(--space-3) 0;\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            /* Make scrollable containers touch-friendly */\r\n            .scrollable-container {\r\n                max-height: 400px;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n\r\n            .scrollable-container::-webkit-scrollbar {\r\n                width: 94px;\r\n            }\r\n        }\r\n\r\n        /* Extra small devices */\r\n        @media (max-width: 360px) {\r\n            .header h1 {\r\n                font-size: 1.35rem;\r\n            }\r\n\r\n            .tab {\r\n                min-width: 90px;\r\n                font-size: 0.7rem;\r\n                line-height: 1;\r\n            }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n                padding: var(--space-2) var(--space-2);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.7rem;\r\n                line-height: 1;\r\n            }\r\n\r\n        /* Very small screens - Show abbreviated text */\r\n        @media (max-width: 320px) {\r\n            .tab {\r\n                min-width: 75px;\r\n                padding: var(--space-2) var(--space-1);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.65rem;\r\n                line-height: 0.9;\r\n            }\r\n\r\n            /* Abbreviate long tab names for very small screens */\r\n            .tab:nth-child(1) span::after { content: \"Entry\"; }\r\n            .tab:nth-child(1) span { font-size: 0; }\r\n            .tab:nth-child(1) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(2) span::after { content: \"Recent\"; }\r\n            .tab:nth-child(2) span { font-size: 0; }\r\n            .tab:nth-child(2) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(3) span::after { content: \"Stats\"; }\r\n            .tab:nth-child(3) span { font-size: 0; }\r\n            .tab:nth-child(3) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(4) span::after { content: \"Contacts\"; }\r\n            .tab:nth-child(4) span { font-size: 0; }\r\n            .tab:nth-child(4) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(5) span::after { content: \"Charts\"; }\r\n            .tab:nth-child(5) span { font-size: 0; }\r\n            .tab:nth-child(5) span::after { font-size: 0.65rem; }\r\n        }\r\n\r\n            .tab i {\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            .btn {\r\n                min-height: 48px;\r\n                font-size: 0.9rem;\r\n            }\r\n\r\n            .dashboard-stats {\r\n                gap: var(--space-2);\r\n            }\r\n\r\n            .stat-card {\r\n                padding: var(--space-3);\r\n            }\r\n\r\n            .stat-card h3 {\r\n                font-size: 1.5rem;\r\n            }\r\n        }\r\n\r\n        /* Very small screens - Show abbreviated text */\r\n        @media (max-width: 320px) {\r\n            .tab {\r\n                min-width: 75px;\r\n                padding: var(--space-2) var(--space-1);\r\n            }\r\n\r\n            .tab span {\r\n                font-size: 0.65rem;\r\n                line-height: 0.9;\r\n            }\r\n\r\n            /* Abbreviate long tab names for very small screens */\r\n            .tab:nth-child(1) span::after { content: \"Entry\"; }\r\n            .tab:nth-child(1) span { font-size: 0; }\r\n            .tab:nth-child(1) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(2) span::after { content: \"Recent\"; }\r\n            .tab:nth-child(2) span { font-size: 0; }\r\n            .tab:nth-child(2) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(3) span::after { content: \"Stats\"; }\r\n            .tab:nth-child(3) span { font-size: 0; }\r\n            .tab:nth-child(3) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(4) span::after { content: \"Contacts\"; }\r\n            .tab:nth-child(4) span { font-size: 0; }\r\n            .tab:nth-child(4) span::after { font-size: 0.65rem; }\r\n\r\n            .tab:nth-child(5) span::after { content: \"Charts\"; }\r\n            .tab:nth-child(5) span { font-size: 0; }\r\n            .tab:nth-child(5) span::after { font-size: 0.65rem; }\r\n        }\r\n\r\n        /* Enhanced mobile navigation */\r\n        @media (max-width: 480px) {\r\n            /* Add horizontal scroll indicator */\r\n            .tabs::after {\r\n                content: '';\r\n                position: absolute;\r\n                bottom: 0;\r\n                right: 0;\r\n                width: 20px;\r\n                height: 100%;\r\n                background: linear-gradient(to right, transparent, var(--neutral-50));\r\n                pointer-events: none;\r\n                z-index: 1;\r\n            }\r\n\r\n            /* Better visual feedback for active tab */\r\n            .tab.active {\r\n                box-shadow: 0 -3px 0 var(--accent-500) inset;\r\n                background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-500) 100%);\r\n            }\r\n\r\n            /* Improve readability */\r\n            .tab {\r\n                border-right: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tab:last-child {\r\n                border-right: none;\r\n            }\r\n        }\r\n\r\n        /* Landscape orientation on mobile */\r\n        @media (max-width: 768px) and (orientation: landscape) {\r\n            .header {\r\n                padding: var(--space-3) var(--space-4);\r\n            }\r\n\r\n            .header h1 {\r\n                font-size: 1.4rem;\r\n            }\r\n\r\n            .header .subtitle {\r\n                font-size: 0.8rem;\r\n            }\r\n\r\n            .tab-content {\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .form-section {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-3);\r\n            }\r\n        }\r\n\r\n        /* ======== MOBILE-SPECIFIC ENHANCEMENTS ======== */\r\n        /* Touch-friendly interactions */\r\n        @media (hover: none) and (pointer: coarse) {\r\n            .btn {\r\n                min-height: 48px;\r\n                padding: var(--space-4);\r\n                font-size: 1rem;\r\n                font-weight: 600;\r\n            }\r\n\r\n            .form-control {\r\n                min-height: 48px;\r\n                padding: var(--space-4);\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n\r\n            .tab {\r\n                min-height: 48px;\r\n                padding: var(--space-3) var(--space-2);\r\n            }\r\n\r\n            /* Remove hover effects on touch devices */\r\n            .btn:hover,\r\n            .form-control:hover,\r\n            .tab:hover {\r\n                transform: none;\r\n            }\r\n\r\n            /* Enhanced tap targets */\r\n            .customer-search-result {\r\n                min-height: 60px;\r\n                padding: var(--space-4);\r\n            }\r\n\r\n            .edit-btn, .delete-btn {\r\n                min-height: 44px;\r\n                min-width: 80px;\r\n            }\r\n        }\r\n\r\n        /* Enhanced mobile navigation */\r\n        @media (max-width: 480px) {\r\n            /* Add horizontal scroll indicator */\r\n            .tabs::after {\r\n                content: '';\r\n                position: absolute;\r\n                bottom: 0;\r\n                right: 0;\r\n                width: 20px;\r\n                height: 100%;\r\n                background: linear-gradient(to right, transparent, var(--neutral-50));\r\n                pointer-events: none;\r\n                z-index: 1;\r\n            }\r\n\r\n            /* Better visual feedback for active tab */\r\n            .tab.active {\r\n                box-shadow: 0 -3px 0 var(--accent-500) inset;\r\n                background: linear-gradient(135deg, var(--primary-600) 0%, var(--primary-500) 100%);\r\n            }\r\n\r\n            /* Improve readability */\r\n            .tab {\r\n                border-right: 1px solid var(--neutral-200);\r\n            }\r\n\r\n            .tab:last-child {\r\n                border-right: none;\r\n            }\r\n        }\r\n\r\n        /* iOS Safari specific fixes */\r\n        @supports (-webkit-appearance: none) {\r\n            .form-control {\r\n                -webkit-appearance: none;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            select.form-control {\r\n                background-image: url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e\");\r\n                background-repeat: no-repeat;\r\n                background-position: right var(--space-3) center;\r\n                background-size: 20px;\r\n                padding-right: var(--space-12);\r\n            }\r\n        }\r\n\r\n        /* Android Chrome specific optimizations */\r\n        @media screen and (-webkit-min-device-pixel-ratio: 1) {\r\n            .form-control:focus {\r\n                zoom: 1; /* Prevent zoom on Android */\r\n            }\r\n        }\r\n\r\n        /* High DPI displays */\r\n        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\r\n            .btn, .form-control, .tab {\r\n                border-width: 0.5px;\r\n            }\r\n        }\r\n\r\n        /* Print styles */\r\n        @media print {\r\n            body {\r\n                background: white;\r\n                color: black;\r\n                font-size: 12pt;\r\n                line-height: 1.4;\r\n            }\r\n\r\n            .header {\r\n                background: none;\r\n                color: black;\r\n                border-bottom: 2px solid black;\r\n            }\r\n\r\n            .tabs, .btn {\r\n                display: none;\r\n            }\r\n\r\n            .tab-content {\r\n                display: block !important;\r\n                padding: 0;\r\n            }\r\n\r\n            .form-section {\r\n                border: 1px solid black;\r\n                margin-bottom: 20pt;\r\n                page-break-inside: avoid;\r\n            }\r\n\r\n            .container {\r\n                box-shadow: none;\r\n                border-radius: 0;\r\n            }\r\n        }\r\n\r\n        /* ======== UTILITY CLASSES ======== */\r\n        .sr-only {\r\n            position: absolute;\r\n            width: 1px;\r\n            height: 1px;\r\n            padding: 0;\r\n            margin: -1px;\r\n            overflow: hidden;\r\n            clip: rect(0, 0, 0, 0);\r\n            white-space: nowrap;\r\n            border: 0;\r\n        }\r\n\r\n        .text-center { text-align: center; }\r\n        .text-right { text-align: right; }\r\n        .text-left { text-align: left; }\r\n\r\n        .fw-bold { font-weight: 700; }\r\n        .fw-semibold { font-weight: 600; }\r\n        .fw-medium { font-weight: 500; }\r\n        .fw-normal { font-weight: 400; }\r\n\r\n        .text-primary { color: var(--primary-600); }\r\n        .text-secondary { color: var(--secondary-600); }\r\n        .text-success { color: var(--success-600); }\r\n        .text-error { color: var(--error-600); }\r\n        .text-warning { color: var(--warning-600); }\r\n        .text-muted { color: var(--neutral-500); }\r\n\r\n        .bg-primary { background-color: var(--primary-600); }\r\n        .bg-secondary { background-color: var(--secondary-600); }\r\n        .bg-success { background-color: var(--success-600); }\r\n        .bg-error { background-color: var(--error-600); }\r\n        .bg-warning { background-color: var(--warning-600); }\r\n\r\n        .mb-2 { margin-bottom: var(--space-2); }\r\n        .mb-3 { margin-bottom: var(--space-3); }\r\n        .mb-4 { margin-bottom: var(--space-4); }\r\n        .mb-6 { margin-bottom: var(--space-6); }\r\n\r\n        .mt-2 { margin-top: var(--space-2); }\r\n        .mt-3 { margin-top: var(--space-3); }\r\n        .mt-4 { margin-top: var(--space-4); }\r\n        .mt-6 { margin-top: var(--space-6); }\r\n\r\n        .edit-form {\r\n            background: #fff;\r\n            border: 2px solid #4ecdc4;\r\n            border-radius: 8px;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            position: relative;\r\n        }\r\n\r\n        .edit-form h4 {\r\n            color: #4ecdc4;\r\n            margin-bottom: 15px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .edit-form-row {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            gap: 10px;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .edit-form-group label {\r\n            display: block;\r\n            margin-bottom: 3px;\r\n            font-weight: 600;\r\n            color: #333;\r\n            font-size: 12px;\r\n        }\r\n\r\n        .edit-form-group input,\r\n        .edit-form-group select,\r\n        .edit-form-group textarea {\r\n            width: 100%;\r\n            padding: 8px;\r\n            border: 1px solid #e9ecef;\r\n            border-radius: 4px;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .edit-form-buttons {\r\n            display: flex;\r\n            gap: 10px;\r\n            margin-top: 15px;\r\n        }\r\n\r\n        .edit-form-buttons button {\r\n            flex: 1;\r\n            padding: 10px;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .save-edit-btn {\r\n            background: #28a745;\r\n            color: white;\r\n        }\r\n\r\n        .save-edit-btn:hover {\r\n            background: #218838;\r\n        }\r\n\r\n        .cancel-edit-btn {\r\n            background: #6c757d;\r\n            color: white;\r\n        }\r\n\r\n        .cancel-edit-btn:hover {\r\n            background: #5a6268;\r\n        }\r\n\r\n        /* Customer search styles */\r\n        .customer-search-result {\r\n            padding: 12px;\r\n            cursor: pointer;\r\n            border-bottom: 1px solid #eee;\r\n            border-left: 3px solid transparent;\r\n            transition: all 0.2s ease;\r\n        }\r\n\r\n        .customer-search-result:hover {\r\n            background-color: #f8f9fa;\r\n            border-left-color: #4ecdc4;\r\n            transform: translateX(2px);\r\n        }\r\n\r\n        .customer-search-result:last-child {\r\n            border-bottom: none;\r\n        }\r\n\r\n        .customer-name {\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin-bottom: 4px;\r\n            font-size: 15px;\r\n        }\r\n\r\n        .customer-details {\r\n            font-size: 12px;\r\n            color: #666;\r\n            margin-bottom: 2px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n        }\r\n\r\n        .customer-stats {\r\n            font-size: 11px;\r\n            color: #4ecdc4;\r\n            margin-top: 8px;\r\n            font-weight: 600;\r\n        }\r\n\r\n        .customer-source-badge {\r\n            font-size: 10px;\r\n            color: #999;\r\n            padding: 2px 6px;\r\n            background: #f0f0f0;\r\n            border-radius: 10px;\r\n        }\r\n\r\n        .customer-last-purchase {\r\n            font-size: 10px;\r\n            color: #999;\r\n            font-style: italic;\r\n        }\r\n\r\n        /* Enhanced search results container */\r\n        #customer-search-results {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            border-radius: 8px;\r\n            border: 1px solid #ddd;\r\n            background: white;\r\n            max-height: 300px;\r\n            overflow-y: auto;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 3px;\r\n        }\r\n\r\n        #customer-search-results::-webkit-scrollbar-thumb:hover {\r\n            background: #45b7b8;\r\n        }\r\n\r\n        /* Section headers */\r\n        .section-header {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-bottom: 15px;\r\n            padding-bottom: 8px;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .section-icon {\r\n            margin-right: 8px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        /* Additional mobile-specific styles for components */\r\n        @media (max-width: 600px) {\r\n            /* Import section responsive */\r\n            .import-section {\r\n                flex-direction: column !important;\r\n                gap: var(--space-3) !important;\r\n            }\r\n\r\n            .import-section button {\r\n                width: 100% !important;\r\n                margin-bottom: var(--space-2);\r\n                min-height: 48px;\r\n            }\r\n\r\n            /* Customer database responsive design */\r\n            .customer-info-grid {\r\n                grid-template-columns: 1fr !important;\r\n                gap: var(--space-2) !important;\r\n            }\r\n\r\n            .customer-purchase-stats {\r\n                grid-template-columns: repeat(2, 1fr) !important;\r\n                gap: var(--space-2) !important;\r\n            }\r\n\r\n            .customer-card {\r\n                padding: var(--space-4) !important;\r\n                margin-bottom: var(--space-3) !important;\r\n                border-radius: var(--radius-md);\r\n            }\r\n\r\n            .enhanced-customers-container {\r\n                max-height: 400px !important;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n\r\n            /* Sales items mobile layout */\r\n            .customer-item,\r\n            .sale-item {\r\n                padding: var(--space-4);\r\n                margin-bottom: var(--space-3);\r\n                border-radius: var(--radius-md);\r\n                border: 1px solid var(--neutral-200);\r\n                background: white;\r\n            }\r\n        }\r\n\r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n\r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n\r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n\r\n        /* ======== MOBILE-FRIENDLY MODAL/ALERT SYSTEM ======== */\r\n        .mobile-modal {\r\n            display: none;\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: rgba(0, 0, 0, 0.5);\r\n            z-index: 2000;\r\n            align-items: center;\r\n            justify-content: center;\r\n            padding: var(--space-4);\r\n        }\r\n\r\n        .mobile-modal.show {\r\n            display: flex;\r\n        }\r\n\r\n        .mobile-modal-content {\r\n            background: white;\r\n            border-radius: var(--radius-lg);\r\n            padding: var(--space-6);\r\n            max-width: 400px;\r\n            width: 100%;\r\n            max-height: 80vh;\r\n            overflow-y: auto;\r\n            box-shadow: var(--shadow-2xl);\r\n            text-align: center;\r\n            animation: modalSlideIn 0.3s ease-out;\r\n        }\r\n\r\n        @keyframes modalSlideIn {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(-20px) scale(0.95);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0) scale(1);\r\n            }\r\n        }\r\n\r\n        .mobile-modal-header {\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            margin-bottom: var(--space-4);\r\n            color: var(--neutral-800);\r\n        }\r\n\r\n        .mobile-modal-body {\r\n            margin-bottom: var(--space-6);\r\n            color: var(--neutral-700);\r\n            line-height: 1.5;\r\n            text-align: left;\r\n        }\r\n\r\n        .mobile-modal-buttons {\r\n            display: flex;\r\n            gap: var(--space-3);\r\n            justify-content: center;\r\n        }\r\n\r\n        .mobile-modal-buttons .btn {\r\n            flex: 1;\r\n            max-width: 120px;\r\n        }\r\n\r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n\r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n\r\n        /* Multi-Select Category Styles */\r\n        .multi-select-display:hover {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display:focus-within {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display.active {\r\n            border-color: var(--primary-600);\r\n            box-shadow: 0 0 0 3px var(--primary-100);\r\n        }\r\n\r\n        .multi-select-display.active #category-arrow {\r\n            transform: rotate(180deg);\r\n        }\r\n\r\n        .category-option:hover {\r\n            background-color: var(--primary-50) !important;\r\n        }\r\n\r\n        .category-option input[type=\"checkbox\"] {\r\n            accent-color: var(--primary-600);\r\n        }\r\n\r\n        .category-tag {\r\n            background: var(--primary-600);\r\n            color: white;\r\n            padding: 4px 8px;\r\n            border-radius: 12px;\r\n            font-size: 12px;\r\n            font-weight: 500;\r\n            display: inline-flex;\r\n            align-items: center;\r\n            gap: 4px;\r\n            max-width: 120px;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n        }\r\n\r\n        .category-tag .remove-tag {\r\n            background: rgba(255, 255, 255, 0.3);\r\n            border: none;\r\n            color: white;\r\n            width: 16px;\r\n            height: 16px;\r\n            border-radius: 50%;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            cursor: pointer;\r\n            font-size: 10px;\r\n            margin-left: 4px;\r\n            transition: background-color 0.2s;\r\n        }\r\n\r\n        .category-tag .remove-tag:hover {\r\n            background: rgba(255, 255, 255, 0.5);\r\n        }\r\n\r\n        /* Enhanced Multi-Select Dropdown Styles */\r\n        .multi-select-container {\r\n            position: relative;\r\n            z-index: 100;\r\n        }\r\n\r\n        .multi-select-display {\r\n            position: relative !important;\r\n            z-index: 101 !important;\r\n            pointer-events: auto !important;\r\n        }\r\n\r\n        .multi-select-display:hover {\r\n            border-color: var(--primary-600) !important;\r\n            box-shadow: 0 0 0 3px var(--primary-100) !important;\r\n        }\r\n\r\n        .multi-select-display:active {\r\n            transform: scale(0.98);\r\n        }\r\n\r\n        /* Create stacking context for dropdown */\r\n        .form-section:has(.multi-select-container) {\r\n            z-index: 100 !important;\r\n        }\r\n\r\n        .multi-select-dropdown {\r\n            animation: fadeInDown 0.3s ease-out;\r\n            z-index: 99999 !important;\r\n            position: absolute !important;\r\n            width: 100% !important;\r\n            box-shadow:\r\n                0 20px 25px -5px rgba(0, 0, 0, 0.3),\r\n                0 10px 10px -5px rgba(0, 0, 0, 0.1) !important;\r\n            border: 2px solid var(--primary-600) !important;\r\n            background: white !important;\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar {\r\n            width: 6px;\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar-track {\r\n            background: var(--neutral-100);\r\n        }\r\n\r\n        .multi-select-dropdown::-webkit-scrollbar-thumb {\r\n            background: var(--primary-600);\r\n            border-radius: 3px;\r\n        }\r\n\r\n        /* Additional dropdown positioning fixes */\r\n        .multi-select-dropdown[style*=\"display: block\"],\r\n        .multi-select-dropdown[style*=\"display: flex\"] {\r\n            position: fixed !important;\r\n            z-index: 99999 !important;\r\n            transform: translateZ(0) !important;\r\n            will-change: transform !important;\r\n        }\r\n\r\n        /* Prevent other elements from overlapping */\r\n        .form-section:not(:has(.multi-select-container)) {\r\n            z-index: 1 !important;\r\n        }\r\n\r\n        @keyframes fadeInDown {\r\n            from {\r\n                opacity: 0;\r\n                transform: translateY(-10px);\r\n            }\r\n            to {\r\n                opacity: 1;\r\n                transform: translateY(0);\r\n            }\r\n        }\r\n\r\n        /* Enhanced Sales Container Scrolling */\r\n        .enhanced-sales-container {\r\n            position: relative !important;\r\n            max-height: 600px !important;\r\n            overflow-y: auto !important;\r\n            overflow-x: hidden !important;\r\n            border: 1px solid #e9ecef !important;\r\n            border-radius: 8px !important;\r\n            background: #fafafa !important;\r\n            scrollbar-width: thin;\r\n            scrollbar-color: #4ecdc4 #f1f1f1;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 4px;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb {\r\n            background: #4ecdc4;\r\n            border-radius: 4px;\r\n            transition: background 0.3s ease;\r\n        }\r\n\r\n        .enhanced-sales-container::-webkit-scrollbar-thumb:hover {\r\n            background: #44a08d;\r\n        }\r\n\r\n        /* Purchase History Container */\r\n        .enhanced-purchase-container {\r\n            position: relative !important;\r\n            max-height: 500px !important;\r\n            overflow-y: auto !important;\r\n            overflow-x: hidden !important;\r\n            border: 1px solid #e9ecef !important;\r\n            border-radius: 8px !important;\r\n            background: #f8f9fa !important;\r\n            scrollbar-width: thin;\r\n            scrollbar-color: #667eea #f1f1f1;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar {\r\n            width: 8px;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-track {\r\n            background: #f1f1f1;\r\n            border-radius: 4px;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-thumb {\r\n            background: #667eea;\r\n            border-radius: 4px;\r\n            transition: background 0.3s ease;\r\n        }\r\n\r\n        .enhanced-purchase-container::-webkit-scrollbar-thumb:hover {\r\n            background: #764ba2;\r\n        }\r\n\r\n        /* Ensure sales records have proper layout */\r\n        #sales-records, #purchase-records {\r\n            padding: 10px !important;\r\n            min-height: 100px !important;\r\n            height: auto !important;\r\n            overflow: visible !important;\r\n        }\r\n\r\n        /* Sales and Purchase record items */\r\n        .sale-record-item, .purchase-record-item {\r\n            margin-bottom: 15px;\r\n            padding: 15px;\r\n            background: white;\r\n            border-radius: 8px;\r\n            border: 1px solid #e9ecef;\r\n            transition: all 0.2s ease;\r\n            position: relative;\r\n        }\r\n\r\n        .sale-record-item:hover, .purchase-record-item:hover {\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n            transform: translateY(-1px);\r\n        }\r\n\r\n        .purchase-record-item {\r\n            border-left: 4px solid #667eea;\r\n        }\r\n\r\n        /* Fix for parent containers that might affect scrolling */\r\n        #sales-content-container, #purchase-content-container {\r\n            overflow: visible !important;\r\n            height: auto !important;\r\n            max-height: none !important;\r\n        }\r\n\r\n        .tab-content {\r\n            overflow: visible !important;\r\n            height: auto !important;\r\n            max-height: none !important;\r\n        }\r\n\r\n        /* Collapsible sections */\r\n        .collapsible-section {\r\n            transition: all 0.3s ease;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .collapsible-section.collapsed {\r\n            max-height: 0;\r\n            padding: 0;\r\n            margin: 0;\r\n        }\r\n\r\n        .collapsible-section.expanded {\r\n            max-height: 2000px;\r\n        }\r\n\r\n        /* Toggle buttons */\r\n        .toggle-btn {\r\n            background: rgba(255,255,255,0.2);\r\n            border: none;\r\n            color: white;\r\n            font-size: 18px;\r\n            cursor: pointer;\r\n            padding: 8px 12px;\r\n            border-radius: 6px;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .toggle-btn:hover {\r\n            background: rgba(255,255,255,0.3);\r\n            transform: scale(1.1);\r\n        }\r\n\r\n        .toggle-btn.collapsed {\r\n            transform: rotate(-90deg);\r\n        }\r\n\r\n        /* Ensure proper scrolling behavior on mobile */\r\n        @media (max-width: 768px) {\r\n            .enhanced-sales-container, .enhanced-purchase-container {\r\n                max-height: 400px !important;\r\n                -webkit-overflow-scrolling: touch;\r\n            }\r\n        }\r\n\r\n        /* ======== ENHANCED VISUAL ELEMENTS ======== */\r\n        .form-section h3 i {\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n            background-clip: text;\r\n            font-size: 1.2em;\r\n            margin-right: 8px;\r\n            animation: iconShine 3s ease-in-out infinite;\r\n        }\r\n\r\n        /* Enhanced form section styling */\r\n        .form-section {\r\n            background: linear-gradient(145deg, rgba(255, 255, 255, 0.98), rgba(248, 250, 252, 0.95));\r\n            border: 1px solid rgba(255, 255, 255, 0.3);\r\n            border-radius: var(--radius-xl);\r\n            padding: var(--space-6);\r\n            margin-bottom: var(--space-6);\r\n            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);\r\n            backdrop-filter: blur(20px);\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n\r\n        .form-section::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            height: 2px;\r\n            background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);\r\n            opacity: 0.8;\r\n        }\r\n\r\n        .form-section h3 {\r\n            color: var(--neutral-800);\r\n            font-size: 1.25rem;\r\n            font-weight: 600;\r\n            margin-bottom: var(--space-4);\r\n            display: flex;\r\n            align-items: center;\r\n            padding-bottom: var(--space-3);\r\n            border-bottom: 1px solid rgba(102, 126, 234, 0.1);\r\n        }\r\n\r\n        @keyframes iconShine {\r\n            0%, 100% { opacity: 1; }\r\n            50% { opacity: 0.7; }\r\n        }\r\n\r\n\r\n\r\n        /* Progress indicators */\r\n        .progress-bar {\r\n            width: 100%;\r\n            height: 8px;\r\n            background: rgba(255, 255, 255, 0.2);\r\n            border-radius: 4px;\r\n            overflow: hidden;\r\n            margin: 10px 0;\r\n        }\r\n\r\n        .progress-fill {\r\n            height: 100%;\r\n            background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);\r\n            background-size: 200% 100%;\r\n            animation: progressShine 2s linear infinite;\r\n            transition: width 0.5s ease;\r\n        }\r\n\r\n        @keyframes progressShine {\r\n            0% { background-position: -200% 0; }\r\n            100% { background-position: 200% 0; }\r\n        }\r\n\r\n        /* Enhanced form labels */\r\n        .form-group label {\r\n            position: relative;\r\n        }\r\n\r\n        .form-group label::before {\r\n            content: '';\r\n            position: absolute;\r\n            left: -15px;\r\n            top: 50%;\r\n            transform: translateY(-50%);\r\n            width: 4px;\r\n            height: 100%;\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            border-radius: 2px;\r\n            opacity: 0;\r\n            transition: opacity 0.3s ease;\r\n        }\r\n\r\n        .form-group:focus-within label::before {\r\n            opacity: 1;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <header class=\"header\">\r\n            <button class=\"settings-btn\" onclick=\"openSettings()\" title=\"Settings\">\r\n                <i class=\"fas fa-cog\"></i>\r\n            </button>\r\n            <div class=\"header-content\">\r\n                <h1 class=\"app-title\" id=\"app-title\">💎 Theia Jewelz</h1>\r\n                <p class=\"subtitle\">Modern Sales Management System</p>\r\n            </div>\r\n        </header>\r\n\r\n        <!-- Database Status Display -->\r\n        <div class=\"status-bar\" style=\"background: var(--glass-bg); border-bottom: 1px solid var(--glass-border); padding: 8px 20px; display: flex; justify-content: space-between; align-items: center; font-size: 12px; backdrop-filter: blur(10px);\">\r\n            <div id=\"database-status\" class=\"database-status\"></div>\r\n            <div id=\"save-status\" class=\"save-status\"></div>\r\n        </div>\r\n\r\n        <!-- Settings Modal -->\r\n        <div class=\"settings-modal\" id=\"settings-modal\">\r\n            <div class=\"settings-content\">\r\n                <div class=\"settings-header\">\r\n                    <h2><i class=\"fas fa-cog\"></i> Application Settings</h2>\r\n                    <button class=\"close-settings\" onclick=\"closeSettings()\">\r\n                        <i class=\"fas fa-times\"></i>\r\n                    </button>\r\n                </div>\r\n                <div class=\"settings-body\">\r\n                    <div class=\"settings-tabs\">\r\n                        <button class=\"settings-tab active\" onclick=\"switchSettingsTab('general')\">\r\n                            <i class=\"fas fa-home\"></i> General\r\n                        </button>\r\n                        <button class=\"settings-tab\" onclick=\"switchSettingsTab('fields')\">\r\n                            <i class=\"fas fa-plus-square\"></i> Custom Fields\r\n                        </button>\r\n                        <button class=\"settings-tab\" onclick=\"switchSettingsTab('database')\">\r\n                            <i class=\"fas fa-database\"></i> Database\r\n                        </button>\r\n                        <button class=\"settings-tab\" onclick=\"switchSettingsTab('help')\">\r\n                            <i class=\"fas fa-question-circle\"></i> Help\r\n                        </button>\r\n                    </div>\r\n\r\n                    <!-- General Settings -->\r\n                    <div id=\"general-settings\" class=\"settings-section\">\r\n                        <h3><i class=\"fas fa-home\"></i> General Settings</h3>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"app-name-input\">Application Name</label>\r\n                            <input type=\"text\" id=\"app-name-input\" class=\"settings-input\" value=\"💎 Theia Jewelz\" placeholder=\"Enter app name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"company-name\">Company Name</label>\r\n                            <input type=\"text\" id=\"company-name\" class=\"settings-input\" placeholder=\"Enter your company name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"currency-symbol\">Currency Symbol</label>\r\n                            <input type=\"text\" id=\"currency-symbol\" class=\"settings-input\" value=\"₹\" placeholder=\"Enter currency symbol\">\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Custom Fields Settings -->\r\n                    <div id=\"fields-settings\" class=\"settings-section\" style=\"display: none;\">\r\n                        <h3><i class=\"fas fa-plus-square\"></i> Custom Fields Management</h3>\r\n\r\n                        <div class=\"settings-tabs\">\r\n                            <button class=\"settings-tab active\" onclick=\"switchFieldsTab('sales')\">Sales Fields</button>\r\n                            <button class=\"settings-tab\" onclick=\"switchFieldsTab('customers')\">Customer Fields</button>\r\n                            <button class=\"settings-tab\" onclick=\"switchFieldsTab('inventory')\">Inventory Fields</button>\r\n                            <button class=\"settings-tab\" onclick=\"switchFieldsTab('purchases')\">Purchase Fields</button>\r\n                        </div>\r\n\r\n                        <div id=\"sales-fields\" class=\"custom-fields-container\">\r\n                            <h4>Sales Entry Fields</h4>\r\n                            <div id=\"custom-sales-fields\"></div>\r\n                            <button class=\"add-field-btn\" onclick=\"addCustomField('sales')\">\r\n                                <i class=\"fas fa-plus\"></i> Add Sales Field\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div id=\"customers-fields\" class=\"custom-fields-container\" style=\"display: none;\">\r\n                            <h4>Customer Management Fields</h4>\r\n                            <div id=\"custom-customers-fields\"></div>\r\n                            <button class=\"add-field-btn\" onclick=\"addCustomField('customers')\">\r\n                                <i class=\"fas fa-plus\"></i> Add Customer Field\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div id=\"inventory-fields\" class=\"custom-fields-container\" style=\"display: none;\">\r\n                            <h4>Inventory Management Fields</h4>\r\n                            <div id=\"custom-inventory-fields\"></div>\r\n                            <button class=\"add-field-btn\" onclick=\"addCustomField('inventory')\">\r\n                                <i class=\"fas fa-plus\"></i> Add Inventory Field\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div id=\"purchases-fields\" class=\"custom-fields-container\" style=\"display: none;\">\r\n                            <h4>Purchase Management Fields</h4>\r\n                            <div id=\"custom-purchases-fields\"></div>\r\n                            <button class=\"add-field-btn\" onclick=\"addCustomField('purchases')\">\r\n                                <i class=\"fas fa-plus\"></i> Add Purchase Field\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Database Settings -->\r\n                    <div id=\"database-settings\" class=\"settings-section\" style=\"display: none;\">\r\n                        <h3><i class=\"fas fa-database\"></i> Database Settings</h3>\r\n                        \r\n                        <div class=\"form-group\">\r\n                            <label for=\"database-method\">Database Method</label>\r\n                            <select id=\"database-method\" class=\"settings-input\" onchange=\"changeDatabaseMethod()\">\r\n                                <option value=\"firebase\">🔥 Firebase Firestore (Recommended)</option>\r\n                                <option value=\"google-sheets\">📊 Google Sheets</option>\r\n                                <option value=\"local\">💾 Local Storage Only</option>\r\n                            </select>\r\n                            <small style=\"color: var(--neutral-500); font-size: 12px; margin-top: 5px; display: block;\">\r\n                                Choose how you want to store your sales data\r\n                            </small>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"auto-save-toggle\">Auto-save Sales</label>\r\n                            <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                                <input type=\"checkbox\" id=\"auto-save-toggle\" checked onchange=\"toggleAutoSave()\">\r\n                                <span>Automatically save sales to database</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"show-status-toggle\">Show Status</label>\r\n                            <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                                <input type=\"checkbox\" id=\"show-status-toggle\" checked onchange=\"toggleShowStatus()\">\r\n                                <span>Show database connection and save status</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"database-status-info\" style=\"background: var(--neutral-100); padding: 12px; border-radius: 6px; margin-top: 15px;\">\r\n                            <h4 style=\"margin: 0 0 8px 0; color: var(--neutral-700);\"><i class=\"fas fa-info-circle\"></i> Current Status</h4>\r\n                            <p style=\"margin: 0; font-size: 13px; color: var(--neutral-600);\">\r\n                                <strong>Method:</strong> <span id=\"current-db-method\">Firebase Firestore</span><br>\r\n                                <strong>Connection:</strong> <span id=\"current-db-status\">Connected</span><br>\r\n                                <strong>Auto-save:</strong> <span id=\"current-auto-save\">Enabled</span>\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div class=\"database-actions\" style=\"margin-top: 20px; display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                            <button class=\"btn btn-primary\" onclick=\"testDatabaseConnection()\">\r\n                                <i class=\"fas fa-plug\"></i> Test Connection\r\n                            </button>\r\n                            <button class=\"btn btn-secondary\" onclick=\"syncLocalData()\">\r\n                                <i class=\"fas fa-sync\"></i> Sync Local Data\r\n                            </button>\r\n                            <button class=\"btn btn-info\" onclick=\"downloadBackup()\">\r\n                                <i class=\"fas fa-download\"></i> Download Backup\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div class=\"database-help\" style=\"margin-top: 20px; padding: 12px; background: var(--primary-50); border-radius: 6px;\">\r\n                            <h4 style=\"margin: 0 0 8px 0; color: var(--primary-700);\"><i class=\"fas fa-lightbulb\"></i> Database Options</h4>\r\n                            <ul style=\"margin: 0; padding-left: 20px; font-size: 13px; color: var(--neutral-600);\">\r\n                                <li><strong>Firebase:</strong> Free up to 50K reads/20K writes per day. Real-time sync.</li>\r\n                                <li><strong>Google Sheets:</strong> Completely free. Easy to view/edit data.</li>\r\n                                <li><strong>Local Storage:</strong> Stores data only in your browser. No internet required.</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Help Section -->\r\n                    <div id=\"help-settings\" class=\"settings-section\" style=\"display: none;\">\r\n                        <h3><i class=\"fas fa-question-circle\"></i> Help & Documentation</h3>\r\n\r\n                        <div class=\"help-content\">\r\n                            <h4><i class=\"fas fa-plus-circle\"></i> Sales Entry Tab</h4>\r\n                            <p>This tab allows you to record new jewelry sales transactions.</p>\r\n                            <ul>\r\n                                <li><strong>Customer Details:</strong> Enter customer name, phone, and address</li>\r\n                                <li><strong>Product Details:</strong> Specify jewelry type, weight, rate, and total amount</li>\r\n                                <li><strong>Categories:</strong> Select multiple categories for combination items</li>\r\n                                <li><strong>Payment:</strong> Record payment method and any advance received</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div class=\"help-content\">\r\n                            <h4><i class=\"fas fa-list\"></i> Recent Sales Tab</h4>\r\n                            <p>View and manage all recorded sales transactions.</p>\r\n                            <ul>\r\n                                <li><strong>Search & Filter:</strong> Find specific sales by customer name or date</li>\r\n                                <li><strong>Export:</strong> Download sales data as Excel files</li>\r\n                                <li><strong>Edit/Delete:</strong> Modify or remove existing sales records</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div class=\"help-content\">\r\n                            <h4><i class=\"fas fa-chart-pie\"></i> Dashboard Tab</h4>\r\n                            <p>Visual analytics and insights about your business performance.</p>\r\n                            <ul>\r\n                                <li><strong>Sales Analytics:</strong> View daily, monthly, and yearly sales trends</li>\r\n                                <li><strong>Category Performance:</strong> See which jewelry types sell best</li>\r\n                                <li><strong>Revenue Tracking:</strong> Monitor total revenue and profit margins</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div class=\"help-content\">\r\n                            <h4><i class=\"fas fa-users\"></i> Customers Tab</h4>\r\n                            <p>Manage your customer database and relationships.</p>\r\n                            <ul>\r\n                                <li><strong>Customer Profiles:</strong> Store detailed customer information</li>\r\n                                <li><strong>Purchase History:</strong> Track all purchases by each customer</li>\r\n                                <li><strong>Contact Management:</strong> Maintain phone numbers and addresses</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div class=\"help-content\">\r\n                            <h4><i class=\"fas fa-boxes\"></i> Inventory Tab</h4>\r\n                            <p>Track and manage your jewelry stock and inventory.</p>\r\n                            <ul>\r\n                                <li><strong>Stock Levels:</strong> Monitor current inventory quantities</li>\r\n                                <li><strong>Low Stock Alerts:</strong> Get notified when items are running low</li>\r\n                                <li><strong>Product Catalog:</strong> Manage your jewelry product listings</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div class=\"help-content\">\r\n                            <h4><i class=\"fas fa-shopping-cart\"></i> Purchases Tab</h4>\r\n                            <p>Record and track inventory purchases from suppliers.</p>\r\n                            <ul>\r\n                                <li><strong>Supplier Management:</strong> Maintain supplier contact information</li>\r\n                                <li><strong>Purchase Orders:</strong> Create and track purchase orders</li>\r\n                                <li><strong>Cost Tracking:</strong> Monitor purchase costs and profit margins</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button class=\"save-settings-btn\" onclick=\"saveSettings()\">\r\n                        <i class=\"fas fa-save\"></i> Save Settings\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Field Placement Modal -->\r\n        <div class=\"field-placement-modal\" id=\"field-placement-modal\">\r\n            <div class=\"field-placement-content\">\r\n                <div class=\"field-placement-header\">\r\n                    <h3><i class=\"fas fa-map-marker-alt\"></i> Where do you want to add this field?</h3>\r\n                    <p>Choose the specific location where the new field should appear</p>\r\n                </div>\r\n\r\n                <div id=\"placement-options-container\" class=\"placement-options\">\r\n                    <!-- Options will be populated based on selected tab -->\r\n                </div>\r\n\r\n                <div class=\"field-config-section\">\r\n                    <h4><i class=\"fas fa-cog\"></i> Field Configuration</h4>\r\n                    <div class=\"field-config-row\">\r\n                        <input type=\"text\" id=\"new-field-label\" placeholder=\"Field Label (e.g., 'Special Instructions')\" style=\"padding: var(--space-2); border: 1px solid var(--neutral-300); border-radius: var(--radius-sm);\">\r\n                        <select id=\"new-field-type\" style=\"padding: var(--space-2); border: 1px solid var(--neutral-300); border-radius: var(--radius-sm);\">\r\n<!--                            <option value=\"text\">Text</option>-->\r\n                            <option value=\"number\">Number</option>\r\n                            <option value=\"email\">Email</option>\r\n                            <option value=\"phone\">Phone</option>\r\n                            <option value=\"date\">Date</option>\r\n                            <option value=\"select\">Dropdown</option>\r\n                            <option value=\"textarea\">Text Area</option>\r\n                        </select>\r\n                        <label style=\"display: flex; align-items: center; gap: 5px; font-size: 0.9rem;\">\r\n                            <input type=\"checkbox\" id=\"new-field-required\">\r\n                            Required\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"placement-actions\">\r\n                    <button class=\"placement-btn cancel\" onclick=\"closeFieldPlacementModal()\">\r\n                        <i class=\"fas fa-times\"></i> Cancel\r\n                    </button>\r\n                    <button class=\"placement-btn confirm\" onclick=\"confirmFieldPlacement()\">\r\n                        <i class=\"fas fa-plus\"></i> Add Field\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <nav class=\"tabs\" role=\"tablist\" aria-label=\"Main navigation\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\" role=\"tab\" aria-selected=\"true\" aria-controls=\"sales\">\r\n                <i class=\"fas fa-plus-circle\"></i>\r\n                <span>Sales Entry</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('recent-sales')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"recent-sales\">\r\n                <i class=\"fas fa-list\"></i>\r\n                <span>Recent Sales</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"dashboard\">\r\n                <i class=\"fas fa-chart-pie\"></i>\r\n                <span>Dashboard</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"customers\">\r\n                <i class=\"fas fa-users\"></i>\r\n                <span>Customers</span>\r\n            </button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\" role=\"tab\" aria-selected=\"false\" aria-controls=\"analytics\">\r\n                <i class=\"fas fa-chart-line\"></i>\r\n                <span>Analytics</span>\r\n            </button>\r\n        </nav>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\" role=\"tabpanel\" aria-labelledby=\"sales-tab\">\r\n            <div class=\"filter-section\">\r\n                <div class=\"filter-header\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <h3>Search Existing Customer</h3>\r\n                </div>\r\n                <div class=\"search-input\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <input type=\"text\" id=\"customerSearch\" placeholder=\"Type customer name, phone, or email to search...\"\r\n                           oninput=\"searchCustomers()\" onkeydown=\"handleSearchKeydown(event)\" autocomplete=\"off\"\r\n                           class=\"form-control\">\r\n                    <div id=\"customer-search-results\" style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                         background: white; border: 1px solid var(--neutral-300); border-top: none; border-radius: 0 0 var(--radius-md) var(--radius-md);\r\n                         max-height: 250px; overflow-y: auto; z-index: 1000; box-shadow: var(--shadow-lg);\">\r\n                    </div>\r\n                </div>\r\n                <p class=\"text-muted\" style=\"font-size: 0.875rem; margin-top: var(--space-2);\">\r\n                    <i class=\"fas fa-info-circle\"></i>\r\n                    Search from <span id=\"total-customers\" class=\"fw-semibold\">0</span> customers - includes database & sales records\r\n                </p>\r\n            </div>\r\n\r\n            <!-- Success/Error Messages -->\r\n            <div id=\"success-toast\" class=\"toast toast-success\" style=\"display: none;\">\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"fas fa-check-circle\"></i>\r\n                    <span id=\"success-message\"></span>\r\n                </div>\r\n            </div>\r\n            <div id=\"error-toast\" class=\"toast toast-error\" style=\"display: none;\">\r\n                <div style=\"display: flex; align-items: center; gap: var(--space-2);\">\r\n                    <i class=\"fas fa-exclamation-circle\"></i>\r\n                    <span id=\"error-message\"></span>\r\n                </div>\r\n            </div>\r\n\r\n            <form id=\"sales-form\" style=\"position: relative; z-index: 1;\">\r\n                <!-- Customer Information Section -->\r\n                <div class=\"form-section\">\r\n                    <h3><i class=\"fas fa-user\"></i> Customer Information</h3>\r\n                    <div class=\"form-grid\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"customerName\" class=\"required\">Customer Name</label>\r\n                            <input type=\"text\" id=\"customerName\" class=\"form-control\" required\r\n                                   placeholder=\"Enter customer name\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Customer name is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"customerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"customerPhone\" class=\"form-control\"\r\n                                   placeholder=\"Enter phone number\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"customerAddress\">Address</label>\r\n                            <textarea id=\"customerAddress\" class=\"form-control\" rows=\"2\"\r\n                                      placeholder=\"Enter customer address (optional)\"></textarea>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Item Information & Pricing Section -->\r\n                <div class=\"form-section\" style=\"z-index: 10; position: relative;\">\r\n                    <h3><i class=\"fas fa-gem\"></i> Item Information & Pricing</h3>\r\n                    <div class=\"form-grid\">\r\n                        <!-- Item Details -->\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"itemName\" class=\"required\">Item Name</label>\r\n                            <input type=\"text\" id=\"itemName\" class=\"form-control\" required\r\n                                   placeholder=\"e.g., Gold Plated Necklace\">\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Item name is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"category\" class=\"required\">Categories</label>\r\n                            <div class=\"multi-select-container\" style=\"position: relative;\">\r\n                                <div class=\"multi-select-display\" id=\"category-display\" onclick=\"Event.stopPropagation(); toggleCategoryDropdown();\" onkeydown=\"if(Event.key==='Enter'||Event.key===' '){Event.stopPropagation(); toggleCategoryDropdown();}\"\r\n                                     style=\"border: 2px solid var(--neutral-300); border-radius: var(--radius-md); padding: var(--space-3) var(--space-4);\r\n                                            background: white; cursor: pointer; min-height: 48px; display: flex; align-items: center;\r\n                                            justify-content: space-between; transition: var(--transition-normal); user-select: none;\"\r\n                                     tabindex=\"0\" role=\"button\" aria-expanded=\"false\" aria-haspopup=\"listbox\" aria-label=\"Select categories\">\r\n                                    <span id=\"category-placeholder\" style=\"color: var(--neutral-400); pointer-events: none;\">Select categories...</span>\r\n                                    <span id=\"category-selected\" style=\"display: none; flex-wrap: wrap; gap: 6px; flex: 1; pointer-events: none;\"></span>\r\n                                    <i class=\"fas fa-chevron-down\" id=\"category-arrow\" style=\"transition: transform 0.3s ease; pointer-events: none;\"></i>\r\n                                </div>\r\n\r\n                                <div class=\"multi-select-dropdown\" id=\"category-dropdown\"\r\n                                     style=\"display: none; position: absolute; top: 100%; left: 0; right: 0;\r\n                                            background: white !important; border: 2px solid var(--primary-600) !important; border-top: none;\r\n                                            border-radius: 0 0 var(--radius-md) var(--radius-md); max-height: 250px;\r\n                                            overflow-y: auto; z-index: 99999 !important;\r\n                                            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1) !important;\r\n                                            transform: translateZ(0) !important;\">\r\n\r\n                                    <div style=\"padding: 12px; border-bottom: 1px solid var(--neutral-200); background: var(--neutral-50);\">\r\n                                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                                            <button type=\"button\" onclick=\"selectAllCategories()\"\r\n                                                    style=\"background: var(--primary-600); color: white; border: none; padding: 4px 8px;\r\n                                                           border-radius: 4px; font-size: 12px; cursor: pointer;\">Select All</button>\r\n                                            <button type=\"button\" onclick=\"clearAllCategories()\"\r\n                                                    style=\"background: var(--neutral-400); color: white; border: none; padding: 4px 8px;\r\n                                                           border-radius: 4px; font-size: 12px; cursor: pointer;\">Clear All</button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"category-options\" style=\"padding: 8px;\">\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Necklaces\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>✨ Necklaces</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Earrings\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>👂 Earrings</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Bracelets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🔗 Bracelets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Rings\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>💍 Rings</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Anklets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🦶 Anklets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Sets\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>💎 Sets</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Bangles\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>⚪ Bangles</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Chains\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🔗 Chains</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Pendants\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>🏷️ Pendants</span>\r\n                                        </label>\r\n                                        <label class=\"category-option\" style=\"display: flex; align-items: center; padding: 8px; cursor: pointer;\r\n                                                                            border-radius: 4px; transition: background-color 0.2s;\">\r\n                                            <input type=\"checkbox\" value=\"Brooches\" onchange=\"updateSelectedCategories()\"\r\n                                                   style=\"margin-right: 10px;\">\r\n                                            <span>📎 Brooches</span>\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-error\" id=\"category-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Please select at least one category</span>\r\n                            </div>\r\n                            <p style=\"font-size: 12px; color: var(--neutral-500); margin-top: 5px;\">\r\n                                💡 You can select multiple categories for combination items (e.g., Necklace + Earrings set)\r\n                            </p>\r\n\r\n\r\n\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"saleDate\" class=\"required\">Sale Date</label>\r\n                            <input type=\"date\" id=\"saleDate\" class=\"form-control\" required>\r\n                            <div class=\"form-error\" style=\"display: none;\">\r\n                                <i class=\"fas fa-exclamation-triangle\"></i>\r\n                                <span>Sale date is required</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Pricing Information Separator -->\r\n                        <div style=\"grid-column: 1 / -1; margin: var(--space-4) 0; padding: var(--space-3) 0;\r\n                             border-top: 2px solid rgba(102, 126, 234, 0.1); position: relative;\">\r\n                            <div style=\"position: absolute; top: -1px; left: 50%; transform: translateX(-50%);\r\n                                 background: white; padding: 0 var(--space-3); color: #667eea; font-weight: 600; font-size: 0.9rem;\">\r\n                                <i class=\"fas fa-money-bill-wave\" style=\"margin-right: 6px;\"></i>\r\n                                Pricing Details\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Pricing Information -->\r\n                        <div class=\"form-group\">\r\n                            <label for=\"costPrice\">Cost Price (₹) *</label>\r\n                            <input type=\"number\" id=\"costPrice\" class=\"form-control\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"sellingPrice\">Selling Price (₹) *</label>\r\n                            <input type=\"number\" id=\"sellingPrice\" class=\"form-control\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" style=\"grid-column: 1 / -1;\">\r\n                            <label for=\"profit\">💰 Profit (₹)</label>\r\n                            <input type=\"number\" id=\"profit\" class=\"form-control\" readonly placeholder=\"Auto-calculated\"\r\n                                   style=\"background: linear-gradient(135deg, #d1fae5, #a7f3d0); cursor: not-allowed; font-weight: 600; color: #065f46;\">\r\n                            <div id=\"profit-display\" style=\"margin-top: 8px; padding: 12px; background: linear-gradient(135deg, #f0f9ff, #e0f2fe);\r\n                                 border-radius: 8px; border-left: 4px solid #0ea5e9; display: none;\">\r\n                                <div style=\"display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;\">\r\n                                    <div style=\"display: flex; align-items: center; gap: 8px;\">\r\n                                        <i class=\"fas fa-chart-line\" style=\"color: #0ea5e9;\"></i>\r\n                                        <span style=\"font-weight: 600; color: #0c4a6e;\">Profit Margin:</span>\r\n                                        <span id=\"profit-margin\" style=\"font-weight: 700; color: #065f46; font-size: 1.1em;\">0%</span>\r\n                                    </div>\r\n                                    <div style=\"font-size: 12px; color: #64748b;\">\r\n                                        Higher margin = Better profitability 📈\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"button\" class=\"btn btn-primary add-sale-btn\" onclick=\"addSaleRecord()\">💾 Add Sale Record</button>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n        <!-- Recent Sales Tab -->\r\n        <div id=\"recent-sales\" class=\"tab-content\">\r\n            <h2>📋 Recent Sales & Import</h2>\r\n\r\n            <!-- Select Record to Display Section -->\r\n            <div style=\"margin-bottom: 30px; padding: 20px; background: linear-gradient(135deg, #667eea, #764ba2); border-radius: 12px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                <div style=\"display: flex; align-items: center; gap: 15px; color: white;\">\r\n                    <i class=\"fas fa-filter\" style=\"font-size: 20px; color: #ffd700;\"></i>\r\n                    <div style=\"flex: 1;\">\r\n                        <label style=\"display: block; margin-bottom: 8px; font-weight: 600; font-size: 16px; color: white;\">\r\n                            Select Record to Display\r\n                        </label>\r\n                        <select id=\"record-display-selector\" onchange=\"changeRecordDisplay()\"\r\n                                style=\"width: 100%; max-width: 300px; padding: 12px; border: 2px solid rgba(255,255,255,0.3); border-radius: 8px; font-size: 14px; background: rgba(255,255,255,0.95); color: #333; font-weight: 500;\">\r\n                            <option value=\"sales-record\" selected>Sales Record</option>\r\n                            <option value=\"daily-sales-report\">Daily Sales Report</option>\r\n                            <option value=\"purchase-history\">Purchase History</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Sales Import Section -->\r\n            <div id=\"sales-import-section\" style=\"margin-bottom: 30px; padding: 20px; background: #f8f9fa; border-radius: 10px; border: 2px solid #e9ecef;\">\r\n                <h3 style=\"margin: 0 0 15px 0; color: #4ecdc4;\">📤 Bulk Import Sales</h3>\r\n                <p style=\"margin: 0 0 15px 0; color: #666; font-size: 14px;\">Import multiple sales records from CSV or Excel file</p>\r\n\r\n                <div style=\"display: flex; gap: 10px; align-items: center; flex-wrap: wrap;\" class=\"import-section\">\r\n                    <input type=\"file\" id=\"sales-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importSales(event)\">\r\n                    <button class=\"btn btn-primary\" onclick=\"document.getElementById('sales-import-file').click()\" style=\"width: auto; padding: 10px 16px; font-size: 14px;\" title=\"Import sales from CSV or Excel file\">\r\n                        📤 Import Sales Data\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"downloadSalesTemplate()\" style=\"width: auto; padding: 10px 16px; font-size: 14px; background-color: #6c757d; color: white;\" title=\"Download sample CSV template\">\r\n                        📋 Download Template\r\n                    </button>\r\n                    <small style=\"color: #666; font-size: 12px;\">Supports CSV and Excel files with required columns: Item Name, Category, Cost Price, Selling Price, Sale Date, Customer Name</small>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Recent Sales Section -->\r\n            <div id=\"sales-records-section\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">📋 Sales Records (<span id=\"sales-count\">0</span>)</h3>\r\n                            <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" class=\"toggle-btn\" title=\"Expand/Collapse Sales Records\">\r\n                                ►\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                            <button class=\"btn\" onclick=\"downloadExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                📥 Export All\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"sales-content-container\" class=\"collapsible-section collapsed\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                    <div style=\"padding: 20px;\">\r\n                        <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                            <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Sales Summary</h4>\r\n                            <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Sales</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Cost</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-selling\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling</p>\r\n                                </div>\r\n                                <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                    <h4 id=\"summary-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                    <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Profit</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <!-- Search and Filter Section -->\r\n                        <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                            <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                <div>\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Sales</label>\r\n                                    <input type=\"text\" id=\"sales-search\" placeholder=\"Search by item name, customer name, or category...\"\r\n                                           oninput=\"filterSales()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                </div>\r\n                                <div style=\"display: flex; gap: 10px;\">\r\n                                    <button onclick=\"clearSalesFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        🔄 Clear\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Sales Records Container with Enhanced Scrolling -->\r\n                        <div class=\"enhanced-sales-container\">\r\n                            <div id=\"sales-records\"></div>\r\n                            <div id=\"load-more-container\" style=\"text-align: center; padding: 20px; display: none;\">\r\n                                <button id=\"load-more-btn\" class=\"btn btn-primary\" onclick=\"loadMoreSales()\" style=\"width: auto; padding: 12px 24px; font-size: 14px; border-radius: 20px;\">\r\n                                    📖 Load More Sales\r\n                                </button>\r\n                            </div>\r\n                            <div id=\"no-sales-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                <h3 style=\"color: #999;\">📭 No Sales Records Found</h3>\r\n                                <p>Add your first sale in the Sales Entry tab or import existing data!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Daily Sales Report Section -->\r\n            <div id=\"daily-sales-report\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden; margin-bottom: 30px; display: none;\">\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <h3 style=\"margin: 0; font-size: 20px;\">📅 Daily Sales Report</h3>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"exportDailySalesReport()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-size: 12px;\">\r\n                                📥 Export Report\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"daily-sales-content\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                        <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Daily Sales Summary</h4>\r\n                        <div id=\"daily-sales-summary\" style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-sales\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Sales</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-revenue\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Revenue</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-total-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Today's Profit</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                <h4 id=\"today-avg-sale\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Sale Value</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Purchase History Section -->\r\n                <div id=\"purchase-history-section\" style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden; margin-top: 30px; display: none;\">\r\n                    <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                            <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                                <h3 style=\"margin: 0; font-size: 20px;\">📦 Purchase History (<span id=\"purchase-count\">0</span>)</h3>\r\n                                <button id=\"purchase-toggle-btn\" onclick=\"togglePurchaseSection()\" class=\"toggle-btn\" title=\"Expand/Collapse Purchase History\">\r\n                                    ►\r\n                                </button>\r\n                            </div>\r\n                            <div style=\"display: flex; gap: 10px; flex-wrap: wrap;\">\r\n                                <button class=\"btn\" onclick=\"exportPurchaseHistory()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                    📥 Export Purchases\r\n                                </button>\r\n                                <button class=\"btn\" onclick=\"addToPurchaseHistory()\" style=\"background: #10B981; color: white; border: none; width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                                    ➕ Add Purchase\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"purchase-content-container\" class=\"collapsible-section collapsed\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                        <!-- Purchase Summary -->\r\n                        <div style=\"padding: 20px;\">\r\n                            <div id=\"purchase-summary\" style=\"background: linear-gradient(45deg, #10B981, #059669); color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);\">\r\n                                <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Purchase Summary</h4>\r\n                                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;\">\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-purchases\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Items</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-purchase-cost\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Purchase Cost</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-total-selling-value\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Selling Value</p>\r\n                                    </div>\r\n                                    <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                                        <h4 id=\"summary-potential-profit\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                                        <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Potential Profit</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Purchase Search and Filter -->\r\n                            <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\">\r\n                                <div style=\"display: grid; grid-template-columns: 1fr auto; gap: 15px; align-items: end;\">\r\n                                    <div>\r\n                                        <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Purchases</label>\r\n                                        <input type=\"text\" id=\"purchase-search\" placeholder=\"Search by item name, category, or supplier...\"\r\n                                               oninput=\"filterPurchases()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                    </div>\r\n                                    <div style=\"display: flex; gap: 10px;\">\r\n                                        <button onclick=\"clearPurchaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                            🔄 Clear\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Add Purchase Form Section -->\r\n                            <div id=\"add-purchase-form\" style=\"background: #f8f9fa; border: 2px solid #e9ecef; border-radius: 10px; padding: 20px; margin-bottom: 20px; display: none;\">\r\n                                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\">\r\n                                    <h4 style=\"margin: 0; color: #333; display: flex; align-items: center; gap: 10px;\">\r\n                                        <i class=\"fas fa-plus-circle\" style=\"color: #10B981;\"></i>\r\n                                        Add New Purchase\r\n                                    </h4>\r\n                                    <button onclick=\"cancelAddPurchase()\" style=\"background: #dc3545; color: white; border: none; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                        ✕ Cancel\r\n                                    </button>\r\n                                </div>\r\n\r\n                                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;\">\r\n                                    <!-- Left Column -->\r\n                                    <div>\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-tag\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Supplier Name <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"supplier-name\" placeholder=\"Enter supplier name\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-gem\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Purchase Name (Item) <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"purchase-name\" placeholder=\"Enter item name\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-rupee-sign\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Purchase Cost <span style=\"color: #dc3545;\">*</span>\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"purchase-cost\" placeholder=\"Enter purchase cost\" min=\"0\" step=\"0.01\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <!-- Right Column -->\r\n                                    <div>\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-list\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Category\r\n                                            </label>\r\n                                            <input type=\"text\" id=\"purchase-category\" placeholder=\"e.g., Necklaces, Earrings, Rings\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-money-bill-wave\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Selling Price\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"selling-price\" placeholder=\"Enter intended selling price\" min=\"0\" step=\"0.01\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n\r\n                                        <div style=\"margin-bottom: 15px;\">\r\n                                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                                <i class=\"fas fa-sort-numeric-up\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                                Quantity\r\n                                            </label>\r\n                                            <input type=\"number\" id=\"purchase-quantity\" placeholder=\"Enter quantity\" min=\"1\" value=\"1\"\r\n                                                   style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; transition: border-color 0.3s ease;\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div style=\"margin-bottom: 20px;\">\r\n                                    <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">\r\n                                        <i class=\"fas fa-sticky-note\" style=\"color: #6366F1; margin-right: 5px;\"></i>\r\n                                        Notes (Optional)\r\n                                    </label>\r\n                                    <textarea id=\"purchase-notes\" placeholder=\"Enter any additional notes...\" rows=\"3\"\r\n                                              style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px; resize: vertical; transition: border-color 0.3s ease;\"></textarea>\r\n                                </div>\r\n\r\n                                <div style=\"display: flex; gap: 15px; justify-content: flex-end;\">\r\n                                    <button onclick=\"cancelAddPurchase()\" style=\"background: #6c757d; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 600;\">\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button onclick=\"savePurchaseFromForm()\" style=\"background: #10B981; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 600;\">\r\n                                        <i class=\"fas fa-save\" style=\"margin-right: 5px;\"></i>\r\n                                        Save Purchase\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- Purchase Records Container -->\r\n                            <div class=\"enhanced-purchase-container\">\r\n                                <div id=\"purchase-records\"></div>\r\n                                <div id=\"no-purchase-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                                    <h3 style=\"color: #999;\">📦 No Purchase Records Found</h3>\r\n                                    <p>Add your first purchase record to track inventory!</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n\r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n\r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n\r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n\r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n\r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n\r\n            <!-- Enhanced Customer Database Section -->\r\n            <div style=\"background: #fff; border-radius: 10px; border: 2px solid #e9ecef; overflow: hidden;\">\r\n                <!-- Header Section -->\r\n                <div style=\"background: linear-gradient(45deg, #667eea, #764ba2); color: white; padding: 20px;\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 0;\">\r\n                        <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                            <h3 style=\"margin: 0; font-size: 20px;\">👥 Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                            <button id=\"customer-stats-toggle\" onclick=\"toggleCustomerStats()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; font-size: 16px; cursor: pointer; padding: 8px 12px; border-radius: 6px; transition: all 0.3s ease;\" title=\"Show/Hide Customer Statistics\">\r\n                                📊 Stats\r\n                            </button>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 8px; flex-wrap: wrap;\">\r\n                            <input type=\"file\" id=\"customer-import-file\" accept=\".csv,.xlsx,.xls\" style=\"display: none;\" onchange=\"importCustomers(event)\">\r\n                            <button class=\"btn\" onclick=\"document.getElementById('customer-import-file').click()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\" title=\"Import customers from CSV or Excel file\">\r\n                                📤 Import\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomerTemplate()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📋 Template\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"downloadCustomersExcel()\" style=\"background: rgba(255,255,255,0.2); color: white; border: 1px solid rgba(255,255,255,0.3); width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                📥 Export\r\n                            </button>\r\n                            <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"background: #ff6b6b; color: white; border: none; width: auto; padding: 6px 12px; font-size: 13px;\">\r\n                                🗑️ Delete All\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customer Statistics Panel -->\r\n                <div id=\"customer-stats-panel\" style=\"display: none; background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 20px;\">\r\n                    <h4 style=\"margin: 0 0 15px 0; text-align: center; font-size: 18px;\">📊 Customer Statistics</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;\">\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total Customers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-active-customers\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Active Buyers</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-avg-orders\" style=\"margin: 0 0 5px 0; font-size: 24px;\">0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Avg Orders</p>\r\n                        </div>\r\n                        <div style=\"text-align: center; background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px;\">\r\n                            <h4 id=\"stat-total-clv\" style=\"margin: 0 0 5px 0; font-size: 24px;\">₹0</h4>\r\n                            <p style=\"font-size: 12px; opacity: 0.9; margin: 0;\">Total CLV</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Search and Filter Section -->\r\n                <div style=\"padding: 20px; background: #f8f9fa; border-bottom: 1px solid #e9ecef;\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr auto auto; gap: 15px; align-items: end;\">\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">🔍 Search Customers</label>\r\n                            <input type=\"text\" id=\"customer-database-search\" placeholder=\"Search by name, phone, email, or address...\"\r\n                                   oninput=\"filterCustomerDatabase()\" style=\"width: 100%; padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                        </div>\r\n                        <div>\r\n                            <label style=\"display: block; margin-bottom: 5px; font-weight: 600; color: #333;\">📋 Sort By</label>\r\n                            <select id=\"customer-sort-select\" onchange=\"sortCustomerDatabase()\" style=\"padding: 10px; border: 2px solid #e9ecef; border-radius: 6px; font-size: 14px;\">\r\n                                <option value=\"name-asc\">Name (A-Z)</option>\r\n                                <option value=\"name-desc\">Name (Z-A)</option>\r\n                                <option value=\"purchases-desc\">Most Purchases</option>\r\n                                <option value=\"purchases-asc\">Least Purchases</option>\r\n                                <option value=\"spending-desc\">Highest Spending</option>\r\n                                <option value=\"spending-asc\">Lowest Spending</option>\r\n                                <option value=\"recent-desc\">Recently Added</option>\r\n                                <option value=\"recent-asc\">Oldest Added</option>\r\n                            </select>\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px;\">\r\n                            <button onclick=\"clearCustomerDatabaseFilter()\" style=\"background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 14px;\">\r\n                                🔄 Clear\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Customers List Container with Enhanced UI -->\r\n                <div style=\"padding: 20px;\">\r\n                    <div id=\"customer-view-mode\" style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <div style=\"font-size: 14px; color: #666;\">\r\n                            Showing <span id=\"customers-showing\">0</span> of <span id=\"customers-total\">0</span> customers\r\n                        </div>\r\n                        <div style=\"display: flex; gap: 10px; align-items: center;\">\r\n                            <label style=\"font-size: 14px; color: #666;\">View:</label>\r\n                            <select id=\"customers-per-page\" onchange=\"changeCustomersPerPage()\" style=\"padding: 5px 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 12px;\">\r\n                                <option value=\"10\">10 per page</option>\r\n                                <option value=\"25\" selected>25 per page</option>\r\n                                <option value=\"50\">50 per page</option>\r\n                                <option value=\"100\">100 per page</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Enhanced Customer Cards Container -->\r\n                    <div class=\"enhanced-customers-container\" style=\"max-height: 500px; overflow-y: auto; background: #fafafa; border: 1px solid #e9ecef; border-radius: 8px; padding: 10px;\">\r\n                        <div id=\"customers-list-container\"></div>\r\n\r\n                        <!-- Pagination Controls -->\r\n                        <div id=\"customer-pagination\" style=\"display: flex; justify-content: center; align-items: center; gap: 10px; margin-top: 20px; padding: 15px;\">\r\n                            <button id=\"prev-customers-btn\" onclick=\"previousCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                ◀ Previous\r\n                            </button>\r\n                            <span id=\"customer-page-info\" style=\"font-size: 14px; color: #666; margin: 0 15px;\">Page 1 of 1</span>\r\n                            <button id=\"next-customers-btn\" onclick=\"nextCustomersPage()\" style=\"background: #007bff; color: white; border: none; padding: 8px 12px; border-radius: 5px; cursor: pointer; font-size: 14px;\" disabled>\r\n                                Next ▶\r\n                            </button>\r\n                        </div>\r\n\r\n                        <!-- No Customers Message -->\r\n                        <div id=\"no-customers-message\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic; display: none;\">\r\n                            <h3 style=\"color: #999;\">👥 No Customers Found</h3>\r\n                            <p>Add your first customer above or import existing customer data!</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n\r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n        let displayedSalesCount = 20; // Initial number of sales to show\r\n\r\n        // Multi-select category variables\r\n        let selectedCategories = [];\r\n        let isCategoryDropdownOpen = false;\r\n\r\n        // ======== DATABASE CONFIGURATION ========\r\n        // Database configuration object\r\n        const dbConfig = {\r\n            // Choose your preferred database method:\r\n            // 'firebase' - Firebase Firestore (recommended)\r\n            // 'google-sheets' - Google Sheets\r\n            // 'local' - Local storage only\r\n            method: 'firebase',\r\n            \r\n            // Firebase configuration\r\n            firebase: {\r\n                apiKey: \"AIzaSyBEbRfCjqEOfoLTdrCPCuGHVRIOBPIUEIg\",\r\n                authDomain: \"theiajewelz.firebaseapp.com\",\r\n                projectId: \"theiajewelz\",\r\n                storageBucket: \"theiajewelz.firebasestorage.app\",\r\n                messagingSenderId: \"328369793227\",\r\n                appId: \"1:328369793227:web:03c7cbf22b3c2f05cdd34e\",\r\n                measurementId: \"G-1BKG612HJG\"\r\n            },\r\n            \r\n            // Google Sheets configuration\r\n            googleSheets: {\r\n                scriptUrl: \"YOUR_GOOGLE_APPS_SCRIPT_URL_HERE\",\r\n                enabled: true\r\n            },\r\n            \r\n            // Auto-save settings\r\n            autoSave: true,\r\n            showSaveStatus: true\r\n        };\r\n\r\n        // Database connection objects\r\n        let firebaseApp = null;\r\n        let firestore = null;\r\n        let auth = null;\r\n\r\n        // ======== DATABASE INITIALIZATION ========\r\n        function initializeDatabase() {\r\n            console.log('🔄 Initializing database...', dbConfig.method);\r\n            \r\n            switch(dbConfig.method) {\r\n                case 'firebase':\r\n                    return initializeFirebase();\r\n                case 'google-sheets':\r\n                    return initializeGoogleSheets();\r\n                case 'local':\r\n                    return initializeLocalStorage();\r\n                default:\r\n                    console.warn('Unknown database method, falling back to local storage');\r\n                    return initializeLocalStorage();\r\n            }\r\n        }\r\n\r\n        // Initialize Firebase\r\n        function initializeFirebase() {\r\n            try {\r\n                // Check if Firebase is configured\r\n                if (!dbConfig.firebase.apiKey || dbConfig.firebase.apiKey === \"YOUR_API_KEY_HERE\") {\r\n                    console.warn('🔥 Firebase not configured, using local storage instead');\r\n                    return initializeLocalStorage();\r\n                }\r\n\r\n                // Initialize Firebase (check if already exists)\r\n                if (!firebaseApp) {\r\n                    console.log('🔥 Initializing Firebase with config:', dbConfig.firebase);\r\n                    \r\n                    // Check if Firebase app already exists\r\n                    if (firebase.apps.length === 0) {\r\n                        firebaseApp = firebase.initializeApp(dbConfig.firebase);\r\n                        console.log('🔥 Firebase initialized successfully');\r\n                    } else {\r\n                        firebaseApp = firebase.app();\r\n                        console.log('🔥 Firebase app already exists, using existing instance');\r\n                    }\r\n                    \r\n                    firestore = firebase.firestore();\r\n                    auth = firebase.auth();\r\n                    console.log('🔥 Firestore instance:', firestore);\r\n                    \r\n                    // Show connection status\r\n                    showDatabaseStatus('Firebase connected', 'success');\r\n                }\r\n                \r\n                return true;\r\n            } catch (error) {\r\n                console.error('❌ Firebase initialization error:', error);\r\n                \r\n                // Handle duplicate app error specifically\r\n                if (error.code === 'app/duplicate-app') {\r\n                    console.log('🔥 Using existing Firebase app');\r\n                    firebaseApp = firebase.app();\r\n                    firestore = firebase.firestore();\r\n                    auth = firebase.auth();\r\n                    showDatabaseStatus('Firebase connected', 'success');\r\n                    return true;\r\n                }\r\n                \r\n                alert('❌ Firebase initialization failed: ' + error.message);\r\n                showDatabaseStatus('Firebase connection failed', 'error');\r\n                return initializeLocalStorage();\r\n            }\r\n        }\r\n\r\n        // Initialize Google Sheets\r\n        function initializeGoogleSheets() {\r\n            try {\r\n                if (!dbConfig.googleSheets.scriptUrl || dbConfig.googleSheets.scriptUrl === \"YOUR_GOOGLE_APPS_SCRIPT_URL_HERE\") {\r\n                    console.warn('📊 Google Sheets not configured, using local storage instead');\r\n                    return initializeLocalStorage();\r\n                }\r\n                \r\n                console.log('📊 Google Sheets initialized');\r\n                showDatabaseStatus('Google Sheets connected', 'success');\r\n                return true;\r\n            } catch (error) {\r\n                console.error('❌ Google Sheets initialization error:', error);\r\n                showDatabaseStatus('Google Sheets connection failed', 'error');\r\n                return initializeLocalStorage();\r\n            }\r\n        }\r\n\r\n        // Initialize Local Storage\r\n        function initializeLocalStorage() {\r\n            console.log('💾 Using local storage');\r\n            showDatabaseStatus('Local storage active', 'warning');\r\n            return true;\r\n        }\r\n\r\n        // ======== DATABASE SAVE FUNCTIONS ========\r\n        async function saveToDatabase(saleData) {\r\n            if (!dbConfig.autoSave) return { success: true, message: 'Auto-save disabled' };\r\n            \r\n            console.log('💾 Saving to database:', saleData);\r\n            showSaveStatus('Saving...', 'loading');\r\n            \r\n            try {\r\n                let result;\r\n                \r\n                switch(dbConfig.method) {\r\n                    case 'firebase':\r\n                        result = await saveToFirebase(saleData);\r\n                        break;\r\n                    case 'google-sheets':\r\n                        result = await saveToGoogleSheets(saleData);\r\n                        break;\r\n                    case 'local':\r\n                    default:\r\n                        result = await saveToLocalStorage(saleData);\r\n                        break;\r\n                }\r\n                \r\n                if (result.success) {\r\n                    showSaveStatus('Saved successfully', 'success');\r\n                    console.log('✅ Save successful:', result.message);\r\n                } else {\r\n                    showSaveStatus('Save failed', 'error');\r\n                    console.error('❌ Save failed:', result.error);\r\n                }\r\n                \r\n                return result;\r\n            } catch (error) {\r\n                console.error('❌ Database save error:', error);\r\n                showSaveStatus('Save error', 'error');\r\n                return { success: false, error: error.message };\r\n            }\r\n        }\r\n\r\n        // Save to Firebase\r\n        async function saveToFirebase(saleData) {\r\n            console.log('🔥 Attempting to save to Firebase:', saleData);\r\n            \r\n            if (!firestore) {\r\n                const error = 'Firebase not initialized';\r\n                console.error('❌', error);\r\n                alert('❌ Firebase Error: ' + error);\r\n                return { success: false, error: error };\r\n            }\r\n            \r\n            try {\r\n                console.log('🔥 Firestore instance exists, saving to collection...');\r\n                const docRef = await firestore.collection('sales').add({\r\n                    ...saleData,\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    createdAt: new Date().toISOString()\r\n                });\r\n                \r\n                console.log('✅ Successfully saved to Firebase with ID:', docRef.id);\r\n                return {\r\n                    success: true,\r\n                    message: 'Saved to Firebase',\r\n                    id: docRef.id\r\n                };\r\n            } catch (error) {\r\n                console.error('❌ Firebase save error:', error);\r\n                alert('❌ Firebase Save Error: ' + error.message);\r\n                return { success: false, error: error.message };\r\n            }\r\n        }\r\n\r\n        // Save to Google Sheets\r\n        async function saveToGoogleSheets(saleData) {\r\n            if (!dbConfig.googleSheets.scriptUrl || dbConfig.googleSheets.scriptUrl === \"YOUR_GOOGLE_APPS_SCRIPT_URL_HERE\") {\r\n                return { success: false, error: 'Google Sheets not configured' };\r\n            }\r\n            \r\n            try {\r\n                const response = await fetch(dbConfig.googleSheets.scriptUrl, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(saleData)\r\n                });\r\n                \r\n                const result = await response.json();\r\n                return result;\r\n            } catch (error) {\r\n                console.error('Google Sheets save error:', error);\r\n                return { success: false, error: error.message };\r\n            }\r\n        }\r\n\r\n        // Save to Local Storage\r\n        async function saveToLocalStorage(saleData) {\r\n            try {\r\n                const existingData = JSON.parse(localStorage.getItem('theiaJewelz_sales') || '[]');\r\n                existingData.push({\r\n                    ...saleData,\r\n                    id: Date.now().toString(),\r\n                    timestamp: new Date().toISOString()\r\n                });\r\n                \r\n                localStorage.setItem('theiaJewelz_sales', JSON.stringify(existingData));\r\n                \r\n                return {\r\n                    success: true,\r\n                    message: 'Saved to local storage',\r\n                    id: saleData.id\r\n                };\r\n            } catch (error) {\r\n                console.error('Local storage save error:', error);\r\n                return { success: false, error: error.message };\r\n            }\r\n        }\r\n\r\n        // ======== DATABASE LOAD FUNCTIONS ========\r\n        async function loadFromDatabase() {\r\n            console.log('📥 Loading from database...');\r\n            \r\n            try {\r\n                let result;\r\n                \r\n                switch(dbConfig.method) {\r\n                    case 'firebase':\r\n                        result = await loadFromFirebase();\r\n                        break;\r\n                    case 'google-sheets':\r\n                        result = await loadFromGoogleSheets();\r\n                        break;\r\n                    case 'local':\r\n                    default:\r\n                        result = await loadFromLocalStorage();\r\n                        break;\r\n                }\r\n                \r\n                if (result.success && result.data) {\r\n                    salesData = result.data;\r\n                    console.log(`✅ Loaded ${salesData.length} sales records`);\r\n                    updateDashboard();\r\n                }\r\n                \r\n                return result;\r\n            } catch (error) {\r\n                console.error('❌ Database load error:', error);\r\n                return { success: false, error: error.message };\r\n            }\r\n        }\r\n\r\n        // Load from Firebase\r\n        async function loadFromFirebase() {\r\n            if (!firestore) {\r\n                return { success: false, error: 'Firebase not initialized' };\r\n            }\r\n            \r\n            try {\r\n                const snapshot = await firestore.collection('sales')\r\n                    .orderBy('timestamp', 'desc')\r\n                    .limit(1000)\r\n                    .get();\r\n                \r\n                const data = [];\r\n                snapshot.forEach(doc => {\r\n                    data.push({ id: doc.id, ...doc.data() });\r\n                });\r\n                \r\n                return {\r\n                    success: true,\r\n                    data: data,\r\n                    message: `Loaded ${data.length} records from Firebase`\r\n                };\r\n            } catch (error) {\r\n                console.error('Firebase load error:', error);\r\n                return { success: false, error: error.message };\r\n            }\r\n        }\r\n\r\n        // Load from Google Sheets\r\n        async function loadFromGoogleSheets() {\r\n            // This would require additional API setup\r\n            return { success: false, error: 'Google Sheets loading not implemented yet' };\r\n        }\r\n\r\n        // Load from Local Storage\r\n        async function loadFromLocalStorage() {\r\n            try {\r\n                const data = JSON.parse(localStorage.getItem('theiaJewelz_sales') || '[]');\r\n                return {\r\n                    success: true,\r\n                    data: data,\r\n                    message: `Loaded ${data.length} records from local storage`\r\n                };\r\n            } catch (error) {\r\n                console.error('Local storage load error:', error);\r\n                return { success: false, error: error.message };\r\n            }\r\n        }\r\n\r\n        // ======== STATUS DISPLAY FUNCTIONS ========\r\n        function showDatabaseStatus(message, type) {\r\n            if (!dbConfig.showSaveStatus) return;\r\n            \r\n            const statusDiv = document.getElementById('database-status');\r\n            if (statusDiv) {\r\n                statusDiv.textContent = message;\r\n                statusDiv.className = `database-status ${type}`;\r\n            }\r\n        }\r\n\r\n        function showSaveStatus(message, type) {\r\n            if (!dbConfig.showSaveStatus) return;\r\n            \r\n            const statusDiv = document.getElementById('save-status');\r\n            if (statusDiv) {\r\n                statusDiv.textContent = message;\r\n                statusDiv.className = `save-status ${type}`;\r\n                \r\n                // Auto-hide after 3 seconds\r\n                if (type === 'success') {\r\n                    setTimeout(() => {\r\n                        statusDiv.textContent = '';\r\n                        statusDiv.className = 'save-status';\r\n                    }, 3000);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to handle record display selection\r\n        function changeRecordDisplay() {\r\n            const selector = document.getElementById('record-display-selector');\r\n            const selectedValue = selector.value;\r\n\r\n            // Get all sections by their IDs\r\n            const salesImportSection = document.getElementById('sales-import-section');\r\n            const salesRecordSection = document.getElementById('sales-records-section');\r\n            const dailySalesReportSection = document.getElementById('daily-sales-report');\r\n            const purchaseHistorySection = document.getElementById('purchase-history-section');\r\n\r\n            // Hide all sections initially\r\n            if (salesImportSection) salesImportSection.style.display = 'none';\r\n            if (salesRecordSection) salesRecordSection.style.display = 'none';\r\n            if (dailySalesReportSection) dailySalesReportSection.style.display = 'none';\r\n            if (purchaseHistorySection) purchaseHistorySection.style.display = 'none';\r\n\r\n            // Show selected section(s)\r\n            switch(selectedValue) {\r\n                case 'sales-record':\r\n                    if (salesImportSection) salesImportSection.style.display = 'block';\r\n                    if (salesRecordSection) salesRecordSection.style.display = 'block';\r\n                    break;\r\n                case 'daily-sales-report':\r\n                    if (dailySalesReportSection) dailySalesReportSection.style.display = 'block';\r\n                    break;\r\n                case 'purchase-history':\r\n                    if (purchaseHistorySection) purchaseHistorySection.style.display = 'block';\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Initialize the display on page load\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            // Set the dropdown to sales-record (default)\r\n            const selector = document.getElementById('record-display-selector');\r\n            if (selector) {\r\n                selector.value = 'sales-record';\r\n            }\r\n\r\n            // Set initial display to show only sales records\r\n            changeRecordDisplay();\r\n        });\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n\r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n\r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n\r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Multi-Select Category Functions\r\n        function toggleCategoryDropdown(event) {\r\n            console.log('=== toggleCategoryDropdown called ===');\r\n\r\n            // Prevent event propagation if event is passed\r\n            if (event) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                event.stopImmediatePropagation();\r\n                console.log('Event propagation stopped');\r\n            }\r\n\r\n            const dropdown = document.getElementById('category-dropdown');\r\n            const display = document.getElementById('category-display');\r\n            const arrow = document.getElementById('category-arrow');\r\n\r\n            // Check if elements exist\r\n            if (!dropdown || !display || !arrow) {\r\n                console.error('Category dropdown elements not found:', {\r\n                    dropdown: !!dropdown,\r\n                    display: !!display,\r\n                    arrow: !!arrow\r\n                });\r\n                return;\r\n            }\r\n\r\n            // Use global state variable instead of computed styles\r\n            console.log('Global dropdown state (isCategoryDropdownOpen):', isCategoryDropdownOpen);\r\n            console.log('Dropdown style.display:', dropdown.style.display);\r\n            console.log('Dropdown offsetHeight:', dropdown.offsetHeight);\r\n\r\n            // Use the global state variable for more reliable state tracking\r\n            const isVisible = isCategoryDropdownOpen === true;\r\n            console.log('Is dropdown visible (based on state)?', isVisible);\r\n\r\n            if (!isVisible) {\r\n                console.log('Opening dropdown...');\r\n\r\n                // Get the position of the display element for fixed positioning\r\n                const rect = display.getBoundingClientRect();\r\n\r\n                // Force show the dropdown with fixed positioning\r\n                dropdown.style.setProperty('display', 'block', 'important');\r\n                dropdown.style.setProperty('visibility', 'visible', 'important');\r\n                dropdown.style.setProperty('opacity', '1', 'important');\r\n                dropdown.style.setProperty('position', 'fixed', 'important');\r\n                dropdown.style.setProperty('z-index', '99999', 'important');\r\n                dropdown.style.setProperty('top', rect.bottom + 'px', 'important');\r\n                dropdown.style.setProperty('left', rect.left + 'px', 'important');\r\n                dropdown.style.setProperty('width', rect.width + 'px', 'important');\r\n                dropdown.style.setProperty('background', 'white', 'important');\r\n                dropdown.style.setProperty('border', '2px solid var(--primary-600)', 'important');\r\n                dropdown.style.setProperty('border-top', 'none', 'important');\r\n                dropdown.style.setProperty('border-radius', '0 0 8px 8px', 'important');\r\n                dropdown.style.setProperty('max-height', '250px', 'important');\r\n                dropdown.style.setProperty('overflow-y', 'auto', 'important');\r\n                dropdown.style.setProperty('box-shadow', '0 10px 25px rgba(0,0,0,0.3)', 'important');\r\n\r\n                display.classList.add('active');\r\n                display.setAttribute('aria-expanded', 'true');\r\n                arrow.style.transform = 'rotate(180deg)';\r\n\r\n                // Update global state\r\n                isCategoryDropdownOpen = true;\r\n\r\n                console.log('✅ Dropdown opened successfully!');\r\n            } else {\r\n                console.log('Closing dropdown...');\r\n                dropdown.style.setProperty('display', 'none', 'important');\r\n                dropdown.style.setProperty('visibility', 'hidden', 'important');\r\n                dropdown.style.setProperty('opacity', '0', 'important');\r\n\r\n                display.classList.remove('active');\r\n                display.setAttribute('aria-expanded', 'false');\r\n                arrow.style.transform = 'rotate(0deg)';\r\n\r\n                // Update global state\r\n                isCategoryDropdownOpen = false;\r\n\r\n                console.log('✅ Dropdown closed successfully!');\r\n            }\r\n        }\r\n\r\n\r\n\r\n        function updateSelectedCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            const placeholder = document.getElementById('category-placeholder');\r\n            const selectedContainer = document.getElementById('category-selected');\r\n            const errorDiv = document.getElementById('category-error');\r\n\r\n            selectedCategories = [];\r\n            checkboxes.forEach(checkbox => {\r\n                if (checkbox.checked) {\r\n                    selectedCategories.push(checkbox.value);\r\n                }\r\n            });\r\n\r\n            // Hide error if categories are selected\r\n            if (selectedCategories.length > 0) {\r\n                errorDiv.style.display = 'none';\r\n            }\r\n\r\n            if (selectedCategories.length === 0) {\r\n                placeholder.style.display = 'block';\r\n                selectedContainer.style.display = 'none';\r\n                placeholder.textContent = 'Select categories...';\r\n            } else {\r\n                placeholder.style.display = 'none';\r\n                selectedContainer.style.display = 'flex';\r\n\r\n                selectedContainer.innerHTML = selectedCategories.map(category => {\r\n                    const icon = getCategoryIcon(category);\r\n                    return `\r\n                        <span class=\"category-tag\">\r\n                            ${icon} ${category}\r\n                            <button type=\"button\" class=\"remove-tag\" onclick=\"removeCategory('${category}')\" title=\"Remove ${category}\">\r\n                                ✕\r\n                            </button>\r\n                        </span>\r\n                    `;\r\n                }).join('');\r\n            }\r\n        }\r\n\r\n        function getCategoryIcon(category) {\r\n            const icons = {\r\n                'Necklaces': '✨',\r\n                'Earrings': '👂',\r\n                'Bracelets': '🔗',\r\n                'Rings': '💍',\r\n                'Anklets': '🦶',\r\n                'Sets': '💎',\r\n                'Bangles': '⚪',\r\n                'Chains': '🔗',\r\n                'Pendants': '🏷️',\r\n                'Brooches': '📎'\r\n            };\r\n            return icons[category] || '💎';\r\n        }\r\n\r\n        function removeCategory(categoryToRemove) {\r\n            const checkbox = document.querySelector(`input[value=\"${categoryToRemove}\"]`);\r\n            if (checkbox) {\r\n                checkbox.checked = false;\r\n                updateSelectedCategories();\r\n            }\r\n        }\r\n\r\n        function selectAllCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            checkboxes.forEach(checkbox => {\r\n                checkbox.checked = true;\r\n            });\r\n            updateSelectedCategories();\r\n        }\r\n\r\n        function clearAllCategories() {\r\n            const checkboxes = document.querySelectorAll('.category-options input[type=\"checkbox\"]');\r\n            checkboxes.forEach(checkbox => {\r\n                checkbox.checked = false;\r\n            });\r\n            updateSelectedCategories();\r\n        }\r\n\r\n        // Close dropdown when clicking outside (with small delay to prevent interference)\r\n        document.addEventListener('click', function(event) {\r\n            setTimeout(() => {\r\n                const container = document.querySelector('.multi-select-container');\r\n                const dropdown = document.getElementById('category-dropdown');\r\n\r\n                if (container && !container.contains(event.target) && dropdown) {\r\n                    const isVisible = dropdown.style.display === 'block';\r\n                    if (isVisible) {\r\n                        console.log('Closing dropdown due to outside click');\r\n                        closeDropdown();\r\n                    }\r\n                }\r\n            }, 10); // Small delay to allow click events to process\r\n        });\r\n\r\n        // Separate function to close dropdown\r\n        function closeDropdown() {\r\n            const dropdown = document.getElementById('category-dropdown');\r\n            const display = document.getElementById('category-display');\r\n            const arrow = document.getElementById('category-arrow');\r\n\r\n            if (dropdown && display && arrow) {\r\n                dropdown.style.setProperty('display', 'none', 'important');\r\n                dropdown.style.setProperty('visibility', 'hidden', 'important');\r\n                dropdown.style.setProperty('opacity', '0', 'important');\r\n                display.classList.remove('active');\r\n                display.setAttribute('aria-expanded', 'false');\r\n                arrow.style.transform = 'rotate(0deg)';\r\n                isCategoryDropdownOpen = false;\r\n                console.log('Dropdown closed via closeDropdown()');\r\n            }\r\n        }\r\n\r\n        // Separate function to open dropdown\r\n        function openDropdown() {\r\n            const dropdown = document.getElementById('category-dropdown');\r\n            const display = document.getElementById('category-display');\r\n            const arrow = document.getElementById('category-arrow');\r\n\r\n            if (dropdown && display && arrow) {\r\n                // Position dropdown correctly\r\n                const rect = display.getBoundingClientRect();\r\n                const viewportHeight = window.innerHeight;\r\n                const dropdownHeight = 250;\r\n\r\n                if (rect.bottom + dropdownHeight > viewportHeight) {\r\n                    dropdown.style.top = 'auto';\r\n                    dropdown.style.bottom = '100%';\r\n                    dropdown.style.borderRadius = 'var(--radius-md) var(--radius-md) 0 0';\r\n                    dropdown.style.borderTop = '2px solid var(--primary-600)';\r\n                    dropdown.style.borderBottom = 'none';\r\n                } else {\r\n                    dropdown.style.top = '100%';\r\n                    dropdown.style.bottom = 'auto';\r\n                    dropdown.style.borderRadius = '0 0 var(--radius-md) var(--radius-md)';\r\n                    dropdown.style.borderTop = 'none';\r\n                    dropdown.style.borderBottom = '2px solid var(--primary-600)';\r\n                }\r\n\r\n                dropdown.style.display = 'block';\r\n                dropdown.style.visibility = 'visible';\r\n                dropdown.style.opacity = '1';\r\n                display.classList.add('active');\r\n                display.setAttribute('aria-expanded', 'true');\r\n                arrow.style.transform = 'rotate(180deg)';\r\n                dropdown.style.zIndex = '99999';\r\n                dropdown.style.position = 'absolute';\r\n                isCategoryDropdownOpen = true;\r\n                console.log('Dropdown opened');\r\n            }\r\n        }\r\n\r\n        // Initialize Collapsible Sections\r\n        function initializeCollapsibleSections() {\r\n            // Initialize Sales Section as collapsed\r\n            const salesContainer = document.getElementById('sales-content-container');\r\n            const salesToggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (salesContainer && salesToggleBtn) {\r\n                salesContainer.classList.add('collapsed');\r\n                salesToggleBtn.textContent = '►';\r\n                salesToggleBtn.classList.add('collapsed');\r\n                salesToggleBtn.title = 'Expand Sales Records';\r\n            }\r\n\r\n            // Initialize Purchase History Section as collapsed\r\n            const purchaseContainer = document.getElementById('purchase-content-container');\r\n            const purchaseToggleBtn = document.getElementById('purchase-toggle-btn');\r\n\r\n            if (purchaseContainer && purchaseToggleBtn) {\r\n                purchaseContainer.classList.add('collapsed');\r\n                purchaseToggleBtn.textContent = '►';\r\n                purchaseToggleBtn.classList.add('collapsed');\r\n                purchaseToggleBtn.title = 'Expand Purchase History';\r\n            }\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n\r\n            if (container.classList.contains('collapsed')) {\r\n                container.classList.remove('collapsed');\r\n                container.classList.add('expanded');\r\n                toggleBtn.textContent = '▼';\r\n                toggleBtn.classList.remove('collapsed');\r\n                toggleBtn.title = 'Collapse Sales Records';\r\n                // Load sales data when expanded\r\n                loadSalesRecords();\r\n            } else {\r\n                container.classList.remove('expanded');\r\n                container.classList.add('collapsed');\r\n                toggleBtn.textContent = '►';\r\n                toggleBtn.classList.add('collapsed');\r\n                toggleBtn.title = 'Expand Sales Records';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize category dropdown\r\n        function initializeCategoryDropdown() {\r\n            console.log('Initializing category dropdown...');\r\n\r\n            // Ensure dropdown starts hidden\r\n            const dropdown = document.getElementById('category-dropdown');\r\n            const display = document.getElementById('category-display');\r\n            const arrow = document.getElementById('category-arrow');\r\n\r\n            if (dropdown && display) {\r\n                console.log('Dropdown display before init:', `\"${dropdown.style.display}\"`);\r\n                console.log('Dropdown offsetHeight before init:', dropdown.offsetHeight);\r\n\r\n                // Force complete reset of dropdown state\r\n                dropdown.style.removeProperty('display');\r\n                dropdown.style.removeProperty('visibility');\r\n                dropdown.style.removeProperty('opacity');\r\n                dropdown.style.removeProperty('position');\r\n                dropdown.style.removeProperty('top');\r\n                dropdown.style.removeProperty('left');\r\n                dropdown.style.removeProperty('width');\r\n                dropdown.style.removeProperty('z-index');\r\n\r\n                // Set initial hidden state\r\n                dropdown.style.setProperty('display', 'none', 'important');\r\n                dropdown.style.setProperty('visibility', 'hidden', 'important');\r\n\r\n                // Reset display element\r\n                dropdown.style.setProperty('opacity', '0', 'important');\r\n                display.classList.remove('active');\r\n                display.setAttribute('aria-expanded', 'false');\r\n\r\n                // Reset arrow\r\n                if (arrow) {\r\n                    arrow.style.transform = 'rotate(0deg)';\r\n                }\r\n\r\n                // Reset global state\r\n                isCategoryDropdownOpen = false;\r\n\r\n                console.log('Dropdown display after init:', `\"${dropdown.style.display}\"`);\r\n                console.log('Dropdown offsetHeight after init:', dropdown.offsetHeight);\r\n                console.log('Dropdown initialized in closed state');\r\n\r\n                // Alternative click event binding as fallback\r\n                display.addEventListener('click', function(e) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    e.stopImmediatePropagation();\r\n                    console.log('Category display clicked via event listener');\r\n                    toggleCategoryDropdown();\r\n                });\r\n\r\n                // Touch event for mobile\r\n                display.addEventListener('touchstart', function(e) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    e.stopImmediatePropagation();\r\n                    console.log('Category display touched');\r\n                    toggleCategoryDropdown();\r\n                });\r\n\r\n                // Prevent clicks inside dropdown from propagating and closing it\r\n                dropdown.addEventListener('click', function(e) {\r\n                    e.stopPropagation();\r\n                    console.log('Click inside dropdown - prevented propagation');\r\n                });\r\n\r\n                console.log('Category dropdown event listeners attached');\r\n            } else {\r\n                console.error('Category dropdown elements not found!', {\r\n                    dropdown: !!dropdown,\r\n                    display: !!display\r\n                });\r\n            }\r\n        }\r\n\r\n        // ======== SETTINGS FUNCTIONALITY ========\r\n        let customFields = {\r\n            sales: [],\r\n            customers: [],\r\n            inventory: [],\r\n            purchases: []\r\n        };\r\n\r\n        // Load settings from localStorage\r\n        function loadSettings() {\r\n            const savedSettings = localStorage.getItem('theiaJewelzSettings');\r\n            if (savedSettings) {\r\n                try {\r\n                    const settings = JSON.parse(savedSettings);\r\n\r\n                    // Load app name\r\n                    if (settings.appName) {\r\n                        document.getElementById('app-title').textContent = settings.appName;\r\n                        document.getElementById('app-name-input').value = settings.appName;\r\n                    }\r\n\r\n                    // Load custom fields\r\n                    if (settings.customFields) {\r\n                        customFields = settings.customFields;\r\n                        renderCustomFields();\r\n                    }\r\n\r\n                    // Load other settings\r\n                    if (settings.companyName) {\r\n                        document.getElementById('company-name').value = settings.companyName;\r\n                    }\r\n                    if (settings.currencySymbol) {\r\n                        document.getElementById('currency-symbol').value = settings.currencySymbol;\r\n                    }\r\n                    \r\n                    // Load database settings\r\n                    if (settings.database) {\r\n                        dbConfig.method = settings.database.method || 'firebase';\r\n                        dbConfig.autoSave = settings.database.autoSave !== undefined ? settings.database.autoSave : true;\r\n                        dbConfig.showSaveStatus = settings.database.showSaveStatus !== undefined ? settings.database.showSaveStatus : true;\r\n                        \r\n                        // Update UI elements\r\n                        const methodSelect = document.getElementById('database-method');\r\n                        const autoSaveToggle = document.getElementById('auto-save-toggle');\r\n                        const showStatusToggle = document.getElementById('show-status-toggle');\r\n                        \r\n                        if (methodSelect) methodSelect.value = dbConfig.method;\r\n                        if (autoSaveToggle) autoSaveToggle.checked = dbConfig.autoSave;\r\n                        if (showStatusToggle) showStatusToggle.checked = dbConfig.showSaveStatus;\r\n                        \r\n                        // Update status displays\r\n                        document.getElementById('current-db-method').textContent = \r\n                            dbConfig.method === 'firebase' ? 'Firebase Firestore' :\r\n                            dbConfig.method === 'google-sheets' ? 'Google Sheets' :\r\n                            'Local Storage';\r\n                        document.getElementById('current-auto-save').textContent = \r\n                            dbConfig.autoSave ? 'Enabled' : 'Disabled';\r\n                        \r\n                        // Show/hide status bar\r\n                        const statusBar = document.querySelector('.status-bar');\r\n                        if (statusBar) {\r\n                            statusBar.style.display = dbConfig.showSaveStatus ? 'flex' : 'none';\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error loading settings:', error);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Save settings to localStorage\r\n        function saveSettings() {\r\n            const settings = {\r\n                appName: document.getElementById('app-name-input').value,\r\n                companyName: document.getElementById('company-name').value,\r\n                currencySymbol: document.getElementById('currency-symbol').value,\r\n                customFields: customFields,\r\n                database: {\r\n                    method: dbConfig.method,\r\n                    autoSave: dbConfig.autoSave,\r\n                    showSaveStatus: dbConfig.showSaveStatus\r\n                }\r\n            };\r\n\r\n            localStorage.setItem('theiaJewelzSettings', JSON.stringify(settings));\r\n\r\n            // Update app title in header\r\n            document.getElementById('app-title').textContent = settings.appName;\r\n\r\n            // Apply custom fields to forms\r\n            applyCustomFieldsToForms();\r\n\r\n            showSuccess('✅ Settings saved successfully! Custom fields have been applied to forms.');\r\n            closeSettings();\r\n        }\r\n\r\n        // Open settings modal\r\n        function openSettings() {\r\n            const modal = document.getElementById('settings-modal');\r\n            modal.style.display = 'block';\r\n\r\n            // Prevent body scrolling and ensure proper positioning\r\n            document.body.style.overflow = 'hidden';\r\n            document.body.style.position = 'fixed';\r\n            document.body.style.width = '100%';\r\n\r\n            // Force reflow to ensure proper centering\r\n            setTimeout(() => {\r\n                modal.style.display = 'block';\r\n            }, 10);\r\n\r\n            loadSettings();\r\n        }\r\n\r\n        // Close settings modal\r\n        function closeSettings() {\r\n            document.getElementById('settings-modal').style.display = 'none';\r\n\r\n            // Restore body scrolling\r\n            document.body.style.overflow = '';\r\n            document.body.style.position = '';\r\n            document.body.style.width = '';\r\n        }\r\n\r\n        // Switch between settings tabs\r\n        function switchSettingsTab(tabName) {\r\n            // Hide all sections\r\n            document.getElementById('general-settings').style.display = 'none';\r\n            document.getElementById('database-settings').style.display = 'none';\r\n            document.getElementById('fields-settings').style.display = 'none';\r\n            document.getElementById('help-settings').style.display = 'none';\r\n\r\n            // Remove active class from all tabs\r\n            document.querySelectorAll('.settings-tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            // Show selected section and activate tab\r\n            document.getElementById(tabName + '-settings').style.display = 'block';\r\n            event.target.classList.add('active');\r\n        }\r\n\r\n        // Switch between custom fields tabs\r\n        function switchFieldsTab(tabName) {\r\n            // Hide all fields containers\r\n            document.querySelectorAll('.custom-fields-container').forEach(container => {\r\n                container.style.display = 'none';\r\n            });\r\n\r\n            // Remove active class from fields tabs\r\n            document.querySelectorAll('#fields-settings .settings-tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            // Show selected container and activate tab\r\n            document.getElementById(tabName + '-fields').style.display = 'block';\r\n            event.target.classList.add('active');\r\n        }\r\n\r\n        // Add custom field - Show placement modal\r\n        function addCustomField(tabType) {\r\n            currentFieldTab = tabType;\r\n            showFieldPlacementModal(tabType);\r\n        }\r\n\r\n        let currentFieldTab = '';\r\n        let selectedPlacement = '';\r\n\r\n        // Show field placement modal\r\n        function showFieldPlacementModal(tabType) {\r\n            const modal = document.getElementById('field-placement-modal');\r\n            const optionsContainer = document.getElementById('placement-options-container');\r\n\r\n            // Clear previous options\r\n            optionsContainer.innerHTML = '';\r\n\r\n            // Define placement options based on tab type\r\n            const placementOptions = getPlacementOptions(tabType);\r\n\r\n            placementOptions.forEach((option, index) => {\r\n                const optionHTML = `\r\n                    <div class=\"placement-option\" onclick=\"selectPlacement('${option.id}')\">\r\n                        <input type=\"radio\" name=\"placement\" value=\"${option.id}\" id=\"placement_${index}\">\r\n                        <div class=\"placement-option-content\">\r\n                            <div class=\"placement-option-title\">\r\n                                <i class=\"${option.icon}\"></i> ${option.title}\r\n                            </div>\r\n                            <div class=\"placement-option-desc\">${option.description}</div>\r\n                        </div>\r\n                    </div>\r\n                `;\r\n                optionsContainer.innerHTML += optionHTML;\r\n            });\r\n\r\n            // Reset form\r\n            document.getElementById('new-field-label').value = '';\r\n            document.getElementById('new-field-type').value = 'text';\r\n            document.getElementById('new-field-required').checked = false;\r\n            selectedPlacement = '';\r\n\r\n            modal.style.display = 'block';\r\n\r\n            // Force reflow to ensure proper centering\r\n            setTimeout(() => {\r\n                modal.style.display = 'block';\r\n            }, 10);\r\n        }\r\n\r\n        // Get placement options based on tab type\r\n        function getPlacementOptions(tabType) {\r\n            const options = {\r\n                sales: [\r\n                    {\r\n                        id: 'customer-details',\r\n                        title: 'Customer Details Section',\r\n                        description: 'Add field in the customer information card (with name, phone, address)',\r\n                        icon: 'fas fa-user'\r\n                    },\r\n                    {\r\n                        id: 'product-details',\r\n                        title: 'Product Details Section',\r\n                        description: 'Add field in the jewelry product information card (with type, weight, rate)',\r\n                        icon: 'fas fa-gem'\r\n                    },\r\n                    {\r\n                        id: 'payment-details',\r\n                        title: 'Payment Details Section',\r\n                        description: 'Add field in the payment information card (with amount, method, advance)',\r\n                        icon: 'fas fa-credit-card'\r\n                    },\r\n                    {\r\n                        id: 'additional-info',\r\n                        title: 'Additional Information Section',\r\n                        description: 'Add field in a separate additional information card',\r\n                        icon: 'fas fa-info-circle'\r\n                    }\r\n                ],\r\n                customers: [\r\n                    {\r\n                        id: 'basic-info',\r\n                        title: 'Basic Information',\r\n                        description: 'Add field in the main customer details (with name, phone, email)',\r\n                        icon: 'fas fa-id-card'\r\n                    },\r\n                    {\r\n                        id: 'contact-info',\r\n                        title: 'Contact Information',\r\n                        description: 'Add field in the contact details section',\r\n                        icon: 'fas fa-address-book'\r\n                    },\r\n                    {\r\n                        id: 'preferences',\r\n                        title: 'Customer Preferences',\r\n                        description: 'Add field for customer preferences and notes',\r\n                        icon: 'fas fa-heart'\r\n                    }\r\n                ],\r\n                inventory: [\r\n                    {\r\n                        id: 'product-basic',\r\n                        title: 'Product Basic Info',\r\n                        description: 'Add field in the basic product information section',\r\n                        icon: 'fas fa-box'\r\n                    },\r\n                    {\r\n                        id: 'product-specs',\r\n                        title: 'Product Specifications',\r\n                        description: 'Add field in the detailed specifications section',\r\n                        icon: 'fas fa-list-ul'\r\n                    },\r\n                    {\r\n                        id: 'pricing-stock',\r\n                        title: 'Pricing & Stock',\r\n                        description: 'Add field in the pricing and stock management section',\r\n                        icon: 'fas fa-calculator'\r\n                    }\r\n                ],\r\n                purchases: [\r\n                    {\r\n                        id: 'supplier-info',\r\n                        title: 'Supplier Information',\r\n                        description: 'Add field in the supplier details section',\r\n                        icon: 'fas fa-truck'\r\n                    },\r\n                    {\r\n                        id: 'purchase-details',\r\n                        title: 'Purchase Details',\r\n                        description: 'Add field in the purchase order details section',\r\n                        icon: 'fas fa-shopping-cart'\r\n                    },\r\n                    {\r\n                        id: 'delivery-info',\r\n                        title: 'Delivery Information',\r\n                        description: 'Add field in the delivery and tracking section',\r\n                        icon: 'fas fa-shipping-fast'\r\n                    }\r\n                ]\r\n            };\r\n\r\n            return options[tabType] || [];\r\n        }\r\n\r\n        // Select placement option\r\n        function selectPlacement(placementId) {\r\n            selectedPlacement = placementId;\r\n\r\n            // Remove selected class from all options\r\n            document.querySelectorAll('.placement-option').forEach(option => {\r\n                option.classList.remove('selected');\r\n            });\r\n\r\n            // Add selected class to clicked option\r\n            event.currentTarget.classList.add('selected');\r\n\r\n            // Check the radio button\r\n            const radioButton = event.currentTarget.querySelector('input[type=\"radio\"]');\r\n            radioButton.checked = true;\r\n        }\r\n\r\n        // Close field placement modal\r\n        function closeFieldPlacementModal() {\r\n            document.getElementById('field-placement-modal').style.display = 'none';\r\n        }\r\n\r\n        // Confirm field placement\r\n        function confirmFieldPlacement() {\r\n            const label = document.getElementById('new-field-label').value.trim();\r\n            const type = document.getElementById('new-field-type').value;\r\n            const required = document.getElementById('new-field-required').checked;\r\n\r\n            if (!label) {\r\n                alert('Please enter a field label');\r\n                return;\r\n            }\r\n\r\n            if (!selectedPlacement) {\r\n                alert('Please select where to place the field');\r\n                return;\r\n            }\r\n\r\n            const fieldId = 'custom_' + Date.now();\r\n            const newField = {\r\n                id: fieldId,\r\n                label: label,\r\n                type: type,\r\n                required: required,\r\n                placement: selectedPlacement,\r\n                options: [] // for select/radio fields\r\n            };\r\n\r\n            customFields[currentFieldTab].push(newField);\r\n            renderCustomFields();\r\n            closeFieldPlacementModal();\r\n\r\n            showSuccess(`✅ Field \"${label}\" added successfully to ${selectedPlacement.replace('-', ' ')} section!`);\r\n        }\r\n\r\n        // Remove custom field\r\n        function removeCustomField(tabType, fieldId) {\r\n            customFields[tabType] = customFields[tabType].filter(field => field.id !== fieldId);\r\n            renderCustomFields();\r\n        }\r\n\r\n        // Render custom fields\r\n        function renderCustomFields() {\r\n            Object.keys(customFields).forEach(tabType => {\r\n                const container = document.getElementById('custom-' + tabType + '-fields');\r\n                if (!container) return;\r\n\r\n                container.innerHTML = '';\r\n\r\n                customFields[tabType].forEach(field => {\r\n                    const placementText = field.placement ? field.placement.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase()) : 'Not specified';\r\n                    const fieldHTML = `\r\n                        <div class=\"custom-field\" style=\"flex-direction: column; align-items: stretch;\">\r\n                            <div style=\"display: flex; gap: var(--space-3); align-items: center; margin-bottom: var(--space-2);\">\r\n                                <input type=\"text\" placeholder=\"Field Label\" value=\"${field.label}\"\r\n                                       onchange=\"updateFieldProperty('${tabType}', '${field.id}', 'label', this.value)\"\r\n                                       style=\"flex: 2;\">\r\n                                <select onchange=\"updateFieldProperty('${tabType}', '${field.id}', 'type', this.value)\"\r\n                                        style=\"flex: 1;\">\r\n                                    <option value=\"text\" ${field.type === 'text' ? 'selected' : ''}>Text</option>\r\n                                    <option value=\"number\" ${field.type === 'number' ? 'selected' : ''}>Number</option>\r\n                                    <option value=\"email\" ${field.type === 'email' ? 'selected' : ''}>Email</option>\r\n                                    <option value=\"phone\" ${field.type === 'phone' ? 'selected' : ''}>Phone</option>\r\n                                    <option value=\"date\" ${field.type === 'date' ? 'selected' : ''}>Date</option>\r\n                                    <option value=\"select\" ${field.type === 'select' ? 'selected' : ''}>Dropdown</option>\r\n                                    <option value=\"textarea\" ${field.type === 'textarea' ? 'selected' : ''}>Text Area</option>\r\n                                </select>\r\n                                <label style=\"display: flex; align-items: center; gap: 5px;\">\r\n                                    <input type=\"checkbox\" ${field.required ? 'checked' : ''}\r\n                                           onchange=\"updateFieldProperty('${tabType}', '${field.id}', 'required', this.checked)\">\r\n                                    Required\r\n                                </label>\r\n                                <button class=\"delete-field-btn\" onclick=\"removeCustomField('${tabType}', '${field.id}')\" title=\"Delete field\">\r\n                                    <i class=\"fas fa-trash\"></i>\r\n                                </button>\r\n                            </div>\r\n                            <div style=\"background: var(--primary-50); padding: var(--space-2); border-radius: var(--radius-sm); font-size: 0.85rem; color: var(--primary-700); border: 1px solid var(--primary-200);\">\r\n                                <i class=\"fas fa-map-marker-alt\"></i> Will be placed in: <strong>${placementText}</strong> section\r\n                            </div>\r\n                        </div>\r\n                    `;\r\n                    container.innerHTML += fieldHTML;\r\n                });\r\n            });\r\n        }\r\n\r\n        // Update field property\r\n        function updateFieldProperty(tabType, fieldId, property, value) {\r\n            const field = customFields[tabType].find(f => f.id === fieldId);\r\n            if (field) {\r\n                field[property] = value;\r\n            }\r\n        }\r\n\r\n        // Apply custom fields to forms\r\n        function applyCustomFieldsToForms() {\r\n            // Apply to sales form\r\n            applyCustomFieldsToForm('sales', 'sales-form');\r\n            // Apply to customer form (if exists)\r\n            applyCustomFieldsToForm('customers', 'customer-form');\r\n            // Apply to inventory form (if exists)\r\n            applyCustomFieldsToForm('inventory', 'inventory-form');\r\n            // Apply to purchases form (if exists)\r\n            applyCustomFieldsToForm('purchases', 'purchase-form');\r\n        }\r\n\r\n        // Apply custom fields to a specific form\r\n        function applyCustomFieldsToForm(fieldType, formId) {\r\n            const form = document.getElementById(formId);\r\n            if (!form) return;\r\n\r\n            // Remove existing custom fields\r\n            const existingCustomFields = form.querySelectorAll('.custom-field-container');\r\n            existingCustomFields.forEach(field => field.remove());\r\n\r\n            // Add new custom fields\r\n            customFields[fieldType].forEach(field => {\r\n                if (!field.label) return; // Skip fields without labels\r\n\r\n                const fieldContainer = document.createElement('div');\r\n                fieldContainer.className = 'form-group custom-field-container';\r\n\r\n                let fieldHTML = `\r\n                    <label for=\"${field.id}\" ${field.required ? 'class=\"required\"' : ''}>\r\n                        ${field.label}\r\n                    </label>\r\n                `;\r\n\r\n                switch (field.type) {\r\n                    case 'text':\r\n                    case 'email':\r\n                    case 'phone':\r\n                        fieldHTML += `<input type=\"${field.type}\" id=\"${field.id}\" name=\"${field.id}\" ${field.required ? 'required' : ''} placeholder=\"Enter ${field.label.toLowerCase()}\">`;\r\n                        break;\r\n                    case 'number':\r\n                        fieldHTML += `<input type=\"number\" id=\"${field.id}\" name=\"${field.id}\" ${field.required ? 'required' : ''} placeholder=\"Enter ${field.label.toLowerCase()}\">`;\r\n                        break;\r\n                    case 'date':\r\n                        fieldHTML += `<input type=\"date\" id=\"${field.id}\" name=\"${field.id}\" ${field.required ? 'required' : ''}>`;\r\n                        break;\r\n                    case 'textarea':\r\n                        fieldHTML += `<textarea id=\"${field.id}\" name=\"${field.id}\" ${field.required ? 'required' : ''} placeholder=\"Enter ${field.label.toLowerCase()}\" rows=\"3\"></textarea>`;\r\n                        break;\r\n                    case 'select':\r\n                        fieldHTML += `\r\n                            <select id=\"${field.id}\" name=\"${field.id}\" ${field.required ? 'required' : ''}>\r\n                                <option value=\"\">Select ${field.label.toLowerCase()}</option>\r\n                                <!-- Options would be added based on field configuration -->\r\n                            </select>\r\n                        `;\r\n                        break;\r\n                }\r\n\r\n                fieldContainer.innerHTML = fieldHTML;\r\n\r\n                // Insert before the submit button\r\n                const submitButton = form.querySelector('button[type=\"submit\"]');\r\n                if (submitButton) {\r\n                    form.insertBefore(fieldContainer, submitButton.parentElement);\r\n                } else {\r\n                    form.appendChild(fieldContainer);\r\n                }\r\n            });\r\n        }\r\n\r\n        // Close settings when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const settingsModal = document.getElementById('settings-modal');\r\n            const placementModal = document.getElementById('field-placement-modal');\r\n\r\n            if (event.target === settingsModal) {\r\n                closeSettings();\r\n            }\r\n\r\n            if (event.target === placementModal) {\r\n                closeFieldPlacementModal();\r\n            }\r\n        });\r\n\r\n        // Keyboard shortcuts for settings\r\n        document.addEventListener('keydown', function(event) {\r\n            if (event.ctrlKey && event.key === ',') { // Ctrl+, to open settings\r\n                event.preventDefault();\r\n                openSettings();\r\n            }\r\n            if (event.key === 'Escape') {\r\n                // Close placement modal first, then settings modal\r\n                const placementModal = document.getElementById('field-placement-modal');\r\n                const settingsModal = document.getElementById('settings-modal');\r\n\r\n                if (placementModal.style.display === 'block') {\r\n                    closeFieldPlacementModal();\r\n                } else if (settingsModal.style.display === 'block') {\r\n                    closeSettings();\r\n                }\r\n            }\r\n        });\r\n\r\n        // ======== DATABASE SETTINGS FUNCTIONS ========\r\n        \r\n        // Change database method\r\n        function changeDatabaseMethod() {\r\n            const method = document.getElementById('database-method').value;\r\n            dbConfig.method = method;\r\n            \r\n            // Update status display\r\n            document.getElementById('current-db-method').textContent = \r\n                method === 'firebase' ? 'Firebase Firestore' :\r\n                method === 'google-sheets' ? 'Google Sheets' :\r\n                'Local Storage';\r\n            \r\n            // Reinitialize database\r\n            initializeDatabase();\r\n            \r\n            // Save settings\r\n            saveSettings();\r\n            \r\n            showSuccess(`Database method changed to ${method}`);\r\n        }\r\n\r\n        // Toggle auto-save\r\n        function toggleAutoSave() {\r\n            const autoSave = document.getElementById('auto-save-toggle').checked;\r\n            dbConfig.autoSave = autoSave;\r\n            \r\n            document.getElementById('current-auto-save').textContent = \r\n                autoSave ? 'Enabled' : 'Disabled';\r\n            \r\n            saveSettings();\r\n            showSuccess(`Auto-save ${autoSave ? 'enabled' : 'disabled'}`);\r\n        }\r\n\r\n        // Toggle show status\r\n        function toggleShowStatus() {\r\n            const showStatus = document.getElementById('show-status-toggle').checked;\r\n            dbConfig.showSaveStatus = showStatus;\r\n            \r\n            const statusBar = document.querySelector('.status-bar');\r\n            if (statusBar) {\r\n                statusBar.style.display = showStatus ? 'flex' : 'none';\r\n            }\r\n            \r\n            saveSettings();\r\n            showSuccess(`Status display ${showStatus ? 'enabled' : 'disabled'}`);\r\n        }\r\n\r\n        // Test database connection\r\n        async function testDatabaseConnection() {\r\n            showSaveStatus('Testing connection...', 'loading');\r\n            \r\n            try {\r\n                console.log('🔧 Testing database connection...');\r\n                console.log('🔧 Database method:', dbConfig.method);\r\n                console.log('🔧 Firebase app:', firebaseApp);\r\n                console.log('🔧 Firestore:', firestore);\r\n                \r\n                const testData = {\r\n                    id: 'test-' + Date.now(),\r\n                    itemName: 'Test Item',\r\n                    category: 'test',\r\n                    costPrice: 100,\r\n                    sellingPrice: 150,\r\n                    profit: 50,\r\n                    saleDate: new Date().toISOString().split('T')[0],\r\n                    customerName: 'Test Customer',\r\n                    customerPhone: 'Test Phone',\r\n                    customerAddress: 'Test Address',\r\n                    createdAt: new Date().toISOString(),\r\n                    isTest: true\r\n                };\r\n                \r\n                console.log('🔧 Test data:', testData);\r\n                \r\n                const result = await saveToDatabase(testData);\r\n                \r\n                if (result.success) {\r\n                    showSuccess('✅ Database connection successful!');\r\n                    document.getElementById('current-db-status').textContent = 'Connected';\r\n                    alert('✅ SUCCESS!\\n\\nDatabase connection test passed!\\nCheck Firebase Console for the test document.');\r\n                } else {\r\n                    showError('❌ Database connection failed: ' + result.error);\r\n                    document.getElementById('current-db-status').textContent = 'Failed';\r\n                    alert('❌ FAILED!\\n\\nDatabase connection test failed:\\n' + result.error);\r\n                }\r\n            } catch (error) {\r\n                showError('❌ Connection test error: ' + error.message);\r\n                document.getElementById('current-db-status').textContent = 'Error';\r\n                alert('❌ ERROR!\\n\\nConnection test error:\\n' + error.message);\r\n            }\r\n        }\r\n\r\n        // Sync local data to database\r\n        async function syncLocalData() {\r\n            try {\r\n                const localData = JSON.parse(localStorage.getItem('jewelrySales') || '[]');\r\n                if (localData.length === 0) {\r\n                    showError('No local data to sync');\r\n                    return;\r\n                }\r\n                \r\n                showSaveStatus('Syncing local data...', 'loading');\r\n                \r\n                let synced = 0;\r\n                let failed = 0;\r\n                \r\n                for (const sale of localData) {\r\n                    try {\r\n                        const result = await saveToDatabase(sale);\r\n                        if (result.success) {\r\n                            synced++;\r\n                        } else {\r\n                            failed++;\r\n                        }\r\n                    } catch (error) {\r\n                        failed++;\r\n                    }\r\n                }\r\n                \r\n                showSuccess(`✅ Sync complete! ${synced} records synced, ${failed} failed`);\r\n            } catch (error) {\r\n                showError('❌ Sync error: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download backup\r\n        function downloadBackup() {\r\n            try {\r\n                const backupData = {\r\n                    timestamp: new Date().toISOString(),\r\n                    version: '1.0',\r\n                    salesData: salesData,\r\n                    customersData: customersData,\r\n                    settings: {\r\n                        appName: document.getElementById('app-name-input').value,\r\n                        companyName: document.getElementById('company-name').value,\r\n                        currencySymbol: document.getElementById('currency-symbol').value,\r\n                        databaseMethod: dbConfig.method\r\n                    }\r\n                };\r\n                \r\n                const blob = new Blob([JSON.stringify(backupData, null, 2)], { type: 'application/json' });\r\n                const url = URL.createObjectURL(blob);\r\n                const a = document.createElement('a');\r\n                a.href = url;\r\n                a.download = `theia-jewelz-backup-${new Date().toISOString().split('T')[0]}.json`;\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                document.body.removeChild(a);\r\n                URL.revokeObjectURL(url);\r\n                \r\n                showSuccess('✅ Backup downloaded successfully!');\r\n            } catch (error) {\r\n                showError('❌ Backup error: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n            loadSettings(); // Load saved settings\r\n\r\n            // Initialize database\r\n            initializeDatabase();\r\n\r\n            // Load existing data from database\r\n            loadFromDatabase();\r\n\r\n            // Initialize category dropdown with a small delay to ensure DOM is ready\r\n            setTimeout(initializeCategoryDropdown, 100);\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n\r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n\r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n\r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n\r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n\r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n\r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n\r\n            document.body.appendChild(updateDiv);\r\n\r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n\r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Initialize collapsible sections\r\n                initializeCollapsibleSections();\r\n\r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n\r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n\r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n\r\n            const cleanedData = [];\r\n\r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n\r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n\r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n\r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n\r\n                    cleanedData.push(cleanedSale);\r\n\r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n\r\n            return cleanedData;\r\n        }\r\n\r\n\r\n\r\n        // Update customer count in search hint to include all unique customers\r\n        function updateCustomerCount() {\r\n            try {\r\n                const countElement = document.getElementById('total-customers');\r\n                if (countElement) {\r\n                    const allUniqueCustomers = getUniqueCustomers();\r\n                    countElement.textContent = allUniqueCustomers.length;\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating customer count:', error);\r\n            }\r\n        }\r\n\r\n        // Import customers from CSV/Excel file\r\n        function importCustomers(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVCustomers(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelCustomers(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import customers from CSV\r\n        function importCSVCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\r\n                    const requiredHeaders = ['name', 'phone'];\r\n                    const missingHeaders = requiredHeaders.filter(h => !headers.includes(h));\r\n\r\n                    if (missingHeaders.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingHeaders.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Find column indices\r\n                    const nameIndex = headers.indexOf('name');\r\n                    const phoneIndex = headers.indexOf('phone');\r\n                    const addressIndex = headers.indexOf('address');\r\n                    const emailIndex = headers.indexOf('email');\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        const customerName = values[nameIndex];\r\n                        const customerPhone = values[phoneIndex] || '';\r\n                        const customerAddress = addressIndex >= 0 ? values[addressIndex] || '' : '';\r\n                        const customerEmail = emailIndex >= 0 ? values[emailIndex] || '' : '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            continue;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import customers from Excel\r\n        function importExcelCustomers(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n\r\n                    jsonData.forEach(row => {\r\n                        const customerName = row.Name || row.name || row.customer_name || row['Customer Name'];\r\n                        const customerPhone = row.Phone || row.phone || row.mobile || row.Mobile || '';\r\n                        const customerAddress = row.Address || row.address || '';\r\n                        const customerEmail = row.Email || row.email || '';\r\n\r\n                        if (!customerName) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Check if customer already exists\r\n                        const existingCustomer = customersData.find(c =>\r\n                            c.name.toLowerCase() === customerName.toLowerCase() ||\r\n                            (customerPhone && c.phone === customerPhone)\r\n                        );\r\n\r\n                        if (existingCustomer) {\r\n                            skippedCount++;\r\n                            return;\r\n                        }\r\n\r\n                        // Add new customer\r\n                        const newCustomer = {\r\n                            id: Date.now() + Math.random(),\r\n                            name: customerName,\r\n                            phone: customerPhone,\r\n                            address: customerAddress,\r\n                            email: customerEmail,\r\n                            createdAt: new Date().toISOString()\r\n                        };\r\n\r\n                        customersData.push(newCustomer);\r\n                        importedCount++;\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n\r\n                    // Refresh displays\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    showSuccess(`✅ Import completed! ${importedCount} customers imported, ${skippedCount} duplicates skipped.`);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download customer import template\r\n        function downloadCustomerTemplate() {\r\n            const csvContent = [\r\n                'name,phone,address,email',\r\n                'John Doe,+91-9876543210,123 Main Street Mumbai,john@example.com',\r\n                'Jane Smith,+91-8765432109,456 Oak Avenue Delhi,jane@example.com',\r\n                'Mike Johnson,+91-7654321098,789 Pine Road Bangalore,mike@example.com'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'customer_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Customer import template downloaded! Use this format for importing customers.');\r\n        }\r\n\r\n        // Enhanced Customer Database Functionality\r\n        let currentCustomerPage = 1;\r\n        let customersPerPage = 25;\r\n        let filteredCustomers = [];\r\n        let isCustomerSearchActive = false;\r\n        let currentCustomerSort = 'name-asc';\r\n\r\n        function toggleCustomerStats() {\r\n            const panel = document.getElementById('customer-stats-panel');\r\n            const button = document.getElementById('customer-stats-toggle');\r\n\r\n            if (panel.style.display === 'none') {\r\n                panel.style.display = 'block';\r\n                button.textContent = '📊 Hide Stats';\r\n                updateCustomerStatistics();\r\n            } else {\r\n                panel.style.display = 'none';\r\n                button.textContent = '📊 Stats';\r\n            }\r\n        }\r\n\r\n        function updateCustomerStatistics() {\r\n            const totalCustomers = customersData.length;\r\n            const activeCustomers = customersData.filter(customer => {\r\n                const purchases = salesData.filter(sale => sale.customerName === customer.name);\r\n                return purchases.length > 0;\r\n            }).length;\r\n\r\n            const totalOrders = salesData.length;\r\n            const avgOrdersPerCustomer = activeCustomers > 0 ? (totalOrders / activeCustomers).toFixed(1) : 0;\r\n\r\n            const totalCLV = customersData.reduce((sum, customer) => {\r\n                const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                const customerSpending = customerSales.reduce((total, sale) => total + sale.sellingPrice, 0);\r\n                return sum + customerSpending;\r\n            }, 0);\r\n\r\n            document.getElementById('stat-total-customers').textContent = totalCustomers;\r\n            document.getElementById('stat-active-customers').textContent = activeCustomers;\r\n            document.getElementById('stat-avg-orders').textContent = avgOrdersPerCustomer;\r\n            document.getElementById('stat-total-clv').textContent = `₹${totalCLV.toFixed(2)}`;\r\n        }\r\n\r\n        function filterCustomerDatabase() {\r\n            const searchTerm = document.getElementById('customer-database-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                isCustomerSearchActive = false;\r\n                filteredCustomers = [];\r\n                currentCustomerPage = 1;\r\n                displayCustomerDatabase();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return;\r\n            }\r\n\r\n            filteredCustomers = customersData.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                (customer.phone && customer.phone.toLowerCase().includes(searchTerm)) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm)) ||\r\n                (customer.address && customer.address.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isCustomerSearchActive = true;\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function sortCustomerDatabase() {\r\n            currentCustomerSort = document.getElementById('customer-sort-select').value;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function clearCustomerDatabaseFilter() {\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n            currentCustomerSort = 'name-asc';\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function changeCustomersPerPage() {\r\n            customersPerPage = parseInt(document.getElementById('customers-per-page').value);\r\n            currentCustomerPage = 1;\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        function displayCustomerDatabase() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const sortedData = sortCustomersData(dataToDisplay);\r\n\r\n            const totalCustomers = sortedData.length;\r\n            const startIndex = (currentCustomerPage - 1) * customersPerPage;\r\n            const endIndex = Math.min(startIndex + customersPerPage, totalCustomers);\r\n            const currentPageData = sortedData.slice(startIndex, endIndex);\r\n\r\n            const container = document.getElementById('customers-list-container');\r\n            const noCustomersMessage = document.getElementById('no-customers-message');\r\n\r\n            if (totalCustomers === 0) {\r\n                container.innerHTML = '';\r\n                noCustomersMessage.style.display = 'block';\r\n                updateCustomerPagination(0, 0, 0);\r\n                return;\r\n            }\r\n\r\n            noCustomersMessage.style.display = 'none';\r\n\r\n            container.innerHTML = currentPageData.map(customer => createCustomerCardHTML(customer)).join('');\r\n\r\n            // Update pagination\r\n            updateCustomerPagination(currentCustomerPage, Math.ceil(totalCustomers / customersPerPage), totalCustomers);\r\n\r\n            // Update showing info\r\n            document.getElementById('customers-showing').textContent = `${startIndex + 1}-${endIndex}`;\r\n            document.getElementById('customers-total').textContent = totalCustomers;\r\n        }\r\n\r\n        function sortCustomersData(data) {\r\n            const sortedData = [...data];\r\n\r\n            switch (currentCustomerSort) {\r\n                case 'name-asc':\r\n                    return sortedData.sort((a, b) => a.name.localeCompare(b.name));\r\n                case 'name-desc':\r\n                    return sortedData.sort((a, b) => b.name.localeCompare(a.name));\r\n                case 'purchases-desc':\r\n                case 'purchases-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aPurchases = salesData.filter(sale => sale.customerName === a.name).length;\r\n                        const bPurchases = salesData.filter(sale => sale.customerName === b.name).length;\r\n                        return currentCustomerSort === 'purchases-desc' ? bPurchases - aPurchases : aPurchases - bPurchases;\r\n                    });\r\n                case 'spending-desc':\r\n                case 'spending-asc':\r\n                    return sortedData.sort((a, b) => {\r\n                        const aSpending = salesData.filter(sale => sale.customerName === a.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        const bSpending = salesData.filter(sale => sale.customerName === b.name).reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                        return currentCustomerSort === 'spending-desc' ? bSpending - aSpending : aSpending - bSpending;\r\n                    });\r\n                case 'recent-desc':\r\n                    return sortedData.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n                case 'recent-asc':\r\n                    return sortedData.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\r\n                default:\r\n                    return sortedData;\r\n            }\r\n        }\r\n\r\n        function createCustomerCardHTML(customer) {\r\n            const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n            const totalPurchases = customerSales.length;\r\n            const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const avgOrderValue = totalPurchases > 0 ? (totalSpent / totalPurchases) : 0;\r\n            const lastPurchase = customerSales.length > 0 ?\r\n                Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime())) : null;\r\n\r\n            const isActive = totalPurchases > 0;\r\n            const statusClass = isActive ? 'active' : 'inactive';\r\n            const statusText = isActive ? 'Active' : 'Inactive';\r\n\r\n            return `\r\n                <div class=\"customer-card\">\r\n                    <div class=\"customer-card-header\">\r\n                        <h4 class=\"customer-name\">👤 ${customer.name}</h4>\r\n                        <span class=\"customer-status ${statusClass}\">${statusText}</span>\r\n                    </div>\r\n\r\n                    <div class=\"customer-info-grid\">\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📞 Phone:</span>\r\n                            ${customer.phone || 'Not provided'}\r\n                        </div>\r\n                        ${customer.email ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📧 Email:</span>\r\n                                ${customer.email}\r\n                            </div>\r\n                        ` : ''}\r\n                        ${customer.address ? `\r\n                            <div class=\"customer-info-item\">\r\n                                <span class=\"customer-info-label\">📍 Address:</span>\r\n                                ${customer.address}\r\n                            </div>\r\n                        ` : ''}\r\n                        <div class=\"customer-info-item\">\r\n                            <span class=\"customer-info-label\">📅 Added:</span>\r\n                            ${new Date(customer.createdAt).toLocaleDateString()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"customer-purchase-stats\">\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">${totalPurchases}</div>\r\n                            <div class=\"customer-stat-label\">Total Orders</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${totalSpent.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Total Spent</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">₹${avgOrderValue.toFixed(2)}</div>\r\n                            <div class=\"customer-stat-label\">Avg Order</div>\r\n                        </div>\r\n                        <div class=\"customer-stat-item\">\r\n                            <div class=\"customer-stat-value\">\r\n                                ${lastPurchase ? new Date(lastPurchase).toLocaleDateString() : 'Never'}\r\n                            </div>\r\n                            <div class=\"customer-stat-label\">Last Purchase</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        function updateCustomerPagination(currentPage, totalPages, totalCustomers) {\r\n            const prevBtn = document.getElementById('prev-customers-btn');\r\n            const nextBtn = document.getElementById('next-customers-btn');\r\n            const pageInfo = document.getElementById('customer-page-info');\r\n\r\n            prevBtn.disabled = currentPage <= 1;\r\n            nextBtn.disabled = currentPage >= totalPages;\r\n\r\n            pageInfo.textContent = totalPages > 0 ? `Page ${currentPage} of ${totalPages}` : 'No pages';\r\n\r\n            // Update button styles based on disabled state\r\n            prevBtn.style.opacity = prevBtn.disabled ? '0.5' : '1';\r\n            nextBtn.style.opacity = nextBtn.disabled ? '0.5' : '1';\r\n            prevBtn.style.cursor = prevBtn.disabled ? 'not-allowed' : 'pointer';\r\n            nextBtn.style.cursor = nextBtn.disabled ? 'not-allowed' : 'pointer';\r\n        }\r\n\r\n        function previousCustomersPage() {\r\n            if (currentCustomerPage > 1) {\r\n                currentCustomerPage--;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        function nextCustomersPage() {\r\n            const dataToDisplay = isCustomerSearchActive ? filteredCustomers : customersData;\r\n            const totalPages = Math.ceil(dataToDisplay.length / customersPerPage);\r\n\r\n            if (currentCustomerPage < totalPages) {\r\n                currentCustomerPage++;\r\n                displayCustomerDatabase();\r\n            }\r\n        }\r\n\r\n        // Import sales from CSV/Excel file\r\n        function importSales(event) {\r\n            const file = event.target.files[0];\r\n            if (!file) return;\r\n\r\n            const fileName = file.name.toLowerCase();\r\n\r\n            if (fileName.endsWith('.csv')) {\r\n                importCSVSales(file);\r\n            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {\r\n                importExcelSales(file);\r\n            } else {\r\n                showError('Please select a CSV or Excel file (.csv, .xlsx, .xls)');\r\n                return;\r\n            }\r\n\r\n            // Reset file input\r\n            event.target.value = '';\r\n        }\r\n\r\n        // Import sales from CSV\r\n        function importCSVSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const csv = e.target.result;\r\n                    const lines = csv.split('\\n');\r\n\r\n                    if (lines.length < 2) {\r\n                        showError('CSV file appears to be empty or invalid');\r\n                        return;\r\n                    }\r\n\r\n                    // Parse header row\r\n                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase().replace(/\"/g, ''));\r\n                    const requiredHeaders = ['item_name', 'category', 'cost_price', 'selling_price', 'sale_date', 'customer_name'];\r\n\r\n                    // Check for alternative header names\r\n                    const headerMapping = {\r\n                        'item_name': ['item_name', 'item name', 'itemname', 'product_name', 'product name', 'name'],\r\n                        'category': ['category', 'item_category', 'product_category', 'type'],\r\n                        'cost_price': ['cost_price', 'cost price', 'costprice', 'cost', 'purchase_price', 'cp'],\r\n                        'selling_price': ['selling_price', 'selling price', 'sellingprice', 'price', 'sale_price', 'sp'],\r\n                        'sale_date': ['sale_date', 'sale date', 'saledate', 'date', 'purchase_date'],\r\n                        'customer_name': ['customer_name', 'customer name', 'customername', 'customer', 'buyer']\r\n                    };\r\n\r\n                    // Find column indices\r\n                    const columnIndices = {};\r\n                    let missingColumns = [];\r\n\r\n                    for (const [key, alternatives] of Object.entries(headerMapping)) {\r\n                        const foundIndex = headers.findIndex(h => alternatives.includes(h));\r\n                        if (foundIndex >= 0) {\r\n                            columnIndices[key] = foundIndex;\r\n                        } else {\r\n                            missingColumns.push(key);\r\n                        }\r\n                    }\r\n\r\n                    if (missingColumns.length > 0) {\r\n                        showError(`CSV must contain columns: ${requiredHeaders.join(', ')}. Missing: ${missingColumns.join(', ')}`);\r\n                        return;\r\n                    }\r\n\r\n                    // Optional columns\r\n                    const phoneIndex = headers.findIndex(h => ['customer_phone', 'customer phone', 'phone', 'mobile'].includes(h));\r\n                    const addressIndex = headers.findIndex(h => ['customer_address', 'customer address', 'address'].includes(h));\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    // Process data rows\r\n                    for (let i = 1; i < lines.length; i++) {\r\n                        const line = lines[i].trim();\r\n                        if (!line) continue;\r\n\r\n                        const values = line.split(',').map(v => v.trim().replace(/\"/g, ''));\r\n\r\n                        if (values.length < headers.length) continue;\r\n\r\n                        try {\r\n                            const itemName = values[columnIndices.item_name]?.trim();\r\n                            const category = values[columnIndices.category]?.trim();\r\n                            const costPrice = parseFloat(values[columnIndices.cost_price]) || 0;\r\n                            const sellingPrice = parseFloat(values[columnIndices.selling_price]) || 0;\r\n                            const saleDate = values[columnIndices.sale_date]?.trim();\r\n                            const customerName = values[columnIndices.customer_name]?.trim();\r\n                            const customerPhone = phoneIndex >= 0 ? values[phoneIndex]?.trim() || '' : '';\r\n                            const customerAddress = addressIndex >= 0 ? values[addressIndex]?.trim() || '' : '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${i + 1}: Missing required fields`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${i + 1}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Validate date format\r\n                            const dateObj = new Date(saleDate);\r\n                            if (isNaN(dateObj.getTime())) {\r\n                                errors.push(`Row ${i + 1}: Invalid date format \"${saleDate}\"`);\r\n                                skippedCount++;\r\n                                continue;\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: saleDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${i + 1}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    }\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing CSV:', error);\r\n                    showError('Error importing CSV file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        // Import sales from Excel\r\n        function importExcelSales(file) {\r\n            const reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                try {\r\n                    const data = new Uint8Array(e.target.result);\r\n                    const workbook = XLSX.read(data, { type: 'array' });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n                    if (jsonData.length === 0) {\r\n                        showError('Excel file appears to be empty');\r\n                        return;\r\n                    }\r\n\r\n                    let importedCount = 0;\r\n                    let skippedCount = 0;\r\n                    const errors = [];\r\n\r\n                    jsonData.forEach((row, index) => {\r\n                        try {\r\n                            // Try different column name variations\r\n                            const itemName = row['Item Name'] || row['Item_Name'] || row['itemname'] || row['Product Name'] || row['Name'];\r\n                            const category = row['Category'] || row['Item Category'] || row['Type'];\r\n                            const costPrice = parseFloat(row['Cost Price'] || row['Cost_Price'] || row['costprice'] || row['Cost'] || row['CP']) || 0;\r\n                            const sellingPrice = parseFloat(row['Selling Price'] || row['Selling_Price'] || row['sellingprice'] || row['Price'] || row['SP']) || 0;\r\n                            const saleDate = row['Sale Date'] || row['Sale_Date'] || row['saledate'] || row['Date'];\r\n                            const customerName = row['Customer Name'] || row['Customer_Name'] || row['customername'] || row['Customer'];\r\n                            const customerPhone = row['Customer Phone'] || row['Customer_Phone'] || row['Phone'] || row['Mobile'] || '';\r\n                            const customerAddress = row['Customer Address'] || row['Customer_Address'] || row['Address'] || '';\r\n\r\n                            // Validate required fields\r\n                            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                                errors.push(`Row ${index + 2}: Missing required fields`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate category\r\n                            const validCategories = ['Necklaces', 'Earrings', 'Bracelets', 'Rings', 'Anklets', 'Sets', 'Bangles', 'Chains'];\r\n                            if (!validCategories.includes(category)) {\r\n                                errors.push(`Row ${index + 2}: Invalid category \"${category}\"`);\r\n                                skippedCount++;\r\n                                return;\r\n                            }\r\n\r\n                            // Validate and format date\r\n                            let formattedDate = saleDate;\r\n                            if (saleDate instanceof Date) {\r\n                                formattedDate = saleDate.toISOString().split('T')[0];\r\n                            } else if (typeof saleDate === 'string') {\r\n                                const dateObj = new Date(saleDate);\r\n                                if (isNaN(dateObj.getTime())) {\r\n                                    errors.push(`Row ${index + 2}: Invalid date format \"${saleDate}\"`);\r\n                                    skippedCount++;\r\n                                    return;\r\n                                }\r\n                                formattedDate = dateObj.toISOString().split('T')[0];\r\n                            }\r\n\r\n                            // Create sale record\r\n                            const newSale = {\r\n                                id: Date.now() + Math.random(),\r\n                                itemName: itemName,\r\n                                category: category,\r\n                                costPrice: costPrice,\r\n                                sellingPrice: sellingPrice,\r\n                                profit: sellingPrice - costPrice,\r\n                                saleDate: formattedDate,\r\n                                customerName: customerName,\r\n                                customerPhone: customerPhone,\r\n                                customerAddress: customerAddress,\r\n                                createdAt: new Date().toISOString()\r\n                            };\r\n\r\n                            salesData.push(newSale);\r\n                            importedCount++;\r\n\r\n                        } catch (error) {\r\n                            errors.push(`Row ${index + 2}: ${error.message}`);\r\n                            skippedCount++;\r\n                        }\r\n                    });\r\n\r\n                    // Save to localStorage\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n                    // Reset sales display to show latest sales\r\n                    resetSalesDisplay();\r\n\r\n                    // Refresh displays\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                    updateCustomerCount();\r\n\r\n                    let message = `✅ Import completed! ${importedCount} sales imported, ${skippedCount} records skipped.`;\r\n                    if (errors.length > 0 && errors.length <= 5) {\r\n                        message += `\\n\\nErrors:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    } else if (errors.length > 5) {\r\n                        message += `\\n\\n${errors.length} errors found. First 5:\\n${errors.slice(0, 5).join('\\n')}`;\r\n                    }\r\n\r\n                    showSuccess(message);\r\n\r\n                } catch (error) {\r\n                    console.error('Error importing Excel:', error);\r\n                    showError('Error importing Excel file: ' + error.message);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n\r\n        // Download sales import template\r\n        function downloadSalesTemplate() {\r\n            const csvContent = [\r\n                'item_name,category,cost_price,selling_price,sale_date,customer_name,customer_phone,customer_address',\r\n                'Gold Plated Necklace,Necklaces,500,800,2024-01-15,John Doe,+91-9876543210,123 Main Street Mumbai',\r\n                'Diamond Earrings,Earrings,1000,1500,2024-01-16,Jane Smith,+91-8765432109,456 Oak Avenue Delhi',\r\n                'Silver Bracelet,Bracelets,300,450,2024-01-17,Mike Johnson,+91-7654321098,789 Pine Road Bangalore'\r\n            ].join('\\n');\r\n\r\n            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n            const link = document.createElement('a');\r\n            const url = URL.createObjectURL(blob);\r\n            link.setAttribute('href', url);\r\n            link.setAttribute('download', 'sales_import_template.csv');\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n\r\n            showSuccess('📋 Sales import template downloaded! Use this format for importing sales data.');\r\n        }\r\n\r\n        // Sales search and filter functionality\r\n        let filteredSalesData = [];\r\n        let isSearchActive = false;\r\n\r\n        function filterSales() {\r\n            const searchTerm = document.getElementById('sales-search').value.trim().toLowerCase();\r\n\r\n            if (searchTerm.length === 0) {\r\n                // Clear filter\r\n                isSearchActive = false;\r\n                filteredSalesData = [];\r\n                resetSalesDisplay();\r\n                loadSalesRecords();\r\n                return;\r\n            }\r\n\r\n            if (searchTerm.length < 2) {\r\n                return; // Wait for at least 2 characters\r\n            }\r\n\r\n            // Filter sales data\r\n            filteredSalesData = salesData.filter(sale =>\r\n                sale.itemName.toLowerCase().includes(searchTerm) ||\r\n                sale.customerName.toLowerCase().includes(searchTerm) ||\r\n                sale.category.toLowerCase().includes(searchTerm) ||\r\n                (sale.customerPhone && sale.customerPhone.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            isSearchActive = true;\r\n            displayFilteredSales();\r\n        }\r\n\r\n        function displayFilteredSales() {\r\n            const salesRecordsDiv = document.getElementById('sales-records');\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n            const noSalesMessage = document.getElementById('no-sales-message');\r\n\r\n            if (filteredSalesData.length === 0) {\r\n                salesRecordsDiv.innerHTML = '';\r\n                loadMoreContainer.style.display = 'none';\r\n                noSalesMessage.style.display = 'block';\r\n                noSalesMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Sales Found</h3>\r\n                    <p>No sales records match your search criteria.</p>\r\n                `;\r\n                document.getElementById('sales-count').textContent = '0';\r\n                return;\r\n            }\r\n\r\n            // Display all filtered results\r\n            salesRecordsDiv.innerHTML = filteredSalesData.map(sale => createSaleItemHTML(sale)).join('');\r\n            loadMoreContainer.style.display = 'none';\r\n            noSalesMessage.style.display = 'none';\r\n            document.getElementById('sales-count').textContent = filteredSalesData.length;\r\n\r\n            // Update summary for filtered data\r\n            updateSalesSummary(filteredSalesData);\r\n        }\r\n\r\n        function clearSalesFilter() {\r\n            document.getElementById('sales-search').value = '';\r\n            isSearchActive = false;\r\n            filteredSalesData = [];\r\n            resetSalesDisplay();\r\n            loadSalesRecords();\r\n        }\r\n\r\n        function updateSalesSummary(dataToSummarize = null) {\r\n            const dataToUse = dataToSummarize || salesData;\r\n\r\n            const totalSales = dataToUse.length;\r\n            const totalCost = dataToUse.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = dataToUse.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = totalSelling - totalCost;\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n        }\r\n\r\n        function createSaleItemHTML(sale) {\r\n            const saleDate = new Date(sale.saleDate);\r\n            const formattedDate = saleDate.toLocaleDateString('en-IN', {\r\n                day: '2-digit',\r\n                month: 'short',\r\n                year: 'numeric'\r\n            });\r\n\r\n            const profitColor = sale.profit > 0 ? '#4ecdc4' : sale.profit < 0 ? '#ff6b6b' : '#666';\r\n\r\n            return `\r\n                <div class=\"sales-item\" style=\"position: relative; margin-bottom: 15px; padding: 15px; background: white; border-radius: 8px; border-left: 4px solid ${profitColor}; box-shadow: 0 2px 5px rgba(0,0,0,0.1);\">\r\n                    <div class=\"action-buttons\" style=\"position: absolute; top: 10px; right: 10px; display: flex; gap: 5px;\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale('${sale.id}')\" style=\"background: #007bff; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            ✏️ Edit\r\n                        </button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale('${sale.id}')\" style=\"background: #ff6b6b; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;\">\r\n                            🗑️ Delete\r\n                        </button>\r\n                    </div>\r\n\r\n                    <h4 style=\"margin: 0 0 8px 0; color: #333; font-size: 16px; padding-right: 120px;\">${sale.itemName}</h4>\r\n\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 14px; color: #666;\">\r\n                        <p style=\"margin: 0;\"><strong>📂 Category:</strong> ${sale.category}</p>\r\n                        <p style=\"margin: 0;\"><strong>📅 Date:</strong> ${formattedDate}</p>\r\n                        <p style=\"margin: 0;\"><strong>💰 Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>💵 Selling:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                        <p style=\"margin: 0;\"><strong>📈 Profit:</strong> <span style=\"color: ${profitColor}; font-weight: bold;\">₹${sale.profit.toFixed(2)}</span></p>\r\n                        <p style=\"margin: 0;\"><strong>👤 Customer:</strong> ${sale.customerName}</p>\r\n                    </div>\r\n\r\n                    ${sale.customerPhone ? `<p style=\"margin: 8px 0 0 0; font-size: 13px; color: #888;\"><strong>📞 Phone:</strong> ${sale.customerPhone}</p>` : ''}\r\n                    ${sale.customerAddress ? `<p style=\"margin: 4px 0 0 0; font-size: 13px; color: #888;\"><strong>📍 Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Customer search functionality\r\n        function searchCustomers() {\r\n            const searchTerm = document.getElementById('customerSearch').value.trim().toLowerCase();\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            selectedSearchIndex = -1; // Reset selection\r\n\r\n            if (searchTerm.length < 2) {\r\n                resultsContainer.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Get unique customers from both database and sales data\r\n            const allUniqueCustomers = getUniqueCustomers();\r\n\r\n            // Update total customer count\r\n            document.getElementById('total-customers').textContent = allUniqueCustomers.length;\r\n\r\n            // Filter customers based on search term\r\n            const matchingCustomers = allUniqueCustomers.filter(customer =>\r\n                customer.name.toLowerCase().includes(searchTerm) ||\r\n                customer.phone.toLowerCase().includes(searchTerm) ||\r\n                (customer.email && customer.email.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            if (matchingCustomers.length === 0) {\r\n                resultsContainer.innerHTML = '<div style=\"padding: 10px; color: #666; font-style: italic;\">No customers found. You can enter new customer details below.</div>';\r\n                resultsContainer.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            // Display matching customers\r\n            resultsContainer.innerHTML = matchingCustomers.map(customer => {\r\n                const lastPurchaseText = customer.lastPurchase\r\n                    ? `Last purchase: ${new Date(customer.lastPurchase).toLocaleDateString()}`\r\n                    : 'No purchases yet';\r\n\r\n                const sourceIcon = customer.source === 'database' ? '📁' : '💳';\r\n                const sourceText = customer.source === 'database' ? 'In Customer DB' : 'From Sales Only';\r\n\r\n                return `\r\n                <div style=\"padding: 12px; cursor: pointer; border-bottom: 1px solid #eee; transition: all 0.2s; border-left: 3px solid transparent;\"\r\n                     onclick=\"selectCustomer('${escapeQuotes(customer.name)}', '${escapeQuotes(customer.phone)}', '${escapeQuotes(customer.address)}', '${escapeQuotes(customer.email)}')\"\r\n                     onmouseover=\"this.style.backgroundColor='#f8f9fa'; this.style.borderLeftColor='#4ecdc4';\"\r\n                     onmouseout=\"this.style.backgroundColor='white'; this.style.borderLeftColor='transparent';\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 4px;\">\r\n                            <div style=\"font-weight: bold; color: #333; font-size: 15px;\">${customer.name}</div>\r\n                    <div style=\"font-size: 10px; color: #999; padding: 2px 6px; background: #f0f0f0; border-radius: 10px;\">\r\n                            ${sourceIcon} ${sourceText}\r\n                        </div>\r\n                    </div>\r\n                    <div style=\"display: flex; flex-wrap: wrap; gap: 8px; margin-bottom: 6px;\">\r\n                        ${customer.phone !== 'Not provided' ?\r\n                                `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📞 ${customer.phone}</div>` : ''}\r\n                        ${customer.email && customer.email !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #666; display: flex; align-items: center;\">📧 ${customer.email}</div>` : ''}\r\n                    ${customer.address && customer.address !== 'Not provided' ?\r\n                        `<div style=\"font-size: 12px; color: #888; margin-bottom: 6px; line-height: 1.3;\">📍 ${customer.address}</div>` : ''}\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 8px;\">\r\n                        </div>\r\n                    <div style=\"font-size: 11px; color: #4ecdc4; font-weight: 600;\">\r\n                            ${customer.totalPurchases > 0 ?\r\n                                `${customer.totalPurchases} purchase${customer.totalPurchases > 1 ? 's' : ''} • ₹${customer.totalSpent.toFixed(2)} total` :\r\n                                'New customer'\r\n                            }\r\n                        </div>\r\n                        <div style=\"font-size: 10px; color: #999; font-style: italic;\">\r\n                            ${lastPurchaseText}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            }).join('');\r\n\r\n            resultsContainer.style.display = 'block';\r\n        }\r\n\r\n        // Get customers from customer database and sales data with purchase stats\r\n        function getUniqueCustomers() {\r\n            const allCustomers = new Map();\r\n\r\n            // Add customers from customer database\r\n            customersData.forEach(customer => {\r\n                const customerSales = salesData.filter(sale =>\r\n                    sale.customerName.toLowerCase() === customer.name.toLowerCase() ||\r\n                    sale.customerPhone === customer.phone\r\n                );\r\n\r\n                const totalPurchases = customerSales.length;\r\n                const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                const lastPurchase = customerSales.length > 0\r\n                    ? Math.max(...customerSales.map(sale => new Date(sale.saleDate).getTime()))\r\n                    : null;\r\n\r\n                const customerKey = customer.name.toLowerCase() + '|' + (customer.phone || '');\r\n                allCustomers.set(customerKey, {\r\n                    name: customer.name,\r\n                    phone: customer.phone || 'Not provided',\r\n                    address: customer.address || 'Not provided',\r\n                    email: customer.email || 'Not provided',\r\n                    totalPurchases: totalPurchases,\r\n                    totalSpent: totalSpent,\r\n                    lastPurchase: lastPurchase,\r\n                    source: 'database'\r\n                });\r\n            });\r\n\r\n            // Add customers from sales data who are not in customer database\r\n            salesData.forEach(sale => {\r\n                const customerKey = sale.customerName.toLowerCase() + '|' + (sale.customerPhone || '');\r\n\r\n                if (!allCustomers.has(customerKey)) {\r\n                    const customerSales = salesData.filter(s =>\r\n                        s.customerName.toLowerCase() === sale.customerName.toLowerCase() ||\r\n                        (s.customerPhone && sale.customerPhone && s.customerPhone === sale.customerPhone)\r\n                    );\r\n\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, s) => sum + s.sellingPrice, 0);\r\n                    const lastPurchase = Math.max(...customerSales.map(s => new Date(s.saleDate).getTime()));\r\n\r\n                    allCustomers.set(customerKey, {\r\n                        name: sale.customerName,\r\n                        phone: sale.customerPhone || 'Not provided',\r\n                        address: sale.customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        totalPurchases: totalPurchases,\r\n                        totalSpent: totalSpent,\r\n                        lastPurchase: lastPurchase,\r\n                        source: 'sales'\r\n                    });\r\n                }\r\n            });\r\n\r\n            // Convert to array and sort by total spent (descending), then by last purchase date (descending)\r\n            return Array.from(allCustomers.values()).sort((a, b) => {\r\n                if (b.totalSpent !== a.totalSpent) {\r\n                    return b.totalSpent - a.totalSpent;\r\n                }\r\n                if (a.lastPurchase && b.lastPurchase) {\r\n                    return b.lastPurchase - a.lastPurchase;\r\n                }\r\n                return a.lastPurchase ? -1 : (b.lastPurchase ? 1 : 0);\r\n            });\r\n        }\r\n\r\n        // Escape quotes for HTML attributes\r\n        function escapeQuotes(str) {\r\n            if (!str) return '';\r\n            return str.replace(/'/g, '&#39;').replace(/\"/g, '&quot;');\r\n        }\r\n\r\n        // Select customer from search results\r\n        function selectCustomer(name, phone, address, email) {\r\n            document.getElementById('customerName').value = name;\r\n            document.getElementById('customerPhone').value = phone !== 'Not provided' ? phone : '';\r\n            document.getElementById('customerAddress').value = address !== 'Not provided' ? address : '';\r\n\r\n            // Clear search\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n\r\n            // Show success message\r\n            showSuccess(`✅ Customer \"${name}\" selected! Details filled automatically.`);\r\n\r\n            // Focus on item name field\r\n            document.getElementById('itemName').focus();\r\n        }\r\n\r\n        // Clear customer search\r\n        function clearCustomerSearch() {\r\n            document.getElementById('customerSearch').value = '';\r\n            document.getElementById('customer-search-results').style.display = 'none';\r\n        }\r\n\r\n        // Handle keyboard navigation in search\r\n        let selectedSearchIndex = -1;\r\n        function handleSearchKeydown(event) {\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n            const results = resultsContainer.querySelectorAll('[onclick*=\"selectCustomer\"]');\r\n\r\n            if (results.length === 0) return;\r\n\r\n            switch(event.key) {\r\n                case 'ArrowDown':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.min(selectedSearchIndex + 1, results.length - 1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'ArrowUp':\r\n                    event.preventDefault();\r\n                    selectedSearchIndex = Math.max(selectedSearchIndex - 1, -1);\r\n                    highlightSearchResult(results);\r\n                    break;\r\n                case 'Enter':\r\n                    event.preventDefault();\r\n                    if (selectedSearchIndex >= 0 && selectedSearchIndex < results.length) {\r\n                        results[selectedSearchIndex].click();\r\n                    }\r\n                    break;\r\n                case 'Escape':\r\n                    clearCustomerSearch();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function highlightSearchResult(results) {\r\n            // Remove previous highlights\r\n            results.forEach((result, index) => {\r\n                if (index === selectedSearchIndex) {\r\n                    result.style.backgroundColor = '#4ecdc4';\r\n                    result.style.color = 'white';\r\n                } else {\r\n                    result.style.backgroundColor = 'white';\r\n                    result.style.color = 'inherit';\r\n                }\r\n            });\r\n        }\r\n\r\n        // Hide search results when clicking outside\r\n        document.addEventListener('click', function(event) {\r\n            const searchContainer = document.getElementById('customerSearch').parentElement;\r\n            const resultsContainer = document.getElementById('customer-search-results');\r\n\r\n            if (!searchContainer.contains(event.target)) {\r\n                resultsContainer.style.display = 'none';\r\n            }\r\n        });\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            const profitField = document.getElementById('profit');\r\n            const profitDisplay = document.getElementById('profit-display');\r\n            const profitMargin = document.getElementById('profit-margin');\r\n\r\n            profitField.value = profit.toFixed(2);\r\n\r\n            // Calculate profit margin percentage\r\n            let marginPercentage = 0;\r\n            if (sellingPrice > 0) {\r\n                marginPercentage = ((profit / sellingPrice) * 100);\r\n            }\r\n\r\n            // Update profit margin display\r\n            if (profitMargin) {\r\n                profitMargin.textContent = marginPercentage.toFixed(1) + '%';\r\n            }\r\n\r\n            // Show/hide profit display\r\n            if (costPrice > 0 && sellingPrice > 0) {\r\n                profitDisplay.style.display = 'block';\r\n            } else {\r\n                profitDisplay.style.display = 'none';\r\n            }\r\n\r\n            // Enhanced color coding based on profit\r\n            if (profit > 0) {\r\n                profitField.style.background = 'linear-gradient(135deg, #d1fae5, #a7f3d0)';\r\n                profitField.style.color = '#065f46';\r\n                profitField.style.fontWeight = '600';\r\n                profitField.style.borderColor = '#34d399';\r\n\r\n                // Color code the margin based on percentage\r\n                if (marginPercentage >= 30) {\r\n                    profitMargin.style.color = '#065f46'; // Excellent\r\n                    profitMargin.style.background = '#d1fae5';\r\n                } else if (marginPercentage >= 20) {\r\n                    profitMargin.style.color = '#047857'; // Good\r\n                    profitMargin.style.background = '#ecfdf5';\r\n                } else if (marginPercentage >= 10) {\r\n                    profitMargin.style.color = '#d97706'; // Fair\r\n                    profitMargin.style.background = '#fef3c7';\r\n                } else {\r\n                    profitMargin.style.color = '#dc2626'; // Low\r\n                    profitMargin.style.background = '#fee2e2';\r\n                }\r\n\r\n            } else if (profit < 0) {\r\n                profitField.style.background = 'linear-gradient(135deg, #fee2e2, #fecaca)';\r\n                profitField.style.color = '#dc2626';\r\n                profitField.style.fontWeight = '600';\r\n                profitField.style.borderColor = '#f87171';\r\n\r\n                if (profitMargin) {\r\n                    profitMargin.style.color = '#dc2626';\r\n                    profitMargin.style.background = '#fee2e2';\r\n                }\r\n            } else {\r\n                profitField.style.background = 'linear-gradient(135deg, #f3f4f6, #e5e7eb)';\r\n                profitField.style.color = '#6b7280';\r\n                profitField.style.fontWeight = 'normal';\r\n                profitField.style.borderColor = '#d1d5db';\r\n\r\n                if (profitMargin) {\r\n                    profitMargin.style.color = '#6b7280';\r\n                    profitMargin.style.background = '#f3f4f6';\r\n                }\r\n            }\r\n\r\n            // Add visual feedback animation\r\n            profitField.style.transform = 'scale(1.02)';\r\n            setTimeout(() => {\r\n                profitField.style.transform = 'scale(1)';\r\n            }, 200);\r\n        }\r\n\r\n        // Add sale record function\r\n        function addSaleRecord() {\r\n            try {\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validate required fields with alerts\r\n                if (!itemName) {\r\n                    showError('Please enter item name');\r\n                    alert('⚠️ Validation Error:\\nPlease enter the item name to proceed.');\r\n                    document.getElementById('itemName').focus();\r\n                    return;\r\n                }\r\n                if (selectedCategories.length === 0) {\r\n                    showError('Please select at least one category');\r\n                    alert('⚠️ Validation Error:\\nPlease select at least one category for the item.');\r\n                    document.getElementById('category-error').style.display = 'flex';\r\n                    return;\r\n                }\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    showError('Please enter a valid cost price');\r\n                    alert('⚠️ Validation Error:\\nPlease enter a valid cost price (must be greater than 0).');\r\n                    document.getElementById('costPrice').focus();\r\n                    return;\r\n                }\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    showError('Please enter a valid selling price');\r\n                    alert('⚠️ Validation Error:\\nPlease enter a valid selling price (must be greater than 0).');\r\n                    document.getElementById('sellingPrice').focus();\r\n                    return;\r\n                }\r\n                if (sellingPrice < costPrice) {\r\n                    showError('Selling price cannot be less than cost price');\r\n                    alert('⚠️ Validation Error:\\nSelling price cannot be less than cost price.\\nThis would result in a loss!');\r\n                    document.getElementById('sellingPrice').focus();\r\n                    return;\r\n                }\r\n                if (!saleDate) {\r\n                    showError('Please select a sale date');\r\n                    alert('⚠️ Validation Error:\\nPlease select the sale date.');\r\n                    document.getElementById('saleDate').focus();\r\n                    return;\r\n                }\r\n                if (!customerName) {\r\n                    showError('Please enter customer name');\r\n                    alert('⚠️ Validation Error:\\nPlease enter the customer name to proceed.');\r\n                    document.getElementById('customerName').focus();\r\n                    return;\r\n                }\r\n\r\n                // Save customer to database automatically when adding sale\r\n                saveCustomerFromSale(customerName, customerPhone, customerAddress);\r\n\r\n                // Create sale record with multiple categories\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: selectedCategories.join(', '), // Join multiple categories with comma\r\n                    categories: selectedCategories, // Keep array for advanced filtering\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage (fallback)\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    alert('⚠️ Storage Error!\\n\\nFailed to save the sale record to local storage:\\n\\n' + storageError.message + '\\n\\nThis might be due to storage limits or browser settings. Please try clearing some browser data or contact support.');\r\n                    return;\r\n                }\r\n\r\n                // Save to database (Firebase/Google Sheets)\r\n                saveToDatabase(saleRecord).then(result => {\r\n                    if (result.success) {\r\n                        console.log('✅ Sale saved to database:', result.message);\r\n                    } else {\r\n                        console.error('❌ Database save failed:', result.error);\r\n                        showError('Database save failed: ' + result.error);\r\n                    }\r\n                }).catch(error => {\r\n                    console.error('❌ Database save error:', error);\r\n                    showError('Database save error: ' + error.message);\r\n                });\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                document.getElementById('customerSearch').value = '';\r\n                document.getElementById('customer-search-results').style.display = 'none';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Clear selected categories\r\n                clearAllCategories();\r\n\r\n                // Reset sales display to show latest sales\r\n                resetSalesDisplay();\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n\r\n                // Show success message\r\n                showSuccess('✅ Sale record added successfully! Customer saved to database.');\r\n                alert('✅ Success!\\n\\nSale record has been added successfully!\\n\\n📊 Details:\\n• Item: ' + itemName + '\\n• Categories: ' + selectedCategories.join(', ') + '\\n• Customer: ' + customerName + '\\n• Profit: ₹' + (sellingPrice - costPrice).toFixed(2));\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                showError('Error adding sale record: ' + error.message);\r\n                alert('❌ Error!\\n\\nAn unexpected error occurred while adding the sale record:\\n\\n' + error.message + '\\n\\nPlease try again or contact support if the problem persists.');\r\n            }\r\n        }\r\n\r\n        // Save customer from sale entry automatically\r\n        function saveCustomerFromSale(customerName, customerPhone, customerAddress) {\r\n            try {\r\n                if (!customerName.trim()) return;\r\n\r\n                // Check if customer already exists by name or phone\r\n                const existingCustomerIndex = customersData.findIndex(customer =>\r\n                    customer.name.toLowerCase() === customerName.toLowerCase() ||\r\n                    (customerPhone && customer.phone === customerPhone)\r\n                );\r\n\r\n                if (existingCustomerIndex !== -1) {\r\n                    // Update existing customer with any new information\r\n                    const existingCustomer = customersData[existingCustomerIndex];\r\n                    let updated = false;\r\n\r\n                    if (customerPhone && customerPhone !== existingCustomer.phone && existingCustomer.phone === 'Not provided') {\r\n                        existingCustomer.phone = customerPhone;\r\n                        updated = true;\r\n                    }\r\n\r\n                    if (customerAddress && customerAddress !== existingCustomer.address && existingCustomer.address === 'Not provided') {\r\n                        existingCustomer.address = customerAddress;\r\n                        updated = true;\r\n                    }\r\n\r\n                    // Update last purchase date\r\n                    existingCustomer.lastPurchase = new Date().toISOString();\r\n                    updated = true;\r\n\r\n                    if (updated) {\r\n                        customersData[existingCustomerIndex] = existingCustomer;\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                    }\r\n                } else {\r\n                    // Add new customer\r\n                    const newCustomer = {\r\n                        id: Date.now(),\r\n                        name: customerName,\r\n                        phone: customerPhone || 'Not provided',\r\n                        address: customerAddress || 'Not provided',\r\n                        email: 'Not provided',\r\n                        status: 'active',\r\n                        notes: `Auto-added from sale entry on ${new Date().toLocaleDateString()}`,\r\n                        createdAt: new Date().toISOString(),\r\n                        lastPurchase: new Date().toISOString()\r\n                    };\r\n\r\n                    customersData.push(newCustomer);\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                }\r\n            } catch (error) {\r\n                console.error('Error saving customer from sale:', error);\r\n                // Don't throw error to not interrupt sale process\r\n            }\r\n        }\r\n\r\n        // Show success message\r\n        function showSuccess(message) {\r\n            const successDiv = document.getElementById('success-message');\r\n            const errorDiv = document.getElementById('error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show error message\r\n        function showError(message) {\r\n            const errorDiv = document.getElementById('error-message');\r\n            const successDiv = document.getElementById('success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n\r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n\r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n            const dailyReportDiv = document.getElementById('daily-sales-report');\r\n\r\n            countElement.textContent = salesData.length;\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                dailyReportDiv.style.display = 'none';\r\n                return;\r\n            }\r\n\r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n\r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n\r\n            // Update daily sales report\r\n            updateDailySalesReport();\r\n            dailyReportDiv.style.display = 'block';\r\n\r\n            // Show sales with pagination\r\n            const recentSales = salesData.slice().reverse(); // All sales in reverse order\r\n            const salesToShow = recentSales.slice(0, displayedSalesCount);\r\n            const loadMoreContainer = document.getElementById('load-more-container');\r\n\r\n            container.innerHTML = salesToShow.map(sale => `\r\n                <div class=\"sales-item\" id=\"sale-item-${sale.id}\">\r\n                    <div class=\"action-buttons\">\r\n                        <button class=\"edit-btn\" onclick=\"editSale(${sale.id})\" title=\"Edit Sale\">✏️</button>\r\n                        <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\" title=\"Delete Sale\">🗑️</button>\r\n                    </div>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n\r\n            // Show/hide Load More button\r\n            if (recentSales.length > displayedSalesCount) {\r\n                loadMoreContainer.style.display = 'block';\r\n                const remainingCount = recentSales.length - displayedSalesCount;\r\n                document.getElementById('load-more-btn').innerHTML = `📖 Load More Sales (${remainingCount} remaining)`;\r\n            } else {\r\n                loadMoreContainer.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Daily Sales Report variables\r\n        let isDailyViewDetailed = false;\r\n\r\n        // Update Daily Sales Report\r\n        function updateDailySalesReport() {\r\n            const dailyStats = calculateDailyStats();\r\n            const contentDiv = document.getElementById('daily-sales-content');\r\n\r\n            if (Object.keys(dailyStats).length === 0) {\r\n                contentDiv.innerHTML = '<p>No daily sales data available.</p>';\r\n                return;\r\n            }\r\n\r\n            // Always show detailed view\r\n            contentDiv.innerHTML = generateDetailedDailyView(dailyStats);\r\n        }\r\n\r\n        // Calculate Daily Statistics\r\n        function calculateDailyStats() {\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const saleDate = sale.saleDate;\r\n\r\n                if (!dailyStats[saleDate]) {\r\n                    dailyStats[saleDate] = {\r\n                        date: saleDate,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        categories: {},\r\n                        customers: new Set(),\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: '',\r\n                        topCustomer: ''\r\n                    };\r\n                }\r\n\r\n                const dayData = dailyStats[saleDate];\r\n                dayData.totalSales++;\r\n                dayData.totalRevenue += sale.sellingPrice;\r\n                dayData.totalCost += sale.costPrice;\r\n                dayData.totalProfit += sale.profit;\r\n                dayData.customers.add(sale.customerName);\r\n\r\n                // Category breakdown\r\n                if (!dayData.categories[sale.category]) {\r\n                    dayData.categories[sale.category] = {\r\n                        count: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dayData.categories[sale.category].count++;\r\n                dayData.categories[sale.category].revenue += sale.sellingPrice;\r\n                dayData.categories[sale.category].profit += sale.profit;\r\n            });\r\n\r\n            // Calculate derived stats\r\n            Object.values(dailyStats).forEach(day => {\r\n                day.avgOrderValue = day.totalRevenue / day.totalSales;\r\n                day.profitMargin = (day.totalProfit / day.totalRevenue) * 100;\r\n                day.uniqueCustomers = day.customers.size;\r\n\r\n                // Find top category by revenue\r\n                let topCategoryRevenue = 0;\r\n                Object.entries(day.categories).forEach(([category, data]) => {\r\n                    if (data.revenue > topCategoryRevenue) {\r\n                        topCategoryRevenue = data.revenue;\r\n                        day.topCategory = category;\r\n                    }\r\n                });\r\n            });\r\n\r\n            return dailyStats;\r\n        }\r\n\r\n        // Generate Compact Daily View\r\n        function generateCompactDailyView(dailyStats) {\r\n            const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n            const recentDays = sortedDays.slice(0, 7); // Show last 7 days\r\n\r\n            return `\r\n                <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;\">\r\n                    ${recentDays.map(day => `\r\n                        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; cursor: pointer;\" onclick=\"showDayDetails('${day.date}')\">\r\n                            <div style=\"display: flex; justify-content: between; align-items: center; margin-bottom: 10px;\">\r\n                                <h5 style=\"margin: 0; font-size: 14px; opacity: 0.9;\">${new Date(day.date).toLocaleDateString()}</h5>\r\n                                <span style=\"font-size: 12px; opacity: 0.8;\">📅</span>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 20px; font-weight: bold; margin-bottom: 2px;\">${day.totalSales}</div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Sales</div>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 16px; font-weight: bold; margin-bottom: 2px;\">₹${day.totalRevenue.toFixed(0)}</div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Revenue</div>\r\n                            </div>\r\n                            <div style=\"margin-bottom: 8px;\">\r\n                                <div style=\"font-size: 14px; font-weight: bold; margin-bottom: 2px; color: ${day.profitMargin >= 20 ? '#4ade80' : day.profitMargin >= 10 ? '#fbbf24' : '#f87171'};\">\r\n                                    ${day.profitMargin.toFixed(1)}%\r\n                                </div>\r\n                                <div style=\"font-size: 11px; opacity: 0.8;\">Profit Margin</div>\r\n                            </div>\r\n                            <div style=\"font-size: 11px; opacity: 0.7; margin-top: 8px;\">\r\n                                Top: ${day.topCategory}\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n                ${sortedDays.length > 7 ? `\r\n                    <div style=\"text-align: center; margin-top: 15px;\">\r\n                        <button onclick=\"showAllDays()\" style=\"background: rgba(255,255,255,0.2); border: none; color: white; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-size: 12px;\">\r\n                            📊 View All ${sortedDays.length} Days\r\n                        </button>\r\n                    </div>\r\n                ` : ''}\r\n            `;\r\n        }\r\n\r\n        // Generate Detailed Daily View\r\n        function generateDetailedDailyView(dailyStats) {\r\n            const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n            return `\r\n                <div style=\"max-height: 500px; overflow-y: auto;\">\r\n                    ${sortedDays.map(day => {\r\n                        const salesForDay = salesData.filter(sale => sale.saleDate === day.date);\r\n\r\n                        return `\r\n                            <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin-bottom: 15px;\">\r\n                                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                                    <h5 style=\"margin: 0; font-size: 16px;\">${new Date(day.date).toLocaleDateString('en-US', {\r\n                                        weekday: 'long',\r\n                                        year: 'numeric',\r\n                                        month: 'long',\r\n                                        day: 'numeric'\r\n                                    })}</h5>\r\n                                    <div style=\"font-size: 12px; opacity: 0.8;\">\r\n                                        ${day.totalSales} sales • ₹${day.totalRevenue.toFixed(0)} revenue • ₹${day.totalProfit.toFixed(0)} profit\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <!-- Individual Sales Records -->\r\n                                <div style=\"background: rgba(255,255,255,0.05); border-radius: 6px; padding: 10px;\">\r\n                                    <h6 style=\"margin: 0 0 10px 0; font-size: 12px; opacity: 0.9;\">📋 Sales Records:</h6>\r\n                                    <div style=\"display: flex; flex-direction: column; gap: 8px;\">\r\n                                        ${salesForDay.map((sale, index) => `\r\n                                            <div style=\"background: rgba(255,255,255,0.1); padding: 12px; border-radius: 6px; display: grid; grid-template-columns: 2fr 1fr 1fr 1fr 1fr; gap: 15px; align-items: center; font-size: 12px;\">\r\n                                                <div style=\"font-weight: bold;\">\r\n                                                    <div style=\"font-size: 13px; margin-bottom: 2px;\">${sale.itemName}</div>\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">👤 ${sale.customerName}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Category</div>\r\n                                                    <div style=\"font-weight: bold;\">${sale.category}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Cost</div>\r\n                                                    <div style=\"font-weight: bold;\">₹${sale.costPrice.toFixed(0)}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Selling</div>\r\n                                                    <div style=\"font-weight: bold;\">₹${sale.sellingPrice.toFixed(0)}</div>\r\n                                                </div>\r\n                                                <div style=\"text-align: center;\">\r\n                                                    <div style=\"font-size: 10px; opacity: 0.8;\">Profit</div>\r\n                                                    <div style=\"font-weight: bold; color: ${sale.profit >= 0 ? '#4ade80' : '#f87171'};\">₹${sale.profit.toFixed(0)}</div>\r\n                                                </div>\r\n                                            </div>\r\n                                        `).join('')}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        `;\r\n                    }).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Toggle Daily Sales View (function kept for compatibility)\r\n        function toggleDailySalesView() {\r\n            // Function removed - always show detailed view\r\n        }\r\n\r\n        // Show specific day details (future enhancement)\r\n        function showDayDetails(date) {\r\n            const dailyStats = calculateDailyStats();\r\n            const dayData = dailyStats[date];\r\n\r\n            if (!dayData) return;\r\n\r\n            const salesForDay = salesData.filter(sale => sale.saleDate === date);\r\n\r\n            alert(`📅 Sales Details for ${new Date(date).toLocaleDateString()}\r\n\r\n📊 Summary:\r\n• Total Sales: ${dayData.totalSales}\r\n• Revenue: ₹${dayData.totalRevenue.toFixed(2)}\r\n• Profit: ₹${dayData.totalProfit.toFixed(2)}\r\n• Profit Margin: ${dayData.profitMargin.toFixed(1)}%\r\n• Unique Customers: ${dayData.uniqueCustomers}\r\n• Average Order Value: ₹${dayData.avgOrderValue.toFixed(2)}\r\n\r\n🏷️ Categories:\r\n${Object.entries(dayData.categories).map(([cat, data]) =>\r\n`• ${cat}: ${data.count} sales (₹${data.revenue.toFixed(2)})`\r\n).join('\\n')}\r\n\r\n👥 Customers:\r\n${[...dayData.customers].join(', ')}`);\r\n        }\r\n\r\n        // Show all days (future enhancement)\r\n        function showAllDays() {\r\n            isDailyViewDetailed = true;\r\n            updateDailySalesReport();\r\n            document.getElementById('daily-view-toggle').textContent = '📋 Compact View';\r\n        }\r\n\r\n        // Export Daily Sales Report\r\n        function exportDailySalesReport() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available to export!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const dailyStats = calculateDailyStats();\r\n                const sortedDays = Object.values(dailyStats).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n\r\n                // Prepare data for export\r\n                const reportData = sortedDays.map(day => ({\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Day of Week': new Date(day.date).toLocaleDateString('en-US', { weekday: 'long' }),\r\n                    'Total Sales': day.totalSales,\r\n                    'Total Revenue (₹)': day.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': day.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': day.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': day.profitMargin.toFixed(2),\r\n                    'Average Order Value (₹)': day.avgOrderValue.toFixed(2),\r\n                    'Unique Customers': day.uniqueCustomers,\r\n                    'Top Category': day.topCategory,\r\n                    'Categories Count': Object.keys(day.categories).length\r\n                }));\r\n\r\n                // Create detailed category breakdown sheet\r\n                const categoryData = [];\r\n                sortedDays.forEach(day => {\r\n                    Object.entries(day.categories).forEach(([category, data]) => {\r\n                        categoryData.push({\r\n                            'Date': new Date(day.date).toLocaleDateString(),\r\n                            'Category': category,\r\n                            'Sales Count': data.count,\r\n                            'Revenue (₹)': data.revenue.toFixed(2),\r\n                            'Profit (₹)': data.profit.toFixed(2),\r\n                            'Avg Sale Value (₹)': (data.revenue / data.count).toFixed(2)\r\n                        });\r\n                    });\r\n                });\r\n\r\n                // Create workbook\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Add main daily report sheet\r\n                const ws1 = XLSX.utils.json_to_sheet(reportData);\r\n                XLSX.utils.book_append_sheet(wb, ws1, 'Daily Sales Summary');\r\n\r\n                // Add category breakdown sheet\r\n                const ws2 = XLSX.utils.json_to_sheet(categoryData);\r\n                XLSX.utils.book_append_sheet(wb, ws2, 'Daily Category Breakdown');\r\n\r\n                // Export file\r\n                const fileName = `Daily_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Daily Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting daily sales report:', error);\r\n                alert('Error exporting report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                updateCustomerCount();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n\r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Edit sale functionality\r\n        let currentEditingSaleId = null;\r\n\r\n        function editSale(id) {\r\n            // Check if another sale is being edited\r\n            if (currentEditingSaleId && currentEditingSaleId !== id) {\r\n                showError('Please finish editing the current sale before editing another one.');\r\n                return;\r\n            }\r\n\r\n            const sale = salesData.find(s => s.id === id);\r\n            if (!sale) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const saleItem = document.getElementById(`sale-item-${id}`);\r\n            if (!saleItem) {\r\n                showError('Sale item not found in DOM!');\r\n                return;\r\n            }\r\n\r\n            currentEditingSaleId = id;\r\n\r\n            // Create edit form\r\n            const editForm = `\r\n                <div class=\"edit-form\">\r\n                    <h4>✏️ Edit Sale Record</h4>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-itemName-${id}\">Item Name *</label>\r\n                            <input type=\"text\" id=\"edit-itemName-${id}\" value=\"${sale.itemName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-category-${id}\">Category *</label>\r\n                            <select id=\"edit-category-${id}\" required>\r\n                                <option value=\"Necklaces\" ${sale.category === 'Necklaces' ? 'selected' : ''}>Necklaces</option>\r\n                                <option value=\"Earrings\" ${sale.category === 'Earrings' ? 'selected' : ''}>Earrings</option>\r\n                                <option value=\"Bracelets\" ${sale.category === 'Bracelets' ? 'selected' : ''}>Bracelets</option>\r\n                                <option value=\"Rings\" ${sale.category === 'Rings' ? 'selected' : ''}>Rings</option>\r\n                                <option value=\"Anklets\" ${sale.category === 'Anklets' ? 'selected' : ''}>Anklets</option>\r\n                                <option value=\"Sets\" ${sale.category === 'Sets' ? 'selected' : ''}>Sets</option>\r\n                                <option value=\"Bangles\" ${sale.category === 'Bangles' ? 'selected' : ''}>Bangles</option>\r\n                                <option value=\"Chains\" ${sale.category === 'Chains' ? 'selected' : ''}>Chains</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-costPrice-${id}\">Cost Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-costPrice-${id}\" value=\"${sale.costPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-sellingPrice-${id}\">Selling Price (₹) *</label>\r\n                            <input type=\"number\" id=\"edit-sellingPrice-${id}\" value=\"${sale.sellingPrice}\" required min=\"0\" step=\"0.01\" oninput=\"calculateEditProfit(${id})\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-profit-${id}\">Profit (₹)</label>\r\n                            <input type=\"number\" id=\"edit-profit-${id}\" value=\"${sale.profit}\" readonly style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-saleDate-${id}\">Sale Date *</label>\r\n                            <input type=\"date\" id=\"edit-saleDate-${id}\" value=\"${sale.saleDate}\" required>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-row\">\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerName-${id}\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"edit-customerName-${id}\" value=\"${sale.customerName}\" required>\r\n                        </div>\r\n                        <div class=\"edit-form-group\">\r\n                            <label for=\"edit-customerPhone-${id}\">Customer Phone</label>\r\n                            <input type=\"tel\" id=\"edit-customerPhone-${id}\" value=\"${sale.customerPhone}\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"edit-form-group\">\r\n                        <label for=\"edit-customerAddress-${id}\">Customer Address</label>\r\n                        <textarea id=\"edit-customerAddress-${id}\" rows=\"2\">${sale.customerAddress || ''}</textarea>\r\n                    </div>\r\n                    <div class=\"edit-form-buttons\">\r\n                        <button class=\"save-edit-btn\" onclick=\"saveSaleEdit(${id})\">💾 Save Changes</button>\r\n                        <button class=\"cancel-edit-btn\" onclick=\"cancelSaleEdit(${id})\">❌ Cancel</button>\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            saleItem.innerHTML = editForm;\r\n\r\n            // Scroll the edited item into view\r\n            saleItem.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n\r\n        function calculateEditProfit(id) {\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            document.getElementById(`edit-profit-${id}`).value = profit.toFixed(2);\r\n        }\r\n\r\n        function saveSaleEdit(id) {\r\n            const itemName = document.getElementById(`edit-itemName-${id}`).value.trim();\r\n            const category = document.getElementById(`edit-category-${id}`).value;\r\n            const costPrice = parseFloat(document.getElementById(`edit-costPrice-${id}`).value);\r\n            const sellingPrice = parseFloat(document.getElementById(`edit-sellingPrice-${id}`).value);\r\n            const saleDate = document.getElementById(`edit-saleDate-${id}`).value;\r\n            const customerName = document.getElementById(`edit-customerName-${id}`).value.trim();\r\n            const customerPhone = document.getElementById(`edit-customerPhone-${id}`).value.trim();\r\n            const customerAddress = document.getElementById(`edit-customerAddress-${id}`).value.trim();\r\n\r\n            // Validation\r\n            if (!itemName || !category || !costPrice || !sellingPrice || !saleDate || !customerName) {\r\n                showError('Please fill in all required fields marked with *');\r\n                return;\r\n            }\r\n\r\n            if (costPrice < 0 || sellingPrice < 0) {\r\n                showError('Cost price and selling price must be positive numbers');\r\n                return;\r\n            }\r\n\r\n            // Find and update the sale\r\n            const saleIndex = salesData.findIndex(s => s.id === id);\r\n            if (saleIndex === -1) {\r\n                showError('Sale not found!');\r\n                return;\r\n            }\r\n\r\n            const profit = sellingPrice - costPrice;\r\n\r\n            // Update the sale data\r\n            salesData[saleIndex] = {\r\n                ...salesData[saleIndex],\r\n                itemName,\r\n                category,\r\n                costPrice,\r\n                sellingPrice,\r\n                profit,\r\n                saleDate,\r\n                customerName,\r\n                customerPhone: customerPhone || 'Not provided',\r\n                customerAddress: customerAddress || 'Not provided'\r\n            };\r\n\r\n            // Save to localStorage\r\n            localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n\r\n            // Reset editing state\r\n            currentEditingSaleId = null;\r\n\r\n            // Refresh displays\r\n            loadSalesRecords();\r\n            updateDashboard();\r\n            loadCustomers();\r\n\r\n            showSuccess('Sale record updated successfully!');\r\n        }\r\n\r\n        function cancelSaleEdit(id) {\r\n            currentEditingSaleId = null;\r\n            loadSalesRecords();\r\n        }\r\n\r\n        // Load more sales functionality\r\n        function loadMoreSales() {\r\n            displayedSalesCount += 20; // Load 20 more sales\r\n            loadSalesRecords();\r\n\r\n            // Smooth scroll to maintain position\r\n            const loadMoreBtn = document.getElementById('load-more-btn');\r\n            setTimeout(() => {\r\n                loadMoreBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n            }, 100);\r\n        }\r\n\r\n        // Reset displayed sales count when needed\r\n        function resetSalesDisplay() {\r\n            displayedSalesCount = 20;\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n\r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n\r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n\r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n\r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n\r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n\r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n\r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n\r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n\r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer =>\r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n\r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n\r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n\r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers with enhanced display\r\n        function loadCustomers() {\r\n            const countElement = document.getElementById('customers-count');\r\n            countElement.textContent = customersData.length;\r\n\r\n            // Reset pagination and filters when loading fresh data\r\n            currentCustomerPage = 1;\r\n            isCustomerSearchActive = false;\r\n            filteredCustomers = [];\r\n\r\n            // Clear search and sort inputs\r\n            document.getElementById('customer-database-search').value = '';\r\n            document.getElementById('customer-sort-select').value = 'name-asc';\r\n            currentCustomerSort = 'name-asc';\r\n\r\n            // Display the enhanced customer database\r\n            displayCustomerDatabase();\r\n        }\r\n\r\n        // Download customers Excel report\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const customersWithStats = customersData.map(customer => {\r\n                    const customerSales = salesData.filter(sale => sale.customerName === customer.name);\r\n                    const totalPurchases = customerSales.length;\r\n                    const totalSpent = customerSales.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                    const lastPurchase = customerSales.length > 0 ?\r\n                        new Date(Math.max(...customerSales.map(sale => new Date(sale.saleDate)))).toLocaleDateString() : 'Never';\r\n\r\n                    return {\r\n                        'Customer Name': customer.name,\r\n                        'Phone': customer.phone || 'Not provided',\r\n                        'Email': customer.email || 'Not provided',\r\n                        'Address': customer.address || 'Not provided',\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Average Order Value (₹)': totalPurchases > 0 ? (totalSpent / totalPurchases).toFixed(2) : 0,\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Customer Status': totalPurchases > 0 ? 'Active' : 'Inactive',\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Database');\r\n\r\n                const fileName = `Customer_Database_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Customer database exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting customers:', error);\r\n                showError('Error exporting customer data: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showError('No customers to delete!');\r\n                return;\r\n            }\r\n\r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n\r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nThis will NOT affect sales records, but customer search functionality will be limited.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL CUSTOMERS\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL CUSTOMERS') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        updateCustomerCount();\r\n                        showSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL CUSTOMERS\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n\r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n\r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n\r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n\r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n\r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n\r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n\r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n\r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n\r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n\r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n\r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n\r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n\r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong>\r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' :\r\n                          month.profitMargin > 10 ? '📊 Good Performance' :\r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n\r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n\r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n\r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n\r\n\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n\r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' :\r\n                                         month.profitMargin > 10 ? 'Good' :\r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n\r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n\r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n\r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n\r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n\r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong>\r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' :\r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' :\r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n\r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong>\r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' :\r\n                          cat.salesPercentage > 20 ? '📈 High Demand' :\r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' :\r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n\r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n\r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n\r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n\r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n\r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n\r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n\r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n\r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' :\r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' :\r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n\r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Customer Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n\r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n\r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' :\r\n                                   cat.salesPercentage > 20 ? 'High Demand' :\r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' :\r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n\r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Category Analytics exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n\r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n\r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n\r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n\r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n\r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n\r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n\r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n\r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert('📊 Sales Trends exported successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Mobile-friendly alert function\r\n        function mobileAlert(title, message, type = 'info') {\r\n            // For now, use native alert but this can be enhanced with custom modal\r\n            if (type === 'error') {\r\n                alert('❌ ' + title + '\\n\\n' + message);\r\n            } else if (type === 'success') {\r\n                alert('✅ ' + title + '\\n\\n' + message);\r\n            } else if (type === 'warning') {\r\n                alert('⚠️ ' + title + '\\n\\n' + message);\r\n            } else {\r\n                alert('ℹ️ ' + title + '\\n\\n' + message);\r\n            }\r\n        }\r\n\r\n        // ======== PURCHASE HISTORY FUNCTIONS ========\r\n\r\n        // Purchase history data\r\n        let purchaseData = [];\r\n\r\n        // Initialize purchase data from localStorage\r\n        function initializePurchaseData() {\r\n            const savedPurchases = localStorage.getItem('jewelryPurchases');\r\n            if (savedPurchases) {\r\n                purchaseData = JSON.parse(savedPurchases);\r\n            } else {\r\n                purchaseData = [];\r\n            }\r\n        }\r\n\r\n        // Save purchase data to localStorage\r\n        function savePurchaseData() {\r\n            localStorage.setItem('jewelryPurchases', JSON.stringify(purchaseData));\r\n        }\r\n\r\n        // Toggle purchase history section\r\n        function togglePurchaseSection() {\r\n            const container = document.getElementById('purchase-content-container');\r\n            const toggleBtn = document.getElementById('purchase-toggle-btn');\r\n\r\n            if (container.classList.contains('collapsed')) {\r\n                container.classList.remove('collapsed');\r\n                toggleBtn.title = 'Collapse Purchase History';\r\n                container.classList.add('expanded');\r\n                toggleBtn.textContent = '▼';\r\n                toggleBtn.classList.remove('collapsed');\r\n                loadPurchaseHistory();\r\n            } else {\r\n                container.classList.remove('expanded');\r\n                container.classList.add('collapsed');\r\n                toggleBtn.title = 'Expand Purchase History';\r\n                toggleBtn.textContent = '►';\r\n                toggleBtn.classList.add('collapsed');\r\n            }\r\n        }\r\n\r\n        // Load and display purchase history\r\n        function loadPurchaseHistory() {\r\n            initializePurchaseData();\r\n            updatePurchaseSummary();\r\n            displayPurchaseRecords();\r\n            updatePurchaseCount();\r\n        }\r\n\r\n        // Update purchase summary statistics\r\n        function updatePurchaseSummary() {\r\n            const totalPurchases = purchaseData.length;\r\n            const totalPurchaseCost = purchaseData.reduce((sum, item) => sum + item.purchaseCost, 0);\r\n            const totalSellingValue = purchaseData.reduce((sum, item) => sum + item.sellingPrice, 0);\r\n            const potentialProfit = totalSellingValue - totalPurchaseCost;\r\n\r\n            document.getElementById('summary-total-purchases').textContent = totalPurchases;\r\n            document.getElementById('summary-total-purchase-cost').textContent = `₹${totalPurchaseCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling-value').textContent = `₹${totalSellingValue.toFixed(2)}`;\r\n            document.getElementById('summary-potential-profit').textContent = `₹${potentialProfit.toFixed(2)}`;\r\n        }\r\n\r\n        // Update purchase count\r\n        function updatePurchaseCount() {\r\n            document.getElementById('purchase-count').textContent = purchaseData.length;\r\n        }\r\n\r\n        // Display purchase records\r\n        function displayPurchaseRecords() {\r\n            const container = document.getElementById('purchase-records');\r\n            const noDataMessage = document.getElementById('no-purchase-message');\r\n\r\n            if (purchaseData.length === 0) {\r\n                container.innerHTML = '';\r\n                noDataMessage.style.display = 'block';\r\n                return;\r\n            }\r\n\r\n            noDataMessage.style.display = 'none';\r\n\r\n            // Sort by purchase date (newest first)\r\n            const sortedPurchases = [...purchaseData].sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate));\r\n\r\n            container.innerHTML = sortedPurchases.map((item, index) => {\r\n                const profitMargin = ((item.sellingPrice - item.purchaseCost) / item.sellingPrice * 100).toFixed(1);\r\n                const profit = item.sellingPrice - item.purchaseCost;\r\n                const profitColor = profit >= 0 ? '#10B981' : '#EF4444';\r\n                const statusColor = item.status === 'sold' ? '#10B981' : item.status === 'reserved' ? '#F59E0B' : '#6B7280';\r\n\r\n                return `\r\n                    <div class=\"purchase-record-item\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <h4 style=\"color: #333; margin: 0 0 5px 0; font-size: 16px;\">${item.itemName}</h4>\r\n                                <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\r\n                                    <span style=\"background: #667eea; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;\">\r\n                                        ${getCategoryIcon(item.category)} ${item.category}\r\n                                    </span>\r\n                                    <span style=\"background: ${statusColor}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px; text-transform: uppercase;\">\r\n                                        ${item.status || 'Available'}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div style=\"text-align: right;\">\r\n                                <div style=\"display: flex; gap: 5px;\">\r\n                                    <button onclick=\"editPurchaseRecord(${index})\" style=\"background: #4ecdc4; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Edit\">\r\n                                        ✏️\r\n                                    </button>\r\n                                    <button onclick=\"deletePurchaseRecord(${index})\" style=\"background: #ff6b6b; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Delete\">\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💰 Purchase Cost:</strong> ₹${item.purchaseCost.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💎 Selling Price:</strong> ₹${item.sellingPrice.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: ${profitColor}; font-size: 14px;\">\r\n                                    <strong>📈 Potential Profit:</strong> ₹${profit.toFixed(2)} (${profitMargin}%)\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📅 Purchase Date:</strong> ${new Date(item.purchaseDate).toLocaleDateString()}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>🏪 Supplier:</strong> ${item.supplier || 'Not specified'}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📦 Quantity:</strong> ${item.quantity || 1}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        ${item.notes ? `\r\n                            <div style=\"background: #f8f9fa; padding: 10px; border-radius: 6px; margin-top: 10px;\">\r\n                                <p style=\"margin: 0; color: #666; font-size: 13px;\">\r\n                                    <strong>📝 Notes:</strong> ${item.notes}\r\n                                </p>\r\n                            </div>\r\n                        ` : ''}\r\n                    </div>\r\n                `;\r\n            }).join('');\r\n        }\r\n\r\n        // Add new purchase record - Show form instead of prompts\r\n        function addToPurchaseHistory() {\r\n            const form = document.getElementById('add-purchase-form');\r\n            if (form.style.display === 'none' || form.style.display === '') {\r\n                // Show the form and scroll to it\r\n                form.style.display = 'block';\r\n                form.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n\r\n                // Clear any previous values\r\n                document.getElementById('supplier-name').value = '';\r\n                document.getElementById('purchase-name').value = '';\r\n                document.getElementById('purchase-cost').value = '';\r\n                document.getElementById('purchase-category').value = '';\r\n                document.getElementById('selling-price').value = '';\r\n                document.getElementById('purchase-quantity').value = '1';\r\n                document.getElementById('purchase-notes').value = '';\r\n                } else {\r\n                // Hide the form if it's already shown\r\n                form.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Cancel adding purchase - Hide the form\r\n        function cancelAddPurchase() {\r\n            const form = document.getElementById('add-purchase-form');\r\n            form.style.display = 'none';\r\n        }\r\n\r\n        // Save purchase from form data\r\n        function savePurchaseFromForm() {\r\n            const supplierName = document.getElementById('supplier-name').value.trim();\r\n            const purchaseName = document.getElementById('purchase-name').value.trim();\r\n            const purchaseCost = parseFloat(document.getElementById('purchase-cost').value);\r\n            const category = document.getElementById('purchase-category').value.trim();\r\n                // Focus on the first input\r\n                document.getElementById('supplier-name').focus();\r\n\r\n            const sellingPrice = parseFloat(document.getElementById('selling-price').value);\r\n            const quantity = parseInt(document.getElementById('purchase-quantity').value) || 1;\r\n            const notes = document.getElementById('purchase-notes').value.trim();\r\n\r\n            // Validation\r\n            if (!supplierName) {\r\n                alert('❌ Please enter supplier name.');\r\n                document.getElementById('supplier-name').focus();\r\n                return;\r\n            }\r\n\r\n            if (!purchaseName) {\r\n                alert('❌ Please enter purchase name (item name).');\r\n                document.getElementById('purchase-name').focus();\r\n                return;\r\n            }\r\n\r\n            if (isNaN(purchaseCost) || purchaseCost <= 0) {\r\n                alert('❌ Please enter a valid purchase cost.');\r\n                document.getElementById('purchase-cost').focus();\r\n                return;\r\n            }\r\n\r\n            if (sellingPrice && (isNaN(sellingPrice) || sellingPrice <= 0)) {\r\n                alert('❌ Please enter a valid selling price or leave it empty.');\r\n                document.getElementById('selling-price').focus();\r\n                return;\r\n            }\r\n\r\n            // Create purchase record\r\n            const purchaseRecord = {\r\n                id: Date.now().toString(),\r\n                itemName: purchaseName,\r\n                category: category || 'General',\r\n                purchaseCost: purchaseCost,\r\n                sellingPrice: sellingPrice || 0,\r\n                supplier: supplierName,\r\n                quantity: quantity,\r\n                status: 'available',\r\n                purchaseDate: new Date().toISOString().split('T')[0],\r\n                notes: notes\r\n            };\r\n\r\n            // Add to data and save\r\n            purchaseData.unshift(purchaseRecord);\r\n            savePurchaseData();\r\n            loadPurchaseHistory();\r\n\r\n            // Hide form and show success message\r\n            document.getElementById('add-purchase-form').style.display = 'none';\r\n            alert('✅ Purchase record added successfully!');\r\n        }\r\n\r\n        // Handle Enter key in purchase form\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            const purchaseFormInputs = document.querySelectorAll('#add-purchase-form input, #add-purchase-form textarea');\r\n            purchaseFormInputs.forEach(input => {\r\n                input.addEventListener('keypress', function(e) {\r\n                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                        e.preventDefault();\r\n                        // If it's the last input or textarea, save the form\r\n                        if (input.id === 'purchase-notes') {\r\n                            savePurchaseFromForm();\r\n                        } else {\r\n                            // Move to next input\r\n                            const inputs = Array.from(purchaseFormInputs);\r\n                            const currentIndex = inputs.indexOf(input);\r\n                            if (currentIndex < inputs.length - 1) {\r\n                                inputs[currentIndex + 1].focus();\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        // Edit purchase record\r\n        function editPurchaseRecord(index) {\r\n            const item = purchaseData[index];\r\n            if (!item) return;\r\n\r\n            const newItemName = prompt('Edit item name:', item.itemName);\r\n            if (newItemName === null) return;\r\n\r\n            const newCategory = prompt('Edit category:', item.category);\r\n            if (newCategory === null) return;\r\n\r\n            const newPurchaseCost = parseFloat(prompt('Edit purchase cost:', item.purchaseCost));\r\n            if (isNaN(newPurchaseCost)) return;\r\n\r\n            const newSellingPrice = parseFloat(prompt('Edit selling price:', item.sellingPrice));\r\n            if (isNaN(newSellingPrice)) return;\r\n\r\n            const newSupplier = prompt('Edit supplier:', item.supplier || '');\r\n            const newQuantity = parseInt(prompt('Edit quantity:', item.quantity || 1));\r\n            const newNotes = prompt('Edit notes:', item.notes || '');\r\n\r\n            purchaseData[index] = {\r\n                ...item,\r\n                itemName: newItemName.trim(),\r\n                category: newCategory.trim(),\r\n                purchaseCost: newPurchaseCost,\r\n                sellingPrice: newSellingPrice,\r\n                supplier: (newSupplier || '').trim() || 'Not specified',\r\n                quantity: isNaN(newQuantity) ? 1 : newQuantity,\r\n                notes: (newNotes || '').trim()\r\n            };\r\n\r\n            savePurchaseData();\r\n            loadPurchaseHistory();\r\n            alert('✅ Purchase record updated successfully!');\r\n        }\r\n\r\n        // Delete purchase record\r\n        function deletePurchaseRecord(index) {\r\n            const item = purchaseData[index];\r\n            if (!item) return;\r\n\r\n            if (confirm(`Are you sure you want to delete \"${item.itemName}\"?`)) {\r\n                purchaseData.splice(index, 1);\r\n                savePurchaseData();\r\n                loadPurchaseHistory();\r\n                alert('🗑️ Purchase record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Filter purchases based on search\r\n        function filterPurchases() {\r\n            const searchTerm = document.getElementById('purchase-search').value.toLowerCase();\r\n\r\n            if (!searchTerm) {\r\n                displayPurchaseRecords();\r\n                return;\r\n            }\r\n\r\n            const filteredPurchases = purchaseData.filter(item =>\r\n                item.itemName.toLowerCase().includes(searchTerm) ||\r\n                item.category.toLowerCase().includes(searchTerm) ||\r\n                (item.supplier && item.supplier.toLowerCase().includes(searchTerm))\r\n            );\r\n\r\n            const container = document.getElementById('purchase-records');\r\n            const noDataMessage = document.getElementById('no-purchase-message');\r\n\r\n            if (filteredPurchases.length === 0) {\r\n                container.innerHTML = '';\r\n                noDataMessage.style.display = 'block';\r\n                noDataMessage.innerHTML = `\r\n                    <h3 style=\"color: #999;\">🔍 No Purchase Records Found</h3>\r\n                    <p>No purchases match your search term \"${searchTerm}\"</p>\r\n                `;\r\n                return;\r\n            }\r\n\r\n            noDataMessage.style.display = 'none';\r\n            // Display filtered results (reuse the same display logic)\r\n            const sortedPurchases = [...filteredPurchases].sort((a, b) => new Date(b.purchaseDate) - new Date(a.purchaseDate));\r\n\r\n            container.innerHTML = sortedPurchases.map((item, index) => {\r\n                const originalIndex = purchaseData.findIndex(p => p.id === item.id);\r\n                const profitMargin = ((item.sellingPrice - item.purchaseCost) / item.sellingPrice * 100).toFixed(1);\r\n                const profit = item.sellingPrice - item.purchaseCost;\r\n                const profitColor = profit >= 0 ? '#10B981' : '#EF4444';\r\n                const statusColor = item.status === 'sold' ? '#10B981' : item.status === 'reserved' ? '#F59E0B' : '#6B7280';\r\n\r\n                return `\r\n                    <div class=\"purchase-record-item\">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: start; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <h4 style=\"color: #333; margin: 0 0 5px 0; font-size: 16px;\">${item.itemName}</h4>\r\n                                <div style=\"display: flex; flex-wrap: wrap; gap: 8px; align-items: center;\">\r\n                                    <span style=\"background: #667eea; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px;\">\r\n                                        ${getCategoryIcon(item.category)} ${item.category}\r\n                                    </span>\r\n                                    <span style=\"background: ${statusColor}; color: white; padding: 3px 8px; border-radius: 12px; font-size: 11px; text-transform: uppercase;\">\r\n                                        ${item.status || 'Available'}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <div style=\"text-align: right;\">\r\n                                <div style=\"display: flex; gap: 5px;\">\r\n                                    <button onclick=\"editPurchaseRecord(${originalIndex})\" style=\"background: #4ecdc4; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Edit\">\r\n                                        ✏️\r\n                                    </button>\r\n                                    <button onclick=\"deletePurchaseRecord(${originalIndex})\" style=\"background: #ff6b6b; color: white; border: none; padding: 5px 8px; border-radius: 4px; cursor: pointer; font-size: 12px;\" title=\"Delete\">\r\n                                        🗑️\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 12px;\">\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💰 Purchase Cost:</strong> ₹${item.purchaseCost.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>💎 Selling Price:</strong> ₹${item.sellingPrice.toFixed(2)}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: ${profitColor}; font-size: 14px;\">\r\n                                    <strong>📈 Potential Profit:</strong> ₹${profit.toFixed(2)} (${profitMargin}%)\r\n                                </p>\r\n                            </div>\r\n                            <div>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📅 Purchase Date:</strong> ${new Date(item.purchaseDate).toLocaleDateString()}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>🏪 Supplier:</strong> ${item.supplier || 'Not specified'}\r\n                                </p>\r\n                                <p style=\"margin: 5px 0; color: #666; font-size: 14px;\">\r\n                                    <strong>📦 Quantity:</strong> ${item.quantity || 1}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        ${item.notes ? `\r\n                            <div style=\"background: #f8f9fa; padding: 10px; border-radius: 6px; margin-top: 10px;\">\r\n                                <p style=\"margin: 0; color: #666; font-size: 13px;\">\r\n                                    <strong>📝 Notes:</strong> ${item.notes}\r\n                                </p>\r\n                            </div>\r\n                        ` : ''}\r\n                    </div>\r\n                `;\r\n            }).join('');\r\n        }\r\n\r\n        // Clear purchase search filter\r\n        function clearPurchaseFilter() {\r\n            document.getElementById('purchase-search').value = '';\r\n            displayPurchaseRecords();\r\n        }\r\n\r\n        // Export purchase history to Excel\r\n        function exportPurchaseHistory() {\r\n            if (purchaseData.length === 0) {\r\n                alert('No purchase records to export!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const dataToExport = purchaseData.map(item => ({\r\n                    'Item Name': item.itemName,\r\n                    'Category': item.category,\r\n                    'Purchase Cost (₹)': item.purchaseCost.toFixed(2),\r\n                    'Selling Price (₹)': item.sellingPrice.toFixed(2),\r\n                    'Potential Profit (₹)': (item.sellingPrice - item.purchaseCost).toFixed(2),\r\n                    'Profit Margin (%)': (((item.sellingPrice - item.purchaseCost) / item.sellingPrice) * 100).toFixed(1),\r\n                    'Purchase Date': item.purchaseDate,\r\n                    'Supplier': item.supplier || 'Not specified',\r\n                    'Quantity': item.quantity || 1,\r\n                    'Status': item.status || 'Available',\r\n                    'Notes': item.notes || ''\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(dataToExport);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Purchase History');\r\n\r\n                const fileName = `Purchase_History_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n\r\n                alert(`📦 Purchase history exported successfully!\\n\\nFile: ${fileName}\\nRecords: ${purchaseData.length}`);\r\n\r\n            } catch (error) {\r\n                console.error('Error exporting purchase history:', error);\r\n                alert('Error exporting purchase history: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Initialize purchase data when the app loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializePurchaseData();\r\n            updatePurchaseCount();\r\n        });\r\n    </script>\r\n\r\n    <!-- Mobile-friendly modal for alerts (future enhancement) -->\r\n    <div id=\"mobile-modal\" class=\"mobile-modal\">\r\n        <div class=\"mobile-modal-content\">\r\n            <div id=\"mobile-modal-header\" class=\"mobile-modal-header\"></div>\r\n            <div id=\"mobile-modal-body\" class=\"mobile-modal-body\"></div>\r\n            <div class=\"mobile-modal-buttons\">\r\n                <button id=\"mobile-modal-ok\" class=\"btn btn-primary\">OK</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n    <!-- Enhanced loading overlay -->\r\n    <div id=\"loading-overlay\" style=\"display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;\r\n         background: rgba(102, 126, 234, 0.9); z-index: 9999; align-items: center; justify-content: center;\">\r\n        <div style=\"text-align: center; color: white;\">\r\n            <div class=\"loading-spinner\" style=\"width: 60px; height: 60px; border: 4px solid rgba(255,255,255,0.3);\r\n                 border-top: 4px solid white; margin: 0 auto 20px;\"></div>\r\n            <h3 style=\"margin: 0; font-weight: 300;\">Processing...</h3>\r\n            <p style=\"margin: 10px 0 0; opacity: 0.8;\">Please wait while we save your data</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n"
                },
                "codebaseEnabled": true
            },
            "createdAt": 1752483339264,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "data is not getting updated in firebase when enter through github https://manish0306.github.io/TheiaJewelz_Latest/jewelry_sales_final.html"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "a1e2317f-ed6d-44c6-9a69-2ad08a66d453",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I can see you're having issues with Firebase data not updating when accessing your application through GitHub Pages. This is a common issue that typically relates to Firebase configuration, security rules, or domain authorization. Let me examine your Firebase configuration to help diagnose the problem."
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01B41MPbhz3vBEkmZKLsd2jW",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me search for the Firebase configuration section:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01JGc6n7EjDD34Gjvgooy1Ju",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me find the Firebase configuration section:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01X7nU7zK6VLfzmyjEdvNWuT",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me find the dbConfig object to see the Firebase configuration:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_015551ymxgb2sifWQVtvQXCs",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_017cq9warEcQLaYowNexCWba",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now I can see the issue! The Firebase configuration is present and valid, but there are a few potential issues that could cause data not to update when accessing from GitHub Pages. Let me check the Firebase security rules section and also look for any domain restrictions:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01XKc1iK5NueTzzur6V3xxpP",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me also check for any authentication-related code that might affect the GitHub Pages deployment:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_0142jHN9QnQp9oVJziUFQc6F",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me check the Firebase security rules or permissions that might be blocking the writes:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01AUHEKNqEo1Qe3rDMEVz2nQ",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me check for the saveData function to see how data is being saved:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01JjPs98MEhX2SZsFPUj9YNg",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me search for the Firebase save/write operations:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_015XdsvxyxWPUBgNinaESYaA",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me look at the specific save functions:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01JRCZrZFMz4JUrFiDvk7XtV",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Now I can see the issue! The problem is likely one of these common issues when deploying to GitHub Pages:\n\n1. **Firebase Security Rules**: The Firebase database might have security rules that only allow requests from specific domains\n2. **Authentication Issue**: The app might require authentication to write data\n3. **CORS Issues**: Cross-origin requests might be blocked\n\nLet me also check for any console errors by looking at the error handling:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01VM3oXZ1kKnNqy7Qd7iBmxN",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Based on my analysis, here are the most likely causes and solutions for the Firebase data not updating when accessing from GitHub Pages:\n\n## **Primary Issues & Solutions:**\n\n### 1. **Firebase Security Rules (Most Likely)**\nYour Firebase Firestore probably has security rules that are blocking writes from the GitHub Pages domain. \n\n**Solution:** Update your Firebase Security Rules to allow writes from your GitHub Pages domain:\n\n```javascript\n// In Firebase Console > Firestore Database > Rules\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Allow read/write access to all users (for testing)\n    match /{document=**} {\n      allow read, write: if true;\n    }\n  }\n}\n```\n\n**Or for more security, allow specific domains:**\n```javascript\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read, write: if request.auth != null ||\n        resource.data.allowedDomains.hasAny(['manish0306.github.io', 'localhost']);\n    }\n  }\n}\n```\n\n### 2. **Add GitHub Pages Domain to Firebase Authentication**\n\nGo to your Firebase Console → Authentication → Settings → Authorized domains and add:\n- `manish0306.github.io`\n\n### 3. **Enable Debug Logging**\nAdd this code to help debug the issue:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_013Rczxohrbvg1r6sCXZRU8y",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -4460,6 +4460,8 @@\n                 // Initialize Firebase (check if already exists)\n                 if (!firebaseApp) {\n                     console.log('🔥 Initializing Firebase with config:', dbConfig.firebase);\n+                    console.log('🌐 Current domain:', window.location.hostname);\n+                    console.log('🌐 Current origin:', window.location.origin);\n                     \n                     // Check if Firebase app already exists\n                     if (firebase.apps.length === 0) {\n@@ -4473,6 +4475,13 @@\n                     firestore = firebase.firestore();\n                     auth = firebase.auth();\n                     console.log('🔥 Firestore instance:', firestore);\n+                    \n+                    // Enable network for GitHub Pages\n+                    firestore.enableNetwork().then(() => {\n+                        console.log('🔥 Firestore network enabled');\n+                    }).catch(err => {\n+                        console.error('❌ Firestore network error:', err);\n+                    });\n                     \n                     // Show connection status\n                     showDatabaseStatus('Firebase connected', 'success');",
                    "refToolCallId": "toolu_013Rczxohrbvg1r6sCXZRU8y"
                },
                {
                    "type": "text",
                    "text": "### 4. **Enhanced Error Handling for GitHub Pages**"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Mo6RxvM6t1YWJ1uuc84eaj",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -4574,6 +4574,7 @@\n         // Save to Firebase\n         async function saveToFirebase(saleData) {\n             console.log('🔥 Attempting to save to Firebase:', saleData);\n+            console.log('🌐 Current domain:', window.location.hostname);\n             \n             if (!firestore) {\n                 const error = 'Firebase not initialized';\n@@ -4584,11 +4585,19 @@\n             \n             try {\n                 console.log('🔥 Firestore instance exists, saving to collection...');\n-                const docRef = await firestore.collection('sales').add({\n+                \n+                // Add domain information for debugging\n+                const dataToSave = {\n                     ...saleData,\n                     timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n-                    createdAt: new Date().toISOString()\n-                });\n+                    createdAt: new Date().toISOString(),\n+                    domain: window.location.hostname,\n+                    origin: window.location.origin\n+                };\n+                \n+                console.log('🔥 Data being saved:', dataToSave);\n+                \n+                const docRef = await firestore.collection('sales').add(dataToSave);\n                 \n                 console.log('✅ Successfully saved to Firebase with ID:', docRef.id);\n                 return {\n@@ -4598,6 +4607,17 @@\n                 };\n             } catch (error) {\n                 console.error('❌ Firebase save error:', error);\n+                console.error('❌ Error code:', error.code);\n+                console.error('❌ Error details:', error);\n+                \n+                // Handle specific Firebase errors\n+                if (error.code === 'permission-denied') {\n+                    const errorMsg = 'Permission denied. Please check Firebase security rules for domain: ' + window.location.hostname;\n+                    console.error('❌ Permission Error:', errorMsg);\n+                    alert('❌ Permission Error: ' + errorMsg);\n+                    return { success: false, error: errorMsg };\n+                }\n+                \n                 alert('❌ Firebase Save Error: ' + error.message);\n                 return { success: false, error: error.message };\n             }",
                    "refToolCallId": "toolu_01Mo6RxvM6t1YWJ1uuc84eaj"
                },
                {
                    "type": "text",
                    "text": "### 5. **Add Connection Test Function**"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01AAahRPNeo39DdynGztkc8P",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -4434,6 +4434,7 @@\n         // ======== DATABASE INITIALIZATION ========\n         function initializeDatabase() {\n             console.log('🔄 Initializing database...', dbConfig.method);\n+            console.log('🌐 Running on domain:', window.location.hostname);\n             \n             switch(dbConfig.method) {\n                 case 'firebase':\n@@ -4445,6 +4446,40 @@\n                 default:\n                     console.warn('Unknown database method, falling back to local storage');\n                     return initializeLocalStorage();\n+            }\n+        }\n+\n+        // Test Firebase connection\n+        async function testFirebaseConnection() {\n+            if (!firestore) {\n+                console.error('❌ Firebase not initialized');\n+                return false;\n+            }\n+            \n+            try {\n+                console.log('🔥 Testing Firebase connection...');\n+                const testDoc = await firestore.collection('connection-test').add({\n+                    test: true,\n+                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n+                    domain: window.location.hostname,\n+                    origin: window.location.origin\n+                });\n+                \n+                console.log('✅ Firebase connection test successful:', testDoc.id);\n+                \n+                // Clean up test document\n+                await testDoc.delete();\n+                return true;\n+            } catch (error) {\n+                console.error('❌ Firebase connection test failed:', error);\n+                console.error('❌ Error code:', error.code);\n+                \n+                if (error.code === 'permission-denied') {\n+                    console.error('❌ Permission denied - check Firebase security rules');\n+                    alert('❌ Permission denied - Firebase security rules may be blocking access from: ' + window.location.hostname);\n+                }\n+                \n+                return false;\n             }\n         }\n ",
                    "refToolCallId": "toolu_01AAahRPNeo39DdynGztkc8P"
                },
                {
                    "type": "text",
                    "text": "Now let's also add a button to test the Firebase connection:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01KPd7WZy9GcwcXEBv1ucRHR",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me search for the settings modal to add the test button:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_013tAHXz1Qa5Fc3qQqoDEtNy",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01GBs6vJTPU3rFJZKqdTUeWn",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me find the database settings section:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01WgA3FcC7q72uVNLznp8pT6",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me add the test button to the database settings section:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01PNxES2Tg25fy7gVs9LkeJJ",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -3397,7 +3397,12 @@\n                             <p style=\"margin: 0; font-size: 13px; color: var(--neutral-600);\">\n                                 <strong>Method:</strong> <span id=\"current-db-method\">Firebase Firestore</span><br>\n                                 <strong>Connection:</strong> <span id=\"current-db-status\">Connected</span><br>\n-                                <strong>Auto-save:</strong> <span id=\"current-auto-save\">Enabled</span>\n+                                <strong>Auto-save:</strong> <span id=\"current-auto-save\">Enabled</span><br>\n+                                <strong>Domain:</strong> <span id=\"current-domain\">Loading...</span>\n+                            </p>\n+                            <button class=\"btn btn-primary\" onclick=\"runConnectionTest()\" style=\"margin-top: 10px; padding: 8px 16px; font-size: 13px;\">\n+                                <i class=\"fas fa-vial\"></i> Test Firebase Connection\n+                            </button>\n                             </p>\n                         </div>\n ",
                    "refToolCallId": "toolu_01PNxES2Tg25fy7gVs9LkeJJ"
                },
                {
                    "type": "text",
                    "text": "Now let me add the JavaScript function for the connection test:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01YV234KpwX1tR6SppLT5Tsy",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me add the connection test function:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01MYVrYbQpVSBu39zKJv5ncN",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -5296,6 +5296,9 @@\n                     if (settings.currencySymbol) {\n                         document.getElementById('currency-symbol').value = settings.currencySymbol;\n                     }\n+                    \n+                    // Update domain display\n+                    document.getElementById('current-domain').textContent = window.location.hostname;\n                     \n                     // Load database settings\n                     if (settings.database) {",
                    "refToolCallId": "toolu_01MYVrYbQpVSBu39zKJv5ncN"
                },
                {
                    "type": "text",
                    "text": "Now let me add the connection test function:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01S1iQnBpUBxWzd8EBE51JCJ",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me add the connection test function near the end of the JavaScript section:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_014QqLcBThLqT5cVU2YUiS53",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me add the connection test function specifically for Firebase:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01ByCJkwYpMY5cz49jtWFbXk",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -5878,6 +5878,24 @@\n             }\n         }\n \n+        // Run Firebase connection test\n+        async function runConnectionTest() {\n+            const btn = event.target;\n+            btn.disabled = true;\n+            btn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Testing...';\n+            \n+            try {\n+                if (dbConfig.method === 'firebase') {\n+                    await testFirebaseConnection();\n+                } else {\n+                    await testDatabaseConnection();\n+                }\n+            } finally {\n+                btn.disabled = false;\n+                btn.innerHTML = '<i class=\"fas fa-vial\"></i> Test Firebase Connection';\n+            }\n+        }\n+\n         // Sync local data to database\n         async function syncLocalData() {\n             try {",
                    "refToolCallId": "toolu_01ByCJkwYpMY5cz49jtWFbXk"
                },
                {
                    "type": "text",
                    "text": "Now let me create a summary document to help you fix the Firebase issue:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01FEZg69T6PmT7Vprzdrhk77",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "FIREBASE_GITHUB_PAGES_FIX.md",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\FIREBASE_GITHUB_PAGES_FIX.md"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- FIREBASE_GITHUB_PAGES_FIX.md\n+++ FIREBASE_GITHUB_PAGES_FIX.md\n@@ -0,0 +1,134 @@\n+# 🔥 Firebase GitHub Pages Fix Guide\n+\n+## Issue\n+Data is not getting updated in Firebase when accessing the app through GitHub Pages: `https://manish0306.github.io/TheiaJewelz_Latest/jewelry_sales_final.html`\n+\n+## Root Cause\n+The most likely cause is **Firebase Security Rules** blocking writes from the GitHub Pages domain.\n+\n+## ✅ Solutions (Step by Step)\n+\n+### 1. **Fix Firebase Security Rules (Most Important)**\n+\n+Go to your Firebase Console → Firestore Database → Rules and update:\n+\n+```javascript\n+rules_version = '2';\n+service cloud.firestore {\n+  match /databases/{database}/documents {\n+    // Allow read/write access to all users\n+    match /{document=**} {\n+      allow read, write: if true;\n+    }\n+  }\n+}\n+```\n+\n+**Or for better security:**\n+```javascript\n+rules_version = '2';\n+service cloud.firestore {\n+  match /databases/{database}/documents {\n+    match /{document=**} {\n+      allow read, write: if request.auth != null || \n+        request.headers.origin.matches(\".*github.io.*\") ||\n+        request.headers.origin == \"https://manish0306.github.io\";\n+    }\n+  }\n+}\n+```\n+\n+### 2. **Add Authorized Domain**\n+\n+Firebase Console → Authentication → Settings → Authorized domains:\n+- Add: `manish0306.github.io`\n+\n+### 3. **Test the Connection**\n+\n+1. Open your GitHub Pages app\n+2. Go to Settings (gear icon)\n+3. Click \"Database\" tab\n+4. Click \"Test Firebase Connection\" button\n+5. Check browser console for detailed error messages\n+\n+### 4. **Debug Steps**\n+\n+Open browser developer tools (F12) and check:\n+\n+1. **Console tab** - Look for error messages like:\n+   - `permission-denied`\n+   - `CORS error`\n+   - `Firebase connection failed`\n+\n+2. **Network tab** - Check if Firebase requests are being blocked\n+\n+### 5. **Common Error Messages & Solutions**\n+\n+| Error | Solution |\n+|-------|----------|\n+| `permission-denied` | Update Firebase Security Rules |\n+| `CORS error` | Add domain to Firebase authorized domains |\n+| `Firebase not initialized` | Check if Firebase config is correct |\n+| `Network error` | Check internet connection and Firebase status |\n+\n+## 🔧 Enhanced Debugging Features Added\n+\n+I've enhanced your application with:\n+\n+1. **Domain Detection**: Shows current domain in settings\n+2. **Connection Test Button**: Test Firebase connection manually\n+3. **Enhanced Error Messages**: More detailed error reporting\n+4. **Network Debugging**: Logs network status and connection attempts\n+\n+## 🚀 Quick Test Steps\n+\n+1. **Deploy the updated file** to GitHub Pages\n+2. **Open the app** in browser\n+3. **Open Developer Tools** (F12)\n+4. **Go to Console tab**\n+5. **Click Settings gear** → Database → Test Firebase Connection\n+6. **Check console messages** for specific errors\n+\n+## 🎯 Most Likely Fix\n+\n+**Update Firebase Security Rules** to allow GitHub Pages domain:\n+\n+```javascript\n+rules_version = '2';\n+service cloud.firestore {\n+  match /databases/{database}/documents {\n+    match /{document=**} {\n+      allow read, write: if true;\n+    }\n+  }\n+}\n+```\n+\n+This should resolve the issue immediately.\n+\n+## 📋 Verification Steps\n+\n+After applying the fix:\n+\n+1. Go to your GitHub Pages URL\n+2. Try adding a test sale\n+3. Check Firebase Console → Firestore Database\n+4. Verify the data appears in the database\n+5. Check the browser console for any remaining errors\n+\n+## 🔄 If Still Not Working\n+\n+1. **Check Firebase Project Status**: Ensure Firebase project is active\n+2. **Verify API Key**: Confirm Firebase config is correct\n+3. **Check Billing**: Ensure Firebase project has billing enabled if required\n+4. **Network Issues**: Try from different network/device\n+\n+## 📞 Support\n+\n+If you continue to have issues:\n+\n+1. Share the **browser console errors**\n+2. Share the **Firebase Security Rules** currently set\n+3. Confirm the **Firebase project ID** matches your config\n+\n+The enhanced debugging features will help identify the exact issue!",
                    "refToolCallId": "toolu_01FEZg69T6PmT7Vprzdrhk77"
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "FIREBASE_GITHUB_PAGES_FIX.md",
                            "patch": "@@ -0,0 +1,3883 @@\n+# %F0%9F%94%A5 Firebase GitHub Pages Fix Guide%0D%0A%0D%0A## Issue%0D%0AData is not getting updated in Firebase when accessing the app through GitHub Pages: %60https://manish0306.github.io/TheiaJewelz_Latest/jewelry_sales_final.html%60%0D%0A%0D%0A## Root Cause%0D%0AThe most likely cause is **Firebase Security Rules** blocking writes from the GitHub Pages domain.%0D%0A%0D%0A## %E2%9C%85 Solutions (Step by Step)%0D%0A%0D%0A### 1. **Fix Firebase Security Rules (Most Important)**%0D%0A%0D%0AGo to your Firebase Console %E2%86%92 Firestore Database %E2%86%92 Rules and update:%0D%0A%0D%0A%60%60%60javascript%0D%0Arules_version = '2';%0D%0Aservice cloud.firestore %7B%0D%0A  match /databases/%7Bdatabase%7D/documents %7B%0D%0A    // Allow read/write access to all users%0D%0A    match /%7Bdocument=**%7D %7B%0D%0A      allow read, write: if true;%0D%0A    %7D%0D%0A  %7D%0D%0A%7D%0D%0A%60%60%60%0D%0A%0D%0A**Or for better security:**%0D%0A%60%60%60javascript%0D%0Arules_version = '2';%0D%0Aservice cloud.firestore %7B%0D%0A  match /databases/%7Bdatabase%7D/documents %7B%0D%0A    match /%7Bdocument=**%7D %7B%0D%0A      allow read, write: if request.auth != null %7C%7C %0D%0A        request.headers.origin.matches(%22.*github.io.*%22) %7C%7C%0D%0A        request.headers.origin == %22https://manish0306.github.io%22;%0D%0A    %7D%0D%0A  %7D%0D%0A%7D%0D%0A%60%60%60%0D%0A%0D%0A### 2. **Add Authorized Domain**%0D%0A%0D%0AFirebase Console %E2%86%92 Authentication %E2%86%92 Settings %E2%86%92 Authorized domains:%0D%0A- Add: %60manish0306.github.io%60%0D%0A%0D%0A### 3. **Test the Connection**%0D%0A%0D%0A1. Open your GitHub Pages app%0D%0A2. Go to Settings (gear icon)%0D%0A3. Click %22Database%22 tab%0D%0A4. Click %22Test Firebase Connection%22 button%0D%0A5. Check browser console for detailed error messages%0D%0A%0D%0A### 4. **Debug Steps**%0D%0A%0D%0AOpen browser developer tools (F12) and check:%0D%0A%0D%0A1. **Console tab** - Look for error messages like:%0D%0A   - %60permission-denied%60%0D%0A   - %60CORS error%60%0D%0A   - %60Firebase connection failed%60%0D%0A%0D%0A2. **Network tab** - Check if Firebase requests are being blocked%0D%0A%0D%0A### 5. **Common Error Messages & Solutions**%0D%0A%0D%0A%7C Error %7C Solution %7C%0D%0A%7C-------%7C----------%7C%0D%0A%7C %60permission-denied%60 %7C Update Firebase Security Rules %7C%0D%0A%7C %60CORS error%60 %7C Add domain to Firebase authorized domains %7C%0D%0A%7C %60Firebase not initialized%60 %7C Check if Firebase config is correct %7C%0D%0A%7C %60Network error%60 %7C Check internet connection and Firebase status %7C%0D%0A%0D%0A## %F0%9F%94%A7 Enhanced Debugging Features Added%0D%0A%0D%0AI've enhanced your application with:%0D%0A%0D%0A1. **Domain Detection**: Shows current domain in settings%0D%0A2. **Connection Test Button**: Test Firebase connection manually%0D%0A3. **Enhanced Error Messages**: More detailed error reporting%0D%0A4. **Network Debugging**: Logs network status and connection attempts%0D%0A%0D%0A## %F0%9F%9A%80 Quick Test Steps%0D%0A%0D%0A1. **Deploy the updated file** to GitHub Pages%0D%0A2. **Open the app** in browser%0D%0A3. **Open Developer Tools** (F12)%0D%0A4. **Go to Console tab**%0D%0A5. **Click Settings gear** %E2%86%92 Database %E2%86%92 Test Firebase Connection%0D%0A6. **Check console messages** for specific errors%0D%0A%0D%0A## %F0%9F%8E%AF Most Likely Fix%0D%0A%0D%0A**Update Firebase Security Rules** to allow GitHub Pages domain:%0D%0A%0D%0A%60%60%60javascript%0D%0Arules_version = '2';%0D%0Aservice cloud.firestore %7B%0D%0A  match /databases/%7Bdatabase%7D/documents %7B%0D%0A    match /%7Bdocument=**%7D %7B%0D%0A      allow read, write: if true;%0D%0A    %7D%0D%0A  %7D%0D%0A%7D%0D%0A%60%60%60%0D%0A%0D%0AThis should resolve the issue immediately.%0D%0A%0D%0A## %F0%9F%93%8B Verification Steps%0D%0A%0D%0AAfter applying the fix:%0D%0A%0D%0A1. Go to your GitHub Pages URL%0D%0A2. Try adding a test sale%0D%0A3. Check Firebase Console %E2%86%92 Firestore Database%0D%0A4. Verify the data appears in the database%0D%0A5. Check the browser console for any remaining errors%0D%0A%0D%0A## %F0%9F%94%84 If Still Not Working%0D%0A%0D%0A1. **Check Firebase Project Status**: Ensure Firebase project is active%0D%0A2. **Verify API Key**: Confirm Firebase config is correct%0D%0A3. **Check Billing**: Ensure Firebase project has billing enabled if required%0D%0A4. **Network Issues**: Try from different network/device%0D%0A%0D%0A## %F0%9F%93%9E Support%0D%0A%0D%0AIf you continue to have issues:%0D%0A%0D%0A1. Share the **browser console errors**%0D%0A2. Share the **Firebase Security Rules** currently set%0D%0A3. Confirm the **Firebase project ID** matches your config%0D%0A%0D%0AThe enhanced debugging features will help identify the exact issue!\n",
                            "isNew": true,
                            "isApplied": true
                        },
                        {
                            "path": "jewelry_sales_final.html",
                            "patch": "@@ -107674,32 +107674,451 @@\n %22%3EEnabled%3C/span%3E\n+%3Cbr%3E%0D%0A                                %3Cstrong%3EDomain:%3C/strong%3E %3Cspan id=%22current-domain%22%3ELoading...%3C/span%3E%0D%0A                            %3C/p%3E%0D%0A                            %3Cbutton class=%22btn btn-primary%22 onclick=%22runConnectionTest()%22 style=%22margin-top: 10px; padding: 8px 16px; font-size: 13px;%22%3E%0D%0A                                %3Ci class=%22fas fa-vial%22%3E%3C/i%3E Test Firebase Connection%0D%0A                            %3C/button%3E\n %0D%0A              \n@@ -182611,32 +182611,108 @@\n onfig.method);%0D%0A\n+            console.log('%F0%9F%8C%90 Running on domain:', window.location.hostname);%0D%0A\n             %0D%0A  \n@@ -183203,32 +183203,1486 @@\n %7D%0D%0A        %7D%0D%0A%0D%0A\n+        // Test Firebase connection%0D%0A        async function testFirebaseConnection() %7B%0D%0A            if (!firestore) %7B%0D%0A                console.error('%E2%9D%8C Firebase not initialized');%0D%0A                return false;%0D%0A            %7D%0D%0A            %0D%0A            try %7B%0D%0A                console.log('%F0%9F%94%A5 Testing Firebase connection...');%0D%0A                const testDoc = await firestore.collection('connection-test').add(%7B%0D%0A                    test: true,%0D%0A                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),%0D%0A                    domain: window.location.hostname,%0D%0A                    origin: window.location.origin%0D%0A                %7D);%0D%0A                %0D%0A                console.log('%E2%9C%85 Firebase connection test successful:', testDoc.id);%0D%0A                %0D%0A                // Clean up test document%0D%0A                await testDoc.delete();%0D%0A                return true;%0D%0A            %7D catch (error) %7B%0D%0A                console.error('%E2%9D%8C Firebase connection test failed:', error);%0D%0A                console.error('%E2%9D%8C Error code:', error.code);%0D%0A                %0D%0A                if (error.code === 'permission-denied') %7B%0D%0A                    console.error('%E2%9D%8C Permission denied - check Firebase security rules');%0D%0A                    alert('%E2%9D%8C Permission denied - Firebase security rules may be blocking access from: ' + window.location.hostname);%0D%0A                %7D%0D%0A                %0D%0A                return false;%0D%0A            %7D%0D%0A        %7D%0D%0A%0D%0A\n         // Initi\n@@ -185267,32 +185267,192 @@\n fig.firebase);%0D%0A\n+                    console.log('%F0%9F%8C%90 Current domain:', window.location.hostname);%0D%0A                    console.log('%F0%9F%8C%90 Current origin:', window.location.origin);%0D%0A\n                 \n@@ -186142,32 +186142,378 @@\n               %0D%0A\n+                    // Enable network for GitHub Pages%0D%0A                    firestore.enableNetwork().then(() =%3E %7B%0D%0A                        console.log('%F0%9F%94%A5 Firestore network enabled');%0D%0A                    %7D).catch(err =%3E %7B%0D%0A                        console.error('%E2%9D%8C Firestore network error:', err);%0D%0A                    %7D);%0D%0A                    %0D%0A\n                 \n@@ -190350,32 +190350,105 @@\n :', saleData);%0D%0A\n+            console.log('%F0%9F%8C%90 Current domain:', window.location.hostname);%0D%0A\n             %0D%0A  \n@@ -190845,63 +190845,102 @@\n     \n-const docRef = await firestore.collection('sales').add(\n+%0D%0A                // Add domain information for debugging%0D%0A                const dataToSave = \n %7B%0D%0A \n@@ -191108,35 +191108,328 @@\n String()\n-%0D%0A                %7D\n+,%0D%0A                    domain: window.location.hostname,%0D%0A                    origin: window.location.origin%0D%0A                %7D;%0D%0A                %0D%0A                console.log('%F0%9F%94%A5 Data being saved:', dataToSave);%0D%0A                %0D%0A                const docRef = await firestore.collection('sales').add(dataToSave\n );%0D%0A    \n@@ -191784,32 +191784,652 @@\n ror:', error);%0D%0A\n+                console.error('%E2%9D%8C Error code:', error.code);%0D%0A                console.error('%E2%9D%8C Error details:', error);%0D%0A                %0D%0A                // Handle specific Firebase errors%0D%0A                if (error.code === 'permission-denied') %7B%0D%0A                    const errorMsg = 'Permission denied. Please check Firebase security rules for domain: ' + window.location.hostname;%0D%0A                    console.error('%E2%9D%8C Permission Error:', errorMsg);%0D%0A                    alert('%E2%9D%8C Permission Error: ' + errorMsg);%0D%0A                    return %7B success: false, error: errorMsg %7D;%0D%0A                %7D%0D%0A                %0D%0A\n                 \n@@ -220000,32 +220000,203 @@\n               %0D%0A\n+                    // Update domain display%0D%0A                    document.getElementById('current-domain').textContent = window.location.hostname;%0D%0A                    %0D%0A\n                 \n@@ -246933,32 +246933,694 @@\n %7D%0D%0A        %7D%0D%0A%0D%0A\n+        // Run Firebase connection test%0D%0A        async function runConnectionTest() %7B%0D%0A            const btn = event.target;%0D%0A            btn.disabled = true;%0D%0A            btn.innerHTML = '%3Ci class=%22fas fa-spinner fa-spin%22%3E%3C/i%3E Testing...';%0D%0A            %0D%0A            try %7B%0D%0A                if (dbConfig.method === 'firebase') %7B%0D%0A                    await testFirebaseConnection();%0D%0A                %7D else %7B%0D%0A                    await testDatabaseConnection();%0D%0A                %7D%0D%0A            %7D finally %7B%0D%0A                btn.disabled = false;%0D%0A                btn.innerHTML = '%3Ci class=%22fas fa-vial%22%3E%3C/i%3E Test Firebase Connection';%0D%0A            %7D%0D%0A        %7D%0D%0A%0D%0A\n         // Sync \n",
                            "isNew": false,
                            "isApplied": true
                        }
                    ]
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "2d49d2ff-6614-4d3c-a6ab-375e1bf7fd36"
            },
            "createdAt": 1752483342976,
            "isInternal": false
        },
        {
            "id": "7699a535-1281-4b53-8a37-2fa362f07404",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "don't se database tab under setting for github url"
                }
            ],
            "context": {
                "codebaseEnabled": true
            },
            "createdAt": 1752487665923,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "don't se database tab under setting for github url"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "295cfd75-c14c-4fd9-b78e-c7533e3fbc02",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "Let me check the settings modal structure and fix the database tab issue:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Ekd27zbv4rcQWo5FTZUErb",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "The database tab is there. Let me check if the `switchSettingsTab` function is working correctly:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Qsqgk3apAZo71gTSxR1rUi",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me check the `switchSettingsTab` function:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Vg6gQxVZ2EX52YYQt4zaoW",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "The issue might be that the `event.target` is not working correctly in the GitHub Pages environment. Let me fix the `switchSettingsTab` function to be more robust:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01GJSWJFF8ZEJ2LvZZqRq3sp",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -5391,20 +5391,39 @@\n \n         // Switch between settings tabs\n         function switchSettingsTab(tabName) {\n+            console.log('🔄 Switching to settings tab:', tabName);\n+            \n             // Hide all sections\n-            document.getElementById('general-settings').style.display = 'none';\n-            document.getElementById('database-settings').style.display = 'none';\n-            document.getElementById('fields-settings').style.display = 'none';\n-            document.getElementById('help-settings').style.display = 'none';\n+            const sections = ['general', 'database', 'fields', 'help'];\n+            sections.forEach(section => {\n+                const element = document.getElementById(section + '-settings');\n+                if (element) {\n+                    element.style.display = 'none';\n+                }\n+            });\n \n             // Remove active class from all tabs\n             document.querySelectorAll('.settings-tab').forEach(tab => {\n                 tab.classList.remove('active');\n             });\n \n-            // Show selected section and activate tab\n-            document.getElementById(tabName + '-settings').style.display = 'block';\n-            event.target.classList.add('active');\n+            // Show selected section\n+            const targetSection = document.getElementById(tabName + '-settings');\n+            if (targetSection) {\n+                targetSection.style.display = 'block';\n+                console.log('✅ Showing section:', tabName + '-settings');\n+            } else {\n+                console.error('❌ Section not found:', tabName + '-settings');\n+            }\n+            \n+            // Activate the clicked tab\n+            const clickedTab = document.querySelector(`[onclick=\"switchSettingsTab('${tabName}')\"]`);\n+            if (clickedTab) {\n+                clickedTab.classList.add('active');\n+                console.log('✅ Activated tab:', tabName);\n+            } else {\n+                console.error('❌ Tab not found:', tabName);\n+            }\n         }\n \n         // Switch between custom fields tabs",
                    "refToolCallId": "toolu_01GJSWJFF8ZEJ2LvZZqRq3sp"
                },
                {
                    "type": "text",
                    "text": "Let me also add a direct function to test the database connection without going through the settings modal:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01PzksocYCeywLrRNBwtPKXA",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me add a test button directly to the status bar for easier access:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01B3WrLXFgVVKbGpNsXXrgYr",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -3271,7 +3271,12 @@\n         <!-- Database Status Display -->\n         <div class=\"status-bar\" style=\"background: var(--glass-bg); border-bottom: 1px solid var(--glass-border); padding: 8px 20px; display: flex; justify-content: space-between; align-items: center; font-size: 12px; backdrop-filter: blur(10px);\">\n             <div id=\"database-status\" class=\"database-status\"></div>\n-            <div id=\"save-status\" class=\"save-status\"></div>\n+            <div style=\"display: flex; align-items: center; gap: 10px;\">\n+                <button onclick=\"quickTestFirebase()\" style=\"background: #4ecdc4; color: white; border: none; padding: 4px 8px; border-radius: 4px; font-size: 11px; cursor: pointer;\" title=\"Test Firebase Connection\">\n+                    <i class=\"fas fa-vial\"></i> Test DB\n+                </button>\n+                <div id=\"save-status\" class=\"save-status\"></div>\n+            </div>\n         </div>\n \n         <!-- Settings Modal -->",
                    "refToolCallId": "toolu_01B3WrLXFgVVKbGpNsXXrgYr"
                },
                {
                    "type": "text",
                    "text": "Now let me add the `quickTestFirebase()` function:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_0141SEVHsjT7hPFK7EzwqC61",
                    "statusText": "Change generated",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "codeHunk",
                    "lineBasedDiff": "--- jewelry_sales_final.html\n+++ jewelry_sales_final.html\n@@ -5920,6 +5920,38 @@\n             }\n         }\n \n+        // Quick Firebase test from status bar\n+        async function quickTestFirebase() {\n+            const btn = event.target;\n+            const originalText = btn.innerHTML;\n+            btn.disabled = true;\n+            btn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i>';\n+            \n+            try {\n+                console.log('🔧 Quick Firebase Test Started');\n+                console.log('🌐 Current URL:', window.location.href);\n+                console.log('🌐 Current Domain:', window.location.hostname);\n+                console.log('🌐 Current Origin:', window.location.origin);\n+                console.log('🔥 Firebase Config:', dbConfig.firebase);\n+                console.log('🔥 Firebase App:', firebaseApp);\n+                console.log('🔥 Firestore:', firestore);\n+                \n+                if (dbConfig.method === 'firebase') {\n+                    await testFirebaseConnection();\n+                } else {\n+                    await testDatabaseConnection();\n+                }\n+                \n+                alert('✅ Firebase test completed! Check console for details.');\n+            } catch (error) {\n+                console.error('❌ Quick test error:', error);\n+                alert('❌ Firebase test failed: ' + error.message);\n+            } finally {\n+                btn.disabled = false;\n+                btn.innerHTML = originalText;\n+            }\n+        }\n+\n         // Sync local data to database\n         async function syncLocalData() {\n             try {",
                    "refToolCallId": "toolu_0141SEVHsjT7hPFK7EzwqC61"
                },
                {
                    "type": "text",
                    "text": "Now let me also add some debugging information to the console when the page loads:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01ThSWXB5iFh1ieF8dJR9eSH",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me find the main initialization section:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Pm4BfsasAKqsgKeEhRDHRD",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_011Vv9BHRddckmTf7zuEKpyv",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me find the window load event:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01LrC8cWnnpULypAYMas6AYV",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me search for the actual load event:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01LLhy6HHGjoyfcKRwTN2hUJ",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me search for the end of the file to find the initialization:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01JSSPR5scyTvegooHLZTvJ2",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "The file is too long. Let me search for the window load event again more specifically:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Lh2zM2VkTKeezwZ5YWKrT4",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me look at the exact window load event line:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Uyi5uRjjvT48UmACZrTh6K",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "It seems the search result line number might be incorrect. Let me search for the actual script tags at the end:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_014JHDGoeaeHniB7oEmX47WX",
                    "title": "Fulltext search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "Let me search for the actual end of the file to find where the initialization happens:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01So7Le1VVLZiVQeM9fUWXhL",
                    "status": "IN_PROGRESS",
                    "isHidden": true,
                    "localResult": "{\"status\":\"SUCCESS\",\"exitCode\":0,\"output\":\"\\u001b[?9001h\\u001b[?1004h\\u001b[?25l\\u001b[2J\\u001b[m\\u001b[H\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\u001b[H\\u001b]0;C:\\\\WINDOWS\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\\u0007\\u001b[?25h\\u001b[?25l                    'Notes': item.notes || ''\\r\\n                }));\\u001b[4;1H                const ws = XLSX.utils.json_to_sheet(dataToExport);\\r\\n                const wb = XLSX.utils.book_new();\\r\\n                XLSX.utils.book_append_sheet(wb, ws, 'Purchase History');\\u001b[8;1H                const fileName = `Purchase_History_${new Date().toISOString().split('T')[0]}.xlsx`;\\r\\u001b[?25h\\n                XLSX.writeFile(wb, fileName);\\r\\n\\n                alert(`ðŸ“¦ Purchase history exported successfully!\\\\n\\\\nFile: ${fileName}\\\\nRecords: ${purchaseData.length}`);\\r\\n\\n            } catch (error) {\\r\\n                console.error('Error exporting purchase history:', error);\\r\\n                alert('Error exporting purchase history: ' + error.message);\\r\\n            }\\r\\n        }\\r\\n\\n        // Initialize purchase data when the app loads\\r\\n        document.addEventListener('DOMContentLoaded', function() {\\r\\n            initializePurchaseData();\\r\\n            updatePurchaseCount();\\r\\n        });\\r\\n    </script>\\r\\n\\n    <!-- Mobile-friendly modal for alerts (future enhancement) -->\\r\\n    <div id=\\\"mobile-modal\\\" class=\\\"mobile-modal\\\">\\r\\n        <div class=\\\"mobile-modal-content\\\">\\r\\n            <div id=\\\"mobile-modal-header\\\" class=\\\"mobile-modal-header\\\"></div>\\r\\n            <div id=\\\"mobile-modal-body\\\" class=\\\"mobile-modal-body\\\"></div>\\r\\n            <div class=\\\"mobile-modal-buttons\\\">\\r\\n                <button id=\\\"mobile-modal-ok\\\" class=\\\"btn btn-primary\\\">OK</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\n\\n\\n    <!-- Enhanced loading overlay -->\\r\\n    <div id=\\\"loading-overlay\\\" style=\\\"display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;\\r\\n         background: rgba(102, 126, 234, 0.9); z-index: 9999; align-items: center; justify-content: center;\\\">\\r\\n        <div style=\\\"text-align: center; color: white;\\\">\\r\\n            <div class=\\\"loading-spinner\\\" style=\\\"width: 60px; height: 60px; border: 4px solid rgba(255,255,255,0.3);\\r\\n                 border-top: 4px solid white; margin: 0 auto 20px;\\\"></div>\\r\\n            <h3 style=\\\"margin: 0; font-weight: 300;\\\">Processing...</h3>\\r\\n            <p style=\\\"margin: 10px 0 0; opacity: 0.8;\\\">Please wait while we save your data</p>\\r\\n        </div>\\r\\n    </div>\\r\\n</body>\\r\\n</html>\\r\\n\"}"
                },
                {
                    "type": "codePatch",
                    "diffs": [
                        {
                            "path": "jewelry_sales_final.html",
                            "patch": "@@ -99507,32 +99507,412 @@\n status%22%3E%3C/div%3E%0D%0A\n+            %3Cdiv style=%22display: flex; align-items: center; gap: 10px;%22%3E%0D%0A                %3Cbutton onclick=%22quickTestFirebase()%22 style=%22background: #4ecdc4; color: white; border: none; padding: 4px 8px; border-radius: 4px; font-size: 11px; cursor: pointer;%22 title=%22Test Firebase Connection%22%3E%0D%0A                    %3Ci class=%22fas fa-vial%22%3E%3C/i%3E Test DB%0D%0A                %3C/button%3E%0D%0A    \n             %3Cdiv\n@@ -99949,32 +99949,52 @@\n status%22%3E%3C/div%3E%0D%0A\n+            %3C/div%3E%0D%0A\n         %3C/div%3E%0D%0A\n@@ -224818,348 +224818,426 @@\n     \n-// Hide all sections%0D%0A            document.getElementById('general-settings').style.display = 'none';%0D%0A            document.getElementById('database-settings').style.display = 'none';%0D%0A            document.getElementById('fields-settings').style.display = 'none';%0D%0A            document.getElementById('help-settings').style.display = 'none'\n+console.log('%F0%9F%94%84 Switching to settings tab:', tabName);%0D%0A            %0D%0A            // Hide all sections%0D%0A            const sections = %5B'general', 'database', 'fields', 'help'%5D;%0D%0A            sections.forEach(section =%3E %7B%0D%0A                const element = document.getElementById(section + '-settings');%0D%0A                if (element) %7B%0D%0A                    element.style.display = 'none';%0D%0A                %7D%0D%0A            %7D)\n ;%0D%0A%0D\n@@ -225468,38 +225468,43 @@\n tion\n- and activate tab%0D%0A           \n+%0D%0A            const targetSection =\n  doc\n@@ -225550,84 +225550,689 @@\n gs')\n-.style.display = 'block';%0D%0A            event.target.classList.add('active');\n+;%0D%0A            if (targetSection) %7B%0D%0A                targetSection.style.display = 'block';%0D%0A                console.log('%E2%9C%85 Showing section:', tabName + '-settings');%0D%0A            %7D else %7B%0D%0A                console.error('%E2%9D%8C Section not found:', tabName + '-settings');%0D%0A            %7D%0D%0A            %0D%0A            // Activate the clicked tab%0D%0A            const clickedTab = document.querySelector(%60%5Bonclick=%22switchSettingsTab('$%7BtabName%7D')%22%5D%60);%0D%0A            if (clickedTab) %7B%0D%0A                clickedTab.classList.add('active');%0D%0A                console.log('%E2%9C%85 Activated tab:', tabName);%0D%0A            %7D else %7B%0D%0A                console.error('%E2%9D%8C Tab not found:', tabName);%0D%0A            %7D\n %0D%0A  \n@@ -248683,32 +248683,1450 @@\n %7D%0D%0A        %7D%0D%0A%0D%0A\n+        // Quick Firebase test from status bar%0D%0A        async function quickTestFirebase() %7B%0D%0A            const btn = event.target;%0D%0A            const originalText = btn.innerHTML;%0D%0A            btn.disabled = true;%0D%0A            btn.innerHTML = '%3Ci class=%22fas fa-spinner fa-spin%22%3E%3C/i%3E';%0D%0A            %0D%0A            try %7B%0D%0A                console.log('%F0%9F%94%A7 Quick Firebase Test Started');%0D%0A                console.log('%F0%9F%8C%90 Current URL:', window.location.href);%0D%0A                console.log('%F0%9F%8C%90 Current Domain:', window.location.hostname);%0D%0A                console.log('%F0%9F%8C%90 Current Origin:', window.location.origin);%0D%0A                console.log('%F0%9F%94%A5 Firebase Config:', dbConfig.firebase);%0D%0A                console.log('%F0%9F%94%A5 Firebase App:', firebaseApp);%0D%0A                console.log('%F0%9F%94%A5 Firestore:', firestore);%0D%0A                %0D%0A                if (dbConfig.method === 'firebase') %7B%0D%0A                    await testFirebaseConnection();%0D%0A                %7D else %7B%0D%0A                    await testDatabaseConnection();%0D%0A                %7D%0D%0A                %0D%0A                alert('%E2%9C%85 Firebase test completed! Check console for details.');%0D%0A            %7D catch (error) %7B%0D%0A                console.error('%E2%9D%8C Quick test error:', error);%0D%0A                alert('%E2%9D%8C Firebase test failed: ' + error.message);%0D%0A            %7D finally %7B%0D%0A                btn.disabled = false;%0D%0A                btn.innerHTML = originalText;%0D%0A            %7D%0D%0A        %7D%0D%0A%0D%0A\n         // Sync \n",
                            "isNew": false,
                            "isApplied": true
                        }
                    ]
                },
                {
                    "type": "shellCommand",
                    "command": "Get-Content \"C:/Users/Deeksha/Downloads/TheiaJewelz_Latest/jewelry_sales_final.html\" | Select-Object -Last 50",
                    "id": "abf1c699-53d9-4ff2-ab61-1b1ed6214550",
                    "status": "SUCCESS",
                    "toolCallId": "toolu_01So7Le1VVLZiVQeM9fUWXhL",
                    "commandsRequiringConfirmation": [
                        {
                            "name": "get-content",
                            "arguments": []
                        },
                        {
                            "name": "select-object",
                            "arguments": [
                                "-Last"
                            ]
                        }
                    ],
                    "exitCode": 0,
                    "output": "\u001b[?9001h\u001b[?1004h\u001b[?25l\u001b[2J\u001b[m\u001b[H\r\n\r\n\r\n\r\n\r\n\r\n\r\n\u001b[H\u001b]0;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\u0007\u001b[?25h\u001b[?25l                    'Notes': item.notes || ''\r\n                }));\u001b[4;1H                const ws = XLSX.utils.json_to_sheet(dataToExport);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Purchase History');\u001b[8;1H                const fileName = `Purchase_History_${new Date().toISOString().split('T')[0]}.xlsx`;\r\u001b[?25h\n                XLSX.writeFile(wb, fileName);\r\n\n                alert(`ðŸ“¦ Purchase history exported successfully!\\n\\nFile: ${fileName}\\nRecords: ${purchaseData.length}`);\r\n\n            } catch (error) {\r\n                console.error('Error exporting purchase history:', error);\r\n                alert('Error exporting purchase history: ' + error.message);\r\n            }\r\n        }\r\n\n        // Initialize purchase data when the app loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializePurchaseData();\r\n            updatePurchaseCount();\r\n        });\r\n    </script>\r\n\n    <!-- Mobile-friendly modal for alerts (future enhancement) -->\r\n    <div id=\"mobile-modal\" class=\"mobile-modal\">\r\n        <div class=\"mobile-modal-content\">\r\n            <div id=\"mobile-modal-header\" class=\"mobile-modal-header\"></div>\r\n            <div id=\"mobile-modal-body\" class=\"mobile-modal-body\"></div>\r\n            <div class=\"mobile-modal-buttons\">\r\n                <button id=\"mobile-modal-ok\" class=\"btn btn-primary\">OK</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\n\n\n    <!-- Enhanced loading overlay -->\r\n    <div id=\"loading-overlay\" style=\"display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%;\r\n         background: rgba(102, 126, 234, 0.9); z-index: 9999; align-items: center; justify-content: center;\">\r\n        <div style=\"text-align: center; color: white;\">\r\n            <div class=\"loading-spinner\" style=\"width: 60px; height: 60px; border: 4px solid rgba(255,255,255,0.3);\r\n                 border-top: 4px solid white; margin: 0 auto 20px;\"></div>\r\n            <h3 style=\"margin: 0; font-weight: 300;\">Processing...</h3>\r\n            <p style=\"margin: 10px 0 0; opacity: 0.8;\">Please wait while we save your data</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n",
                    "outputPath": ".zencoder/Zencoder-97dc946a-b719-43aa-9c73-f8cfc918cad4.log"
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "c2ffe14b-249c-460c-a21b-16a3b3daf330"
            },
            "createdAt": 1752487668994,
            "isInternal": false
        },
        {
            "id": "d8a2462c-27a8-4970-852e-5a8be86bb2fa",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "I see the `switchSettingsTab` function got corrupted during the edit. Let me fix this properly:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Ns3B4511JAYV1uuaBf6jYF",
                    "title": "",
                    "statusText": "Text to replace not found",
                    "status": "WARNING",
                    "context": {
                        "files": [
                            {
                                "path": "jewelry_sales_final.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\jewelry_sales_final.html"
                            }
                        ]
                    },
                    "isHidden": false
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "097d2914-ff06-480f-ae11-cfcef283c2d4"
            },
            "createdAt": 1752487837403,
            "isInternal": false
        },
        {
            "id": "9539883e-b41d-4dd4-97f1-c439b6353db3",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "getting 404 on launch index.html"
                }
            ],
            "context": {
                "codebaseEnabled": true
            },
            "createdAt": 1752488667768,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "getting 404 on launch index.html"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "4d28bcc3-60a1-4f9c-aeef-be05ffa9452d",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "Let me check if there's an index.html file and what files are available in the repository:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01ApoqAgnkh2eVJgLQrjixps",
                    "statusText": "Viewed folder",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": ".",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\."
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "I can see there is an `index.html` file. Let me check its contents to see what's in it:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Wshrf7FGGvCcgk2XQdwidP",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "index.html",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\index.html"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "I can see the issue! The `index.html` file exists and is trying to redirect to `jewelry_sales_final.html`, but there's no `jewelry_sales_final.html` file. Let me check for files with similar names:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01AGT6zZkfyL7ySmrzn7V6Y1",
                    "title": "File search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_012cgGw1KJwnrcRUTXK4n2PE",
                    "title": "File search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01Y1qvcjpvRksfBVvnu6kWe2",
                    "title": "File search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "I notice that there's no `jewelry_sales_final.html` file in the directory, but the index.html is trying to redirect to it. Let me check if there are any other files with \"sales\" in the name:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01L4C9V6bkofz6yzMSzU3ew3",
                    "title": "File search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01A385D1ciAQ7wdwuiDtfAUa",
                    "title": "File search",
                    "statusText": "Done",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "It looks like the `jewelry_sales_final.html` file doesn't exist in the repository. The issue is that the index.html is trying to redirect to a file that doesn't exist. Let me check if there's a main application file in the js directory:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01BKKpQPgsmFTyrDrNdXhdja",
                    "statusText": "Viewed file",
                    "status": "SUCCESS",
                    "context": {
                        "files": [
                            {
                                "path": "js/app.js",
                                "fsPath": "C:\\Users\\Deeksha\\Downloads\\TheiaJewelz_Latest\\js\\app.js"
                            }
                        ]
                    },
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "The app.js file is empty. Let me check if there's a main application file that needs to be created. Based on our earlier conversation, it seems like the main application was in `jewelry_sales_final.html`. Let me check if I can find it in the editing history or if it needs to be created:"
                },
                {
                    "type": "toolCall",
                    "toolCallId": "toolu_01GFh4QGwJWrC4NrVSfehSC5",
                    "statusText": "Collecting requirements...",
                    "status": "SUCCESS",
                    "isHidden": false
                },
                {
                    "type": "text",
                    "text": "1. It looks like the main application file `jewelry_sales_final.html` is missing from your repository. Do you have this file?\n   - Yes, I have the file but it's not in the repository\n   - No, I need you to create it\n   - The file might be named differently\n   - I want to use a different main file\n   - Other (please specify)"
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "e9b19dc2-dae1-4d30-8828-96480dfc03e9"
            },
            "createdAt": 1752488670662,
            "isInternal": false
        },
        {
            "id": "fdf22176-30e0-4e1b-a356-819a198fbd8f",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "yes i have"
                }
            ],
            "context": {
                "codebaseEnabled": true
            },
            "createdAt": 1752488769736,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "yes i have"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "434aadc6-72dd-40ac-8bc0-2645b0fcec29",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "Great! The issue is that the `jewelry_sales_final.html` file is missing from your repository. That's why you're getting a 404 error when accessing the index.html - it's trying to redirect to a file that doesn't exist.\n\nHere's what you need to do:\n\n## **🔧 Fix the 404 Error**\n\n1. **Upload the missing file**: You need to add the `jewelry_sales_final.html` file to your repository root directory (`C:/Users/Deeksha/Downloads/TheiaJewelz_Latest/`)\n\n2. **Verify the file location**: Make sure `jewelry_sales_final.html` is in the same directory as `index.html`\n\n3. **Push to GitHub**: After adding the file, commit and push it to your GitHub repository\n\n## **📁 Expected File Structure**\n```\nTheiaJewelz_Latest/\n├── index.html                    ✅ (exists)\n├── jewelry_sales_final.html      ❌ (missing - you need to add this)\n├── css/\n├── js/\n├── manifest.json\n└── other files...\n```\n\n## **🚀 Steps to Fix**\n\n1. **Copy** your `jewelry_sales_final.html` file to `C:/Users/Deeksha/Downloads/TheiaJewelz_Latest/`\n\n2. **Commit and push** to GitHub:\n   ```bash\n   git add jewelry_sales_final.html\n   git commit -m \"Add main application file\"\n   git push origin main\n   ```\n\n3. **Test**: Visit `https://manish0306.github.io/TheiaJewelz_Latest/` - it should now work!\n\n## **Alternative Quick Fix**\nIf you want to test immediately, you can also:\n- Update the redirect in `index.html` to point to an existing file\n- Or access the app directly via `https://manish0306.github.io/TheiaJewelz_Latest/jewelry_sales_final.html` (once you upload it)\n\nWould you like me to help you with anything else once you've uploaded the file?"
                }
            ],
            "context": {
                "author": "Coding Agent",
                "operationId": "9732eb8a-5b79-4bb3-a079-360a6c33d746"
            },
            "createdAt": 1752489016082,
            "isInternal": false
        },
        {
            "id": "b4bf1beb-65ff-401d-a461-d1f696fda77f",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "data not getting stored in firebase when entered via github "
                },
                {
                    "type": "text",
                    "text": "https://manish0306.github.io/TheiaJewelz_Latest/jewelry_sales_final.html"
                }
            ],
            "context": {
                "codebaseEnabled": true
            },
            "createdAt": 1752489467797,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "data not getting stored in firebase when entered via github "
                            }
                        ]
                    },
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "https://manish0306.github.io/TheiaJewelz_Latest/jewelry_sales_final.html"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "473e6a05-9ab2-44d3-8095-b8484129a2d5",
            "role": "system",
            "content": [
                {
                    "type": "errorText",
                    "text": "accessToken not found",
                    "allowRegenerate": true
                }
            ],
            "createdAt": 1752489948765,
            "isInternal": false
        }
    ],
    "isAgent": true,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false
}
}