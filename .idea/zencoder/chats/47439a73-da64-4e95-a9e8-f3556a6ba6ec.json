{
    "checksum": "17bde4e3f722cde54f6c869dc77ebfc979dd0cc919ba85f458adf83828edc7c0",
    "data": {
    "id": "47439a73-da64-4e95-a9e8-f3556a6ba6ec",
    "createdAt": 1750689556144,
    "updatedAt": 1750689556155,
    "title": "update the script so that it read customer data...",
    "messages": [
        {
            "id": "bc45f65b-5760-4afb-b621-a5a7390c7ad9",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "update the script so that it read customer data from my  phone contact"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "google-apps-script.js",
                    "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "/**\r\n * Theia Sales - Google Apps Script for Google Sheets Integration\r\n *\r\n * Setup Instructions:\r\n * 1. Go to https://script.google.com\r\n * 2. Create a new project\r\n * 3. Replace the default code with this script\r\n * 4. Update SPREADSHEET_ID below with your Google Sheets ID\r\n * 5. Save and deploy as web app\r\n * 6. Copy the web app URL to use in your HTML file\r\n */\r\n\r\n// CONFIGURATION - UPDATE THIS WITH YOUR GOOGLE SHEETS ID\r\nconst SPREADSHEET_ID = '1pbkOaE3RvY3WmiEz5X1PeLRwahaF-_JNGdnOcZ74T8U';\r\nconst SHEET_NAME = 'Theia Sales';\r\n\r\n/**\r\n * Handle POST requests from the jewelry tracker\r\n */\r\nfunction doPost(e) {\r\n  try {\r\n    console.log('doPost called with data:', e.postData.contents);\r\n    const data = JSON.parse(e.postData.contents);\r\n    console.log('Parsed data:', data);\r\n\r\n    // Save to Google Sheets\r\n    const result = saveToSheet(data);\r\n    console.log('Save result:', result);\r\n\r\n    return ContentService\r\n      .createTextOutput(JSON.stringify(result))\r\n      .setMimeType(ContentService.MimeType.JSON);\r\n\r\n  } catch (error) {\r\n    console.error('Error in doPost:', error);\r\n    return ContentService\r\n      .createTextOutput(JSON.stringify({\r\n        success: false,\r\n        error: error.toString()\r\n      }))\r\n      .setMimeType(ContentService.MimeType.JSON);\r\n  }\r\n}\r\n\r\n/**\r\n * Handle GET requests - for testing\r\n */\r\nfunction doGet(e) {\r\n  return ContentService\r\n    .createTextOutput('Theia Sales Google Apps Script is running!')\r\n    .setMimeType(ContentService.MimeType.TEXT);\r\n}\r\n\r\n/**\r\n * Save jewelry sale data to Google Sheets\r\n */\r\nfunction saveToSheet(data) {\r\n  try {\r\n    console.log('Opening spreadsheet with ID:', SPREADSHEET_ID);\r\n    // Open the spreadsheet\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    let sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    console.log('Sheet found:', !!sheet);\r\n\r\n    // Create sheet if it doesn't exist\r\n    if (!sheet) {\r\n      console.log('Creating new sheet:', SHEET_NAME);\r\n      sheet = spreadsheet.insertSheet(SHEET_NAME);\r\n      setupHeaders(sheet);\r\n    }\r\n\r\n    // Check if headers exist (first row should have data)\r\n    if (sheet.getLastRow() === 0) {\r\n      console.log('Setting up headers');\r\n      setupHeaders(sheet);\r\n    }\r\n\r\n    // Prepare the data row\r\n    const timestamp = new Date();\r\n    const rowData = [\r\n      timestamp,                    // A: Timestamp\r\n      data.itemName,               // B: Item Name\r\n      data.category,               // C: Category\r\n      parseFloat(data.price),      // D: Price\r\n      new Date(data.date),         // E: Sale Date\r\n      data.customer,               // F: Customer\r\n      data.phone || '',            // G: Phone\r\n      data.id || timestamp.getTime() // H: Record ID\r\n    ];\r\n\r\n    // Add the row to the sheet\r\n    console.log('Adding row data:', rowData);\r\n    sheet.appendRow(rowData);\r\n\r\n    // Format the new row\r\n    const lastRow = sheet.getLastRow();\r\n    console.log('New row added at position:', lastRow);\r\n    formatRow(sheet, lastRow);\r\n\r\n    const result = {\r\n      success: true,\r\n      message: 'Sale recorded successfully in Google Sheets',\r\n      row: lastRow,\r\n      spreadsheetUrl: spreadsheet.getUrl()\r\n    };\r\n    console.log('Returning success result:', result);\r\n    return result;\r\n\r\n  } catch (error) {\r\n    console.error('Error saving to sheet:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Set up the header row\r\n */\r\nfunction setupHeaders(sheet) {\r\n  const headers = [\r\n    'Timestamp',\r\n    'Item Name',\r\n    'Category',\r\n    'Price (₹)',\r\n    'Sale Date',\r\n    'Customer',\r\n    'Phone',\r\n    'Record ID'\r\n  ];\r\n\r\n  // Add headers\r\n  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);\r\n\r\n  // Format header row\r\n  const headerRange = sheet.getRange(1, 1, 1, headers.length);\r\n  headerRange.setBackground('#4285f4');\r\n  headerRange.setFontColor('white');\r\n  headerRange.setFontWeight('bold');\r\n  headerRange.setBorder(true, true, true, true, true, true);\r\n\r\n  // Set column widths\r\n  sheet.setColumnWidth(1, 150); // Timestamp\r\n  sheet.setColumnWidth(2, 200); // Item Name\r\n  sheet.setColumnWidth(3, 120); // Category\r\n  sheet.setColumnWidth(4, 100); // Price\r\n  sheet.setColumnWidth(5, 100); // Sale Date\r\n  sheet.setColumnWidth(6, 150); // Customer\r\n  sheet.setColumnWidth(7, 130); // Phone\r\n  sheet.setColumnWidth(8, 100); // Record ID\r\n}\r\n\r\n/**\r\n * Format a data row\r\n */\r\nfunction formatRow(sheet, rowNumber) {\r\n  // Format price column (column D)\r\n  const priceCell = sheet.getRange(rowNumber, 4);\r\n  priceCell.setNumberFormat('₹#,##0.00');\r\n\r\n  // Format date column (column E)\r\n  const dateCell = sheet.getRange(rowNumber, 5);\r\n  dateCell.setNumberFormat('dd/mm/yyyy');\r\n\r\n  // Add borders to the entire row\r\n  const rowRange = sheet.getRange(rowNumber, 1, 1, 8);\r\n  rowRange.setBorder(true, true, true, true, false, true);\r\n\r\n  // Alternate row coloring\r\n  if (rowNumber % 2 === 0) {\r\n    rowRange.setBackground('#f8f9fa');\r\n  }\r\n}\r\n\r\n/**\r\n * Test function - run this manually to test the setup\r\n */\r\nfunction testSetup() {\r\n  const testData = {\r\n    itemName: 'Test Gold Ring',\r\n    category: 'rings',\r\n    price: 999.99,\r\n    date: '2024-01-15',\r\n    customer: 'Test Customer',\r\n    phone: '+91 98765 43210',\r\n    id: Date.now()\r\n  };\r\n\r\n  const result = saveToSheet(testData);\r\n  console.log('Test result:', result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Verification function - check sheet status and data\r\n */\r\nfunction verifySheetStatus() {\r\n  try {\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    const sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    \r\n    if (!sheet) {\r\n      return {\r\n        success: false,\r\n        message: 'Sheet not found',\r\n        spreadsheetUrl: spreadsheet.getUrl()\r\n      };\r\n    }\r\n    \r\n    const lastRow = sheet.getLastRow();\r\n    const lastColumn = sheet.getLastColumn();\r\n    \r\n    let recentData = null;\r\n    if (lastRow > 1) {\r\n      // Get the last row of data (excluding header)\r\n      recentData = sheet.getRange(lastRow, 1, 1, lastColumn).getValues()[0];\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Sheet verification complete',\r\n      spreadsheetUrl: spreadsheet.getUrl(),\r\n      totalRows: lastRow,\r\n      totalColumns: lastColumn,\r\n      hasData: lastRow > 1,\r\n      recentEntry: recentData\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error verifying sheet:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Get recent entries from the sheet\r\n */\r\nfunction getRecentEntries(count = 5) {\r\n  try {\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    const sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    \r\n    if (!sheet) {\r\n      return { success: false, message: 'Sheet not found' };\r\n    }\r\n    \r\n    const lastRow = sheet.getLastRow();\r\n    if (lastRow <= 1) {\r\n      return { success: true, message: 'No data entries found', entries: [] };\r\n    }\r\n    \r\n    const startRow = Math.max(2, lastRow - count + 1);\r\n    const numRows = lastRow - startRow + 1;\r\n    \r\n    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];\r\n    const data = sheet.getRange(startRow, 1, numRows, sheet.getLastColumn()).getValues();\r\n    \r\n    const entries = data.map(row => {\r\n      const entry = {};\r\n      headers.forEach((header, index) => {\r\n        entry[header] = row[index];\r\n      });\r\n      return entry;\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      message: `Retrieved ${entries.length} recent entries`,\r\n      entries: entries,\r\n      totalRows: lastRow - 1 // Excluding header\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting recent entries:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "sw.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\sw.js",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "google-apps-script.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_simple.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_simple.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_fixed.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_fixed.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_tracker.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_working.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_working.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_simple.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_simple.html",
                        "sources": []
                    },
                    {
                        "path": "google-apps-script.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_tracker.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": []
                    },
                    {
                        "path": "SETUP_GOOGLE_SHEETS.txt",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\SETUP_GOOGLE_SHEETS.txt",
                        "sources": []
                    },
                    {
                        "path": "README-APP.md",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\README-APP.md",
                        "sources": []
                    },
                    {
                        "path": ".zencoder\\.gitignore",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\.zencoder\\.gitignore",
                        "sources": []
                    },
                    {
                        "path": "manifest.json",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\manifest.json",
                        "sources": []
                    },
                    {
                        "path": "package.json",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\package.json",
                        "sources": []
                    },
                    {
                        "path": "google-apps-script.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [],
                "usedFilePaths": [
                    {
                        "path": "google-apps-script.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "/**\r\n * Theia Sales - Google Apps Script for Google Sheets Integration\r\n *\r\n * Setup Instructions:\r\n * 1. Go to https://script.google.com\r\n * 2. Create a new project\r\n * 3. Replace the default code with this script\r\n * 4. Update SPREADSHEET_ID below with your Google Sheets ID\r\n * 5. Save and deploy as web app\r\n * 6. Copy the web app URL to use in your HTML file\r\n */\r\n\r\n// CONFIGURATION - UPDATE THIS WITH YOUR GOOGLE SHEETS ID\r\nconst SPREADSHEET_ID = '1pbkOaE3RvY3WmiEz5X1PeLRwahaF-_JNGdnOcZ74T8U';\r\nconst SHEET_NAME = 'Theia Sales';\r\n\r\n/**\r\n * Handle POST requests from the jewelry tracker\r\n */\r\nfunction doPost(e) {\r\n  try {\r\n    console.log('doPost called with data:', e.postData.contents);\r\n    const data = JSON.parse(e.postData.contents);\r\n    console.log('Parsed data:', data);\r\n\r\n    // Save to Google Sheets\r\n    const result = saveToSheet(data);\r\n    console.log('Save result:', result);\r\n\r\n    return ContentService\r\n      .createTextOutput(JSON.stringify(result))\r\n      .setMimeType(ContentService.MimeType.JSON);\r\n\r\n  } catch (error) {\r\n    console.error('Error in doPost:', error);\r\n    return ContentService\r\n      .createTextOutput(JSON.stringify({\r\n        success: false,\r\n        error: error.toString()\r\n      }))\r\n      .setMimeType(ContentService.MimeType.JSON);\r\n  }\r\n}\r\n\r\n/**\r\n * Handle GET requests - for testing\r\n */\r\nfunction doGet(e) {\r\n  return ContentService\r\n    .createTextOutput('Theia Sales Google Apps Script is running!')\r\n    .setMimeType(ContentService.MimeType.TEXT);\r\n}\r\n\r\n/**\r\n * Save jewelry sale data to Google Sheets\r\n */\r\nfunction saveToSheet(data) {\r\n  try {\r\n    console.log('Opening spreadsheet with ID:', SPREADSHEET_ID);\r\n    // Open the spreadsheet\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    let sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    console.log('Sheet found:', !!sheet);\r\n\r\n    // Create sheet if it doesn't exist\r\n    if (!sheet) {\r\n      console.log('Creating new sheet:', SHEET_NAME);\r\n      sheet = spreadsheet.insertSheet(SHEET_NAME);\r\n      setupHeaders(sheet);\r\n    }\r\n\r\n    // Check if headers exist (first row should have data)\r\n    if (sheet.getLastRow() === 0) {\r\n      console.log('Setting up headers');\r\n      setupHeaders(sheet);\r\n    }\r\n\r\n    // Prepare the data row\r\n    const timestamp = new Date();\r\n    const rowData = [\r\n      timestamp,                    // A: Timestamp\r\n      data.itemName,               // B: Item Name\r\n      data.category,               // C: Category\r\n      parseFloat(data.price),      // D: Price\r\n      new Date(data.date),         // E: Sale Date\r\n      data.customer,               // F: Customer\r\n      data.phone || '',            // G: Phone\r\n      data.id || timestamp.getTime() // H: Record ID\r\n    ];\r\n\r\n    // Add the row to the sheet\r\n    console.log('Adding row data:', rowData);\r\n    sheet.appendRow(rowData);\r\n\r\n    // Format the new row\r\n    const lastRow = sheet.getLastRow();\r\n    console.log('New row added at position:', lastRow);\r\n    formatRow(sheet, lastRow);\r\n\r\n    const result = {\r\n      success: true,\r\n      message: 'Sale recorded successfully in Google Sheets',\r\n      row: lastRow,\r\n      spreadsheetUrl: spreadsheet.getUrl()\r\n    };\r\n    console.log('Returning success result:', result);\r\n    return result;\r\n\r\n  } catch (error) {\r\n    console.error('Error saving to sheet:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Set up the header row\r\n */\r\nfunction setupHeaders(sheet) {\r\n  const headers = [\r\n    'Timestamp',\r\n    'Item Name',\r\n    'Category',\r\n    'Price (₹)',\r\n    'Sale Date',\r\n    'Customer',\r\n    'Phone',\r\n    'Record ID'\r\n  ];\r\n\r\n  // Add headers\r\n  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);\r\n\r\n  // Format header row\r\n  const headerRange = sheet.getRange(1, 1, 1, headers.length);\r\n  headerRange.setBackground('#4285f4');\r\n  headerRange.setFontColor('white');\r\n  headerRange.setFontWeight('bold');\r\n  headerRange.setBorder(true, true, true, true, true, true);\r\n\r\n  // Set column widths\r\n  sheet.setColumnWidth(1, 150); // Timestamp\r\n  sheet.setColumnWidth(2, 200); // Item Name\r\n  sheet.setColumnWidth(3, 120); // Category\r\n  sheet.setColumnWidth(4, 100); // Price\r\n  sheet.setColumnWidth(5, 100); // Sale Date\r\n  sheet.setColumnWidth(6, 150); // Customer\r\n  sheet.setColumnWidth(7, 130); // Phone\r\n  sheet.setColumnWidth(8, 100); // Record ID\r\n}\r\n\r\n/**\r\n * Format a data row\r\n */\r\nfunction formatRow(sheet, rowNumber) {\r\n  // Format price column (column D)\r\n  const priceCell = sheet.getRange(rowNumber, 4);\r\n  priceCell.setNumberFormat('₹#,##0.00');\r\n\r\n  // Format date column (column E)\r\n  const dateCell = sheet.getRange(rowNumber, 5);\r\n  dateCell.setNumberFormat('dd/mm/yyyy');\r\n\r\n  // Add borders to the entire row\r\n  const rowRange = sheet.getRange(rowNumber, 1, 1, 8);\r\n  rowRange.setBorder(true, true, true, true, false, true);\r\n\r\n  // Alternate row coloring\r\n  if (rowNumber % 2 === 0) {\r\n    rowRange.setBackground('#f8f9fa');\r\n  }\r\n}\r\n\r\n/**\r\n * Test function - run this manually to test the setup\r\n */\r\nfunction testSetup() {\r\n  const testData = {\r\n    itemName: 'Test Gold Ring',\r\n    category: 'rings',\r\n    price: 999.99,\r\n    date: '2024-01-15',\r\n    customer: 'Test Customer',\r\n    phone: '+91 98765 43210',\r\n    id: Date.now()\r\n  };\r\n\r\n  const result = saveToSheet(testData);\r\n  console.log('Test result:', result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Verification function - check sheet status and data\r\n */\r\nfunction verifySheetStatus() {\r\n  try {\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    const sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    \r\n    if (!sheet) {\r\n      return {\r\n        success: false,\r\n        message: 'Sheet not found',\r\n        spreadsheetUrl: spreadsheet.getUrl()\r\n      };\r\n    }\r\n    \r\n    const lastRow = sheet.getLastRow();\r\n    const lastColumn = sheet.getLastColumn();\r\n    \r\n    let recentData = null;\r\n    if (lastRow > 1) {\r\n      // Get the last row of data (excluding header)\r\n      recentData = sheet.getRange(lastRow, 1, 1, lastColumn).getValues()[0];\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Sheet verification complete',\r\n      spreadsheetUrl: spreadsheet.getUrl(),\r\n      totalRows: lastRow,\r\n      totalColumns: lastColumn,\r\n      hasData: lastRow > 1,\r\n      recentEntry: recentData\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error verifying sheet:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Get recent entries from the sheet\r\n */\r\nfunction getRecentEntries(count = 5) {\r\n  try {\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    const sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    \r\n    if (!sheet) {\r\n      return { success: false, message: 'Sheet not found' };\r\n    }\r\n    \r\n    const lastRow = sheet.getLastRow();\r\n    if (lastRow <= 1) {\r\n      return { success: true, message: 'No data entries found', entries: [] };\r\n    }\r\n    \r\n    const startRow = Math.max(2, lastRow - count + 1);\r\n    const numRows = lastRow - startRow + 1;\r\n    \r\n    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];\r\n    const data = sheet.getRange(startRow, 1, numRows, sheet.getLastColumn()).getValues();\r\n    \r\n    const entries = data.map(row => {\r\n      const entry = {};\r\n      headers.forEach((header, index) => {\r\n        entry[header] = row[index];\r\n      });\r\n      return entry;\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      message: `Retrieved ${entries.length} recent entries`,\r\n      entries: entries,\r\n      totalRows: lastRow - 1 // Excluding header\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting recent entries:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n"
                    }
                ]
            },
            "createdAt": 1750689556154,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "update the script so that it read customer data from my  phone contact"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "a5c9b5f5-9271-45c7-8bbc-21b79b9e7a9c",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "To update the script so that it reads customer data from your phone contacts, you will need to integrate the Google Contacts API. This requires setting up OAuth2 authentication to access your contacts. Here's a step-by-step guide to modify your script:\n\n1. **Enable Google Contacts API:**\n   - Go to the [Google Cloud Console](https://console.developers.google.com/).\n   - Create a new project or select an existing one.\n   - Navigate to \"APIs & Services\" > \"Library\".\n   - Search for \"Google Contacts API\" and enable it.\n\n2. **Set Up OAuth2 Credentials:**\n   - In the Google Cloud Console, go to \"APIs & Services\" > \"Credentials\".\n   - Click \"Create Credentials\" and select \"OAuth client ID\".\n   - Configure the consent screen if prompted.\n   - Choose \"Web application\" and add your script's URL as an authorized redirect URI.\n   - Save the credentials and note the Client ID and Client Secret.\n\n3. **Install OAuth2 Library in Google Apps Script:**\n   - In your Google Apps Script project, go to \"Extensions\" > \"Libraries\".\n   - Search for \"OAuth2\" and add it to your project.\n\n4. **Modify Your Script:**\n   - Add functions to handle OAuth2 authentication and to fetch contacts.\n\nHere's an example of how you can modify your script to include these functionalities:\n\n```javascript\n// Add the OAuth2 library\nconst OAUTH2_LIBRARY = '1B7dGV7ZKc5b0t1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3x1k5a3"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "google-apps-script.js",
                    "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "/**\r\n * Theia Sales - Google Apps Script for Google Sheets Integration\r\n *\r\n * Setup Instructions:\r\n * 1. Go to https://script.google.com\r\n * 2. Create a new project\r\n * 3. Replace the default code with this script\r\n * 4. Update SPREADSHEET_ID below with your Google Sheets ID\r\n * 5. Save and deploy as web app\r\n * 6. Copy the web app URL to use in your HTML file\r\n */\r\n\r\n// CONFIGURATION - UPDATE THIS WITH YOUR GOOGLE SHEETS ID\r\nconst SPREADSHEET_ID = '1pbkOaE3RvY3WmiEz5X1PeLRwahaF-_JNGdnOcZ74T8U';\r\nconst SHEET_NAME = 'Theia Sales';\r\n\r\n/**\r\n * Handle POST requests from the jewelry tracker\r\n */\r\nfunction doPost(e) {\r\n  try {\r\n    console.log('doPost called with data:', e.postData.contents);\r\n    const data = JSON.parse(e.postData.contents);\r\n    console.log('Parsed data:', data);\r\n\r\n    // Save to Google Sheets\r\n    const result = saveToSheet(data);\r\n    console.log('Save result:', result);\r\n\r\n    return ContentService\r\n      .createTextOutput(JSON.stringify(result))\r\n      .setMimeType(ContentService.MimeType.JSON);\r\n\r\n  } catch (error) {\r\n    console.error('Error in doPost:', error);\r\n    return ContentService\r\n      .createTextOutput(JSON.stringify({\r\n        success: false,\r\n        error: error.toString()\r\n      }))\r\n      .setMimeType(ContentService.MimeType.JSON);\r\n  }\r\n}\r\n\r\n/**\r\n * Handle GET requests - for testing\r\n */\r\nfunction doGet(e) {\r\n  return ContentService\r\n    .createTextOutput('Theia Sales Google Apps Script is running!')\r\n    .setMimeType(ContentService.MimeType.TEXT);\r\n}\r\n\r\n/**\r\n * Save jewelry sale data to Google Sheets\r\n */\r\nfunction saveToSheet(data) {\r\n  try {\r\n    console.log('Opening spreadsheet with ID:', SPREADSHEET_ID);\r\n    // Open the spreadsheet\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    let sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    console.log('Sheet found:', !!sheet);\r\n\r\n    // Create sheet if it doesn't exist\r\n    if (!sheet) {\r\n      console.log('Creating new sheet:', SHEET_NAME);\r\n      sheet = spreadsheet.insertSheet(SHEET_NAME);\r\n      setupHeaders(sheet);\r\n    }\r\n\r\n    // Check if headers exist (first row should have data)\r\n    if (sheet.getLastRow() === 0) {\r\n      console.log('Setting up headers');\r\n      setupHeaders(sheet);\r\n    }\r\n\r\n    // Prepare the data row\r\n    const timestamp = new Date();\r\n    const rowData = [\r\n      timestamp,                    // A: Timestamp\r\n      data.itemName,               // B: Item Name\r\n      data.category,               // C: Category\r\n      parseFloat(data.price),      // D: Price\r\n      new Date(data.date),         // E: Sale Date\r\n      data.customer,               // F: Customer\r\n      data.phone || '',            // G: Phone\r\n      data.id || timestamp.getTime() // H: Record ID\r\n    ];\r\n\r\n    // Add the row to the sheet\r\n    console.log('Adding row data:', rowData);\r\n    sheet.appendRow(rowData);\r\n\r\n    // Format the new row\r\n    const lastRow = sheet.getLastRow();\r\n    console.log('New row added at position:', lastRow);\r\n    formatRow(sheet, lastRow);\r\n\r\n    const result = {\r\n      success: true,\r\n      message: 'Sale recorded successfully in Google Sheets',\r\n      row: lastRow,\r\n      spreadsheetUrl: spreadsheet.getUrl()\r\n    };\r\n    console.log('Returning success result:', result);\r\n    return result;\r\n\r\n  } catch (error) {\r\n    console.error('Error saving to sheet:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Set up the header row\r\n */\r\nfunction setupHeaders(sheet) {\r\n  const headers = [\r\n    'Timestamp',\r\n    'Item Name',\r\n    'Category',\r\n    'Price (₹)',\r\n    'Sale Date',\r\n    'Customer',\r\n    'Phone',\r\n    'Record ID'\r\n  ];\r\n\r\n  // Add headers\r\n  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);\r\n\r\n  // Format header row\r\n  const headerRange = sheet.getRange(1, 1, 1, headers.length);\r\n  headerRange.setBackground('#4285f4');\r\n  headerRange.setFontColor('white');\r\n  headerRange.setFontWeight('bold');\r\n  headerRange.setBorder(true, true, true, true, true, true);\r\n\r\n  // Set column widths\r\n  sheet.setColumnWidth(1, 150); // Timestamp\r\n  sheet.setColumnWidth(2, 200); // Item Name\r\n  sheet.setColumnWidth(3, 120); // Category\r\n  sheet.setColumnWidth(4, 100); // Price\r\n  sheet.setColumnWidth(5, 100); // Sale Date\r\n  sheet.setColumnWidth(6, 150); // Customer\r\n  sheet.setColumnWidth(7, 130); // Phone\r\n  sheet.setColumnWidth(8, 100); // Record ID\r\n}\r\n\r\n/**\r\n * Format a data row\r\n */\r\nfunction formatRow(sheet, rowNumber) {\r\n  // Format price column (column D)\r\n  const priceCell = sheet.getRange(rowNumber, 4);\r\n  priceCell.setNumberFormat('₹#,##0.00');\r\n\r\n  // Format date column (column E)\r\n  const dateCell = sheet.getRange(rowNumber, 5);\r\n  dateCell.setNumberFormat('dd/mm/yyyy');\r\n\r\n  // Add borders to the entire row\r\n  const rowRange = sheet.getRange(rowNumber, 1, 1, 8);\r\n  rowRange.setBorder(true, true, true, true, false, true);\r\n\r\n  // Alternate row coloring\r\n  if (rowNumber % 2 === 0) {\r\n    rowRange.setBackground('#f8f9fa');\r\n  }\r\n}\r\n\r\n/**\r\n * Test function - run this manually to test the setup\r\n */\r\nfunction testSetup() {\r\n  const testData = {\r\n    itemName: 'Test Gold Ring',\r\n    category: 'rings',\r\n    price: 999.99,\r\n    date: '2024-01-15',\r\n    customer: 'Test Customer',\r\n    phone: '+91 98765 43210',\r\n    id: Date.now()\r\n  };\r\n\r\n  const result = saveToSheet(testData);\r\n  console.log('Test result:', result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Verification function - check sheet status and data\r\n */\r\nfunction verifySheetStatus() {\r\n  try {\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    const sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    \r\n    if (!sheet) {\r\n      return {\r\n        success: false,\r\n        message: 'Sheet not found',\r\n        spreadsheetUrl: spreadsheet.getUrl()\r\n      };\r\n    }\r\n    \r\n    const lastRow = sheet.getLastRow();\r\n    const lastColumn = sheet.getLastColumn();\r\n    \r\n    let recentData = null;\r\n    if (lastRow > 1) {\r\n      // Get the last row of data (excluding header)\r\n      recentData = sheet.getRange(lastRow, 1, 1, lastColumn).getValues()[0];\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Sheet verification complete',\r\n      spreadsheetUrl: spreadsheet.getUrl(),\r\n      totalRows: lastRow,\r\n      totalColumns: lastColumn,\r\n      hasData: lastRow > 1,\r\n      recentEntry: recentData\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error verifying sheet:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Get recent entries from the sheet\r\n */\r\nfunction getRecentEntries(count = 5) {\r\n  try {\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    const sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    \r\n    if (!sheet) {\r\n      return { success: false, message: 'Sheet not found' };\r\n    }\r\n    \r\n    const lastRow = sheet.getLastRow();\r\n    if (lastRow <= 1) {\r\n      return { success: true, message: 'No data entries found', entries: [] };\r\n    }\r\n    \r\n    const startRow = Math.max(2, lastRow - count + 1);\r\n    const numRows = lastRow - startRow + 1;\r\n    \r\n    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];\r\n    const data = sheet.getRange(startRow, 1, numRows, sheet.getLastColumn()).getValues();\r\n    \r\n    const entries = data.map(row => {\r\n      const entry = {};\r\n      headers.forEach((header, index) => {\r\n        entry[header] = row[index];\r\n      });\r\n      return entry;\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      message: `Retrieved ${entries.length} recent entries`,\r\n      entries: entries,\r\n      totalRows: lastRow - 1 // Excluding header\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting recent entries:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "sw.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\sw.js",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "google-apps-script.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_simple.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_simple.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_fixed.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_fixed.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_tracker.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_working.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_working.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_simple.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_simple.html",
                        "sources": []
                    },
                    {
                        "path": "google-apps-script.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_tracker.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": []
                    },
                    {
                        "path": "SETUP_GOOGLE_SHEETS.txt",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\SETUP_GOOGLE_SHEETS.txt",
                        "sources": []
                    },
                    {
                        "path": "README-APP.md",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\README-APP.md",
                        "sources": []
                    },
                    {
                        "path": ".zencoder\\.gitignore",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\.zencoder\\.gitignore",
                        "sources": []
                    },
                    {
                        "path": "manifest.json",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\manifest.json",
                        "sources": []
                    },
                    {
                        "path": "package.json",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\package.json",
                        "sources": []
                    },
                    {
                        "path": "google-apps-script.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [],
                "usedFilePaths": [
                    {
                        "path": "google-apps-script.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "/**\r\n * Theia Sales - Google Apps Script for Google Sheets Integration\r\n *\r\n * Setup Instructions:\r\n * 1. Go to https://script.google.com\r\n * 2. Create a new project\r\n * 3. Replace the default code with this script\r\n * 4. Update SPREADSHEET_ID below with your Google Sheets ID\r\n * 5. Save and deploy as web app\r\n * 6. Copy the web app URL to use in your HTML file\r\n */\r\n\r\n// CONFIGURATION - UPDATE THIS WITH YOUR GOOGLE SHEETS ID\r\nconst SPREADSHEET_ID = '1pbkOaE3RvY3WmiEz5X1PeLRwahaF-_JNGdnOcZ74T8U';\r\nconst SHEET_NAME = 'Theia Sales';\r\n\r\n/**\r\n * Handle POST requests from the jewelry tracker\r\n */\r\nfunction doPost(e) {\r\n  try {\r\n    console.log('doPost called with data:', e.postData.contents);\r\n    const data = JSON.parse(e.postData.contents);\r\n    console.log('Parsed data:', data);\r\n\r\n    // Save to Google Sheets\r\n    const result = saveToSheet(data);\r\n    console.log('Save result:', result);\r\n\r\n    return ContentService\r\n      .createTextOutput(JSON.stringify(result))\r\n      .setMimeType(ContentService.MimeType.JSON);\r\n\r\n  } catch (error) {\r\n    console.error('Error in doPost:', error);\r\n    return ContentService\r\n      .createTextOutput(JSON.stringify({\r\n        success: false,\r\n        error: error.toString()\r\n      }))\r\n      .setMimeType(ContentService.MimeType.JSON);\r\n  }\r\n}\r\n\r\n/**\r\n * Handle GET requests - for testing\r\n */\r\nfunction doGet(e) {\r\n  return ContentService\r\n    .createTextOutput('Theia Sales Google Apps Script is running!')\r\n    .setMimeType(ContentService.MimeType.TEXT);\r\n}\r\n\r\n/**\r\n * Save jewelry sale data to Google Sheets\r\n */\r\nfunction saveToSheet(data) {\r\n  try {\r\n    console.log('Opening spreadsheet with ID:', SPREADSHEET_ID);\r\n    // Open the spreadsheet\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    let sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    console.log('Sheet found:', !!sheet);\r\n\r\n    // Create sheet if it doesn't exist\r\n    if (!sheet) {\r\n      console.log('Creating new sheet:', SHEET_NAME);\r\n      sheet = spreadsheet.insertSheet(SHEET_NAME);\r\n      setupHeaders(sheet);\r\n    }\r\n\r\n    // Check if headers exist (first row should have data)\r\n    if (sheet.getLastRow() === 0) {\r\n      console.log('Setting up headers');\r\n      setupHeaders(sheet);\r\n    }\r\n\r\n    // Prepare the data row\r\n    const timestamp = new Date();\r\n    const rowData = [\r\n      timestamp,                    // A: Timestamp\r\n      data.itemName,               // B: Item Name\r\n      data.category,               // C: Category\r\n      parseFloat(data.price),      // D: Price\r\n      new Date(data.date),         // E: Sale Date\r\n      data.customer,               // F: Customer\r\n      data.phone || '',            // G: Phone\r\n      data.id || timestamp.getTime() // H: Record ID\r\n    ];\r\n\r\n    // Add the row to the sheet\r\n    console.log('Adding row data:', rowData);\r\n    sheet.appendRow(rowData);\r\n\r\n    // Format the new row\r\n    const lastRow = sheet.getLastRow();\r\n    console.log('New row added at position:', lastRow);\r\n    formatRow(sheet, lastRow);\r\n\r\n    const result = {\r\n      success: true,\r\n      message: 'Sale recorded successfully in Google Sheets',\r\n      row: lastRow,\r\n      spreadsheetUrl: spreadsheet.getUrl()\r\n    };\r\n    console.log('Returning success result:', result);\r\n    return result;\r\n\r\n  } catch (error) {\r\n    console.error('Error saving to sheet:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Set up the header row\r\n */\r\nfunction setupHeaders(sheet) {\r\n  const headers = [\r\n    'Timestamp',\r\n    'Item Name',\r\n    'Category',\r\n    'Price (₹)',\r\n    'Sale Date',\r\n    'Customer',\r\n    'Phone',\r\n    'Record ID'\r\n  ];\r\n\r\n  // Add headers\r\n  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);\r\n\r\n  // Format header row\r\n  const headerRange = sheet.getRange(1, 1, 1, headers.length);\r\n  headerRange.setBackground('#4285f4');\r\n  headerRange.setFontColor('white');\r\n  headerRange.setFontWeight('bold');\r\n  headerRange.setBorder(true, true, true, true, true, true);\r\n\r\n  // Set column widths\r\n  sheet.setColumnWidth(1, 150); // Timestamp\r\n  sheet.setColumnWidth(2, 200); // Item Name\r\n  sheet.setColumnWidth(3, 120); // Category\r\n  sheet.setColumnWidth(4, 100); // Price\r\n  sheet.setColumnWidth(5, 100); // Sale Date\r\n  sheet.setColumnWidth(6, 150); // Customer\r\n  sheet.setColumnWidth(7, 130); // Phone\r\n  sheet.setColumnWidth(8, 100); // Record ID\r\n}\r\n\r\n/**\r\n * Format a data row\r\n */\r\nfunction formatRow(sheet, rowNumber) {\r\n  // Format price column (column D)\r\n  const priceCell = sheet.getRange(rowNumber, 4);\r\n  priceCell.setNumberFormat('₹#,##0.00');\r\n\r\n  // Format date column (column E)\r\n  const dateCell = sheet.getRange(rowNumber, 5);\r\n  dateCell.setNumberFormat('dd/mm/yyyy');\r\n\r\n  // Add borders to the entire row\r\n  const rowRange = sheet.getRange(rowNumber, 1, 1, 8);\r\n  rowRange.setBorder(true, true, true, true, false, true);\r\n\r\n  // Alternate row coloring\r\n  if (rowNumber % 2 === 0) {\r\n    rowRange.setBackground('#f8f9fa');\r\n  }\r\n}\r\n\r\n/**\r\n * Test function - run this manually to test the setup\r\n */\r\nfunction testSetup() {\r\n  const testData = {\r\n    itemName: 'Test Gold Ring',\r\n    category: 'rings',\r\n    price: 999.99,\r\n    date: '2024-01-15',\r\n    customer: 'Test Customer',\r\n    phone: '+91 98765 43210',\r\n    id: Date.now()\r\n  };\r\n\r\n  const result = saveToSheet(testData);\r\n  console.log('Test result:', result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Verification function - check sheet status and data\r\n */\r\nfunction verifySheetStatus() {\r\n  try {\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    const sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    \r\n    if (!sheet) {\r\n      return {\r\n        success: false,\r\n        message: 'Sheet not found',\r\n        spreadsheetUrl: spreadsheet.getUrl()\r\n      };\r\n    }\r\n    \r\n    const lastRow = sheet.getLastRow();\r\n    const lastColumn = sheet.getLastColumn();\r\n    \r\n    let recentData = null;\r\n    if (lastRow > 1) {\r\n      // Get the last row of data (excluding header)\r\n      recentData = sheet.getRange(lastRow, 1, 1, lastColumn).getValues()[0];\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      message: 'Sheet verification complete',\r\n      spreadsheetUrl: spreadsheet.getUrl(),\r\n      totalRows: lastRow,\r\n      totalColumns: lastColumn,\r\n      hasData: lastRow > 1,\r\n      recentEntry: recentData\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error verifying sheet:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Get recent entries from the sheet\r\n */\r\nfunction getRecentEntries(count = 5) {\r\n  try {\r\n    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);\r\n    const sheet = spreadsheet.getSheetByName(SHEET_NAME);\r\n    \r\n    if (!sheet) {\r\n      return { success: false, message: 'Sheet not found' };\r\n    }\r\n    \r\n    const lastRow = sheet.getLastRow();\r\n    if (lastRow <= 1) {\r\n      return { success: true, message: 'No data entries found', entries: [] };\r\n    }\r\n    \r\n    const startRow = Math.max(2, lastRow - count + 1);\r\n    const numRows = lastRow - startRow + 1;\r\n    \r\n    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];\r\n    const data = sheet.getRange(startRow, 1, numRows, sheet.getLastColumn()).getValues();\r\n    \r\n    const entries = data.map(row => {\r\n      const entry = {};\r\n      headers.forEach((header, index) => {\r\n        entry[header] = row[index];\r\n      });\r\n      return entry;\r\n    });\r\n    \r\n    return {\r\n      success: true,\r\n      message: `Retrieved ${entries.length} recent entries`,\r\n      entries: entries,\r\n      totalRows: lastRow - 1 // Excluding header\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting recent entries:', error);\r\n    return {\r\n      success: false,\r\n      error: error.toString()\r\n    };\r\n  }\r\n}\r\n"
                    }
                ]
            },
            "createdAt": 1750689622860,
            "isInternal": false
        }
    ],
    "isAgent": false,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "autoApply": false
}
}