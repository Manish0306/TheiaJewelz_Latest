{
    "checksum": "43ff10079508affc18e90348ca329a1f2dedb66fae4ac94384f1c60fd062ac4c",
    "data": {
    "id": "a5efd964-5035-46af-a1ad-b990cbc8f662",
    "createdAt": 1750679999492,
    "updatedAt": 1750680014828,
    "title": "Sales Edit and Scroll Features",
    "messages": [
        {
            "id": "a79fc20d-097c-4a52-9659-d436cfd916fb",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "provide edit option in recent sales also provide dynamic scroll in recent sales"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "jewelry_sales_final.html",
                    "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n    \r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#007bff\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n    \r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n    \r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n    \r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 10px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 800px;\r\n            margin: 0 auto;\r\n            background: white;\r\n            border-radius: 15px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            overflow: hidden;\r\n        }\r\n\r\n        .header {\r\n            background: linear-gradient(45deg, #ff6b6b, #ffd93d);\r\n            color: white;\r\n            text-align: center;\r\n            padding: 20px;\r\n            font-size: 1.8em;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .tabs {\r\n            display: flex;\r\n            background: #f8f9fa;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: 15px;\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: #f8f9fa;\r\n            border: none;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            transition: all 0.3s ease;\r\n            color: #6c757d;\r\n        }\r\n\r\n        .tab.active {\r\n            background: #4ecdc4;\r\n            color: white;\r\n        }\r\n\r\n        .tab-content {\r\n            display: none;\r\n            padding: 20px;\r\n            min-height: 500px;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            font-weight: 600;\r\n            color: #333;\r\n        }\r\n\r\n        .form-group input,\r\n        .form-group select {\r\n            width: 100%;\r\n            padding: 12px;\r\n            border: 2px solid #e9ecef;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .form-group input:focus,\r\n        .form-group select:focus {\r\n            outline: none;\r\n            border-color: #4ecdc4;\r\n        }\r\n\r\n        .btn {\r\n            width: 100%;\r\n            padding: 15px;\r\n            border: none;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            margin-top: 10px;\r\n            color: white;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .btn-primary {\r\n            background: #4ecdc4;\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: #ff6b6b;\r\n        }\r\n\r\n        .btn:hover {\r\n            opacity: 0.9;\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .btn:active {\r\n            transform: translateY(0);\r\n        }\r\n\r\n        .sales-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #4ecdc4;\r\n            position: relative;\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: #333;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .sales-item p {\r\n            margin: 3px 0;\r\n            color: #666;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n            gap: 15px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(45deg, #667eea, #764ba2);\r\n            color: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            text-align: center;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 28px;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 14px;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            margin-bottom: 20px;\r\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n            height: 400px;\r\n        }\r\n\r\n        .customer-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #ff6b6b;\r\n        }\r\n\r\n        .no-data {\r\n            text-align: center;\r\n            color: #666;\r\n            font-style: italic;\r\n            padding: 40px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .delete-btn {\r\n            background: #ff6b6b;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 12px;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 12px;\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: #ff5252;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n            }\r\n            \r\n            .stat-card {\r\n                padding: 15px;\r\n            }\r\n            \r\n            .stat-card h3 {\r\n                font-size: 24px;\r\n            }\r\n            \r\n            .header {\r\n                font-size: 1.4em;\r\n                padding: 15px;\r\n            }\r\n            \r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                gap: 5px;\r\n            }\r\n            \r\n            .tab {\r\n                flex: 1;\r\n                min-width: 100px;\r\n                font-size: 12px;\r\n                padding: 10px 5px;\r\n            }\r\n            \r\n            .form-group {\r\n                margin-bottom: 15px;\r\n            }\r\n            \r\n            .form-group input,\r\n            .form-group select,\r\n            .form-group textarea {\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n            \r\n            .customer-item,\r\n            .sale-item {\r\n                padding: 15px;\r\n                margin-bottom: 15px;\r\n            }\r\n            \r\n            .btn {\r\n                padding: 12px 16px;\r\n                font-size: 14px;\r\n                margin: 5px 2px;\r\n            }\r\n        }\r\n        \r\n        @media (max-width: 480px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n            }\r\n            \r\n            .header {\r\n                font-size: 1.2em;\r\n                padding: 10px;\r\n                text-align: center;\r\n            }\r\n            \r\n            .tabs {\r\n                justify-content: center;\r\n            }\r\n            \r\n            .tab {\r\n                font-size: 11px;\r\n                padding: 8px 4px;\r\n            }\r\n        }\r\n        \r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n            \r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n        \r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n        \r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n        \r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n        \r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"header\">\r\n            💎 Theia Jewelz\r\n        </div>\r\n        \r\n        <div class=\"tabs\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\">📝 Sales Entry</button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\">📊 Dashboard</button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\">👥 Customers</button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\">📈 Analytics</button>\r\n        </div>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\">\r\n            <h2>Add New Sale</h2>\r\n            \r\n            <div id=\"success-message\" class=\"success-message\"></div>\r\n            <div id=\"error-message\" class=\"error-message\"></div>\r\n            \r\n            <form id=\"sales-form\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"itemName\">Item Name *</label>\r\n                    <input type=\"text\" id=\"itemName\" required placeholder=\"e.g., Gold Plated Necklace\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"category\">Category *</label>\r\n                    <select id=\"category\" required>\r\n                        <option value=\"\">Select Category</option>\r\n                        <option value=\"Necklaces\">Necklaces</option>\r\n                        <option value=\"Earrings\">Earrings</option>\r\n                        <option value=\"Bracelets\">Bracelets</option>\r\n                        <option value=\"Rings\">Rings</option>\r\n                        <option value=\"Anklets\">Anklets</option>\r\n                        <option value=\"Sets\">Sets</option>\r\n                        <option value=\"Bangles\">Bangles</option>\r\n                        <option value=\"Chains\">Chains</option>\r\n                    </select>\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"costPrice\">Cost Price (₹) *</label>\r\n                    <input type=\"number\" id=\"costPrice\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"sellingPrice\">Selling Price (₹) *</label>\r\n                    <input type=\"number\" id=\"sellingPrice\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"profit\">Profit (₹)</label>\r\n                    <input type=\"number\" id=\"profit\" readonly placeholder=\"Auto-calculated\" style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"saleDate\">Sale Date *</label>\r\n                    <input type=\"date\" id=\"saleDate\" required>\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerName\">Customer Name *</label>\r\n                    <input type=\"text\" id=\"customerName\" required placeholder=\"Enter customer name\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerPhone\">Customer Phone</label>\r\n                    <input type=\"tel\" id=\"customerPhone\" placeholder=\"Enter phone number\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerAddress\">Customer Address</label>\r\n                    <textarea id=\"customerAddress\" placeholder=\"Enter customer address (optional)\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                </div>\r\n                \r\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"addSaleRecord()\">✅ Add Sale Record</button>\r\n            </form>\r\n            \r\n            <div style=\"margin-top: 30px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                        <h3 style=\"margin: 0;\">Recent Sales (<span id=\"sales-count\">0</span>)</h3>\r\n                        <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" style=\"background: none; border: none; font-size: 18px; cursor: pointer; padding: 5px; border-radius: 4px; transition: all 0.3s ease; color: #007bff;\" title=\"Expand/Collapse Recent Sales\">\r\n                            ▼\r\n                        </button>\r\n                    </div>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales\r\n                        </button>\r\n                        <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px; background-color: #ff6b6b; color: white; border: none; border-radius: 8px;\">\r\n                            🗑️ Delete All\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div id=\"sales-content-container\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                    <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 15px; border-radius: 8px; margin-bottom: 15px; display: none;\">\r\n                        <div style=\"display: flex; justify-content: space-between; flex-wrap: wrap;\">\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-sales\">0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Sales</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-cost\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Cost</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-selling\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Selling</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-profit\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Profit</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div id=\"sales-records\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n            \r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n            \r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n            \r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n            \r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n            \r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n            \r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n                \r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n            \r\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                <h3>Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                <div style=\"display: flex; gap: 10px;\">\r\n                    <button class=\"btn btn-secondary\" onclick=\"downloadCustomersExcel()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                        📥 Export Customers\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"width: auto; padding: 8px 16px; font-size: 14px; background-color: #ff6b6b; color: white; border: none; border-radius: 8px;\">\r\n                        🗑️ Delete All\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div id=\"customers-list\"></div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n            \r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n            \r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n            \r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            \r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n            \r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Initialize Sales Section\r\n        function initializeSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n            \r\n            // Set expanded state by default\r\n            container.style.maxHeight = '1000px';\r\n            container.style.marginTop = '10px';\r\n            container.style.opacity = '1';\r\n            toggleBtn.innerHTML = '▼';\r\n            toggleBtn.title = 'Collapse Recent Sales';\r\n            toggleBtn.style.transform = 'rotate(0deg)';\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n            \r\n            if (container.style.maxHeight && container.style.maxHeight !== '0px') {\r\n                // Collapse\r\n                container.style.maxHeight = '0px';\r\n                container.style.marginTop = '0px';\r\n                container.style.opacity = '0';\r\n                toggleBtn.innerHTML = '▶';\r\n                toggleBtn.title = 'Expand Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(-90deg)';\r\n            } else {\r\n                // Expand\r\n                container.style.maxHeight = '1000px';\r\n                container.style.marginTop = '10px';\r\n                container.style.opacity = '1';\r\n                toggleBtn.innerHTML = '▼';\r\n                toggleBtn.title = 'Collapse Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(0deg)';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n                            \r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n            \r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n            \r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n            \r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n            \r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n            \r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n            \r\n            document.body.appendChild(updateDiv);\r\n            \r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n            \r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n                    \r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                \r\n                // Initialize sales section as expanded\r\n                initializeSalesSection();\r\n                \r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n                \r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n                \r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n            \r\n            const cleanedData = [];\r\n            \r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n                    \r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n                    \r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n                    \r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n                    \r\n                    cleanedData.push(cleanedSale);\r\n                    \r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n            \r\n            return cleanedData;\r\n        }\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            \r\n            const profitField = document.getElementById('profit');\r\n            profitField.value = profit.toFixed(2);\r\n            \r\n            // Change color based on profit\r\n            if (profit > 0) {\r\n                profitField.style.color = '#4ecdc4';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else if (profit < 0) {\r\n                profitField.style.color = '#ff6b6b';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else {\r\n                profitField.style.color = '#666';\r\n                profitField.style.fontWeight = 'normal';\r\n            }\r\n        }\r\n\r\n        // Add sale record function\r\n        function addSaleRecord() {\r\n            try {\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const category = document.getElementById('category').value;\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validate required fields\r\n                if (!itemName) {\r\n                    showError('Please enter item name');\r\n                    return;\r\n                }\r\n                if (!category) {\r\n                    showError('Please select a category');\r\n                    return;\r\n                }\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    showError('Please enter a valid cost price');\r\n                    return;\r\n                }\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    showError('Please enter a valid selling price');\r\n                    return;\r\n                }\r\n                if (!saleDate) {\r\n                    showError('Please select a sale date');\r\n                    return;\r\n                }\r\n                if (!customerName) {\r\n                    showError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Create sale record\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: category,\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showSuccess('✅ Sale record added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                showError('Error adding sale record: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show success message\r\n        function showSuccess(message) {\r\n            const successDiv = document.getElementById('success-message');\r\n            const errorDiv = document.getElementById('error-message');\r\n            \r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show error message\r\n        function showError(message) {\r\n            const errorDiv = document.getElementById('error-message');\r\n            const successDiv = document.getElementById('success-message');\r\n            \r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n            \r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n            \r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n            \r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n            \r\n            countElement.textContent = salesData.length;\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                return;\r\n            }\r\n            \r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            \r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n            \r\n            const recentSales = salesData.slice(-10).reverse();\r\n            container.innerHTML = recentSales.map(sale => `\r\n                <div class=\"sales-item\">\r\n                    <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\">🗑️</button>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n            \r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n            \r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n            \r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n            \r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                \r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n                \r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n                \r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n                \r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n                \r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n                \r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n                \r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n                \r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                \r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer => \r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            \r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            \r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n            \r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n            \r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers\r\n        function loadCustomers() {\r\n            const container = document.getElementById('customers-list');\r\n            const countElement = document.getElementById('customers-count');\r\n            \r\n            countElement.textContent = customersData.length;\r\n            \r\n            if (customersData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No customers yet. Add customers using the form above!</div>';\r\n                return;\r\n            }\r\n            \r\n            // Calculate purchase statistics for manually added customers\r\n            const customersWithStats = customersData.map(customer => {\r\n                let totalPurchases = 0;\r\n                let totalSpent = 0;\r\n                let lastPurchase = null;\r\n      \r\n                // Check sales data for this customer\r\n                          salesData.forEach(sale => {\r\n                    if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                        totalPurchases++;\r\n                        totalSpent += sale.sellingPrice;\r\n                        if (!lastPurchase || sale.saleDate > lastPurchase) {\r\n                            lastPurchase = sale.saleDate;\r\n                        }\r\n                    }\r\n                });\r\n                \r\n                return {\r\n                    ...customer,\r\n                    totalPurchases,\r\n                    totalSpent,\r\n                    lastPurchase\r\n                };\r\n            });\r\n            \r\n            container.innerHTML = customersWithStats.map(customer => `\r\n                <div class=\"customer-item\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                    ${customer.address && customer.address !== 'Not provided' ? `<p><strong>🏠 Address:</strong> ${customer.address}</p>` : ''}\r\n                    ${customer.email && customer.email !== 'Not provided' ? `<p><strong>📧 Email:</strong> ${customer.email}</p>` : ''}\r\n                    <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                    <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                    ${customer.lastPurchase ? `<p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchase).toLocaleDateString()}</p>` : '<p><strong>📅 Last Purchase:</strong> No purchases yet</p>'}\r\n                    <p style=\"font-size: 12px; color: #666; font-style: italic;\">\r\n                        Added manually • Created: ${new Date(customer.createdAt).toLocaleDateString()}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n                \r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n                \r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n                    \r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n                    \r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n                \r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                \r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n                \r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                \r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n                \r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n                \r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n                \r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n                \r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n                \r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n                \r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n                \r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n                \r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n                    \r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong> \r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' : \r\n                          month.profitMargin > 10 ? '📊 Good Performance' : \r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    \r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n                    \r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n                    \r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n                    \r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n                    \r\n                    // Find top category\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n                    \r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' : \r\n                                         month.profitMargin > 10 ? 'Good' : \r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n                \r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n                \r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n                \r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n                \r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n                \r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n                \r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong> \r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' : \r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' : \r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n                \r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            \r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong> \r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' : \r\n                          cat.salesPercentage > 20 ? '📈 High Demand' : \r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' : \r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n                \r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n                \r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n                \r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n                    \r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n                    \r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n                    \r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n                    \r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n                    \r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' : \r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' : \r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n                \r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Customer Analytics exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n                    \r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                \r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' : \r\n                                   cat.salesPercentage > 20 ? 'High Demand' : \r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' : \r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n                \r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Category Analytics exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n                    \r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n                    \r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n                \r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n                \r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n                \r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n                \r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n                \r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Sales Trends exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n</html>"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_working.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_tracker.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_simple.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_simple.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry-sales-tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry-sales-tracker.html",
                        "sources": []
                    },
                    {
                        "path": "SETUP_GOOGLE_SHEETS.txt",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\SETUP_GOOGLE_SHEETS.txt",
                        "sources": []
                    },
                    {
                        "path": "README-APP.md",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\README-APP.md",
                        "sources": []
                    },
                    {
                        "path": "manifest.json",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\manifest.json",
                        "sources": []
                    },
                    {
                        "path": "css\\style.css",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\css\\style.css",
                        "sources": []
                    },
                    {
                        "path": ".zencoder\\.gitignore",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\.zencoder\\.gitignore",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_fixed.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_fixed.html",
                        "sources": []
                    },
                    {
                        "path": "google-apps-script.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_tracker.html",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_working.html",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "generate-icons.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\generate-icons.html",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "jewelry_sales_final.html"
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "jewelry_sales_tracker.html"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n    \r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#007bff\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n    \r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n    \r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n    \r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 10px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 800px;\r\n            margin: 0 auto;\r\n            background: white;\r\n            border-radius: 15px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            overflow: hidden;\r\n        }\r\n\r\n        .header {\r\n            background: linear-gradient(45deg, #ff6b6b, #ffd93d);\r\n            color: white;\r\n            text-align: center;\r\n            padding: 20px;\r\n            font-size: 1.8em;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .tabs {\r\n            display: flex;\r\n            background: #f8f9fa;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: 15px;\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: #f8f9fa;\r\n            border: none;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            transition: all 0.3s ease;\r\n            color: #6c757d;\r\n        }\r\n\r\n        .tab.active {\r\n            background: #4ecdc4;\r\n            color: white;\r\n        }\r\n\r\n        .tab-content {\r\n            display: none;\r\n            padding: 20px;\r\n            min-height: 500px;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            font-weight: 600;\r\n            color: #333;\r\n        }\r\n\r\n        .form-group input,\r\n        .form-group select {\r\n            width: 100%;\r\n            padding: 12px;\r\n            border: 2px solid #e9ecef;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .form-group input:focus,\r\n        .form-group select:focus {\r\n            outline: none;\r\n            border-color: #4ecdc4;\r\n        }\r\n\r\n        .btn {\r\n            width: 100%;\r\n            padding: 15px;\r\n            border: none;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            margin-top: 10px;\r\n            color: white;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .btn-primary {\r\n            background: #4ecdc4;\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: #ff6b6b;\r\n        }\r\n\r\n        .btn:hover {\r\n            opacity: 0.9;\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .btn:active {\r\n            transform: translateY(0);\r\n        }\r\n\r\n        .sales-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #4ecdc4;\r\n            position: relative;\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: #333;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .sales-item p {\r\n            margin: 3px 0;\r\n            color: #666;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n            gap: 15px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(45deg, #667eea, #764ba2);\r\n            color: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            text-align: center;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 28px;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 14px;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            margin-bottom: 20px;\r\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n            height: 400px;\r\n        }\r\n\r\n        .customer-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #ff6b6b;\r\n        }\r\n\r\n        .no-data {\r\n            text-align: center;\r\n            color: #666;\r\n            font-style: italic;\r\n            padding: 40px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .delete-btn {\r\n            background: #ff6b6b;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 12px;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 12px;\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: #ff5252;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n            }\r\n            \r\n            .stat-card {\r\n                padding: 15px;\r\n            }\r\n            \r\n            .stat-card h3 {\r\n                font-size: 24px;\r\n            }\r\n            \r\n            .header {\r\n                font-size: 1.4em;\r\n                padding: 15px;\r\n            }\r\n            \r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                gap: 5px;\r\n            }\r\n            \r\n            .tab {\r\n                flex: 1;\r\n                min-width: 100px;\r\n                font-size: 12px;\r\n                padding: 10px 5px;\r\n            }\r\n            \r\n            .form-group {\r\n                margin-bottom: 15px;\r\n            }\r\n            \r\n            .form-group input,\r\n            .form-group select,\r\n            .form-group textarea {\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n            \r\n            .customer-item,\r\n            .sale-item {\r\n                padding: 15px;\r\n                margin-bottom: 15px;\r\n            }\r\n            \r\n            .btn {\r\n                padding: 12px 16px;\r\n                font-size: 14px;\r\n                margin: 5px 2px;\r\n            }\r\n        }\r\n        \r\n        @media (max-width: 480px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n            }\r\n            \r\n            .header {\r\n                font-size: 1.2em;\r\n                padding: 10px;\r\n                text-align: center;\r\n            }\r\n            \r\n            .tabs {\r\n                justify-content: center;\r\n            }\r\n            \r\n            .tab {\r\n                font-size: 11px;\r\n                padding: 8px 4px;\r\n            }\r\n        }\r\n        \r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n            \r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n        \r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n        \r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n        \r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n        \r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"header\">\r\n            💎 Theia Jewelz\r\n        </div>\r\n        \r\n        <div class=\"tabs\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\">📝 Sales Entry</button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\">📊 Dashboard</button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\">👥 Customers</button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\">📈 Analytics</button>\r\n        </div>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\">\r\n            <h2>Add New Sale</h2>\r\n            \r\n            <div id=\"success-message\" class=\"success-message\"></div>\r\n            <div id=\"error-message\" class=\"error-message\"></div>\r\n            \r\n            <form id=\"sales-form\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"itemName\">Item Name *</label>\r\n                    <input type=\"text\" id=\"itemName\" required placeholder=\"e.g., Gold Plated Necklace\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"category\">Category *</label>\r\n                    <select id=\"category\" required>\r\n                        <option value=\"\">Select Category</option>\r\n                        <option value=\"Necklaces\">Necklaces</option>\r\n                        <option value=\"Earrings\">Earrings</option>\r\n                        <option value=\"Bracelets\">Bracelets</option>\r\n                        <option value=\"Rings\">Rings</option>\r\n                        <option value=\"Anklets\">Anklets</option>\r\n                        <option value=\"Sets\">Sets</option>\r\n                        <option value=\"Bangles\">Bangles</option>\r\n                        <option value=\"Chains\">Chains</option>\r\n                    </select>\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"costPrice\">Cost Price (₹) *</label>\r\n                    <input type=\"number\" id=\"costPrice\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"sellingPrice\">Selling Price (₹) *</label>\r\n                    <input type=\"number\" id=\"sellingPrice\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"profit\">Profit (₹)</label>\r\n                    <input type=\"number\" id=\"profit\" readonly placeholder=\"Auto-calculated\" style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"saleDate\">Sale Date *</label>\r\n                    <input type=\"date\" id=\"saleDate\" required>\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerName\">Customer Name *</label>\r\n                    <input type=\"text\" id=\"customerName\" required placeholder=\"Enter customer name\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerPhone\">Customer Phone</label>\r\n                    <input type=\"tel\" id=\"customerPhone\" placeholder=\"Enter phone number\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerAddress\">Customer Address</label>\r\n                    <textarea id=\"customerAddress\" placeholder=\"Enter customer address (optional)\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                </div>\r\n                \r\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"addSaleRecord()\">✅ Add Sale Record</button>\r\n            </form>\r\n            \r\n            <div style=\"margin-top: 30px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                        <h3 style=\"margin: 0;\">Recent Sales (<span id=\"sales-count\">0</span>)</h3>\r\n                        <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" style=\"background: none; border: none; font-size: 18px; cursor: pointer; padding: 5px; border-radius: 4px; transition: all 0.3s ease; color: #007bff;\" title=\"Expand/Collapse Recent Sales\">\r\n                            ▼\r\n                        </button>\r\n                    </div>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales\r\n                        </button>\r\n                        <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px; background-color: #ff6b6b; color: white; border: none; border-radius: 8px;\">\r\n                            🗑️ Delete All\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div id=\"sales-content-container\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                    <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 15px; border-radius: 8px; margin-bottom: 15px; display: none;\">\r\n                        <div style=\"display: flex; justify-content: space-between; flex-wrap: wrap;\">\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-sales\">0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Sales</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-cost\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Cost</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-selling\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Selling</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-profit\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Profit</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div id=\"sales-records\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n            \r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n            \r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n            \r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n            \r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n            \r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n            \r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n                \r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n            \r\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                <h3>Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                <div style=\"display: flex; gap: 10px;\">\r\n                    <button class=\"btn btn-secondary\" onclick=\"downloadCustomersExcel()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                        📥 Export Customers\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"width: auto; padding: 8px 16px; font-size: 14px; background-color: #ff6b6b; color: white; border: none; border-radius: 8px;\">\r\n                        🗑️ Delete All\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div id=\"customers-list\"></div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n            \r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n            \r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n            \r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            \r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n            \r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Initialize Sales Section\r\n        function initializeSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n            \r\n            // Set expanded state by default\r\n            container.style.maxHeight = '1000px';\r\n            container.style.marginTop = '10px';\r\n            container.style.opacity = '1';\r\n            toggleBtn.innerHTML = '▼';\r\n            toggleBtn.title = 'Collapse Recent Sales';\r\n            toggleBtn.style.transform = 'rotate(0deg)';\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n            \r\n            if (container.style.maxHeight && container.style.maxHeight !== '0px') {\r\n                // Collapse\r\n                container.style.maxHeight = '0px';\r\n                container.style.marginTop = '0px';\r\n                container.style.opacity = '0';\r\n                toggleBtn.innerHTML = '▶';\r\n                toggleBtn.title = 'Expand Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(-90deg)';\r\n            } else {\r\n                // Expand\r\n                container.style.maxHeight = '1000px';\r\n                container.style.marginTop = '10px';\r\n                container.style.opacity = '1';\r\n                toggleBtn.innerHTML = '▼';\r\n                toggleBtn.title = 'Collapse Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(0deg)';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n                            \r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n            \r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n            \r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n            \r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n            \r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n            \r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n            \r\n            document.body.appendChild(updateDiv);\r\n            \r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n            \r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n                    \r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                \r\n                // Initialize sales section as expanded\r\n                initializeSalesSection();\r\n                \r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n                \r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n                \r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n            \r\n            const cleanedData = [];\r\n            \r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n                    \r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n                    \r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n                    \r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n                    \r\n                    cleanedData.push(cleanedSale);\r\n                    \r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n            \r\n            return cleanedData;\r\n        }\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            \r\n            const profitField = document.getElementById('profit');\r\n            profitField.value = profit.toFixed(2);\r\n            \r\n            // Change color based on profit\r\n            if (profit > 0) {\r\n                profitField.style.color = '#4ecdc4';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else if (profit < 0) {\r\n                profitField.style.color = '#ff6b6b';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else {\r\n                profitField.style.color = '#666';\r\n                profitField.style.fontWeight = 'normal';\r\n            }\r\n        }\r\n\r\n        // Add sale record function\r\n        function addSaleRecord() {\r\n            try {\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const category = document.getElementById('category').value;\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validate required fields\r\n                if (!itemName) {\r\n                    showError('Please enter item name');\r\n                    return;\r\n                }\r\n                if (!category) {\r\n                    showError('Please select a category');\r\n                    return;\r\n                }\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    showError('Please enter a valid cost price');\r\n                    return;\r\n                }\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    showError('Please enter a valid selling price');\r\n                    return;\r\n                }\r\n                if (!saleDate) {\r\n                    showError('Please select a sale date');\r\n                    return;\r\n                }\r\n                if (!customerName) {\r\n                    showError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Create sale record\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: category,\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showSuccess('✅ Sale record added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                showError('Error adding sale record: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show success message\r\n        function showSuccess(message) {\r\n            const successDiv = document.getElementById('success-message');\r\n            const errorDiv = document.getElementById('error-message');\r\n            \r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show error message\r\n        function showError(message) {\r\n            const errorDiv = document.getElementById('error-message');\r\n            const successDiv = document.getElementById('success-message');\r\n            \r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n            \r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n            \r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n            \r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n            \r\n            countElement.textContent = salesData.length;\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                return;\r\n            }\r\n            \r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            \r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n            \r\n            const recentSales = salesData.slice(-10).reverse();\r\n            container.innerHTML = recentSales.map(sale => `\r\n                <div class=\"sales-item\">\r\n                    <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\">🗑️</button>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n            \r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n            \r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n            \r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n            \r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                \r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n                \r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n                \r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n                \r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n                \r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n                \r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n                \r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n                \r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                \r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer => \r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            \r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            \r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n            \r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n            \r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers\r\n        function loadCustomers() {\r\n            const container = document.getElementById('customers-list');\r\n            const countElement = document.getElementById('customers-count');\r\n            \r\n            countElement.textContent = customersData.length;\r\n            \r\n            if (customersData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No customers yet. Add customers using the form above!</div>';\r\n                return;\r\n            }\r\n            \r\n            // Calculate purchase statistics for manually added customers\r\n            const customersWithStats = customersData.map(customer => {\r\n                let totalPurchases = 0;\r\n                let totalSpent = 0;\r\n                let lastPurchase = null;\r\n      \r\n                // Check sales data for this customer\r\n                          salesData.forEach(sale => {\r\n                    if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                        totalPurchases++;\r\n                        totalSpent += sale.sellingPrice;\r\n                        if (!lastPurchase || sale.saleDate > lastPurchase) {\r\n                            lastPurchase = sale.saleDate;\r\n                        }\r\n                    }\r\n                });\r\n                \r\n                return {\r\n                    ...customer,\r\n                    totalPurchases,\r\n                    totalSpent,\r\n                    lastPurchase\r\n                };\r\n            });\r\n            \r\n            container.innerHTML = customersWithStats.map(customer => `\r\n                <div class=\"customer-item\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                    ${customer.address && customer.address !== 'Not provided' ? `<p><strong>🏠 Address:</strong> ${customer.address}</p>` : ''}\r\n                    ${customer.email && customer.email !== 'Not provided' ? `<p><strong>📧 Email:</strong> ${customer.email}</p>` : ''}\r\n                    <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                    <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                    ${customer.lastPurchase ? `<p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchase).toLocaleDateString()}</p>` : '<p><strong>📅 Last Purchase:</strong> No purchases yet</p>'}\r\n                    <p style=\"font-size: 12px; color: #666; font-style: italic;\">\r\n                        Added manually • Created: ${new Date(customer.createdAt).toLocaleDateString()}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n                \r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n                \r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n                    \r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n                    \r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n                \r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                \r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n                \r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                \r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n                \r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n                \r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n                \r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n                \r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n                \r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n                \r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n                \r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n                \r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n                    \r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong> \r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' : \r\n                          month.profitMargin > 10 ? '📊 Good Performance' : \r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    \r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n                    \r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n                    \r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n                    \r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n                    \r\n                    // Find top category\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n                    \r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' : \r\n                                         month.profitMargin > 10 ? 'Good' : \r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n                \r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n                \r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n                \r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n                \r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n                \r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n                \r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong> \r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' : \r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' : \r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n                \r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            \r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong> \r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' : \r\n                          cat.salesPercentage > 20 ? '📈 High Demand' : \r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' : \r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n                \r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n                \r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n                \r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n                    \r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n                    \r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n                    \r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n                    \r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n                    \r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' : \r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' : \r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n                \r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Customer Analytics exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n                    \r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                \r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' : \r\n                                   cat.salesPercentage > 20 ? 'High Demand' : \r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' : \r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n                \r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Category Analytics exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n                    \r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n                    \r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n                \r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n                \r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n                \r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n                \r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n                \r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Sales Trends exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n</html>"
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "jewelry_sales_tracker.html"
                    }
                ]
            },
            "createdAt": 1750679999529,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "provide edit option in recent sales also provide dynamic scroll in recent sales"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "6f281ce7-792a-4d97-ad96-484eaae8120c",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "To add an edit option and dynamic scrolling to the \"Recent Sales\" section in your HTML file, you can follow these steps:\n\n### 1. Add Edit Button to Each Sale Record\n\nFirst, you need to add an \"Edit\" button to each sale record in the \"Recent Sales\" section. This button will allow users to edit the details of a sale.\n\nModify the `loadSalesRecords` function to include an \"Edit\" button:\n\n```html\n<div id=\"sales-records\"></div>\n```\n\nUpdate the JavaScript function:\n\n```javascript\nfunction loadSalesRecords() {\n    const container = document.getElementById('sales-records');\n    const countElement = document.getElementById('sales-count');\n    const summaryDiv = document.getElementById('sales-summary');\n    countElement.textContent = salesData.length;\n    if (salesData.length === 0) {\n        container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\n        summaryDiv.style.display = 'none';\n        return;\n    }\n\n    // Update summary\n    const totalSales = salesData.length;\n    const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\n    const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\n    const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\n    document.getElementById('summary-total-sales').textContent = totalSales;\n    document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\n    document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\n    document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\n    summaryDiv.style.display = 'block';\n\n    const recentSales = salesData.slice(-10).reverse();\n    container.innerHTML = recentSales.map(sale => `\n        <div class=\"sales-item\">\n            <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\">🗑️</button>\n            <button class=\"edit-btn\" onclick=\"editSale(${sale.id})\">✏️</button>\n            <h4>${sale.itemName}</h4>\n            <p><strong>Category:</strong> ${sale.category}</p>\n            <p><strong>Customer:</strong> ${sale.customerName}</p>\n            <p><strong>Phone:</strong> ${sale.customerPhone}</p>\n            ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\n            <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\n            <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\n            <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\n            <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\n                <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\n            </p>\n        </div>\n    `).join('');\n}\n```\n\n### 2. Implement the Edit Functionality\n\nAdd a function to handle the editing of a sale record:\n\n```javascript\nfunction editSale(id) {\n    const sale = salesData.find(sale => sale.id === id);\n    if (!sale) return;\n\n    // Populate the form with the sale data\n    document.getElementById('itemName').value = sale.itemName;\n    document.getElementById('category').value = sale.category;\n    document.getElementById('costPrice').value = sale.costPrice;\n    document.getElementById('sellingPrice').value = sale.sellingPrice;\n    document.getElementById('saleDate').value = sale.saleDate;\n    document.getElementById('customerName').value = sale.customerName;\n    document.getElementById('customerPhone').value = sale.customerPhone;\n    document.getElementById('customerAddress').value = sale.customerAddress;\n\n    // Remove the sale from the list\n    salesData = salesData.filter(sale => sale.id !== id);\n    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\n    loadSalesRecords();\n}\n```\n\n### 3. Add Dynamic Scrolling\n\nTo enable dynamic scrolling, you can set a fixed height for the sales records container and enable overflow scrolling:\n\n```css\n#sales-records {\n    max-height: 400px; /* Adjust height as needed */\n    overflow-y: auto;\n}\n```\n\n### 4. Update HTML and CSS\n\nEnsure your HTML and CSS are updated to reflect these changes. The CSS for the edit button can be similar to the delete button:\n\n```css\n.edit-btn {\n    background: #4ecdc4;\n    color: white;\n    border: none;\n    padding: 8px 12px;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 12px;\n    position: absolute;\n    top: 10px;\n    right: 50px; /* Adjust position as needed */\n}\n\n.edit-btn:hover {\n    background: #3bb3a1;\n}\n```\n\nWith these changes, you should have an edit option for each sale record and dynamic scrolling for the \"Recent Sales\" section."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "jewelry_sales_final.html",
                    "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n    \r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#007bff\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n    \r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n    \r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n    \r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 10px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 800px;\r\n            margin: 0 auto;\r\n            background: white;\r\n            border-radius: 15px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            overflow: hidden;\r\n        }\r\n\r\n        .header {\r\n            background: linear-gradient(45deg, #ff6b6b, #ffd93d);\r\n            color: white;\r\n            text-align: center;\r\n            padding: 20px;\r\n            font-size: 1.8em;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .tabs {\r\n            display: flex;\r\n            background: #f8f9fa;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: 15px;\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: #f8f9fa;\r\n            border: none;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            transition: all 0.3s ease;\r\n            color: #6c757d;\r\n        }\r\n\r\n        .tab.active {\r\n            background: #4ecdc4;\r\n            color: white;\r\n        }\r\n\r\n        .tab-content {\r\n            display: none;\r\n            padding: 20px;\r\n            min-height: 500px;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            font-weight: 600;\r\n            color: #333;\r\n        }\r\n\r\n        .form-group input,\r\n        .form-group select {\r\n            width: 100%;\r\n            padding: 12px;\r\n            border: 2px solid #e9ecef;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .form-group input:focus,\r\n        .form-group select:focus {\r\n            outline: none;\r\n            border-color: #4ecdc4;\r\n        }\r\n\r\n        .btn {\r\n            width: 100%;\r\n            padding: 15px;\r\n            border: none;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            margin-top: 10px;\r\n            color: white;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .btn-primary {\r\n            background: #4ecdc4;\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: #ff6b6b;\r\n        }\r\n\r\n        .btn:hover {\r\n            opacity: 0.9;\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .btn:active {\r\n            transform: translateY(0);\r\n        }\r\n\r\n        .sales-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #4ecdc4;\r\n            position: relative;\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: #333;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .sales-item p {\r\n            margin: 3px 0;\r\n            color: #666;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n            gap: 15px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(45deg, #667eea, #764ba2);\r\n            color: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            text-align: center;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 28px;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 14px;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            margin-bottom: 20px;\r\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n            height: 400px;\r\n        }\r\n\r\n        .customer-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #ff6b6b;\r\n        }\r\n\r\n        .no-data {\r\n            text-align: center;\r\n            color: #666;\r\n            font-style: italic;\r\n            padding: 40px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .delete-btn {\r\n            background: #ff6b6b;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 12px;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 12px;\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: #ff5252;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n            }\r\n            \r\n            .stat-card {\r\n                padding: 15px;\r\n            }\r\n            \r\n            .stat-card h3 {\r\n                font-size: 24px;\r\n            }\r\n            \r\n            .header {\r\n                font-size: 1.4em;\r\n                padding: 15px;\r\n            }\r\n            \r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                gap: 5px;\r\n            }\r\n            \r\n            .tab {\r\n                flex: 1;\r\n                min-width: 100px;\r\n                font-size: 12px;\r\n                padding: 10px 5px;\r\n            }\r\n            \r\n            .form-group {\r\n                margin-bottom: 15px;\r\n            }\r\n            \r\n            .form-group input,\r\n            .form-group select,\r\n            .form-group textarea {\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n            \r\n            .customer-item,\r\n            .sale-item {\r\n                padding: 15px;\r\n                margin-bottom: 15px;\r\n            }\r\n            \r\n            .btn {\r\n                padding: 12px 16px;\r\n                font-size: 14px;\r\n                margin: 5px 2px;\r\n            }\r\n        }\r\n        \r\n        @media (max-width: 480px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n            }\r\n            \r\n            .header {\r\n                font-size: 1.2em;\r\n                padding: 10px;\r\n                text-align: center;\r\n            }\r\n            \r\n            .tabs {\r\n                justify-content: center;\r\n            }\r\n            \r\n            .tab {\r\n                font-size: 11px;\r\n                padding: 8px 4px;\r\n            }\r\n        }\r\n        \r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n            \r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n        \r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n        \r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n        \r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n        \r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"header\">\r\n            💎 Theia Jewelz\r\n        </div>\r\n        \r\n        <div class=\"tabs\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\">📝 Sales Entry</button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\">📊 Dashboard</button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\">👥 Customers</button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\">📈 Analytics</button>\r\n        </div>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\">\r\n            <h2>Add New Sale</h2>\r\n            \r\n            <div id=\"success-message\" class=\"success-message\"></div>\r\n            <div id=\"error-message\" class=\"error-message\"></div>\r\n            \r\n            <form id=\"sales-form\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"itemName\">Item Name *</label>\r\n                    <input type=\"text\" id=\"itemName\" required placeholder=\"e.g., Gold Plated Necklace\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"category\">Category *</label>\r\n                    <select id=\"category\" required>\r\n                        <option value=\"\">Select Category</option>\r\n                        <option value=\"Necklaces\">Necklaces</option>\r\n                        <option value=\"Earrings\">Earrings</option>\r\n                        <option value=\"Bracelets\">Bracelets</option>\r\n                        <option value=\"Rings\">Rings</option>\r\n                        <option value=\"Anklets\">Anklets</option>\r\n                        <option value=\"Sets\">Sets</option>\r\n                        <option value=\"Bangles\">Bangles</option>\r\n                        <option value=\"Chains\">Chains</option>\r\n                    </select>\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"costPrice\">Cost Price (₹) *</label>\r\n                    <input type=\"number\" id=\"costPrice\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"sellingPrice\">Selling Price (₹) *</label>\r\n                    <input type=\"number\" id=\"sellingPrice\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"profit\">Profit (₹)</label>\r\n                    <input type=\"number\" id=\"profit\" readonly placeholder=\"Auto-calculated\" style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"saleDate\">Sale Date *</label>\r\n                    <input type=\"date\" id=\"saleDate\" required>\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerName\">Customer Name *</label>\r\n                    <input type=\"text\" id=\"customerName\" required placeholder=\"Enter customer name\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerPhone\">Customer Phone</label>\r\n                    <input type=\"tel\" id=\"customerPhone\" placeholder=\"Enter phone number\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerAddress\">Customer Address</label>\r\n                    <textarea id=\"customerAddress\" placeholder=\"Enter customer address (optional)\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                </div>\r\n                \r\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"addSaleRecord()\">✅ Add Sale Record</button>\r\n            </form>\r\n            \r\n            <div style=\"margin-top: 30px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                        <h3 style=\"margin: 0;\">Recent Sales (<span id=\"sales-count\">0</span>)</h3>\r\n                        <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" style=\"background: none; border: none; font-size: 18px; cursor: pointer; padding: 5px; border-radius: 4px; transition: all 0.3s ease; color: #007bff;\" title=\"Expand/Collapse Recent Sales\">\r\n                            ▼\r\n                        </button>\r\n                    </div>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales\r\n                        </button>\r\n                        <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px; background-color: #ff6b6b; color: white; border: none; border-radius: 8px;\">\r\n                            🗑️ Delete All\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div id=\"sales-content-container\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                    <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 15px; border-radius: 8px; margin-bottom: 15px; display: none;\">\r\n                        <div style=\"display: flex; justify-content: space-between; flex-wrap: wrap;\">\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-sales\">0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Sales</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-cost\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Cost</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-selling\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Selling</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-profit\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Profit</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div id=\"sales-records\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n            \r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n            \r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n            \r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n            \r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n            \r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n            \r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n                \r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n            \r\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                <h3>Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                <div style=\"display: flex; gap: 10px;\">\r\n                    <button class=\"btn btn-secondary\" onclick=\"downloadCustomersExcel()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                        📥 Export Customers\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"width: auto; padding: 8px 16px; font-size: 14px; background-color: #ff6b6b; color: white; border: none; border-radius: 8px;\">\r\n                        🗑️ Delete All\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div id=\"customers-list\"></div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n            \r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n            \r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n            \r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            \r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n            \r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Initialize Sales Section\r\n        function initializeSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n            \r\n            // Set expanded state by default\r\n            container.style.maxHeight = '1000px';\r\n            container.style.marginTop = '10px';\r\n            container.style.opacity = '1';\r\n            toggleBtn.innerHTML = '▼';\r\n            toggleBtn.title = 'Collapse Recent Sales';\r\n            toggleBtn.style.transform = 'rotate(0deg)';\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n            \r\n            if (container.style.maxHeight && container.style.maxHeight !== '0px') {\r\n                // Collapse\r\n                container.style.maxHeight = '0px';\r\n                container.style.marginTop = '0px';\r\n                container.style.opacity = '0';\r\n                toggleBtn.innerHTML = '▶';\r\n                toggleBtn.title = 'Expand Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(-90deg)';\r\n            } else {\r\n                // Expand\r\n                container.style.maxHeight = '1000px';\r\n                container.style.marginTop = '10px';\r\n                container.style.opacity = '1';\r\n                toggleBtn.innerHTML = '▼';\r\n                toggleBtn.title = 'Collapse Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(0deg)';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n                            \r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n            \r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n            \r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n            \r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n            \r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n            \r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n            \r\n            document.body.appendChild(updateDiv);\r\n            \r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n            \r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n                    \r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                \r\n                // Initialize sales section as expanded\r\n                initializeSalesSection();\r\n                \r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n                \r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n                \r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n            \r\n            const cleanedData = [];\r\n            \r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n                    \r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n                    \r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n                    \r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n                    \r\n                    cleanedData.push(cleanedSale);\r\n                    \r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n            \r\n            return cleanedData;\r\n        }\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            \r\n            const profitField = document.getElementById('profit');\r\n            profitField.value = profit.toFixed(2);\r\n            \r\n            // Change color based on profit\r\n            if (profit > 0) {\r\n                profitField.style.color = '#4ecdc4';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else if (profit < 0) {\r\n                profitField.style.color = '#ff6b6b';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else {\r\n                profitField.style.color = '#666';\r\n                profitField.style.fontWeight = 'normal';\r\n            }\r\n        }\r\n\r\n        // Add sale record function\r\n        function addSaleRecord() {\r\n            try {\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const category = document.getElementById('category').value;\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validate required fields\r\n                if (!itemName) {\r\n                    showError('Please enter item name');\r\n                    return;\r\n                }\r\n                if (!category) {\r\n                    showError('Please select a category');\r\n                    return;\r\n                }\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    showError('Please enter a valid cost price');\r\n                    return;\r\n                }\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    showError('Please enter a valid selling price');\r\n                    return;\r\n                }\r\n                if (!saleDate) {\r\n                    showError('Please select a sale date');\r\n                    return;\r\n                }\r\n                if (!customerName) {\r\n                    showError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Create sale record\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: category,\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showSuccess('✅ Sale record added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                showError('Error adding sale record: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show success message\r\n        function showSuccess(message) {\r\n            const successDiv = document.getElementById('success-message');\r\n            const errorDiv = document.getElementById('error-message');\r\n            \r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show error message\r\n        function showError(message) {\r\n            const errorDiv = document.getElementById('error-message');\r\n            const successDiv = document.getElementById('success-message');\r\n            \r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n            \r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n            \r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n            \r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n            \r\n            countElement.textContent = salesData.length;\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                return;\r\n            }\r\n            \r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            \r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n            \r\n            const recentSales = salesData.slice(-10).reverse();\r\n            container.innerHTML = recentSales.map(sale => `\r\n                <div class=\"sales-item\">\r\n                    <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\">🗑️</button>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n            \r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n            \r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n            \r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n            \r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                \r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n                \r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n                \r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n                \r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n                \r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n                \r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n                \r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n                \r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                \r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer => \r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            \r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            \r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n            \r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n            \r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers\r\n        function loadCustomers() {\r\n            const container = document.getElementById('customers-list');\r\n            const countElement = document.getElementById('customers-count');\r\n            \r\n            countElement.textContent = customersData.length;\r\n            \r\n            if (customersData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No customers yet. Add customers using the form above!</div>';\r\n                return;\r\n            }\r\n            \r\n            // Calculate purchase statistics for manually added customers\r\n            const customersWithStats = customersData.map(customer => {\r\n                let totalPurchases = 0;\r\n                let totalSpent = 0;\r\n                let lastPurchase = null;\r\n      \r\n                // Check sales data for this customer\r\n                          salesData.forEach(sale => {\r\n                    if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                        totalPurchases++;\r\n                        totalSpent += sale.sellingPrice;\r\n                        if (!lastPurchase || sale.saleDate > lastPurchase) {\r\n                            lastPurchase = sale.saleDate;\r\n                        }\r\n                    }\r\n                });\r\n                \r\n                return {\r\n                    ...customer,\r\n                    totalPurchases,\r\n                    totalSpent,\r\n                    lastPurchase\r\n                };\r\n            });\r\n            \r\n            container.innerHTML = customersWithStats.map(customer => `\r\n                <div class=\"customer-item\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                    ${customer.address && customer.address !== 'Not provided' ? `<p><strong>🏠 Address:</strong> ${customer.address}</p>` : ''}\r\n                    ${customer.email && customer.email !== 'Not provided' ? `<p><strong>📧 Email:</strong> ${customer.email}</p>` : ''}\r\n                    <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                    <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                    ${customer.lastPurchase ? `<p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchase).toLocaleDateString()}</p>` : '<p><strong>📅 Last Purchase:</strong> No purchases yet</p>'}\r\n                    <p style=\"font-size: 12px; color: #666; font-style: italic;\">\r\n                        Added manually • Created: ${new Date(customer.createdAt).toLocaleDateString()}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n                \r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n                \r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n                    \r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n                    \r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n                \r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                \r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n                \r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                \r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n                \r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n                \r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n                \r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n                \r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n                \r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n                \r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n                \r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n                \r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n                    \r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong> \r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' : \r\n                          month.profitMargin > 10 ? '📊 Good Performance' : \r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    \r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n                    \r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n                    \r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n                    \r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n                    \r\n                    // Find top category\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n                    \r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' : \r\n                                         month.profitMargin > 10 ? 'Good' : \r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n                \r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n                \r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n                \r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n                \r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n                \r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n                \r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong> \r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' : \r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' : \r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n                \r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            \r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong> \r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' : \r\n                          cat.salesPercentage > 20 ? '📈 High Demand' : \r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' : \r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n                \r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n                \r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n                \r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n                    \r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n                    \r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n                    \r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n                    \r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n                    \r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' : \r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' : \r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n                \r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Customer Analytics exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n                    \r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                \r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' : \r\n                                   cat.salesPercentage > 20 ? 'High Demand' : \r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' : \r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n                \r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Category Analytics exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n                    \r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n                    \r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n                \r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n                \r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n                \r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n                \r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n                \r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Sales Trends exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n</html>"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_working.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_tracker.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_simple.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_simple.html",
                        "sources": []
                    },
                    {
                        "path": "jewelry-sales-tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry-sales-tracker.html",
                        "sources": []
                    },
                    {
                        "path": "SETUP_GOOGLE_SHEETS.txt",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\SETUP_GOOGLE_SHEETS.txt",
                        "sources": []
                    },
                    {
                        "path": "README-APP.md",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\README-APP.md",
                        "sources": []
                    },
                    {
                        "path": "manifest.json",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\manifest.json",
                        "sources": []
                    },
                    {
                        "path": "css\\style.css",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\css\\style.css",
                        "sources": []
                    },
                    {
                        "path": ".zencoder\\.gitignore",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\.zencoder\\.gitignore",
                        "sources": []
                    },
                    {
                        "path": "jewelry_sales_fixed.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_fixed.html",
                        "sources": []
                    },
                    {
                        "path": "google-apps-script.js",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\google-apps-script.js",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_tracker.html",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "jewelry_sales_working.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_working.html",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "generate-icons.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\generate-icons.html",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "jewelry_sales_final.html"
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "jewelry_sales_tracker.html"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "jewelry_sales_final.html",
                        "fsPath": "C:\\Users\\Deeksha\\IdeaProjects\\TheiaSales\\jewelry_sales_final.html",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Theia Jewelz - Sales Management System</title>\r\n    \r\n    <!-- PWA Meta Tags -->\r\n    <meta name=\"theme-color\" content=\"#007bff\">\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\r\n    <meta name=\"apple-mobile-web-app-title\" content=\"Theia Jewelz\">\r\n    <meta name=\"mobile-web-app-capable\" content=\"yes\">\r\n    <meta name=\"application-name\" content=\"Theia Jewelz\">\r\n    \r\n    <!-- App Icons -->\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"192x192\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"icon\" type=\"image/png\" sizes=\"512x512\" href=\"./icons/icon-512x512.png\">\r\n    <link rel=\"apple-touch-icon\" href=\"./icons/icon-192x192.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"./icons/icon-152x152.png\">\r\n    <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"./icons/icon-192x192.png\">\r\n    \r\n    <!-- Manifest -->\r\n    <link rel=\"manifest\" href=\"./manifest.json\">\r\n    \r\n    <!-- External Libraries -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js\"></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 10px;\r\n        }\r\n\r\n        .container {\r\n            max-width: 800px;\r\n            margin: 0 auto;\r\n            background: white;\r\n            border-radius: 15px;\r\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\r\n            overflow: hidden;\r\n        }\r\n\r\n        .header {\r\n            background: linear-gradient(45deg, #ff6b6b, #ffd93d);\r\n            color: white;\r\n            text-align: center;\r\n            padding: 20px;\r\n            font-size: 1.8em;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .tabs {\r\n            display: flex;\r\n            background: #f8f9fa;\r\n            border-bottom: 2px solid #e9ecef;\r\n        }\r\n\r\n        .tab {\r\n            flex: 1;\r\n            padding: 15px;\r\n            text-align: center;\r\n            cursor: pointer;\r\n            background: #f8f9fa;\r\n            border: none;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            transition: all 0.3s ease;\r\n            color: #6c757d;\r\n        }\r\n\r\n        .tab.active {\r\n            background: #4ecdc4;\r\n            color: white;\r\n        }\r\n\r\n        .tab-content {\r\n            display: none;\r\n            padding: 20px;\r\n            min-height: 500px;\r\n        }\r\n\r\n        .tab-content.active {\r\n            display: block;\r\n        }\r\n\r\n        .form-group {\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .form-group label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            font-weight: 600;\r\n            color: #333;\r\n        }\r\n\r\n        .form-group input,\r\n        .form-group select {\r\n            width: 100%;\r\n            padding: 12px;\r\n            border: 2px solid #e9ecef;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .form-group input:focus,\r\n        .form-group select:focus {\r\n            outline: none;\r\n            border-color: #4ecdc4;\r\n        }\r\n\r\n        .btn {\r\n            width: 100%;\r\n            padding: 15px;\r\n            border: none;\r\n            border-radius: 8px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            margin-top: 10px;\r\n            color: white;\r\n            transition: all 0.3s ease;\r\n        }\r\n\r\n        .btn-primary {\r\n            background: #4ecdc4;\r\n        }\r\n\r\n        .btn-secondary {\r\n            background: #ff6b6b;\r\n        }\r\n\r\n        .btn:hover {\r\n            opacity: 0.9;\r\n            transform: translateY(-2px);\r\n        }\r\n\r\n        .btn:active {\r\n            transform: translateY(0);\r\n        }\r\n\r\n        .sales-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #4ecdc4;\r\n            position: relative;\r\n        }\r\n\r\n        .sales-item h4 {\r\n            color: #333;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .sales-item p {\r\n            margin: 3px 0;\r\n            color: #666;\r\n            font-size: 14px;\r\n        }\r\n\r\n        .dashboard-stats {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n            gap: 15px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .stat-card {\r\n            background: linear-gradient(45deg, #667eea, #764ba2);\r\n            color: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            text-align: center;\r\n        }\r\n\r\n        .stat-card h3 {\r\n            font-size: 28px;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .stat-card p {\r\n            font-size: 14px;\r\n        }\r\n\r\n        .chart-container {\r\n            background: white;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            margin-bottom: 20px;\r\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n            height: 400px;\r\n        }\r\n\r\n        .customer-item {\r\n            background: #f8f9fa;\r\n            padding: 15px;\r\n            margin-bottom: 10px;\r\n            border-radius: 8px;\r\n            border-left: 4px solid #ff6b6b;\r\n        }\r\n\r\n        .no-data {\r\n            text-align: center;\r\n            color: #666;\r\n            font-style: italic;\r\n            padding: 40px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .delete-btn {\r\n            background: #ff6b6b;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 12px;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 12px;\r\n            position: absolute;\r\n            top: 10px;\r\n            right: 10px;\r\n        }\r\n\r\n        .delete-btn:hover {\r\n            background: #ff5252;\r\n        }\r\n\r\n        .success-message {\r\n            background: #d4edda;\r\n            color: #155724;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #c3e6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .error-message {\r\n            background: #f8d7da;\r\n            color: #721c24;\r\n            padding: 15px;\r\n            border-radius: 5px;\r\n            margin-bottom: 15px;\r\n            border: 1px solid #f5c6cb;\r\n            display: none;\r\n            font-weight: bold;\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: repeat(2, 1fr);\r\n            }\r\n            \r\n            .stat-card {\r\n                padding: 15px;\r\n            }\r\n            \r\n            .stat-card h3 {\r\n                font-size: 24px;\r\n            }\r\n            \r\n            .header {\r\n                font-size: 1.4em;\r\n                padding: 15px;\r\n            }\r\n            \r\n            .tabs {\r\n                flex-wrap: wrap;\r\n                gap: 5px;\r\n            }\r\n            \r\n            .tab {\r\n                flex: 1;\r\n                min-width: 100px;\r\n                font-size: 12px;\r\n                padding: 10px 5px;\r\n            }\r\n            \r\n            .form-group {\r\n                margin-bottom: 15px;\r\n            }\r\n            \r\n            .form-group input,\r\n            .form-group select,\r\n            .form-group textarea {\r\n                font-size: 16px; /* Prevents zoom on iOS */\r\n            }\r\n            \r\n            .customer-item,\r\n            .sale-item {\r\n                padding: 15px;\r\n                margin-bottom: 15px;\r\n            }\r\n            \r\n            .btn {\r\n                padding: 12px 16px;\r\n                font-size: 14px;\r\n                margin: 5px 2px;\r\n            }\r\n        }\r\n        \r\n        @media (max-width: 480px) {\r\n            .dashboard-stats {\r\n                grid-template-columns: 1fr;\r\n            }\r\n            \r\n            .header {\r\n                font-size: 1.2em;\r\n                padding: 10px;\r\n                text-align: center;\r\n            }\r\n            \r\n            .tabs {\r\n                justify-content: center;\r\n            }\r\n            \r\n            .tab {\r\n                font-size: 11px;\r\n                padding: 8px 4px;\r\n            }\r\n        }\r\n        \r\n        /* PWA Specific Styles */\r\n        @media (display-mode: standalone) {\r\n            .header {\r\n                padding-top: 40px; /* Account for status bar */\r\n            }\r\n            \r\n            body {\r\n                -webkit-user-select: none;\r\n                -webkit-touch-callout: none;\r\n                -webkit-tap-highlight-color: transparent;\r\n            }\r\n        }\r\n        \r\n        /* Touch-friendly improvements */\r\n        .btn, .tab, button {\r\n            min-height: 44px;\r\n            min-width: 44px;\r\n            touch-action: manipulation;\r\n        }\r\n        \r\n        /* Smooth scrolling */\r\n        html {\r\n            scroll-behavior: smooth;\r\n        }\r\n        \r\n        /* Loading spinner */\r\n        .loading {\r\n            display: inline-block;\r\n            width: 20px;\r\n            height: 20px;\r\n            border: 3px solid #f3f3f3;\r\n            border-top: 3px solid #007bff;\r\n            border-radius: 50%;\r\n            animation: spin 1s linear infinite;\r\n        }\r\n        \r\n        @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"header\">\r\n            💎 Theia Jewelz\r\n        </div>\r\n        \r\n        <div class=\"tabs\">\r\n            <button class=\"tab active\" onclick=\"showTab('sales')\">📝 Sales Entry</button>\r\n            <button class=\"tab\" onclick=\"showTab('dashboard')\">📊 Dashboard</button>\r\n            <button class=\"tab\" onclick=\"showTab('customers')\">👥 Customers</button>\r\n            <button class=\"tab\" onclick=\"showTab('analytics')\">📈 Analytics</button>\r\n        </div>\r\n\r\n        <!-- Sales Entry Tab -->\r\n        <div id=\"sales\" class=\"tab-content active\">\r\n            <h2>Add New Sale</h2>\r\n            \r\n            <div id=\"success-message\" class=\"success-message\"></div>\r\n            <div id=\"error-message\" class=\"error-message\"></div>\r\n            \r\n            <form id=\"sales-form\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"itemName\">Item Name *</label>\r\n                    <input type=\"text\" id=\"itemName\" required placeholder=\"e.g., Gold Plated Necklace\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"category\">Category *</label>\r\n                    <select id=\"category\" required>\r\n                        <option value=\"\">Select Category</option>\r\n                        <option value=\"Necklaces\">Necklaces</option>\r\n                        <option value=\"Earrings\">Earrings</option>\r\n                        <option value=\"Bracelets\">Bracelets</option>\r\n                        <option value=\"Rings\">Rings</option>\r\n                        <option value=\"Anklets\">Anklets</option>\r\n                        <option value=\"Sets\">Sets</option>\r\n                        <option value=\"Bangles\">Bangles</option>\r\n                        <option value=\"Chains\">Chains</option>\r\n                    </select>\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"costPrice\">Cost Price (₹) *</label>\r\n                    <input type=\"number\" id=\"costPrice\" required placeholder=\"Enter cost price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"sellingPrice\">Selling Price (₹) *</label>\r\n                    <input type=\"number\" id=\"sellingPrice\" required placeholder=\"Enter selling price\" min=\"0\" step=\"0.01\" oninput=\"calculateProfit()\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"profit\">Profit (₹)</label>\r\n                    <input type=\"number\" id=\"profit\" readonly placeholder=\"Auto-calculated\" style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"saleDate\">Sale Date *</label>\r\n                    <input type=\"date\" id=\"saleDate\" required>\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerName\">Customer Name *</label>\r\n                    <input type=\"text\" id=\"customerName\" required placeholder=\"Enter customer name\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerPhone\">Customer Phone</label>\r\n                    <input type=\"tel\" id=\"customerPhone\" placeholder=\"Enter phone number\">\r\n                </div>\r\n                \r\n                <div class=\"form-group\">\r\n                    <label for=\"customerAddress\">Customer Address</label>\r\n                    <textarea id=\"customerAddress\" placeholder=\"Enter customer address (optional)\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                </div>\r\n                \r\n                <button type=\"button\" class=\"btn btn-primary\" onclick=\"addSaleRecord()\">✅ Add Sale Record</button>\r\n            </form>\r\n            \r\n            <div style=\"margin-top: 30px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <div style=\"display: flex; align-items: center; gap: 10px;\">\r\n                        <h3 style=\"margin: 0;\">Recent Sales (<span id=\"sales-count\">0</span>)</h3>\r\n                        <button id=\"sales-toggle-btn\" onclick=\"toggleSalesSection()\" style=\"background: none; border: none; font-size: 18px; cursor: pointer; padding: 5px; border-radius: 4px; transition: all 0.3s ease; color: #007bff;\" title=\"Expand/Collapse Recent Sales\">\r\n                            ▼\r\n                        </button>\r\n                    </div>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales\r\n                        </button>\r\n                        <button class=\"btn\" onclick=\"deleteAllSales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px; background-color: #ff6b6b; color: white; border: none; border-radius: 8px;\">\r\n                            🗑️ Delete All\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div id=\"sales-content-container\" style=\"transition: all 0.3s ease; overflow: hidden;\">\r\n                    <div id=\"sales-summary\" style=\"background: linear-gradient(45deg, #4ecdc4, #44a08d); color: white; padding: 15px; border-radius: 8px; margin-bottom: 15px; display: none;\">\r\n                        <div style=\"display: flex; justify-content: space-between; flex-wrap: wrap;\">\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-sales\">0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Sales</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-cost\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Cost</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-selling\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Selling</p>\r\n                            </div>\r\n                            <div style=\"text-align: center; flex: 1; min-width: 120px;\">\r\n                                <h4 id=\"summary-total-profit\">₹0</h4>\r\n                                <p style=\"font-size: 12px; opacity: 0.9;\">Total Profit</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div id=\"sales-records\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Dashboard Tab -->\r\n        <div id=\"dashboard\" class=\"tab-content\">\r\n            <h2>📊 Sales Dashboard</h2>\r\n            \r\n            <div class=\"dashboard-stats\">\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-sales\">0</h3>\r\n                    <p>Total Sales</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-revenue\">₹0</h3>\r\n                    <p>Total Revenue</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"total-profit\">₹0</h3>\r\n                    <p>Total Profit</p>\r\n                </div>\r\n                <div class=\"stat-card\">\r\n                    <h3 id=\"avg-profit\">₹0</h3>\r\n                    <p>Average Profit</p>\r\n                </div>\r\n            </div>\r\n            \r\n            <button class=\"btn btn-secondary\" onclick=\"downloadExcel()\">\r\n                📥 Download Excel Report\r\n            </button>\r\n            \r\n            <div class=\"chart-container\">\r\n                <canvas id=\"salesChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n            \r\n            <div class=\"chart-container\">\r\n                <canvas id=\"categoryChart\" width=\"400\" height=\"200\"></canvas>\r\n            </div>\r\n            \r\n            <!-- Monthly Sales Section -->\r\n            <div style=\"margin-top: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📅 Monthly Sales Records</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadMonthlySales()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Monthly Report\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"monthly-sales-list\"></div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Customers Tab -->\r\n        <div id=\"customers\" class=\"tab-content\">\r\n            <h2>👥 Customer Management</h2>\r\n            \r\n            <div style=\"background: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 20px;\">\r\n                <h3>Add New Customer</h3>\r\n                <div id=\"customer-success-message\" class=\"success-message\"></div>\r\n                <div id=\"customer-error-message\" class=\"error-message\"></div>\r\n                \r\n                <form id=\"customer-form\">\r\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerName\">Customer Name *</label>\r\n                            <input type=\"text\" id=\"newCustomerName\" required placeholder=\"Enter customer name\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"newCustomerPhone\">Phone Number</label>\r\n                            <input type=\"tel\" id=\"newCustomerPhone\" placeholder=\"Enter phone number\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerAddress\">Address</label>\r\n                        <textarea id=\"newCustomerAddress\" placeholder=\"Enter customer address\" rows=\"2\" style=\"width: 100%; padding: 12px; border: 2px solid #e9ecef; border-radius: 8px; font-size: 16px; resize: vertical;\"></textarea>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"newCustomerEmail\">Email</label>\r\n                        <input type=\"email\" id=\"newCustomerEmail\" placeholder=\"Enter email address\">\r\n                    </div>\r\n                    <button type=\"button\" class=\"btn btn-primary\" onclick=\"addCustomer()\">👤 Add Customer</button>\r\n                </form>\r\n            </div>\r\n            \r\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                <h3>Customer Database (<span id=\"customers-count\">0</span>)</h3>\r\n                <div style=\"display: flex; gap: 10px;\">\r\n                    <button class=\"btn btn-secondary\" onclick=\"downloadCustomersExcel()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                        📥 Export Customers\r\n                    </button>\r\n                    <button class=\"btn\" onclick=\"deleteAllCustomers()\" style=\"width: auto; padding: 8px 16px; font-size: 14px; background-color: #ff6b6b; color: white; border: none; border-radius: 8px;\">\r\n                        🗑️ Delete All\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div id=\"customers-list\"></div>\r\n        </div>\r\n\r\n        <!-- Analytics Tab -->\r\n        <div id=\"analytics\" class=\"tab-content\">\r\n            <h2>📈 Business Analytics</h2>\r\n            \r\n            <!-- Customer Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>👥 Customer Purchase Analytics</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCustomerAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Customer Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"customer-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Category Analytics Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📊 Category Demand Analysis</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadCategoryAnalytics()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Category Analytics\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"category-analytics-list\"></div>\r\n            </div>\r\n\r\n            <!-- Sales Trends Section -->\r\n            <div style=\"margin-bottom: 40px;\">\r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                    <h3>📈 Sales Trends</h3>\r\n                    <div style=\"display: flex; gap: 10px;\">\r\n                        <button class=\"btn btn-secondary\" onclick=\"downloadSalesTrends()\" style=\"width: auto; padding: 8px 16px; font-size: 14px;\">\r\n                            📥 Export Sales Trends\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"sales-trends-list\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Global variables\r\n        let salesData = [];\r\n        let customersData = [];\r\n        let salesChart = null;\r\n        let categoryChart = null;\r\n\r\n        // Show tab function\r\n        function showTab(tabName) {\r\n            // Hide all tab contents\r\n            const tabContents = document.querySelectorAll('.tab-content');\r\n            tabContents.forEach(content => {\r\n                content.classList.remove('active');\r\n            });\r\n            \r\n            // Hide all tab buttons active state\r\n            const tabButtons = document.querySelectorAll('.tab');\r\n            tabButtons.forEach(button => {\r\n                button.classList.remove('active');\r\n            });\r\n            \r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            \r\n            // Activate selected button\r\n            event.target.classList.add('active');\r\n            \r\n            // Load specific data based on tab\r\n            if (tabName === 'dashboard') {\r\n                updateDashboard();\r\n            } else if (tabName === 'sales') {\r\n                loadSalesRecords();\r\n            } else if (tabName === 'customers') {\r\n                loadCustomers();\r\n            } else if (tabName === 'analytics') {\r\n                loadAnalytics();\r\n            }\r\n        }\r\n\r\n        // Initialize Sales Section\r\n        function initializeSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n            \r\n            // Set expanded state by default\r\n            container.style.maxHeight = '1000px';\r\n            container.style.marginTop = '10px';\r\n            container.style.opacity = '1';\r\n            toggleBtn.innerHTML = '▼';\r\n            toggleBtn.title = 'Collapse Recent Sales';\r\n            toggleBtn.style.transform = 'rotate(0deg)';\r\n        }\r\n\r\n        // Toggle Sales Section\r\n        function toggleSalesSection() {\r\n            const container = document.getElementById('sales-content-container');\r\n            const toggleBtn = document.getElementById('sales-toggle-btn');\r\n            \r\n            if (container.style.maxHeight && container.style.maxHeight !== '0px') {\r\n                // Collapse\r\n                container.style.maxHeight = '0px';\r\n                container.style.marginTop = '0px';\r\n                container.style.opacity = '0';\r\n                toggleBtn.innerHTML = '▶';\r\n                toggleBtn.title = 'Expand Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(-90deg)';\r\n            } else {\r\n                // Expand\r\n                container.style.maxHeight = '1000px';\r\n                container.style.marginTop = '10px';\r\n                container.style.opacity = '1';\r\n                toggleBtn.innerHTML = '▼';\r\n                toggleBtn.title = 'Collapse Recent Sales';\r\n                toggleBtn.style.transform = 'rotate(0deg)';\r\n            }\r\n        }\r\n\r\n        // PWA Installation\r\n        let deferredPrompt;\r\n        let installBtn = null;\r\n\r\n        // Initialize when page loads\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            initializeApp();\r\n            registerServiceWorker();\r\n            setupPWA();\r\n        });\r\n\r\n        // Register Service Worker\r\n        function registerServiceWorker() {\r\n            if ('serviceWorker' in navigator) {\r\n                window.addEventListener('load', () => {\r\n                    navigator.serviceWorker.register('./sw.js')\r\n                        .then((registration) => {\r\n                            console.log('SW registered: ', registration);\r\n                            \r\n                            // Check for updates\r\n                            registration.addEventListener('updatefound', () => {\r\n                                const newWorker = registration.installing;\r\n                                newWorker.addEventListener('statechange', () => {\r\n                                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n                                        showUpdateAvailable();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })\r\n                        .catch((registrationError) => {\r\n                            console.log('SW registration failed: ', registrationError);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n\r\n        // Setup PWA Features\r\n        function setupPWA() {\r\n            // Create install button\r\n            createInstallButton();\r\n            \r\n            // Listen for beforeinstallprompt event\r\n            window.addEventListener('beforeinstallprompt', (e) => {\r\n                console.log('PWA: beforeinstallprompt event fired');\r\n                e.preventDefault();\r\n                deferredPrompt = e;\r\n                showInstallButton();\r\n            });\r\n\r\n            // Listen for app installed event\r\n            window.addEventListener('appinstalled', () => {\r\n                console.log('PWA: App was installed');\r\n                hideInstallButton();\r\n                showSuccess('🎉 App installed successfully! You can now access Theia Jewelz from your home screen.');\r\n            });\r\n\r\n            // Check if app is already installed\r\n            if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\r\n                console.log('PWA: App is running in standalone mode');\r\n                hideInstallButton();\r\n            }\r\n        }\r\n\r\n        // Create Install Button\r\n        function createInstallButton() {\r\n            installBtn = document.createElement('button');\r\n            installBtn.id = 'install-btn';\r\n            installBtn.innerHTML = '📱 Install App';\r\n            installBtn.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 1000;\r\n                background: #28a745;\r\n                color: white;\r\n                border: none;\r\n                padding: 12px 20px;\r\n                border-radius: 25px;\r\n                font-size: 14px;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                transition: all 0.3s ease;\r\n                display: none;\r\n            `;\r\n            \r\n            installBtn.addEventListener('mouseenter', () => {\r\n                installBtn.style.transform = 'translateY(-2px)';\r\n                installBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';\r\n            });\r\n            \r\n            installBtn.addEventListener('mouseleave', () => {\r\n                installBtn.style.transform = 'translateY(0)';\r\n                installBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';\r\n            });\r\n            \r\n            installBtn.addEventListener('click', installApp);\r\n            document.body.appendChild(installBtn);\r\n        }\r\n\r\n        // Show Install Button\r\n        function showInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'block';\r\n                setTimeout(() => {\r\n                    installBtn.style.opacity = '1';\r\n                    installBtn.style.transform = 'scale(1)';\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Hide Install Button\r\n        function hideInstallButton() {\r\n            if (installBtn) {\r\n                installBtn.style.display = 'none';\r\n            }\r\n        }\r\n\r\n        // Install App\r\n        function installApp() {\r\n            if (deferredPrompt) {\r\n                deferredPrompt.prompt();\r\n                deferredPrompt.userChoice.then((choiceResult) => {\r\n                    if (choiceResult.outcome === 'accepted') {\r\n                        console.log('PWA: User accepted the install prompt');\r\n                    } else {\r\n                        console.log('PWA: User dismissed the install prompt');\r\n                    }\r\n                    deferredPrompt = null;\r\n                });\r\n            }\r\n        }\r\n\r\n        // Show Update Available\r\n        function showUpdateAvailable() {\r\n            const updateDiv = document.createElement('div');\r\n            updateDiv.style.cssText = `\r\n                position: fixed;\r\n                bottom: 20px;\r\n                left: 50%;\r\n                transform: translateX(-50%);\r\n                background: #007bff;\r\n                color: white;\r\n                padding: 15px 25px;\r\n                border-radius: 25px;\r\n                z-index: 1001;\r\n                font-weight: bold;\r\n                cursor: pointer;\r\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n                animation: slideUp 0.3s ease;\r\n            `;\r\n            updateDiv.innerHTML = `\r\n                <span>🔄 New version available! Click to update</span>\r\n            `;\r\n            \r\n            updateDiv.addEventListener('click', () => {\r\n                window.location.reload();\r\n            });\r\n            \r\n            document.body.appendChild(updateDiv);\r\n            \r\n            setTimeout(() => {\r\n                if (document.body.contains(updateDiv)) {\r\n                    document.body.removeChild(updateDiv);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        // Add CSS for animations\r\n        const style = document.createElement('style');\r\n        style.textContent = `\r\n            @keyframes slideUp {\r\n                from {\r\n                    transform: translateX(-50%) translateY(100px);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(-50%) translateY(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n            \r\n            @media (max-width: 768px) {\r\n                #install-btn {\r\n                    top: 10px !important;\r\n                    right: 10px !important;\r\n                    font-size: 12px !important;\r\n                    padding: 10px 16px !important;\r\n                }\r\n            }\r\n        `;\r\n        document.head.appendChild(style);\r\n\r\n        function initializeApp() {\r\n            try {\r\n                // Load data from localStorage\r\n                const savedData = localStorage.getItem('jewelrySales');\r\n                if (savedData) {\r\n                    const rawData = JSON.parse(savedData);\r\n                    // Clean and validate existing data\r\n                    salesData = cleanSalesData(rawData);\r\n                    \r\n                    // Save cleaned data back\r\n                    if (salesData.length !== rawData.length) {\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                    }\r\n                } else {\r\n                    salesData = [];\r\n                }\r\n\r\n                // Load customer data\r\n                const savedCustomers = localStorage.getItem('jewelryCustomers');\r\n                if (savedCustomers) {\r\n                    customersData = JSON.parse(savedCustomers);\r\n                } else {\r\n                    customersData = [];\r\n                }\r\n\r\n                // Set today's date as default\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Load initial displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                \r\n                // Initialize sales section as expanded\r\n                initializeSalesSection();\r\n                \r\n            } catch (error) {\r\n                console.error('Error initializing app:', error);\r\n                showError('Error loading saved data. Starting fresh.');\r\n                \r\n                // If there's an error, start fresh\r\n                salesData = [];\r\n                localStorage.removeItem('jewelrySales');\r\n                \r\n                // Try to load displays again\r\n                try {\r\n                    loadSalesRecords();\r\n                    updateDashboard();\r\n                    loadCustomers();\r\n                } catch (e) {\r\n                    console.error('Error in recovery mode:', e);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Function to clean and validate sales data\r\n        function cleanSalesData(rawData) {\r\n            if (!Array.isArray(rawData)) {\r\n                return [];\r\n            }\r\n            \r\n            const cleanedData = [];\r\n            \r\n            rawData.forEach((sale, index) => {\r\n                try {\r\n                    // Check if sale has all required properties\r\n                    if (!sale || typeof sale !== 'object') {\r\n                        return;\r\n                    }\r\n                    \r\n                    // Validate and fix numeric fields\r\n                    const costPrice = parseFloat(sale.costPrice) || 0;\r\n                    const sellingPrice = parseFloat(sale.sellingPrice) || 0;\r\n                    const profit = sellingPrice - costPrice;\r\n                    \r\n                    // Validate required string fields\r\n                    const itemName = sale.itemName || 'Unknown Item';\r\n                    const category = sale.category || 'Uncategorized';\r\n                    const customerName = sale.customerName || 'Unknown Customer';\r\n                    const customerPhone = sale.customerPhone || 'Not provided';\r\n                    const customerAddress = sale.customerAddress || 'Not provided';\r\n                    const saleDate = sale.saleDate || new Date().toISOString().split('T')[0];\r\n                    const id = sale.id || Date.now() + index;\r\n                    \r\n                    // Create cleaned sale object\r\n                    const cleanedSale = {\r\n                        id: id,\r\n                        itemName: itemName,\r\n                        category: category,\r\n                        costPrice: costPrice,\r\n                        sellingPrice: sellingPrice,\r\n                        profit: profit,\r\n                        saleDate: saleDate,\r\n                        customerName: customerName,\r\n                        customerPhone: customerPhone,\r\n                        customerAddress: customerAddress,\r\n                        createdAt: sale.createdAt || new Date().toISOString()\r\n                    };\r\n                    \r\n                    cleanedData.push(cleanedSale);\r\n                    \r\n                } catch (saleError) {\r\n                    console.error('Error cleaning sale:', saleError);\r\n                }\r\n            });\r\n            \r\n            return cleanedData;\r\n        }\r\n\r\n        // Calculate profit automatically\r\n        function calculateProfit() {\r\n            const costPrice = parseFloat(document.getElementById('costPrice').value) || 0;\r\n            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;\r\n            const profit = sellingPrice - costPrice;\r\n            \r\n            const profitField = document.getElementById('profit');\r\n            profitField.value = profit.toFixed(2);\r\n            \r\n            // Change color based on profit\r\n            if (profit > 0) {\r\n                profitField.style.color = '#4ecdc4';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else if (profit < 0) {\r\n                profitField.style.color = '#ff6b6b';\r\n                profitField.style.fontWeight = 'bold';\r\n            } else {\r\n                profitField.style.color = '#666';\r\n                profitField.style.fontWeight = 'normal';\r\n            }\r\n        }\r\n\r\n        // Add sale record function\r\n        function addSaleRecord() {\r\n            try {\r\n                // Get form values\r\n                const itemName = document.getElementById('itemName').value.trim();\r\n                const category = document.getElementById('category').value;\r\n                const costPrice = parseFloat(document.getElementById('costPrice').value);\r\n                const sellingPrice = parseFloat(document.getElementById('sellingPrice').value);\r\n                const saleDate = document.getElementById('saleDate').value;\r\n                const customerName = document.getElementById('customerName').value.trim();\r\n                const customerPhone = document.getElementById('customerPhone').value.trim();\r\n                const customerAddress = document.getElementById('customerAddress').value.trim();\r\n\r\n                // Validate required fields\r\n                if (!itemName) {\r\n                    showError('Please enter item name');\r\n                    return;\r\n                }\r\n                if (!category) {\r\n                    showError('Please select a category');\r\n                    return;\r\n                }\r\n                if (!costPrice || isNaN(costPrice) || costPrice < 0) {\r\n                    showError('Please enter a valid cost price');\r\n                    return;\r\n                }\r\n                if (!sellingPrice || isNaN(sellingPrice) || sellingPrice < 0) {\r\n                    showError('Please enter a valid selling price');\r\n                    return;\r\n                }\r\n                if (!saleDate) {\r\n                    showError('Please select a sale date');\r\n                    return;\r\n                }\r\n                if (!customerName) {\r\n                    showError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Create sale record\r\n                const saleRecord = {\r\n                    id: Date.now(),\r\n                    itemName: itemName,\r\n                    category: category,\r\n                    costPrice: costPrice,\r\n                    sellingPrice: sellingPrice,\r\n                    profit: sellingPrice - costPrice,\r\n                    saleDate: saleDate,\r\n                    customerName: customerName,\r\n                    customerPhone: customerPhone || 'Not provided',\r\n                    customerAddress: customerAddress || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                salesData.push(saleRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                } catch (storageError) {\r\n                    showError('Error saving data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('sales-form').reset();\r\n                document.getElementById('profit').value = '';\r\n                document.getElementById('customerAddress').value = '';\r\n                const today = new Date();\r\n                const dateString = today.toISOString().split('T')[0];\r\n                document.getElementById('saleDate').value = dateString;\r\n\r\n                // Refresh displays\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showSuccess('✅ Sale record added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding sale:', error);\r\n                showError('Error adding sale record: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show success message\r\n        function showSuccess(message) {\r\n            const successDiv = document.getElementById('success-message');\r\n            const errorDiv = document.getElementById('error-message');\r\n            \r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show error message\r\n        function showError(message) {\r\n            const errorDiv = document.getElementById('error-message');\r\n            const successDiv = document.getElementById('success-message');\r\n            \r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Tab switching\r\n        function showTab(tabName) {\r\n            // Hide all tabs\r\n            document.querySelectorAll('.tab-content').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n            \r\n            document.querySelectorAll('.tab').forEach(tab => {\r\n                tab.classList.remove('active');\r\n            });\r\n            \r\n            // Show selected tab\r\n            document.getElementById(tabName).classList.add('active');\r\n            event.target.classList.add('active');\r\n            \r\n            // Update charts if dashboard is selected\r\n            if (tabName === 'dashboard') {\r\n                setTimeout(() => {\r\n                    updateCharts();\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        // Load sales records\r\n        function loadSalesRecords() {\r\n            const container = document.getElementById('sales-records');\r\n            const countElement = document.getElementById('sales-count');\r\n            const summaryDiv = document.getElementById('sales-summary');\r\n            \r\n            countElement.textContent = salesData.length;\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales records yet. Add your first sale above!</div>';\r\n                summaryDiv.style.display = 'none';\r\n                return;\r\n            }\r\n            \r\n            // Update summary\r\n            const totalSales = salesData.length;\r\n            const totalCost = salesData.reduce((sum, sale) => sum + sale.costPrice, 0);\r\n            const totalSelling = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            \r\n            document.getElementById('summary-total-sales').textContent = totalSales;\r\n            document.getElementById('summary-total-cost').textContent = `₹${totalCost.toFixed(2)}`;\r\n            document.getElementById('summary-total-selling').textContent = `₹${totalSelling.toFixed(2)}`;\r\n            document.getElementById('summary-total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            summaryDiv.style.display = 'block';\r\n            \r\n            const recentSales = salesData.slice(-10).reverse();\r\n            container.innerHTML = recentSales.map(sale => `\r\n                <div class=\"sales-item\">\r\n                    <button class=\"delete-btn\" onclick=\"deleteSale(${sale.id})\">🗑️</button>\r\n                    <h4>${sale.itemName}</h4>\r\n                    <p><strong>Category:</strong> ${sale.category}</p>\r\n                    <p><strong>Customer:</strong> ${sale.customerName}</p>\r\n                    <p><strong>Phone:</strong> ${sale.customerPhone}</p>\r\n                    ${sale.customerAddress && sale.customerAddress !== 'Not provided' ? `<p><strong>Address:</strong> ${sale.customerAddress}</p>` : ''}\r\n                    <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>\r\n                    <p><strong>Cost:</strong> ₹${sale.costPrice.toFixed(2)}</p>\r\n                    <p><strong>Selling Price:</strong> ₹${sale.sellingPrice.toFixed(2)}</p>\r\n                    <p style=\"color: ${sale.profit >= 0 ? '#4ecdc4' : '#ff6b6b'}; font-weight: bold;\">\r\n                        <strong>Profit:</strong> ₹${sale.profit.toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Delete sale\r\n        function deleteSale(id) {\r\n            if (confirm('Are you sure you want to delete this sale record?')) {\r\n                salesData = salesData.filter(sale => sale.id !== id);\r\n                localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                loadSalesRecords();\r\n                updateDashboard();\r\n                loadCustomers();\r\n                showSuccess('Sale record deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all sales\r\n        function deleteAllSales() {\r\n            if (salesData.length === 0) {\r\n                showError('No sales records to delete!');\r\n                return;\r\n            }\r\n            \r\n            const salesCount = salesData.length;\r\n            const totalValue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const confirmMessage = `Are you sure you want to delete ALL ${salesCount} sales record${salesCount > 1 ? 's' : ''}?\\n\\nTotal value: ₹${totalValue.toFixed(2)}\\n\\nThis action cannot be undone!`;\r\n            \r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all sales data!\\n\\nThis includes all profit calculations and customer purchase history.\\n\\nContinue?');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE ALL SALES\" (exact text) to confirm deletion:');\r\n                    if (userInput === 'DELETE ALL SALES') {\r\n                        salesData = [];\r\n                        localStorage.setItem('jewelrySales', JSON.stringify(salesData));\r\n                        loadSalesRecords();\r\n                        updateDashboard();\r\n                        loadCustomers();\r\n                        showSuccess(`✅ All ${salesCount} sales record${salesCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showError('Deletion cancelled. Type \"DELETE ALL SALES\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update dashboard\r\n        function updateDashboard() {\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            const totalProfit = salesData.reduce((sum, sale) => sum + sale.profit, 0);\r\n            const avgProfit = totalSales > 0 ? totalProfit / totalSales : 0;\r\n            \r\n            document.getElementById('total-sales').textContent = totalSales;\r\n            document.getElementById('total-revenue').textContent = `₹${totalRevenue.toFixed(2)}`;\r\n            document.getElementById('total-profit').textContent = `₹${totalProfit.toFixed(2)}`;\r\n            document.getElementById('avg-profit').textContent = `₹${avgProfit.toFixed(2)}`;\r\n            \r\n            loadMonthlySales();\r\n        }\r\n\r\n        // Update charts\r\n        function updateCharts() {\r\n            if (salesData.length === 0) {\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                \r\n                ctx1.clearRect(0, 0, ctx1.canvas.width, ctx1.canvas.height);\r\n                ctx2.clearRect(0, 0, ctx2.canvas.width, ctx2.canvas.height);\r\n                \r\n                ctx1.font = \"20px Arial\";\r\n                ctx1.fillStyle = \"#999\";\r\n                ctx1.textAlign = \"center\";\r\n                ctx1.fillText(\"No sales data available\", ctx1.canvas.width/2, ctx1.canvas.height/2);\r\n                \r\n                ctx2.font = \"20px Arial\";\r\n                ctx2.fillStyle = \"#999\";\r\n                ctx2.textAlign = \"center\";\r\n                ctx2.fillText(\"No category data available\", ctx2.canvas.width/2, ctx2.canvas.height/2);\r\n                \r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Sales trend chart\r\n                const ctx1 = document.getElementById('salesChart').getContext('2d');\r\n                const last7Days = [];\r\n                const salesByDate = {};\r\n                \r\n                for (let i = 6; i >= 0; i--) {\r\n                    const date = new Date();\r\n                    date.setDate(date.getDate() - i);\r\n                    const dateStr = date.toISOString().split('T')[0];\r\n                    last7Days.push(dateStr);\r\n                    salesByDate[dateStr] = 0;\r\n                }\r\n                \r\n                salesData.forEach(sale => {\r\n                    if (salesByDate.hasOwnProperty(sale.saleDate)) {\r\n                        salesByDate[sale.saleDate] += sale.sellingPrice;\r\n                    }\r\n                });\r\n                \r\n                if (salesChart) salesChart.destroy();\r\n                salesChart = new Chart(ctx1, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n                        datasets: [{\r\n                            label: 'Daily Sales (₹)',\r\n                            data: last7Days.map(date => salesByDate[date]),\r\n                            borderColor: '#4ecdc4',\r\n                            backgroundColor: 'rgba(78, 205, 196, 0.1)',\r\n                            fill: true,\r\n                            tension: 0.4\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales Trend (Last 7 Days)',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Category chart\r\n                const ctx2 = document.getElementById('categoryChart').getContext('2d');\r\n                const categoryData = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    categoryData[sale.category] = (categoryData[sale.category] || 0) + 1;\r\n                });\r\n                \r\n                if (categoryChart) categoryChart.destroy();\r\n                categoryChart = new Chart(ctx2, {\r\n                    type: 'doughnut',\r\n                    data: {\r\n                        labels: Object.keys(categoryData),\r\n                        datasets: [{\r\n                            data: Object.values(categoryData),\r\n                            backgroundColor: [\r\n                                '#ff6b6b', '#4ecdc4', '#45b7d1', '#f7b731',\r\n                                '#5f27cd', '#00d2d3', '#ff9ff3', '#54a0ff'\r\n                            ]\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        responsive: true,\r\n                        maintainAspectRatio: false,\r\n                        plugins: {\r\n                            title: {\r\n                                display: true,\r\n                                text: 'Sales by Category',\r\n                                font: { size: 16 }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                \r\n            } catch (error) {\r\n                console.error('Error updating charts:', error);\r\n            }\r\n        }\r\n\r\n        // Add customer function\r\n        function addCustomer() {\r\n            try {\r\n                const name = document.getElementById('newCustomerName').value.trim();\r\n                const phone = document.getElementById('newCustomerPhone').value.trim();\r\n                const address = document.getElementById('newCustomerAddress').value.trim();\r\n                const email = document.getElementById('newCustomerEmail').value.trim();\r\n\r\n                if (!name) {\r\n                    showCustomerError('Please enter customer name');\r\n                    return;\r\n                }\r\n\r\n                // Check if customer already exists\r\n                const existingCustomer = customersData.find(customer => \r\n                    customer.name.toLowerCase() === name.toLowerCase()\r\n                );\r\n\r\n                if (existingCustomer) {\r\n                    showCustomerError('Customer with this name already exists');\r\n                    return;\r\n                }\r\n\r\n                // Create customer record\r\n                const customerRecord = {\r\n                    id: Date.now(),\r\n                    name: name,\r\n                    phone: phone || 'Not provided',\r\n                    address: address || 'Not provided',\r\n                    email: email || 'Not provided',\r\n                    createdAt: new Date().toISOString()\r\n                };\r\n\r\n                // Add to array\r\n                customersData.push(customerRecord);\r\n\r\n                // Save to localStorage\r\n                try {\r\n                    localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                } catch (storageError) {\r\n                    showCustomerError('Error saving customer data: ' + storageError.message);\r\n                    return;\r\n                }\r\n\r\n                // Clear form\r\n                document.getElementById('customer-form').reset();\r\n\r\n                // Refresh display\r\n                loadCustomers();\r\n\r\n                // Show success message\r\n                showCustomerSuccess('✅ Customer added successfully!');\r\n\r\n            } catch (error) {\r\n                console.error('Error adding customer:', error);\r\n                showCustomerError('Error adding customer: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Show customer success message\r\n        function showCustomerSuccess(message) {\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            \r\n            successDiv.textContent = message;\r\n            successDiv.style.display = 'block';\r\n            errorDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                successDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Show customer error message\r\n        function showCustomerError(message) {\r\n            const errorDiv = document.getElementById('customer-error-message');\r\n            const successDiv = document.getElementById('customer-success-message');\r\n            \r\n            errorDiv.textContent = message;\r\n            errorDiv.style.display = 'block';\r\n            successDiv.style.display = 'none';\r\n            \r\n            setTimeout(() => {\r\n                errorDiv.style.display = 'none';\r\n            }, 3000);\r\n        }\r\n\r\n        // Delete customer\r\n        function deleteCustomer(id) {\r\n            if (confirm('Are you sure you want to delete this customer?')) {\r\n                customersData = customersData.filter(customer => customer.id !== id);\r\n                localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                loadCustomers();\r\n                showCustomerSuccess('Customer deleted successfully!');\r\n            }\r\n        }\r\n\r\n        // Delete all customers\r\n        function deleteAllCustomers() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to delete!');\r\n                return;\r\n            }\r\n            \r\n            const customerCount = customersData.length;\r\n            const confirmMessage = `Are you sure you want to delete ALL ${customerCount} customer${customerCount > 1 ? 's' : ''}?\\n\\nThis action cannot be undone!`;\r\n            \r\n            if (confirm(confirmMessage)) {\r\n                const doubleConfirm = confirm('🚨 FINAL WARNING: This will permanently delete all customer data!\\n\\nType \"DELETE\" in the next prompt to confirm.');\r\n                if (doubleConfirm) {\r\n                    const userInput = prompt('Type \"DELETE\" (in capital letters) to confirm deletion:');\r\n                    if (userInput === 'DELETE') {\r\n                        customersData = [];\r\n                        localStorage.setItem('jewelryCustomers', JSON.stringify(customersData));\r\n                        loadCustomers();\r\n                        showCustomerSuccess(`✅ All ${customerCount} customer${customerCount > 1 ? 's' : ''} deleted successfully!`);\r\n                    } else {\r\n                        showCustomerError('Deletion cancelled. Type \"DELETE\" exactly to confirm.');\r\n                    }\r\n                } else {\r\n                    showCustomerError('Deletion cancelled.');\r\n                }\r\n            }\r\n        }\r\n\r\n        // Load customers\r\n        function loadCustomers() {\r\n            const container = document.getElementById('customers-list');\r\n            const countElement = document.getElementById('customers-count');\r\n            \r\n            countElement.textContent = customersData.length;\r\n            \r\n            if (customersData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No customers yet. Add customers using the form above!</div>';\r\n                return;\r\n            }\r\n            \r\n            // Calculate purchase statistics for manually added customers\r\n            const customersWithStats = customersData.map(customer => {\r\n                let totalPurchases = 0;\r\n                let totalSpent = 0;\r\n                let lastPurchase = null;\r\n      \r\n                // Check sales data for this customer\r\n                          salesData.forEach(sale => {\r\n                    if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                        totalPurchases++;\r\n                        totalSpent += sale.sellingPrice;\r\n                        if (!lastPurchase || sale.saleDate > lastPurchase) {\r\n                            lastPurchase = sale.saleDate;\r\n                        }\r\n                    }\r\n                });\r\n                \r\n                return {\r\n                    ...customer,\r\n                    totalPurchases,\r\n                    totalSpent,\r\n                    lastPurchase\r\n                };\r\n            });\r\n            \r\n            container.innerHTML = customersWithStats.map(customer => `\r\n                <div class=\"customer-item\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                    ${customer.address && customer.address !== 'Not provided' ? `<p><strong>🏠 Address:</strong> ${customer.address}</p>` : ''}\r\n                    ${customer.email && customer.email !== 'Not provided' ? `<p><strong>📧 Email:</strong> ${customer.email}</p>` : ''}\r\n                    <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                    <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                    ${customer.lastPurchase ? `<p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchase).toLocaleDateString()}</p>` : '<p><strong>📅 Last Purchase:</strong> No purchases yet</p>'}\r\n                    <p style=\"font-size: 12px; color: #666; font-style: italic;\">\r\n                        Added manually • Created: ${new Date(customer.createdAt).toLocaleDateString()}\r\n                    </p>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Excel\r\n        function downloadExcel() {\r\n            if (salesData.length === 0) {\r\n                showError('No data to export! Please add some sales records first.');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                const ws = XLSX.utils.json_to_sheet(salesData.map(sale => ({\r\n                    'Item Name': sale.itemName,\r\n                    'Category': sale.category,\r\n                    'Cost Price (₹)': sale.costPrice,\r\n                    'Selling Price (₹)': sale.sellingPrice,\r\n                    'Profit (₹)': sale.profit,\r\n                    'Sale Date': sale.saleDate,\r\n                    'Customer Name': sale.customerName,\r\n                    'Customer Phone': sale.customerPhone,\r\n                    'Customer Address': sale.customerAddress,\r\n                    'Created At': sale.createdAt\r\n                })));\r\n                \r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Jewelry Sales');\r\n                \r\n                const fileName = `Jewelry_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                showSuccess('📊 Excel report downloaded successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading Excel:', error);\r\n                showError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download customers Excel\r\n        function downloadCustomersExcel() {\r\n            if (customersData.length === 0) {\r\n                showCustomerError('No customers to export! Please add some customers first.');\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                // Calculate purchase statistics for each customer\r\n                const customersWithStats = customersData.map(customer => {\r\n                    let totalPurchases = 0;\r\n                    let totalSpent = 0;\r\n                    let lastPurchase = 'No purchases';\r\n                    \r\n                    // Check sales data for this customer\r\n                    salesData.forEach(sale => {\r\n                        if (sale.customerName.toLowerCase() === customer.name.toLowerCase()) {\r\n                            totalPurchases++;\r\n                            totalSpent += sale.sellingPrice;\r\n                            if (lastPurchase === 'No purchases' || sale.saleDate > lastPurchase) {\r\n                                lastPurchase = sale.saleDate;\r\n                            }\r\n                        }\r\n             });\r\n                    \r\n                    return {\r\n                               'Customer Name': customer.name,\r\n                        'Phone': customer.phone,\r\n                        'Address': customer.address,\r\n                        'Email': customer.email,\r\n                        'Total Purchases': totalPurchases,\r\n                        'Total Spent (₹)': totalSpent.toFixed(2),\r\n                        'Last Purchase Date': lastPurchase,\r\n                        'Date Added': new Date(customer.createdAt).toLocaleDateString()\r\n                    };\r\n                });\r\n                \r\n                const ws = XLSX.utils.json_to_sheet(customersWithStats);\r\n                \r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customers');\r\n                \r\n                const fileName = `Jewelry_Customers_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                showCustomerSuccess('📊 Customer list exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading customers Excel:', error);\r\n                showCustomerError('Error downloading Excel file: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Monthly Sales\r\n        function loadMonthlySales() {\r\n            const container = document.getElementById('monthly-sales-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\" style=\"text-align: center; padding: 40px; color: #666; font-style: italic;\">No sales data available. Add some sales records to see monthly breakdown.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate monthly statistics\r\n            const monthlyStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                \r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalCost: 0,\r\n                        totalProfit: 0,\r\n                        avgOrderValue: 0,\r\n                        profitMargin: 0,\r\n                        topCategory: {},\r\n                        topCustomer: {},\r\n                        salesByCategory: {},\r\n                        dailySales: {}\r\n                    };\r\n                }\r\n                \r\n                const month = monthlyStats[monthKey];\r\n                month.totalSales++;\r\n                month.totalRevenue += sale.sellingPrice;\r\n                month.totalCost += sale.costPrice;\r\n                month.totalProfit += sale.profit;\r\n                \r\n                // Track categories\r\n                if (!month.salesByCategory[sale.category]) {\r\n                    month.salesByCategory[sale.category] = 0;\r\n                }\r\n                month.salesByCategory[sale.category]++;\r\n                \r\n                if (!month.topCategory[sale.category]) {\r\n                    month.topCategory[sale.category] = 0;\r\n                }\r\n                month.topCategory[sale.category]++;\r\n                \r\n                // Track customers\r\n                if (!month.topCustomer[sale.customerName]) {\r\n                    month.topCustomer[sale.customerName] = 0;\r\n                }\r\n                month.topCustomer[sale.customerName]++;\r\n                \r\n                // Track daily sales\r\n                const dayKey = sale.saleDate;\r\n                if (!month.dailySales[dayKey]) {\r\n                    month.dailySales[dayKey] = 0;\r\n                }\r\n                month.dailySales[dayKey]++;\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(monthlyStats).forEach(month => {\r\n                month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n                \r\n                // Find top category\r\n                let maxCategoryCount = 0;\r\n                let topCategoryName = 'N/A';\r\n                Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                    if (count > maxCategoryCount) {\r\n                        maxCategoryCount = count;\r\n                        topCategoryName = category;\r\n                    }\r\n                });\r\n                month.topCategoryName = topCategoryName;\r\n                month.topCategoryCount = maxCategoryCount;\r\n                \r\n                // Find top customer\r\n                let maxCustomerCount = 0;\r\n                let topCustomerName = 'N/A';\r\n                Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                    if (count > maxCustomerCount) {\r\n                        maxCustomerCount = count;\r\n                        topCustomerName = customer;\r\n                    }\r\n                });\r\n                month.topCustomerName = topCustomerName;\r\n                month.topCustomerCount = maxCustomerCount;\r\n                \r\n                // Find best sales day\r\n                let maxDayCount = 0;\r\n                let bestSalesDay = 'N/A';\r\n                Object.entries(month.dailySales).forEach(([day, count]) => {\r\n                    if (count > maxDayCount) {\r\n                        maxDayCount = count;\r\n                        bestSalesDay = day;\r\n                    }\r\n                });\r\n                month.bestSalesDay = bestSalesDay;\r\n                month.bestSalesDayCount = maxDayCount;\r\n            });\r\n\r\n            // Sort by month (newest first)\r\n            const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n            container.innerHTML = sortedMonths.map((month, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 25px; border: 1px solid #ddd; padding: 20px; border-radius: 12px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\">\r\n                    <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\r\n                        <h4 style=\"color: #2c3e50; margin: 0;\">📅 ${month.monthName}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#28a745' : '#6c757d'}; color: white; padding: 5px 15px; border-radius: 20px; font-size: 12px; font-weight: bold;\">\r\n                            ${index === 0 ? 'LATEST' : `${index + 1} MONTHS AGO`}\r\n                        </span>\r\n                    </div>\r\n                    \r\n                    <!-- Key Metrics Row -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;\">\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 24px; font-weight: bold; color: #007bff;\">${month.totalSales}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Sales</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: #28a745;\">₹${month.totalRevenue.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Revenue</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 20px; font-weight: bold; color: ${month.totalProfit >= 0 ? '#28a745' : '#dc3545'};\">₹${month.totalProfit.toFixed(2)}</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Total Profit</div>\r\n                        </div>\r\n                        <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\">\r\n                            <div style=\"font-size: 18px; font-weight: bold; color: #17a2b8;\">${month.profitMargin.toFixed(1)}%</div>\r\n                            <div style=\"color: #6c757d; font-size: 12px;\">Profit Margin</div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Additional Details -->\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin-top: 15px;\">\r\n                        <div>\r\n                            <p><strong>💰 Average Order Value:</strong> ₹${month.avgOrderValue.toFixed(2)}</p>\r\n                            <p><strong>🏷️ Top Category:</strong> ${month.topCategoryName} (${month.topCategoryCount} sales)</p>\r\n                        </div>\r\n                        <div>\r\n                            <p><strong>👤 Top Customer:</strong> ${month.topCustomerName} (${month.topCustomerCount} purchases)</p>\r\n                            <p><strong>📈 Best Sales Day:</strong> ${new Date(month.bestSalesDay).toLocaleDateString()} (${month.bestSalesDayCount} sales)</p>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Performance Indicator -->\r\n                    <div style=\"margin-top: 15px; padding: 12px; background: ${month.profitMargin > 20 ? '#d4edda' : month.profitMargin > 10 ? '#fff3cd' : '#f8d7da'}; border-radius: 8px; border-left: 4px solid ${month.profitMargin > 20 ? '#28a745' : month.profitMargin > 10 ? '#ffc107' : '#dc3545'};\">\r\n                        <strong>Performance:</strong> \r\n                        ${month.profitMargin > 20 ? '🏆 Excellent Month!' : \r\n                          month.profitMargin > 10 ? '📊 Good Performance' : \r\n                          '📉 Needs Improvement'}\r\n                        ${month.totalSales > 10 ? ' • High Volume' : month.totalSales > 5 ? ' • Medium Volume' : ' • Low Volume'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Download Monthly Sales Report\r\n        function downloadMonthlySales() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for monthly report!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate monthly statistics (same logic as loadMonthlySales)\r\n                const monthlyStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    \r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = {\r\n                            month: monthKey,\r\n                            monthName: date.toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalCost: 0,\r\n                            totalProfit: 0,\r\n                            topCategory: {},\r\n                            topCustomer: {}\r\n                        };\r\n                    }\r\n                    \r\n                    const month = monthlyStats[monthKey];\r\n                    month.totalSales++;\r\n                    month.totalRevenue += sale.sellingPrice;\r\n                    month.totalCost += sale.costPrice;\r\n                    month.totalProfit += sale.profit;\r\n                    \r\n                    if (!month.topCategory[sale.category]) {\r\n                        month.topCategory[sale.category] = 0;\r\n                    }\r\n                    month.topCategory[sale.category]++;\r\n                    \r\n                    if (!month.topCustomer[sale.customerName]) {\r\n                        month.topCustomer[sale.customerName] = 0;\r\n                    }\r\n                    month.topCustomer[sale.customerName]++;\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(monthlyStats).forEach(month => {\r\n                    month.avgOrderValue = month.totalRevenue / month.totalSales;\r\n                    month.profitMargin = (month.totalProfit / month.totalRevenue) * 100;\r\n                    \r\n                    // Find top category\r\n                    let maxCategoryCount = 0;\r\n                    let topCategoryName = 'N/A';\r\n                    Object.entries(month.topCategory).forEach(([category, count]) => {\r\n                        if (count > maxCategoryCount) {\r\n                            maxCategoryCount = count;\r\n                            topCategoryName = category;\r\n                        }\r\n                    });\r\n                    month.topCategoryName = topCategoryName;\r\n                    month.topCategoryCount = maxCategoryCount;\r\n                    \r\n                    // Find top customer\r\n                    let maxCustomerCount = 0;\r\n                    let topCustomerName = 'N/A';\r\n                    Object.entries(month.topCustomer).forEach(([customer, count]) => {\r\n                        if (count > maxCustomerCount) {\r\n                            maxCustomerCount = count;\r\n                            topCustomerName = customer;\r\n                        }\r\n                    });\r\n                    month.topCustomerName = topCustomerName;\r\n                    month.topCustomerCount = maxCustomerCount;\r\n                });\r\n\r\n                // Sort by month (newest first)\r\n                const sortedMonths = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n\r\n                // Prepare data for Excel\r\n                const monthlyData = sortedMonths.map(month => ({\r\n                    'Month': month.monthName,\r\n                    'Total Sales': month.totalSales,\r\n                    'Total Revenue (₹)': month.totalRevenue.toFixed(2),\r\n                    'Total Cost (₹)': month.totalCost.toFixed(2),\r\n                    'Total Profit (₹)': month.totalProfit.toFixed(2),\r\n                    'Profit Margin (%)': month.profitMargin.toFixed(1),\r\n                    'Average Order Value (₹)': month.avgOrderValue.toFixed(2),\r\n                    'Top Category': month.topCategoryName,\r\n                    'Top Category Sales': month.topCategoryCount,\r\n                    'Top Customer': month.topCustomerName,\r\n                    'Top Customer Purchases': month.topCustomerCount,\r\n                    'Performance Status': month.profitMargin > 20 ? 'Excellent' : \r\n                                         month.profitMargin > 10 ? 'Good' : \r\n                                         'Needs Improvement'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(monthlyData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Monthly Sales Report');\r\n                \r\n                const fileName = `Monthly_Sales_Report_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Monthly Sales Report exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading monthly sales report:', error);\r\n                alert('Error downloading monthly report: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Load Analytics\r\n        function loadAnalytics() {\r\n            loadCustomerAnalytics();\r\n            loadCategoryAnalytics();\r\n            loadSalesTrends();\r\n        }\r\n\r\n        // Load Customer Analytics\r\n        function loadCustomerAnalytics() {\r\n            const container = document.getElementById('customer-analytics-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for customer analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate customer analytics\r\n            const customerStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const customerName = sale.customerName;\r\n                if (!customerStats[customerName]) {\r\n                    customerStats[customerName] = {\r\n                        name: customerName,\r\n                        phone: sale.customerPhone,\r\n                        address: sale.customerAddress,\r\n                        totalPurchases: 0,\r\n                        totalSpent: 0,\r\n                        lastPurchaseDate: null,\r\n                        firstPurchaseDate: null,\r\n                        purchaseDates: [],\r\n                        avgOrderValue: 0,\r\n                        favoriteCategory: {},\r\n                        daysSinceLastPurchase: 0\r\n                    };\r\n                }\r\n                \r\n                const customer = customerStats[customerName];\r\n                customer.totalPurchases++;\r\n                customer.totalSpent += sale.sellingPrice;\r\n                customer.purchaseDates.push(sale.saleDate);\r\n                \r\n                // Track categories\r\n                if (!customer.favoriteCategory[sale.category]) {\r\n                    customer.favoriteCategory[sale.category] = 0;\r\n                }\r\n                customer.favoriteCategory[sale.category]++;\r\n                \r\n                // Update dates\r\n                if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                    customer.lastPurchaseDate = sale.saleDate;\r\n                }\r\n                if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                    customer.firstPurchaseDate = sale.saleDate;\r\n                }\r\n            });\r\n\r\n            // Process final calculations\r\n            Object.values(customerStats).forEach(customer => {\r\n                customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n                \r\n                // Find favorite category\r\n                let maxCount = 0;\r\n                let favCategory = 'N/A';\r\n                Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                    if (count > maxCount) {\r\n                        maxCount = count;\r\n                        favCategory = category;\r\n                    }\r\n                });\r\n                customer.favoriteCategory = favCategory;\r\n                \r\n                // Calculate days since last purchase\r\n                if (customer.lastPurchaseDate) {\r\n                    const lastDate = new Date(customer.lastPurchaseDate);\r\n                    const today = new Date();\r\n                    customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                }\r\n            });\r\n\r\n            // Sort by total spent (highest first)\r\n            const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n            container.innerHTML = sortedCustomers.map(customer => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <h4>👤 ${customer.name}</h4>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>📞 Phone:</strong> ${customer.phone}</p>\r\n                        <p><strong>🛍️ Total Purchases:</strong> ${customer.totalPurchases}</p>\r\n                        <p><strong>💰 Total Spent:</strong> ₹${customer.totalSpent.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Order Value:</strong> ₹${customer.avgOrderValue.toFixed(2)}</p>\r\n                        <p><strong>📅 Last Purchase:</strong> ${new Date(customer.lastPurchaseDate).toLocaleDateString()}</p>\r\n                        <p><strong>⏰ Days Since Last Purchase:</strong> ${customer.daysSinceLastPurchase} days</p>\r\n                        <p><strong>🏷️ Favorite Category:</strong> ${customer.favoriteCategory}</p>\r\n                        <p><strong>📈 Customer Since:</strong> ${new Date(customer.firstPurchaseDate).toLocaleDateString()}</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: ${customer.daysSinceLastPurchase > 30 ? '#fff3cd' : customer.daysSinceLastPurchase > 7 ? '#d1ecf1' : '#d4edda'}; border-radius: 5px;\">\r\n                        <strong>Status:</strong> \r\n                        ${customer.daysSinceLastPurchase > 30 ? '⚠️ Inactive Customer (30+ days)' : \r\n                          customer.daysSinceLastPurchase > 7 ? '📉 Needs Attention (7+ days)' : \r\n                          '✅ Active Customer'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Category Analytics\r\n        function loadCategoryAnalytics() {\r\n            const container = document.getElementById('category-analytics-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for category analytics.</div>';\r\n                return;\r\n            }\r\n\r\n            // Calculate category statistics\r\n            const categoryStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                if (!categoryStats[sale.category]) {\r\n                    categoryStats[sale.category] = {\r\n                        category: sale.category,\r\n                        totalSales: 0,\r\n                        totalRevenue: 0,\r\n                        totalProfit: 0,\r\n                        avgSellingPrice: 0,\r\n                        avgProfit: 0,\r\n                        items: []\r\n                    };\r\n                }\r\n                \r\n                const cat = categoryStats[sale.category];\r\n                cat.totalSales++;\r\n                cat.totalRevenue += sale.sellingPrice;\r\n                cat.totalProfit += sale.profit;\r\n                cat.items.push(sale.itemName);\r\n            });\r\n\r\n            // Calculate averages and percentages\r\n            const totalSales = salesData.length;\r\n            const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n            \r\n            Object.values(categoryStats).forEach(cat => {\r\n                cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n            });\r\n\r\n            // Sort by total sales (highest first)\r\n            const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n            container.innerHTML = sortedCategories.map((cat, index) => `\r\n                <div class=\"customer-item\" style=\"margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 8px;\">\r\n                    <div style=\"display: flex; justify-content: between; align-items: center;\">\r\n                        <h4>${index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : '📦'} ${cat.category}</h4>\r\n                        <span style=\"background: ${index === 0 ? '#ffd700' : index === 1 ? '#c0c0c0' : index === 2 ? '#cd7f32' : '#e9ecef'}; padding: 5px 10px; border-radius: 15px; font-size: 12px; font-weight: bold;\">\r\n                            Rank #${index + 1}\r\n                        </span>\r\n                    </div>\r\n                    <div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin-top: 10px;\">\r\n                        <p><strong>🛍️ Total Sales:</strong> ${cat.totalSales} (${cat.salesPercentage.toFixed(1)}%)</p>\r\n                        <p><strong>💰 Total Revenue:</strong> ₹${cat.totalRevenue.toFixed(2)} (${cat.revenuePercentage.toFixed(1)}%)</p>\r\n                        <p><strong>📈 Total Profit:</strong> ₹${cat.totalProfit.toFixed(2)}</p>\r\n                        <p><strong>📊 Avg Selling Price:</strong> ₹${cat.avgSellingPrice.toFixed(2)}</p>\r\n                        <p><strong>💵 Avg Profit per Item:</strong> ₹${cat.avgProfit.toFixed(2)}</p>\r\n                        <p><strong>🎯 Profit Margin:</strong> ${((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1)}%</p>\r\n                    </div>\r\n                    <div style=\"margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px;\">\r\n                        <strong>Demand Level:</strong> \r\n                        ${cat.salesPercentage > 30 ? '🔥 Very High Demand' : \r\n                          cat.salesPercentage > 20 ? '📈 High Demand' : \r\n                          cat.salesPercentage > 10 ? '📊 Medium Demand' : \r\n                          '📉 Low Demand'}\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Load Sales Trends\r\n        function loadSalesTrends() {\r\n            const container = document.getElementById('sales-trends-list');\r\n            \r\n            if (salesData.length === 0) {\r\n                container.innerHTML = '<div class=\"no-data\">No sales data available for trends analysis.</div>';\r\n                return;\r\n            }\r\n\r\n            // Monthly trends\r\n            const monthlyStats = {};\r\n            const dailyStats = {};\r\n            \r\n            salesData.forEach(sale => {\r\n                const date = new Date(sale.saleDate);\r\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                const dayKey = sale.saleDate;\r\n                \r\n                // Monthly stats\r\n                if (!monthlyStats[monthKey]) {\r\n                    monthlyStats[monthKey] = {\r\n                        month: monthKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                monthlyStats[monthKey].sales++;\r\n                monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                monthlyStats[monthKey].profit += sale.profit;\r\n                \r\n                // Daily stats\r\n                if (!dailyStats[dayKey]) {\r\n                    dailyStats[dayKey] = {\r\n                        date: dayKey,\r\n                        sales: 0,\r\n                        revenue: 0,\r\n                        profit: 0\r\n                    };\r\n                }\r\n                dailyStats[dayKey].sales++;\r\n                dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                dailyStats[dayKey].profit += sale.profit;\r\n            });\r\n\r\n            // Sort monthly and daily data\r\n            const sortedMonthly = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month));\r\n            const sortedDaily = Object.values(dailyStats).sort((a, b) => b.date.localeCompare(a.date)).slice(0, 10);\r\n\r\n            container.innerHTML = `\r\n                <div style=\"margin-bottom: 30px;\">\r\n                    <h4>📅 Monthly Trends</h4>\r\n                    ${sortedMonthly.map(month => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>${new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' })}</strong><br>\r\n                            Sales: ${month.sales} | Revenue: ₹${month.revenue.toFixed(2)} | Profit: ₹${month.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n                \r\n                <div>\r\n                    <h4>📊 Top 10 Sales Days</h4>\r\n                    ${sortedDaily.map((day, index) => `\r\n                        <div style=\"padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px;\">\r\n                            <strong>#${index + 1} - ${new Date(day.date).toLocaleDateString()}</strong><br>\r\n                            Sales: ${day.sales} | Revenue: ₹${day.revenue.toFixed(2)} | Profit: ₹${day.profit.toFixed(2)}\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            `;\r\n        }\r\n\r\n        // Download Customer Analytics\r\n        function downloadCustomerAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for customer analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                // Calculate customer analytics (same logic as loadCustomerAnalytics)\r\n                const customerStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const customerName = sale.customerName;\r\n                    if (!customerStats[customerName]) {\r\n                        customerStats[customerName] = {\r\n                            name: customerName,\r\n                            phone: sale.customerPhone,\r\n                            totalPurchases: 0,\r\n                            totalSpent: 0,\r\n                            lastPurchaseDate: null,\r\n                            firstPurchaseDate: null,\r\n                            avgOrderValue: 0,\r\n                            favoriteCategory: {},\r\n                            daysSinceLastPurchase: 0\r\n                        };\r\n                    }\r\n                    \r\n                    const customer = customerStats[customerName];\r\n                    customer.totalPurchases++;\r\n                    customer.totalSpent += sale.sellingPrice;\r\n                    \r\n                    if (!customer.favoriteCategory[sale.category]) {\r\n                        customer.favoriteCategory[sale.category] = 0;\r\n                    }\r\n                    customer.favoriteCategory[sale.category]++;\r\n                    \r\n                    if (!customer.lastPurchaseDate || sale.saleDate > customer.lastPurchaseDate) {\r\n                        customer.lastPurchaseDate = sale.saleDate;\r\n                    }\r\n                    if (!customer.firstPurchaseDate || sale.saleDate < customer.firstPurchaseDate) {\r\n                        customer.firstPurchaseDate = sale.saleDate;\r\n                    }\r\n                });\r\n\r\n                // Process final calculations\r\n                Object.values(customerStats).forEach(customer => {\r\n                    customer.avgOrderValue = customer.totalSpent / customer.totalPurchases;\r\n                    \r\n                    let maxCount = 0;\r\n                    let favCategory = 'N/A';\r\n                    Object.entries(customer.favoriteCategory).forEach(([category, count]) => {\r\n                        if (count > maxCount) {\r\n                            maxCount = count;\r\n                            favCategory = category;\r\n                        }\r\n                    });\r\n                    customer.favoriteCategory = favCategory;\r\n                    \r\n                    if (customer.lastPurchaseDate) {\r\n                        const lastDate = new Date(customer.lastPurchaseDate);\r\n                        const today = new Date();\r\n                        customer.daysSinceLastPurchase = Math.floor((today - lastDate) / (1000 * 60 * 60 * 24));\r\n                    }\r\n                });\r\n\r\n                const sortedCustomers = Object.values(customerStats).sort((a, b) => b.totalSpent - a.totalSpent);\r\n\r\n                const analyticsData = sortedCustomers.map(customer => ({\r\n                    'Customer Name': customer.name,\r\n                    'Phone': customer.phone,\r\n                    'Total Purchases': customer.totalPurchases,\r\n                    'Total Spent (₹)': customer.totalSpent.toFixed(2),\r\n                    'Average Order Value (₹)': customer.avgOrderValue.toFixed(2),\r\n                    'Last Purchase Date': customer.lastPurchaseDate,\r\n                    'Days Since Last Purchase': customer.daysSinceLastPurchase,\r\n                    'Favorite Category': customer.favoriteCategory,\r\n                    'Customer Since': customer.firstPurchaseDate,\r\n                    'Status': customer.daysSinceLastPurchase > 30 ? 'Inactive (30+ days)' : \r\n                             customer.daysSinceLastPurchase > 7 ? 'Needs Attention (7+ days)' : \r\n                             'Active Customer'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Customer Analytics');\r\n                \r\n                const fileName = `Customer_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Customer Analytics exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading customer analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Category Analytics\r\n        function downloadCategoryAnalytics() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for category analytics!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const categoryStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    if (!categoryStats[sale.category]) {\r\n                        categoryStats[sale.category] = {\r\n                            category: sale.category,\r\n                            totalSales: 0,\r\n                            totalRevenue: 0,\r\n                            totalProfit: 0\r\n                        };\r\n                    }\r\n                    \r\n                    const cat = categoryStats[sale.category];\r\n                    cat.totalSales++;\r\n                    cat.totalRevenue += sale.sellingPrice;\r\n                    cat.totalProfit += sale.profit;\r\n                });\r\n\r\n                const totalSales = salesData.length;\r\n                const totalRevenue = salesData.reduce((sum, sale) => sum + sale.sellingPrice, 0);\r\n                \r\n                Object.values(categoryStats).forEach(cat => {\r\n                    cat.avgSellingPrice = cat.totalRevenue / cat.totalSales;\r\n                    cat.avgProfit = cat.totalProfit / cat.totalSales;\r\n                    cat.salesPercentage = (cat.totalSales / totalSales) * 100;\r\n                    cat.revenuePercentage = (cat.totalRevenue / totalRevenue) * 100;\r\n                });\r\n\r\n                const sortedCategories = Object.values(categoryStats).sort((a, b) => b.totalSales - a.totalSales);\r\n\r\n                const analyticsData = sortedCategories.map((cat, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Category': cat.category,\r\n                    'Total Sales': cat.totalSales,\r\n                    'Sales Percentage': cat.salesPercentage.toFixed(1) + '%',\r\n                    'Total Revenue (₹)': cat.totalRevenue.toFixed(2),\r\n                    'Revenue Percentage': cat.revenuePercentage.toFixed(1) + '%',\r\n                    'Total Profit (₹)': cat.totalProfit.toFixed(2),\r\n                    'Average Selling Price (₹)': cat.avgSellingPrice.toFixed(2),\r\n                    'Average Profit (₹)': cat.avgProfit.toFixed(2),\r\n                    'Profit Margin': ((cat.avgProfit / cat.avgSellingPrice) * 100).toFixed(1) + '%',\r\n                    'Demand Level': cat.salesPercentage > 30 ? 'Very High Demand' : \r\n                                   cat.salesPercentage > 20 ? 'High Demand' : \r\n                                   cat.salesPercentage > 10 ? 'Medium Demand' : \r\n                                   'Low Demand'\r\n                }));\r\n\r\n                const ws = XLSX.utils.json_to_sheet(analyticsData);\r\n                const wb = XLSX.utils.book_new();\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Category Analytics');\r\n                \r\n                const fileName = `Category_Analytics_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Category Analytics exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading category analytics:', error);\r\n                alert('Error downloading analytics: ' + error.message);\r\n            }\r\n        }\r\n\r\n        // Download Sales Trends\r\n        function downloadSalesTrends() {\r\n            if (salesData.length === 0) {\r\n                alert('No sales data available for trends analysis!');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const monthlyStats = {};\r\n                const dailyStats = {};\r\n                \r\n                salesData.forEach(sale => {\r\n                    const date = new Date(sale.saleDate);\r\n                    const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n                    const dayKey = sale.saleDate;\r\n                    \r\n                    if (!monthlyStats[monthKey]) {\r\n                        monthlyStats[monthKey] = { month: monthKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    monthlyStats[monthKey].sales++;\r\n                    monthlyStats[monthKey].revenue += sale.sellingPrice;\r\n                    monthlyStats[monthKey].profit += sale.profit;\r\n                    \r\n                    if (!dailyStats[dayKey]) {\r\n                        dailyStats[dayKey] = { date: dayKey, sales: 0, revenue: 0, profit: 0 };\r\n                    }\r\n                    dailyStats[dayKey].sales++;\r\n                    dailyStats[dayKey].revenue += sale.sellingPrice;\r\n                    dailyStats[dayKey].profit += sale.profit;\r\n                });\r\n\r\n                // Create workbook with multiple sheets\r\n                const wb = XLSX.utils.book_new();\r\n                \r\n                // Monthly trends sheet\r\n                const monthlyData = Object.values(monthlyStats).sort((a, b) => b.month.localeCompare(a.month)).map(month => ({\r\n                    'Month': new Date(month.month + '-01').toLocaleString('default', { month: 'long', year: 'numeric' }),\r\n                    'Total Sales': month.sales,\r\n                    'Total Revenue (₹)': month.revenue.toFixed(2),\r\n                    'Total Profit (₹)': month.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (month.revenue / month.sales).toFixed(2),\r\n                    'Average Profit per Sale (₹)': (month.profit / month.sales).toFixed(2)\r\n                }));\r\n                \r\n                const monthlyWs = XLSX.utils.json_to_sheet(monthlyData);\r\n                XLSX.utils.book_append_sheet(wb, monthlyWs, 'Monthly Trends');\r\n                \r\n                // Daily trends sheet (top performing days)\r\n                const dailyData = Object.values(dailyStats).sort((a, b) => b.revenue - a.revenue).slice(0, 30).map((day, index) => ({\r\n                    'Rank': index + 1,\r\n                    'Date': new Date(day.date).toLocaleDateString(),\r\n                    'Total Sales': day.sales,\r\n                    'Total Revenue (₹)': day.revenue.toFixed(2),\r\n                    'Total Profit (₹)': day.profit.toFixed(2),\r\n                    'Average Revenue per Sale (₹)': (day.revenue / day.sales).toFixed(2)\r\n                }));\r\n                \r\n                const dailyWs = XLSX.utils.json_to_sheet(dailyData);\r\n                XLSX.utils.book_append_sheet(wb, dailyWs, 'Top 30 Sales Days');\r\n                \r\n                const fileName = `Sales_Trends_${new Date().toISOString().split('T')[0]}.xlsx`;\r\n                XLSX.writeFile(wb, fileName);\r\n                \r\n                alert('📊 Sales Trends exported successfully!');\r\n                \r\n            } catch (error) {\r\n                console.error('Error downloading sales trends:', error);\r\n                alert('Error downloading trends: ' + error.message);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n</html>"
                    },
                    {
                        "path": "jewelry_sales_tracker.html",
                        "fsPath": "jewelry_sales_tracker.html"
                    }
                ]
            },
            "createdAt": 1750680014828,
            "isInternal": false
        }
    ],
    "isAgent": false,
    "isNameGenerated": true,
    "isCustomAgent": false,
    "isUnitTestsAgent": false,
    "isE2EAgent": false,
    "autoApply": false
}
}